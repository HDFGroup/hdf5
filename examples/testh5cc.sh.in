#! /bin/sh
#
# Copyright by The HDF Group.
# Copyright by the Board of Trustees of the University of Illinois.
# All rights reserved.
#
# This file is part of HDF5.  The full HDF5 copyright notice, including
# terms governing use, modification, and redistribution, is contained in
# the COPYING file, which can be found at the root of the source code
# distribution tree, or in https://www.hdfgroup.org/licenses.
# If you do not have access to either file, you may request a copy from
# help@hdfgroup.org.
#
# Tests for the h5cc compiler tool
# Created: Albert Cheng, 2007/4/11
#
# Modification:
#	Albert Cheng, 2008/9/27
#	Added -shlib tests and verbose control.
#	Albert Cheng, 2009/10/28
#	Added version compatibility tests.
#

srcdir=@srcdir@

# Initializations
TESTNAME=h5cc
EXIT_SUCCESS=0
EXIT_FAILURE=1

# Where the tool is installed.
prefix="${prefix:-@prefix@}"
PARALLEL=@PARALLEL@		# Am I in parallel mode?
AR="@AR@"
RANLIB="@RANLIB@"
if [ "$PARALLEL" = no ]; then
    H5TOOL="h5cc"           	# The tool name
else
    H5TOOL="h5pcc"               # The tool name
fi
H5TOOL_BIN="${prefix}/bin/${H5TOOL}"   # The path of the tool binary

CMP='cmp -s'
DIFF='diff -c'

nerrors=$EXIT_SUCCESS
verbose=${HDF5_VERBOSE:-1}      # 0: none; 1: default; 2: chatty; 3: everything
test $verbose -gt 2 && set -x
H5_NO_DEPRECATED_SYMBOLS=`grep '#define H5_NO_DEPRECATED_SYMBOLS ' ../src/H5pubconf.h`
H5_USE_16_API_DEFAULT=`grep '#define H5_USE_16_API_DEFAULT ' ../src/H5pubconf.h`
H5_USE_18_API_DEFAULT=`grep '#define H5_USE_18_API_DEFAULT ' ../src/H5pubconf.h`
H5_USE_110_API_DEFAULT=`grep '#define H5_USE_110_API_DEFAULT ' ../src/H5pubconf.h`
H5_USE_112_API_DEFAULT=`grep '#define H5_USE_112_API_DEFAULT ' ../src/H5pubconf.h`
H5_USE_114_API_DEFAULT=`grep '#define H5_USE_114_API_DEFAULT ' ../src/H5pubconf.h`

# setup my machine information.
myos=`uname -s`
myhostnama=`uname -n`

# Generate some source files and library for tests.
suffix=c		# source file suffix
hdf5main=${H5TOOL}_hdf5main.$suffix
hdf5main_o=${H5TOOL}_hdf5main.o
v16main=${H5TOOL}_v16main.$suffix
v16main_o=${H5TOOL}_v16main.o
v18main=${H5TOOL}_v18main.$suffix
v18main_o=${H5TOOL}_v18main.o
v110main=${H5TOOL}_v110main.$suffix
v110main_o=${H5TOOL}_v110main.o
v112main=${H5TOOL}_v112main.$suffix
v112main_o=${H5TOOL}_v112main.o
appmain=${H5TOOL}_appmain.$suffix
appmain_o=${H5TOOL}_appmain.o
prog1=${H5TOOL}_prog1.$suffix
prog1_o=${H5TOOL}_prog1.o
prog2=${H5TOOL}_prog2.$suffix
prog2_o=${H5TOOL}_prog2.o
applib=libapp${H5TOOL}.a

# short hands
# Caution: if some *.h5 files must be cleaned here, list them by names.
# Don't use the wildcard form of *.h5 as it will wipe out even *.h5 generated
# by otehr test programs. This will cause a racing condition error when
# parallel make (e.g., gmake -j 4) is used.
temp_SRC="$hdf5main $v16main $v18main $v110main $v112main $appmain $prog1 $prog2"
temp_OBJ=`echo $temp_SRC | sed -e "s/\.${suffix}/.o/g"`
temp_FILES="a.out $applib"

# Generate appmain:
# An application Main that calls hdf5 and application's own functions.
cat > $appmain <<EOF
#include "hdf5.h"
#define H5FILE_NAME        "tmp.h5"
extern void sub1(void);
extern void sub2(void);
int
main (void)
{
    hid_t       file;         	/* file and dataset handles */

    /*
     * Create a new file using H5F_ACC_TRUNC access,
     * default file creation properties, and default file
     * access properties.
     */
    sub1();
    sub2();
    file = H5Fcreate(H5FILE_NAME, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
    H5Fclose(file);

    printf("HDF5 C Sample program ran successfully. File %s generated.\n", H5FILE_NAME);
    remove(H5FILE_NAME);

    return 0;
}
EOF

# generate prog1
cat > $prog1 <<EOF
#include <stdio.h>
void
sub1(void)
{
    printf("in sub1\n");
}
EOF

# generate prog2
cat > $prog2 <<EOF
#include <stdio.h>
void
sub2(void)
{
    printf("in sub2\n");
}
EOF

# Generate HDF5 Main Program:
# An HDF5 sample program that calls hdf5 functions.
cat > $hdf5main <<EOF
#include "hdf5.h"
#define H5FILE_NAME        "tmp.h5"
int
main (void)
{
    hid_t       file;         	/* file and dataset handles */

    /*
     * Create a new file using H5F_ACC_TRUNC access,
     * default file creation properties, and default file
     * access properties.
     */
    file = H5Fcreate(H5FILE_NAME, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
    H5Fclose(file);

    printf("HDF5 C Sample program ran successfully. File %s generated.\n", H5FILE_NAME);
    remove(H5FILE_NAME);

    return 0;
}
EOF

# Generate HDF5 v1.6 Main Program:
# This makes unique V1.6 API calls.
cat > $v16main <<EOF
/* This is a V1.6 API calls example Program. */
#include "hdf5.h"
#define H5FILE_NAME        "tmp.h5"
int
main (void)
{
    hid_t       file, group, group1;    /* file and group handles */

    file = H5Fcreate(H5FILE_NAME, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
    group = H5Gcreate(file, "/Group", 0);
    group1 = H5Gcreate1(file, "/Group1.6", 0);
    H5Gclose(group1);
    H5Gclose(group);
    H5Fclose(file);

    printf("HDF5 C program created with V1.6 API ran successfully. "
       "File %s generated.\n", H5FILE_NAME);
    remove(H5FILE_NAME);
    return 0;
}
EOF

# Generate HDF5 v1.8 Main Program:
# This makes unique V1.8 API calls.
cat > $v18main <<EOF
/* This is a V1.8 API calls example Program. */
#include "hdf5.h"
#define H5FILE_NAME        "tmp.h5"
int
main (void)
{
    hid_t       file, group, group2;    /* file and group handles */

    file = H5Fcreate(H5FILE_NAME, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
    group = H5Gcreate(file, "/Group", H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
    group2 = H5Gcreate2(file, "/Group1.8", H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
    H5Gclose(group2);
    H5Gclose(group);
    H5Fclose(file);

    printf("HDF5 C program created with V1.8 API ran successfully. "
       "File %s generated.\n", H5FILE_NAME);
    remove(H5FILE_NAME);
    return 0;
}
EOF

# Generate HDF5 v1.10 Main Program:
# This makes unique V1.10 API calls.
cat > $v110main <<EOF
/* This is a V1.10 API calls example Program. */
#include "hdf5.h"
#define H5FILE_NAME        "tmp.h5"
int
main (void)
{
    hid_t       file, group, group2, dset, dset2;    /* file and group handles */

    file = H5Fcreate(H5FILE_NAME, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
    group = H5Gcreate(file, "/Group", H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
    group2 = H5Gcreate2(file, "/Group1.8", H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
    dset = H5Dopen(group, "Dataset", H5P_DEFAULT);
    dset2 = H5Dopen2(group2, "Dataset2", H5P_DEFAULT);
    H5Dclose(dset);
    H5Dclose(dset2);
    H5Gclose(group2);
    H5Gclose(group);
    H5Fclose(file);

    printf("HDF5 C program created with V1.10 API ran successfully. "
       "File %s generated.\n", H5FILE_NAME);
    remove(H5FILE_NAME);
    return 0;
}
EOF

# Generate HDF5 v1.12 Main Program:
# This makes unique V1.12 API calls.
cat > $v112main <<EOF
/* This is a V1.12 API calls example Program. */
#include "hdf5.h"
#define H5FILE_NAME        "tmp.h5"
#define SPACE1_RANK    3
int
main (void)
{
    hid_t       sid;                  /* Dataspace ID */
    hid_t       fapl = -1;            /* File access property list ID */
    int         rank;                 /* Logical rank of dataspace    */
    hsize_t     dims[] = {3, 3, 15};
    size_t      sbuf_size=0;
    herr_t      ret;                  /* Generic return value        */
    hsize_t             start[] = {0, 0, 0};
    hsize_t             stride[] = {2, 5, 3};
    hsize_t             count[] = {2, 2, 2};
    hsize_t             block[] = {1, 3, 1};

    /* Create the file access property list */
    fapl = H5Pcreate(H5P_FILE_ACCESS);

    /* Set low/high bounds in the fapl */
    ret = H5Pset_libver_bounds(fapl, H5F_LIBVER_EARLIEST,
                               H5F_LIBVER_LATEST);

    /* Create the dataspace */
    sid = H5Screate_simple(SPACE1_RANK, dims, NULL);

    /* Set the hyperslab selection */
    ret = H5Sselect_hyperslab(sid, H5S_SELECT_SET, start, stride, count, block);

    /* Encode simple dataspace in a buffer with the fapl setting */
    ret = H5Sencode(sid, NULL, &sbuf_size, fapl);

    /* Encode simple dataspace in a buffer with the fapl setting */
    ret = H5Sencode2(sid, NULL, &sbuf_size, fapl);

    printf("HDF5 C program created with V1.12 API ran successfully. ");
/*       "File %s generated.\n", H5FILE_NAME);
      remove(H5FILE_NAME); */
    return 0;
}
EOF


# Parse option
#   None

# Print a line-line message left justified in a field of 70 characters
# beginning with the word "Testing".
#
TESTING() {
   SPACES="                                                               "
   echo "Testing $* $SPACES" | cut -c1-70 | tr -d '\012'
}


# Debug printing
# Change : to echo to print the debug statement
DPRINT() {
    : $*
}

# Run a test and print PASS or *FAIL*.  If a test fails then increment
# the `nerrors' global variable and (if $verbose is set) display the
# failed output.  The actual output is not removed if $HDF5_NOCLEANUP is
# defined.
#
TOOLTEST() {
    out=test_$H5TOOL_$$.out
    err=test_$H5TOOL_$$.err

    # Run test.
    TESTING $H5TOOL $@
    $H5TOOL_BIN $@ > $out 2>&1
    result=$?
    if [ $result = 0 ]; then
	echo " PASSED"
	test $verbose -gt 1 && \
	    ( echo "========== results ==========="; cat $out;
	      echo "===============================================") |sed 's/^/    /'
    else
	echo "*FAILED*"
	nerrors="`expr $nerrors + 1`"
	test $verbose -gt 0 && \
	    ( echo "========== results ==========="; cat $out;
	      echo "===============================================") |sed 's/^/    /'
    fi

    # Clean up output file
    if test -z "$HDF5_NOCLEANUP"; then
	rm -f $out
    fi
}

# Print a "SKIP" message
SKIP() {
	 TESTING $H5TOOL $@
	  echo  " -SKIP-"
}


##############################################################################
###			  T H E   T E S T S                                ###
##############################################################################
#
# Group 1: HDF5 program that calls HDF5 APIs.
echo "***"Simple Compile and Link in one step.
TOOLTEST $hdf5main
# Application program that calls HDF5 and its own functions.
TOOLTEST $appmain $prog1 $prog2
# Repeat with -shlib option
echo "***"Simple Compile and Link with -shlib in one step.
TOOLTEST -shlib $hdf5main
# Application program that calls HDF5 and its own functions.
TOOLTEST -shlib $appmain $prog1 $prog2

# Group 2: Compile, then link.
echo "***"Compile and Link in two steps.
TOOLTEST -c $hdf5main
TOOLTEST $hdf5main_o
TOOLTEST -c $appmain $prog1 $prog2
TOOLTEST $appmain_o $prog1_o $prog2_o
# Repeat with -shlib option
echo "***"Compile and Link with -shlib in two steps.
TOOLTEST -c $hdf5main
TOOLTEST -shlib $hdf5main_o
TOOLTEST -c $appmain $prog1 $prog2
TOOLTEST -shlib $appmain_o $prog1_o $prog2_o

# Group3: Build external library, then link with it.
echo "***"Build external library and link with it.
TOOLTEST -c $prog1 $prog2
$AR cru $applib $prog1_o $prog2_o
$RANLIB $applib
TOOLTEST $appmain $applib
TOOLTEST $appmain_o $applib
# Repeat with -shlib option
echo "***"Build external library and link with it using -shlib.
TOOLTEST -c $prog1 $prog2
$AR cru $applib $prog1_o $prog2_o
$RANLIB $applib
TOOLTEST -shlib $appmain $applib
TOOLTEST -shlib $appmain_o $applib

# Group 4: Just preprocess, no compile, no link.
echo "***"Just preprocess, no compile, no link.
TOOLTEST -E $hdf5main
TOOLTEST -E $appmain $prog1 $prog2

# Group5: Version compatibility tests.
echo "***"Version compatibility tests.
# 20200610 Updated for versions 1.10 - 1.14.
# If H5_NO_DEPRECATED_SYMBOLS;
# then versions v18main, v110main, and v112main work.
# -DH5_USE_<N>_API_DEFAULT flags cannot be used with H5_NO_DEPRECATED_SYMBOLS;
# else if H5_USE_16_API_DEFAULT;
#      then v16main works.
# else v18main works and -DH5_USE_16_API_DEFAULT v16main also works.
# as new versions with versioned functions are added, they will work with and 
# should be added to H5_NO_DEPRECATED_SYMBOLS and to the else section, with and 
# without the -DH5_USE_<N>_API_DEFAULT flag. A new H5_USE_<N>_API_DEFAULT section 
# should also be added.
#
if [ -n "$H5_USE_16_API_DEFAULT" ]; then
    echo "H5_USE_16_API_DEFAULT is defined."
elif [ -n "$H5_USE_18_API_DEFAULT" ]; then
    echo "H5_USE_18_API_DEFAULT is defined."
elif [ -n "$H5_USE_110_API_DEFAULT" ]; then
    echo "H5_USE_110_API_DEFAULT is defined."
elif [ -n "$H5_USE_112_API_DEFAULT" ]; then
    echo "H5_USE_112_API_DEFAULT is defined."
elif [ -n "$H5_USE_114_API_DEFAULT" ]; then
    echo "H5_USE_114_API_DEFAULT is defined."
else
    echo "No H5 API_DEFAULT is defined."
fi
if [ -n "$H5_NO_DEPRECATED_SYMBOLS" ]; then
    echo "H5_NO_DEPRECATED_SYMBOLS is defined."
else
    echo "H5_NO_DEPRECATED_SYMBOLS is not defined."
fi
if [ -n "$H5_NO_DEPRECATED_SYMBOLS" ]; then
    echo "Skipping $v16main test"
    TOOLTEST $v18main
    TOOLTEST $v18main
    TOOLTEST $v110main
    TOOLTEST $v112main
elif [ -n "$H5_USE_16_API_DEFAULT" ]; then
    echo "Testing HDF5  with 16_API_DEFAULT"
    TOOLTEST $v16main
elif [ -n "$H5_USE_18_API_DEFAULT" ]; then
    echo "Testing HDF5  with 18_API_DEFAULT"
    TOOLTEST -DH5_USE_16_API_DEFAULT $v16main
    TOOLTEST $v18main
elif [ -n "$H5_USE_110_API_DEFAULT" ]; then
    echo "Testing HDF5  with 110_API_DEFAULT"
    TOOLTEST -DH5_USE_16_API_DEFAULT $v16main
    TOOLTEST -DH5_USE_18_API_DEFAULT $v18main
    TOOLTEST $v110main
elif [ -n "$H5_USE_112_API_DEFAULT" ]; then
    echo "Testing HDF5  with 112_API_DEFAULT"
    TOOLTEST -DH5_USE_16_API_DEFAULT $v16main
    TOOLTEST -DH5_USE_18_API_DEFAULT $v18main
    TOOLTEST -DH5_USE_110_API_DEFAULT $v110main
    TOOLTEST $v112main
else
    echo "Testing HDF5  with 114_API_DEFAULT"
    TOOLTEST -DH5_USE_16_API_DEFAULT $v16main
    TOOLTEST -DH5_USE_18_API_DEFAULT $v18main
    TOOLTEST -DH5_USE_110_API_DEFAULT $v110main
    TOOLTEST -DH5_USE_112_API_DEFAULT $v112main
    TOOLTEST $v18main
    TOOLTEST $v110main
    TOOLTEST $v112main
fi

##############################################################################
# END
##############################################################################

# Clean up  file
if test -z "$HDF5_NOCLEANUP"; then
    rm -f $temp_SRC $temp_OBJ $temp_FILES
fi

if test $nerrors -eq 0 ; then
    echo "All $TESTNAME tests passed."
    exit $EXIT_SUCCESS
else
    echo "$TESTNAME tests failed with $nerrors errors."
    exit $EXIT_FAILURE
fi
