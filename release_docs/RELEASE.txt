HDF5 version 1.10.8-1 currently under development
================================================================================


INTRODUCTION
============

This document describes the differences between this release and the previous
HDF5 release. It contains information on the platforms tested and known
problems in this release. For more details check the HISTORY*.txt files in the
HDF5 source.

Note that documentation in the links below will be updated at the time of each
final release.

Links to HDF5 documentation can be found on The HDF5 web page:

     https://portal.hdfgroup.org/display/HDF5/HDF5

The official HDF5 releases can be obtained from:

     https://www.hdfgroup.org/downloads/hdf5/

Changes from Release to Release and New Features in the HDF5-1.10.x release series
can be found at:

     https://portal.hdfgroup.org/display/HDF5/HDF5+Application+Developer%27s+Guide

If you have any questions or comments, please send them to the HDF Help Desk:

     help@hdfgroup.org


CONTENTS
========

- New Features
- Support for new platforms and languages
- Bug Fixes since HDF5-1.10.7
- Supported Platforms
- Tested Configuration Features Summary
- More Tested Platforms
- Known Problems
- CMake vs. Autotools installations


New Features
============

    Configuration:
    -------------
    - Add CMake variable HDF5_LIB_INFIX

      This infix is added to all library names after 'hdf5'.
      e.g. the infix '_openmpi' results in the library name 'libhdf5_openmpi.so'
      This name is used in packages on debian based systems.
      (see https://packages.debian.org/jessie/amd64/libhdf5-openmpi-8/filelist)

      (barcode - 2021/03/22)

    - On macOS, Universal Binaries can now be built, allowing native execution on
      both Intel and Apple Silicon (ARM) based Macs.

      To do so, set CMAKE_OSX_ARCHITECTURES="x86_64;arm64"

      (SAM - 2021/02/07, https://github.com/HDFGroup/hdf5/issues/311)

    - Added a configure-time option to control certain compiler warnings
      diagnostics

      A new configure-time option was added that allows some compiler warnings
      diagnostics to have the default operation. This is mainly intended for
      library developers and currently only works for gcc 10 and above. The
      diagnostics flags apply to C, C++ and Fortran compilers and will appear
      in "H5 C Flags", H5 C++ Flags" and H5 Fortran Flags, respectively. They
      will NOT be exported to h5cc, etc.

      The default is OFF, which will disable the warnings URL and color attributes
      for the warnings output. ON will not add the flags and allow default behavior.

      Autotools:    --enable-diags

      CMake:        HDF5_ENABLE_BUILD_DIAGS

      (ADB - 2021/02/05, HDFFV-11213)

    - CMake option to build the HDF filter plugins project as an external project

        The HDF filter plugins project is a collection of registered compression
        filters that can be dynamically loaded when needed to access data stored
        in a hdf5 file. This CMake-only option allows the plugins to be built and
        distributed with the hdf5 library and tools. Like the options for szip and
        zlib, either a tgz file or a git repository can be specified for the source.

        The option was refactored to use the CMake FetchContent process. This allows
        more control over the filter targets, but required external project command
        options to be moved to a CMake include file, HDF5PluginCache.cmake. Also
        enabled the filter examples to be used as tests for operation of the
        filter plugins.

        (ADB - 2020/12/10, OESS-98)

    - FreeBSD Autotools configuration now defaults to 'cc' and 'c++' compilers

      On FreeBSD, the autotools defaulted to 'gcc' as the C compiler and did
      not process C++ options. Since FreeBSD 10, the default compiler has
      been clang (via 'cc').

      The default compilers have been set to 'cc' for C and 'c++' for C++,
      which will pick up clang and clang++ respectively on FreeBSD 10+.
      Additionally, clang options are now set correctly for both C and C++
      and g++ options will now be set if that compiler is being used (an
      omission from the former functionality).

      (DER - 2020/11/28, HDFFV-11193)

    - Fixed POSIX problems when building w/ gcc on Solaris

      When building on Solaris using gcc, the POSIX symbols were not
      being set correctly, which could lead to issues like clock_gettime()
      not being found.

      The standard is now set to gnu99 when building with gcc on Solaris,
      which allows POSIX things to be #defined and linked correctly. This
      differs slightly from the gcc norm, where we set the standard to c99
      and manually set POSIX #define symbols.

      (DER - 2020/11/25, HDFFV-11191)

    - Added a configure-time option to consider certain compiler warnings
      as errors

      A new configure-time option was added that converts some compiler warnings
      to errors. This is mainly intended for library developers and currently
      only works for gcc and clang. The warnings that are considered errors
      will appear in the generated libhdf5.settings file. These warnings apply
      to C and C++ code and will appear in "H5 C Flags" and H5 C++ Flags",
      respectively. They will NOT be exported to h5cc, etc.

      The default is OFF. Building with this option may fail when compiling
      on operating systems and with compiler versions not commonly used by
      the library developers. Compilation may also fail when headers not
      under the control of the library developers (e.g., mpi.h, hdfs.h) raise
      warnings.

      Autotools:    --enable-warnings-as-errors

      CMake:        HDF5_ENABLE_WARNINGS_AS_ERRORS

      (DER - 2020/11/23, HDFFV-11189)

    - Autotools and CMake target added to produce doxygen generated documentation

        The default is OFF or disabled.
        Autoconf option is '--enable-doxygen'
          autotools make target is 'doxygen' and will build all doxygen targets
        CMake configure option is 'HDF5_BUILD_DOC'.
          CMake target is 'doxygen' for all available doxygen targets
          CMake target is 'hdf5lib_doc' for the src subdirectory

        (ADB - 2020/11/13)

    - CMake option to use MSVC naming conventions with MinGW

        HDF5_MSVC_NAMING_CONVENTION option enable to use MSVC naming conventions
        when using a MinGW toolchain

        (xan - 2020/10/30)

    - CMake option to statically link gcc libs with MinGW

        HDF5_MINGW_STATIC_GCC_LIBS allows to statically link libg/libstdc++
        with the MinGW toolchain

        (xan - 2020/10/30)

    - CMake option to build the HDF filter plugins project as an external project

        The HDF filter plugins project is a collection of registered compression
        filters that can be dynamically loaded when needed to access data stored
        in a hdf5 file. This CMake-only option allows the plugins to be built and
        distributed with the hdf5 library and tools. Like the options for szip and
        zlib, either a tgz file or a git repository can be specified for the source.

        The necessary options are (see the INSTALL_CMake.txt file):
          HDF5_ENABLE_PLUGIN_SUPPORT
          PLUGIN_TGZ_NAME or PLUGIN_GIT_URL
        There are more options necessary for various filters and the plugin project
        documents should be referenced.

        (ADB - 2020/10/16, OESS-98)

    - Added CMake option to format source files

        HDF5_ENABLE_FORMATTERS option will enable creation of targets using the
        pattern - HDF5_*_SRC_FORMAT - where * corresponds to the source folder
        or tool folder. All sources can be formatted by executing the format target;
        make format

        (ADB - 2020/09/24)

    Library:
    --------
    - H5Epush_ret() now requires a trailing semicolon

        H5Epush_ret() is a function-like macro that has been changed to
        contain a `do {} while(0)` loop. Consequently, a trailing semicolon
        is now required to end the `while` statement. Previously, a trailing
        semi would work, but was not mandatory. This change was made to allow
        clang-format to correctly format the source code.

        (SAM - 2021/03/03)

    - Improved performance of H5Sget_select_elem_pointlist

        Modified library to cache the point after the last block of points
        retrieved by H5Sget_select_elem_pointlist, so a subsequent call to the
        same function to retrieve the next block of points from the list can
        proceed immediately without needing to iterate over the point list.

        (NAF - 2021/01/19)

    Fortran Library:
    ----------------
    -

    C++ Library:
    ------------
    -

    Java Library:
    -------------
    - Added new H5S functions.

        H5Sselect_copy, H5Sselect_shape_same, H5Sselect_adjust,
        H5Sselect_intersect_block, H5Sselect_project_intersection,
        H5Scombine_hyperslab, H5Smodify_select, H5Scombine_select
        wrapper functions added.

        (ADB - 2020/10/27, HDFFV-10868)

    Tools:
    ------
    - h5repack added help text for user-defined filters.

        Added help text line that states the valid values of the filter flag
        for user-defined filters;
            filter_flag: 1 is OPTIONAL or 0 is MANDATORY

        (ADB - 2021/01/14, HDFFV-11099)


    High-Level APIs:
    ----------------
    -

    C Packet Table API:
    -------------------
    -

    Internal header file:
    ---------------------
    -

    Documentation:
    --------------
    -

Support for new platforms, languages and compilers
==================================================
    -

Bug Fixes since HDF5-1.10.7 release
===================================
    Library
    -------
    - Fixed CVE-2018-17435

        The tool h5dump produced a segfault when the size of a fill value
        message was corrupted and caused a buffer overflow.

        The problem was fixed by verifying the fill value's size
        against the buffer size before attempting to access the buffer.

        (BMR - 2021/03/15, HDFFV-10480)

    - Fixed CVE-2018-14033 (same issue as CVE-2020-10811)

        The tool h5dump produced a segfault when the storage size message
        was corrupted and caused a buffer overflow.

        The problem was fixed by verifying the storage size against the
        buffer size before attempting to access the buffer.

        (BMR - 2021/03/15, HDFFV-11159/HDFFV-11049)

    - Remove underscores on header file guards

        Header file guards used a variety of underscores at the beginning of the define.

        Removed all leading (some trailing) underscores from header file guards.

        (ADB - 2021/03/03, #361)


    Java Library
    ------------
    - The H5FArray.java class, in which virtually the entire execution time
        is spent using the HDFNativeData method that converts from an array
        of bytes to an array of the destination Java type.

        1. Convert the entire byte array into a 1-d array of the desired type,
           rather than performing 1 conversion per row;
        2. Use the Java Arrays method copyOfRange to grab the section of the
           array from (1) that is desired to be inserted into the destination array.

        (PGT,ADB - 2020/12/29, HDFFV-10865)


    Configuration
    -------------
    - Reclassify CMake messages, to allow new modes and --log-level option

      CMake message commands have a mode argument. By default, STATUS mode
      was chosen for any non-error message. CMake version 3.15 added additional
      modes, NOTICE, VERBOSE, DEBUG and TRACE. All message commands with a mode
      of STATUS were reviewed and most were reclassified as VERBOSE. The new
      mode was protected by a check for a CMake version of at least 3.15. If CMake
      version 3.17 or above is used, the user can use the command line option
      of "--log-level" to further restrict which message commands are displayed.

      (ADB - 2021/01/11, HDFFV-11144)

    - Fixes Autotools determination of the stat struct having an st_blocks field

      A missing parenthesis in an autoconf macro prevented building the test
      code used to determine if the stat struct contains the st_blocks field.
      Now that the test functions correctly, the H5_HAVE_STAT_ST_BLOCKS #define
      found in H5pubconf.h will be defined correctly on both the Autotools and
      CMake. This #define is only used in the tests and does not affect the
      HDF5 C library.

      (DER - 2021/01/07, HDFFV-11201)


    Tools
    -----
    - Fixed tools argument parsing.

        Tools parsing used the length of the option from the long array to match
        the option from the command line. This incorrectly matched a shorter long
        name option that happened to be a subset of another long option.
        Changed to match whole names.

        (ADB - 2021/01/19, HDFFV-11106)


    Fortran API
    -----------
    -


    High-Level Library
    ------------------
    -


    Documentation
    -------------
    -


    F90 APIs
    --------
    -


    C++ APIs
    --------
    -


    Testing
    -------
    -


Supported Platforms
===================

    Linux 3.10.0-1127.10.1.el7    gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)
    #1 SMP ppc64 GNU/Linux        g++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)
    (echidna)                     GNU Fortran (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)

    Linux 2.6.32-754.31.1.el6     IBM XL C/C++ V13.1
    #1 SMP ppc64 GNU/Linux        IBM XL Fortran V15.1
    (ostrich)

    Linux 3.10.0-327.18.2.el7     GNU C (gcc), Fortran (gfortran), C++ (g++)
    #1 SMP x86_64 GNU/Linux       compilers:
    (jelly/kituo/moohan)          Version 4.8.5 20150623 (Red Hat 4.8.5-4)
                                    Version 4.9.3, Version 5.3.0, Version 6.3.0,
                                    Version 7.2.0, Version 8.3.0, Version 9.1.0
                                  Intel(R) C (icc), C++ (icpc), Fortran (icc)
                                  compilers:
                                     Version 17.0.0.098 Build 20160721
                                  MPICH 3.3 compiled with GCC 7.2.0
                                  OpenMPI 4.0.0 compiled with GCC 7.2.0

    SunOS 5.11 11.4.5.12.5.0      Sun C 5.15 SunOS_sparc 2017/05/30
    32- and 64-bit                Studio 12.6 Fortran 95 8.8 SunOS_sparc 2017/05/30
    (hedgehog)                    Sun C++ 5.15 SunOS_sparc 2017/05/30

    Windows 10 x64                Visual Studio 2015 w/ Intel Fortran 18 (cmake)
                                  Visual Studio 2017 w/ Intel Fortran 19 (cmake)
                                  Visual Studio 2019 w/ Intel Fortran 19 (cmake)
                                  Visual Studio 2019 w/ MSMPI 10.1 (cmake)

    macOS Mojave 10.14.6          Apple LLVM version 10.0.1 (clang-1001.0.46.4)
    64-bit                        gfortran GNU Fortran (GCC) 6.3.0
    (swallow)                     Intel icc/icpc/ifort version 19.0.4.233 20190416

Tested Configuration Features Summary
=====================================

    In the tables below
          y   = tested
          n   = not tested in this release
          C   = Cluster
          W   = Workstation
          x   = not working in this release
          dna = does not apply
          ( ) = footnote appears below second table
          <blank> = testing incomplete on this feature or platform

Platform                              C         F90/   F90      C++  zlib  SZIP
                                      parallel  F2003  parallel
Solaris2.11 32-bit                      n        y/y    n        y    y     y
Solaris2.11 64-bit                      n        y/n    n        y    y     y
Windows 10                              y        y/y    n        y    y     y
Windows 10 x64                          y        y/y    n        y    y     y
Mac OS X El Capitan 10.11.6 64-bit      n        y/y    n        y    y     y
Mac OS Sierra 10.12.6 64-bit            n        y/y    n        y    y     y
Mac OS X High Sierra 10.13.6 64-bit     n        y/y    n        y    y     y
Mac OS X Mojave 10.14.6 64-bit          n        y/y    n        y    y     y
CentOS 7.2 Linux 2.6.32 x86_64 PGI      n        y/y    n        y    y     y
CentOS 7.2 Linux 2.6.32 x86_64 GNU      y        y/y    y        y    y     y
CentOS 7.2 Linux 2.6.32 x86_64 Intel    n        y/y    n        y    y     y
Linux 2.6.32-573.18.1.el6.ppc64         n        y/y    n        y    y     y


Platform                                 Shared  Shared    Shared    Thread-
                                         C libs  F90 libs  C++ libs  safe
Solaris2.11 32-bit                         y       y         y         y
Solaris2.11 64-bit                         y       y         y         y
Windows 10                                 y       y         y         y
Windows 10 x64                             y       y         y         y
Mac OS X El Capitan 10.11.6 64-bit         y       n         y         y
Mac OS Sierra 10.12.6 64-bit               y       n         y         y
Mac OS X High Sierra 10.13.6 64-bit        y       n         y         y
Mac OS X Mojave 10.14.6 64-bit             y       n         y         y
CentOS 7.2 Linux 2.6.32 x86_64 PGI         y       y         y         n
CentOS 7.2 Linux 2.6.32 x86_64 GNU         y       y         y         y
CentOS 7.2 Linux 2.6.32 x86_64 Intel       y       y         y         n
Linux 2.6.32-573.18.1.el6.ppc64            y       y         y         n

Compiler versions for each platform are listed in the preceding
"Supported Platforms" table.


More Tested Platforms
=====================
The following platforms are not supported but have been tested for this release.

    Linux 2.6.32-573.22.1.el6    GNU C (gcc), Fortran (gfortran), C++ (g++)
    #1 SMP x86_64 GNU/Linux       compilers:
    (platypus)                       Version 4.4.7 20120313
                                     Version 4.9.3, 5.3.0, 6.2.0
                                  PGI C, Fortran, C++ for 64-bit target on
                                  x86-64;
                                     Version 19.10-0
                                  MPICH 3.1.4 compiled with GCC 4.9.3

    Linux 2.6.32-754.31.1.el6     gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-18)
    #1 SMP ppc64 GNU/Linux        g++ (GCC) 4.4.7 20120313 (Red Hat 4.4.7-18)
    (ostrich)                     GNU Fortran (GCC) 4.4.7 20120313 (Red Hat 4.4.7-18)

    Linux 3.10.0-327.18.2.el7     GNU C (gcc) and C++ (g++) compilers
    #1 SMP x86_64 GNU/Linux          Version 4.8.5 20150623 (Red Hat 4.8.5-4)
    (jelly)                       with NAG Fortran Compiler Release 6.1(Tozai)
                                  GCC Version 7.1.0
                                  OpenMPI 2.1.6-GCC-7.2.0-2.29,
                                     3.1.3-GCC-7.2.0-2.29
                                  Intel(R) C (icc) and C++ (icpc) compilers
                                     Version 17.0.0.098 Build 20160721
                                  with NAG Fortran Compiler Release 6.1(Tozai)

    Linux 3.10.0-327.10.1.el7     MPICH 3.1.4 compiled with GCC 4.9.3
    #1 SMP x86_64 GNU/Linux
    (moohan)

    Linux-3.10.0-1127.0.0.1chaos  openmpi-4.0.0
    #1 SMP x86_64 GNU/Linux           clang/3.9.0, 8.0.1
    (quartz)                          gcc/7.3.0, 8.1.0
                                      intel/16.0.4

    Linux-4.14.0-115.10.1.1       spectrum-mpi/rolling-release
    #1 SMP ppc64le GNU/Linux          clang/coral-2018.08.08
    (lassen)                          gcc/7.3.1
                                      xl/2019.02.07

    Linux-4.12.14-150.52-default  cray-mpich/7.7.10
    #1 SMP x86_64 GNU/Linux           gcc/7.3.0, 8.2.0
    (cori)                            intel/19.0.3

    Linux-4.4.180-94.107-default  cray-mpich/7.7.6
    # 1SMP x86_64 GNU/Linux           gcc/7.2.0, 8.2.0
    (mutrino)                         intel/17.0.4, 18.0.2, 19.0.4

    Fedora33 5.10.10-200.fc33.x86_64
    #1 SMP x86_64  GNU/Linux         GNU gcc (GCC) 10.2.1 20201125 (Red Hat 10.2.1-9)
                                     GNU Fortran (GCC) 10.2.1 20201125 (Red Hat 10.2.1-9)
                                     clang version 11.0.0 (Fedora 11.0.0-2.fc33)
                                     (cmake and autotools)

    Ubuntu20.10 5.8.0-41-generic-x86_64
    #46-Ubuntu SMP x86_64  GNU/Linux GNU gcc (GCC) 10.2.0-13ubuntu1
                                     GNU Fortran (GCC) 10.2.0-13ubuntu1
                                     (cmake and autotools)

    SUSE15sp2 5.3.18-22-default
    #1 SMP x86_64  GNU/Linux         GNU gcc (SUSE Linux) 7.5.0
                                     GNU Fortran (SUSE Linux) 7.5.0
                                     clang version 7.0.1 (tags/RELEASE_701/final 349238)
                                     (cmake and autotools)

    Mac OS X El Capitan 10.11.6   Apple clang version 7.3.0 from Xcode 7.3
    64-bit                        gfortran GNU Fortran (GCC) 5.2.0
    (osx1011test)                 Intel icc/icpc/ifort version 16.0.2

    macOS Sierra 10.12.6          Apple LLVM version 9.0.0 (clang-900.39.2)
    64-bit                        gfortran GNU Fortran (GCC) 7.4.0
    (kite)                        Intel icc/icpc/ifort version 17.0.2

    macOS High Sierra 10.13.6     Apple LLVM version 10.0.0 (clang-1000.10.44.4)
    64-bit                        gfortran GNU Fortran (GCC) 6.3.0
    (bear)                        Intel icc/icpc/ifort version 19.0.4.233 20190416

    SunOS 5.11 11.3               Sun C 5.15 SunOS_sparc
    32- and 64-bit                Sun Fortran 95 8.8 SunOS_sparc
    (emu)


Known Problems
==============
    CMake files do not behave correctly with paths containing spaces.
    Do not use spaces in paths because the required escaping for handling spaces
    results in very complex and fragile build files.
    ADB - 2019/05/07

    At present, metadata cache images may not be generated by parallel
    applications.  Parallel applications can read files with metadata cache
    images, but since this is a collective operation, a deadlock is possible
    if one or more processes do not participate.

    Two tests fail attempting collective writes with OpenMPI 3.0.0/GCC-7.2.0-2.29:
        testphdf5 (ecdsetw, selnone, cchunk1, cchunk3, cchunk4, and actualio)
        t_shapesame (sscontig2)

    CPP ptable test fails on both VS2017 and VS2019 with Intel compiler, JIRA
    issue: HDFFV-10628.  This test will pass with VS2015 with Intel compiler.

    Known problems in previous releases can be found in the HISTORY*.txt files
    in the HDF5 source. Please report any new problems found to
    help@hdfgroup.org.


CMake vs. Autotools installations
=================================
While both build systems produce similar results, there are differences.
Each system produces the same set of folders on linux (only CMake works
on standard Windows); bin, include, lib and share. Autotools places the
COPYING and RELEASE.txt file in the root folder, CMake places them in
the share folder.

The bin folder contains the tools and the build scripts. Additionally, CMake
creates dynamic versions of the tools with the suffix "-shared". Autotools
installs one set of tools depending on the "--enable-shared" configuration
option.
  build scripts
  -------------
  Autotools: h5c++, h5cc, h5fc
  CMake: h5c++, h5cc, h5hlc++, h5hlcc

The include folder holds the header files and the fortran mod files. CMake
places the fortran mod files into separate shared and static subfolders,
while Autotools places one set of mod files into the include folder. Because
CMake produces a tools library, the header files for tools will appear in
the include folder.

The lib folder contains the library files, and CMake adds the pkgconfig
subfolder with the hdf5*.pc files used by the bin/build scripts created by
the CMake build. CMake separates the C interface code from the fortran code by
creating C-stub libraries for each Fortran library. In addition, only CMake
installs the tools library. The names of the szip libraries are different
between the build systems.

The share folder will have the most differences because CMake builds include
a number of CMake specific files for support of CMake's find_package and support
for the HDF5 Examples CMake project.

