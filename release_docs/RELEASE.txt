HDF5 version 1.10.8 released on 2021-10-19
================================================================================


INTRODUCTION
============

This document describes the differences between this release and the previous
HDF5 release. It contains information on the platforms tested and known
problems in this release. For more details check the HISTORY*.txt files in the
HDF5 source.

Note that documentation in the links below will be updated at the time of each
final release.

Links to HDF5 documentation can be found on The HDF5 web page:

     https://portal.hdfgroup.org/display/HDF5/HDF5

The official HDF5 releases can be obtained from:

     https://www.hdfgroup.org/downloads/hdf5/

Changes from Release to Release and New Features in the HDF5-1.10.x release series
can be found at:

     https://portal.hdfgroup.org/display/HDF5/HDF5+Application+Developer%27s+Guide

If you have any questions or comments, please send them to the HDF Help Desk:

     help@hdfgroup.org


CONTENTS
========

- New Features
- New platforms, languages and compilers tested
- Bug Fixes since HDF5-1.10.7
- Platforms Tested
- Configuration Options Tested
- Known Problems
- CMake vs. Autotools installations


New Features
============

    Configuration:
    -------------
    - Added new option to control the build of High-Level tools
      with default ON/enabled.

      Add configure options (autotools - CMake):
            --enable-hltools       HDF5_BUILD_HL_TOOLS

      (ADB - 2021/09/16, HDFFV-11266)

    - Adds C++ Autotools configuration file for Intel

      * Checks for icpc as the compiler
      * Copies most non-warning flags from intel-flags

      (DER - 2021/06/02)

    - Adds C++ Autotools configuration file for PGI

      * Checks for pgc++ as the compiler name (was: pgCC)
      * Other options basically match new C options (below)

      (DER - 2021/06/02)

    - Updates PGI C options

      * -Minform set to warn (was: inform) to suppress spurious messages
      * Sets -gopt -O2 as debug options
      * Sets -O4 as 'high optimization' option
      * Sets -O0 as 'no optimization' option
      * Removes specific settings for PGI 9 and 10

      (DER - 2021/06/02)

    - CMake will now run the shell script tests in test/ by default

      The test directory includes several shell script tests that previously
      were not run by CMake. These are now run by default. TEST_SHELL_SCRIPTS
      has been set to ON and SH_PROGRAM has been set to bash (some test
      scripts use bash-isms). Platforms without bash (e.g., Windows) will
      ignore the script tests.

      (DER - 2021/05/23)

    - Removed unused HDF5_ENABLE_HSIZET option from CMake

      This has been unused for some time and has no effect.

      (DER - 2021/05/23)

    - CMake no longer builds the C++ library by default

      HDF5_BUILD_CPP_LIB now defaults to OFF, which is in line with the
      Autotools build defaults.

      (DER - 2021/04/20)

    - Removal of pre-VS2015 work-arounds

      HDF5 now requires Visual Studio 2015 or greater, so old work-around
      code and definitions have been removed, including:

      * <inttypes.h>
      * snprintf and vsnprintf
      * llround, llroundf, lround, lroundf, round, roundf
      * strtoll and strtoull
      * va_copy
      * struct timespec

      (DER - 2021/03/22)

    - Add CMake variable HDF5_LIB_INFIX

      This infix is added to all library names after 'hdf5'.
      e.g. the infix '_openmpi' results in the library name 'libhdf5_openmpi.so'
      This name is used in packages on debian based systems.
      (see https://packages.debian.org/jessie/amd64/libhdf5-openmpi-8/filelist)

      (barcode - 2021/03/22)

    - On macOS, Universal Binaries can now be built, allowing native execution on
      both Intel and Apple Silicon (ARM) based Macs.

      To do so, set CMAKE_OSX_ARCHITECTURES="x86_64;arm64"

      (SAM - 2021/02/07, github-311)

    - Added a configure-time option to control certain compiler warnings
      diagnostics

      A new configure-time option was added that allows some compiler warnings
      diagnostics to have the default operation. This is mainly intended for
      library developers and currently only works for gcc 10 and above. The
      diagnostics flags apply to C, C++ and Fortran compilers and will appear
      in "H5 C Flags", H5 C++ Flags" and H5 Fortran Flags, respectively. They
      will NOT be exported to h5cc, etc.

      The default is OFF, which will disable the warnings URL and color attributes
      for the warnings output. ON will not add the flags and allow default behavior.

      Autotools:    --enable-diags

      CMake:        HDF5_ENABLE_BUILD_DIAGS

      (ADB - 2021/02/05, HDFFV-11213)

    - CMake option to build the HDF filter plugins project as an external project

        The HDF filter plugins project is a collection of registered compression
        filters that can be dynamically loaded when needed to access data stored
        in a hdf5 file. This CMake-only option allows the plugins to be built and
        distributed with the hdf5 library and tools. Like the options for szip and
        zlib, either a tgz file or a git repository can be specified for the source.

        The option was refactored to use the CMake FetchContent process. This allows
        more control over the filter targets, but required external project command
        options to be moved to a CMake include file, HDF5PluginCache.cmake. Also
        enabled the filter examples to be used as tests for operation of the
        filter plugins.

        (ADB - 2020/12/10, OESS-98)

    - FreeBSD Autotools configuration now defaults to 'cc' and 'c++' compilers

      On FreeBSD, the autotools defaulted to 'gcc' as the C compiler and did
      not process C++ options. Since FreeBSD 10, the default compiler has
      been clang (via 'cc').

      The default compilers have been set to 'cc' for C and 'c++' for C++,
      which will pick up clang and clang++ respectively on FreeBSD 10+.
      Additionally, clang options are now set correctly for both C and C++
      and g++ options will now be set if that compiler is being used (an
      omission from the former functionality).

      (DER - 2020/11/28, HDFFV-11193)

    - Fixed POSIX problems when building w/ gcc on Solaris

      When building on Solaris using gcc, the POSIX symbols were not
      being set correctly, which could lead to issues like clock_gettime()
      not being found.

      The standard is now set to gnu99 when building with gcc on Solaris,
      which allows POSIX things to be #defined and linked correctly. This
      differs slightly from the gcc norm, where we set the standard to c99
      and manually set POSIX #define symbols.

      (DER - 2020/11/25, HDFFV-11191)

    - Added a configure-time option to consider certain compiler warnings
      as errors

      A new configure-time option was added that converts some compiler warnings
      to errors. This is mainly intended for library developers and currently
      only works for gcc and clang. The warnings that are considered errors
      will appear in the generated libhdf5.settings file. These warnings apply
      to C and C++ code and will appear in "H5 C Flags" and H5 C++ Flags",
      respectively. They will NOT be exported to h5cc, etc.

      The default is OFF. Building with this option may fail when compiling
      on operating systems and with compiler versions not commonly used by
      the library developers. Compilation may also fail when headers not
      under the control of the library developers (e.g., mpi.h, hdfs.h) raise
      warnings.

      Autotools:    --enable-warnings-as-errors

      CMake:        HDF5_ENABLE_WARNINGS_AS_ERRORS

      (DER - 2020/11/23, HDFFV-11189)

    - Autotools and CMake target added to produce doxygen generated documentation

        The default is OFF or disabled.
        Autoconf option is '--enable-doxygen'
          autotools make target is 'doxygen' and will build all doxygen targets
        CMake configure option is 'HDF5_BUILD_DOC'.
          CMake target is 'doxygen' for all available doxygen targets
          CMake target is 'hdf5lib_doc' for the src subdirectory

        (ADB - 2020/11/13, HDFFV-11243)

    - CMake option to use MSVC naming conventions with MinGW

        HDF5_MSVC_NAMING_CONVENTION option enable to use MSVC naming conventions
        when using a MinGW toolchain

        (xan - 2020/10/30)

    - CMake option to statically link gcc libs with MinGW

        HDF5_MINGW_STATIC_GCC_LIBS allows to statically link libg/libstdc++
        with the MinGW toolchain

        (xan - 2020/10/30)

    - CMake option to build the HDF filter plugins project as an external project

        The HDF filter plugins project is a collection of registered compression
        filters that can be dynamically loaded when needed to access data stored
        in a hdf5 file. This CMake-only option allows the plugins to be built and
        distributed with the hdf5 library and tools. Like the options for szip and
        zlib, either a tgz file or a git repository can be specified for the source.

        The necessary options are (see the INSTALL_CMake.txt file):
          HDF5_ENABLE_PLUGIN_SUPPORT
          PLUGIN_TGZ_NAME or PLUGIN_GIT_URL
        There are more options necessary for various filters and the plugin project
        documents should be referenced.

        (ADB - 2020/10/16, OESS-98)

    - Added CMake option to format source files

        HDF5_ENABLE_FORMATTERS option will enable creation of targets using the
        pattern - HDF5_*_SRC_FORMAT - where * corresponds to the source folder
        or tool folder. All sources can be formatted by executing the format target;
        make format

        (ADB - 2020/09/24)

    Library:
    --------
    - Change how the release part of version, in major.minor.release is checked
      for compatibility

      The HDF5 library uses a function, H5check_version, to check that
      the version defined in the header files, which is used to compile an
      application is compatible with the version codified in the library, which
      the application loads at runtime. This previously required an exact match
      or the library would print a warning, dump the build settings and then
      abort or continue. An environment variable controlled the logic.

      Now the function first checks that the library release version, in
      major.minor.release, is not older than the version in the headers.
      Secondly, if the release version is different, it checks if either
      the library version or the header version is in the exception list, in
      which case the release part of version, in major.minor.release, must
      be exact. An environment variable still controls the logic.

        (ADB - 2021/07/27)

    - H5Gcreate1() now rejects size_hint parameters larger than UINT32_MAX

      The size_hint value is ultimately stored in a uint32_t struct field,
      so specifying a value larger than this on a 64-bit machine can cause
      undefined behavior including crashing the system.

      The documentation for this API call was also incorrect, stating that
      passing a negative value would cause the library to use a default
      value. Instead, passing a "negative" value actually passes a very large
      value, which is probably not what the user intends and can cause
      crashes on 64-bit systems.

      The Doxygen documentation has been updated and passing values larger
      than UINT32_MAX for size_hint will now produce a normal HDF5 error.

        (DER - 2021/04/29, HDFFV-11241)


    - H5Pset_fapl_log() no longer crashes when passed an invalid fapl ID

      When passed an invalid fapl ID, H5Pset_fapl_log() would usually
      segfault when attempting to free an uninitialized pointer in the error
      handling code. This behavior is more common in release builds or
      when the memory sanitization checks were not selected as a build
      option.

      The pointer is now correctly initialized and the API call now
      produces a normal HDF5 error when fed an invalid fapl ID.

        (DER - 2021/04/28, HDFFV-11240)

    - Fixes a segfault when H5Pset_mdc_log_options() is called multiple times

      The call incorrectly attempts to free an internal copy of the previous
      log location string, which causes a segfault. This only happens
      when the call is invoked multiple times on the same property list.
      On the first call to a given fapl, the log location is set to NULL so
      the segfault does not occur.

      The string is now handled properly and the segfault no longer occurs.

        (DER - 2021/04/27, HDFFV-11239)

    - HSYS_GOTO_ERROR now emits the results of GetLastError() on Windows

      HSYS_GOTO_ERROR is an internal macro that is used to produce error
      messages when system calls fail. These strings include errno and the
      the associated strerror() value, which are not particularly useful
      when a Win32 API call fails.

      On Windows, this macro has been updated to include the result of
      GetLastError(). When a system call fails on Windows, usually only
      one of errno and GetLastError() will be useful, however we emit both
      for the user to parse. The Windows error message is not emitted as
      it would be awkward to free the FormatMessage() buffer given the
      existing HDF5 error framework. Users will have to look up the error
      codes in MSDN.

      The format string on Windows has been changed from:

          "%s, errno = %d, error message = '%s'"

      to:

          "%s, errno = %d, error message = '%s', Win32 GetLastError() = %"PRIu32""

      for those inclined to parse it for error values.

        (DER - 2021/03/21)

    - File locking now works on Windows

      Since version 1.10.0, the HDF5 library has used a file locking scheme
      to help enforce one reader at a time accessing an HDF5 file, which can
      be helpful when setting up readers and writers to use the single-
      writer/multiple-readers (SWMR) access pattern.

      In the past, this was only functional on POSIX systems where flock() or
      fcntl() were present. Windows used a no-op stub that always succeeded.

      HDF5 now uses LockFileEx() and UnlockFileEx() to lock the file using the
      same scheme as POSIX systems. We lock the entire file when we set up the
      locks (by passing DWORDMAX as both size parameters to LockFileEx()).

        (DER - 2021/03/19, HDFFV-10191)

    - H5Epush_ret() now requires a trailing semicolon

        H5Epush_ret() is a function-like macro that has been changed to
        contain a `do {} while(0)` loop. Consequently, a trailing semicolon
        is now required to end the `while` statement. Previously, a trailing
        semi would work, but was not mandatory. This change was made to allow
        clang-format to correctly format the source code.

        (SAM - 2021/03/03)

    - Improved performance of H5Sget_select_elem_pointlist

        Modified library to cache the point after the last block of points
        retrieved by H5Sget_select_elem_pointlist, so a subsequent call to the
        same function to retrieve the next block of points from the list can
        proceed immediately without needing to iterate over the point list.

        (NAF - 2021/01/19)


    Fortran Library:
    ----------------
    - H5Fget_name_f fixed to handle correctly trailing whitespaces and
      newly allocated buffers.

      (MSB - 2021/08/30, github-826,972)


    Java Library:
    -------------
    - Added new H5S functions.

        H5Sselect_copy, H5Sselect_shape_same, H5Sselect_adjust,
        H5Sselect_intersect_block, H5Sselect_project_intersection,
        H5Scombine_hyperslab, H5Smodify_select, H5Scombine_select
        wrapper functions added.

        (ADB - 2020/10/27, HDFFV-10868)


    Tools:
    ------
    - Refactored the perform tools and removed dependencies on test library.

        Moved the perf and h5perf tools from tools/test/perform to
        tools/src/h5perf so that they can be installed. This required
        that the test library dependency be removed by copying the
        needed functions from h5test.c.
        The standalone scripts and other perform tools remain in the
        tools/test/perform folder.

        (ADB - 2021/08/10)

    - h5repack added help text for user-defined filters.

        Added help text line that states the valid values of the filter flag
        for user-defined filters;
            filter_flag: 1 is OPTIONAL or 0 is MANDATORY

        (ADB - 2021/01/14, HDFFV-11099)


    Documentation:
    --------------
    - Doxygen documentation is available when configured and generated.
      The resulting documentation files will be in the share/html subdirectory
      of the HDF5 install directory.

        (LRK - 2021/10/06)


New platforms, languages and compilers tested
=============================================
    - Linux 5.13.14-200.fc34 #1 SMP x86_64  GNU/Linux Fedora34
    - Linux 5.11.0-34-generic #36-Ubuntu SMP x86_64 GNU/Linux Ubuntu 20.04
    - Linux 5.3.18-22-default #1 SMP x86_64  GNU/Linux SUSE15sp2
    - Linux-4.14.0-115.21.2 #1 SMP ppc64le GNU/Linux
    - Linux-4.12.14-150.75-default #1 SMP x86_64 GNU/Linux
    - macOS Apple M1 11.6 Darwin 20.6.0 arm64
    - macOS Big Sur 11.3.1 Darwin 20.4.0 x86_64
    - clang versions 11.0.1, 12.0.5
    - Visual Studio 2019 w/ clang 12.0.0 with MSVC-like command-line
    

Bug Fixes since HDF5-1.10.7 release
===================================
    Library
    -------
    - Fixed a segmentation fault

      A segmentation fault occurred with a Mathworks corrupted file.

      A detection of accessing a null pointer was added to prevent the problem.

      (BMR - 2021/10/14, HDFFV-11150)

    - Detection of simple data transform function "x"

        In the case of the simple data transform function "x" the (parallel)
        library recognizes this is the same as not applying this data transform
        function. This improves the I/O performance. In the case of the parallel
        library, it also avoids breaking to independent I/O, which makes it
        possible to apply a filter when writing or reading data to or from
        teh HDF5 file.

        (JWSB - 2021/09/13)

    - Fixed an invalid read and memory leak when parsing corrupt file space
      info messages

        When the corrupt file from CVE-2020-10810 was parsed by the library,
        the code that imports the version 0 file space info object header
        message to the version 1 struct could read past the buffer read from
        the disk, causing an invalid memory read. Not catching this error would
        cause downstream errors that eventually resulted in a previously
        allocated buffer to be unfreed when the library shut down. In builds
        where the free lists are in use, this could result in an infinite loop
        and SIGABRT when the library shuts down.

        We now track the buffer size and raise an error on attempts to read
        past the end of it.

        (DER - 2021/08/12, HDFFV-11053)

    - Fixed CVE-2018-14460

        The tool h5repack produced a segfault when the rank in dataspace
        message was corrupted, causing invalid read while decoding the
        dimension sizes.

        The problem was fixed by ensuring that decoding the dimension sizes
        and max values will not go beyong the end of the buffer.

        (BMR - 2021/05/12, HDFFV-11223)

    - Fixed CVE-2018-11206

        The tool h5dump produced a segfault when the size of a fill value
        message was corrupted and caused a buffer overflow.

        The problem was fixed by verifying the fill value's size
        against the buffer size before attempting to access the buffer.

        (BMR - 2021/03/15, HDFFV-10480)

    - Fixed CVE-2018-14033 (same issue as CVE-2020-10811)

        The tool h5dump produced a segfault when the storage size message
        was corrupted and caused a buffer overflow.

        The problem was fixed by verifying the storage size against the
        buffer size before attempting to access the buffer.

        (BMR - 2021/03/15, HDFFV-11159/HDFFV-11049)

    - Remove underscores on header file guards

        Header file guards used a variety of underscores at the beginning of the define.

        Removed all leading (some trailing) underscores from header file guards.

        (ADB - 2021/03/03, #361)


    Java Library
    ------------
    - The H5FArray.java class, in which virtually the entire execution time
        is spent using the HDFNativeData method that converts from an array
        of bytes to an array of the destination Java type.

        1. Convert the entire byte array into a 1-d array of the desired type,
           rather than performing 1 conversion per row;
        2. Use the Java Arrays method copyOfRange to grab the section of the
           array from (1) that is desired to be inserted into the destination array.

        (PGT,ADB - 2020/12/29, HDFFV-10865)


    Configuration
    -------------
    - Corrected path searched by CMake find_package command

      The install path for cmake find_package files had been changed to use
        "share/cmake"
      for all platforms. However the trailing "hdf5" directory was not removed.
      This "hdf5" additional directory has been removed.

      (ADB - 2021/09/27)

    - Corrected pkg-config compile script

      It was discovered that the position of the "$@" argument for the command
      in the compile script may fail on some platforms and configurations. The
      position of the "$@"command argument was moved before the pkg-config sub command.

      (ADB - 2021/08/30)

    - Fixed CMake C++ compiler flags

      A recent refactoring of the C++ configure files accidently removed the
      file that executed the enable_language command for C++ needed by the
      HDFCXXCompilerFlags.cmake file. Also updated the intel warnings files,
      including adding support for windows platforms.

      (ADB - 2021/08/10)

    - Autotools clang debug optimization level change

      HDF5 1.10.7 erroneously sets the debug optimization level to "-g" when
      building with clang via the Autotools. This has now been set to:

        -Og     clang 4+ or Xcode 9+
        -O1     otherwise

      (DER - 2021/07/28, HDFFV-11192)

    - Better support for libaec (open-source Szip library) in CMake

      Implemented better support for libaec 1.0.5 (or later) library. This version
      of libaec contains improvements for better integration with HDF5. Furthermore,
      the variable USE_LIBAEC_STATIC has been introduced to allow to make use of
      static version of libaec library. Use libaec_DIR or libaec_ROOT to set
      the location in which libaec can be found.

      Be aware, the Szip library of libaec 1.0.4 depends on another library within
      libaec library. This dependency is not specified in the current CMake
      configuration which means that one can not use the static Szip library of
      libaec 1.0.4 when building HDF5. This has been resolved in libaec 1.0.5.

      (JWSB - 2021/06/22)

    - Refactor CMake configure for Fortran

      The Fortran configure tests for KINDs reused a single output file that was
      read to form the Integer and Real Kinds defines. However, if config was run
      more then once, the CMake completed variable prevented the tests from executing
      again and the last value saved in the file was used to create the define.
      Creating separate files for each KIND solved the issue.

      In addition the test for H5_PAC_C_MAX_REAL_PRECISION was not pulling in
      defines for proper operation and did not define H5_PAC_C_MAX_REAL_PRECISION
      correctly for a zero value. This was fixed by supplying the required defines.
      In addition it was moved from the Fortran specific HDF5UseFortran.camke file
      to the C centric ConfigureChecks.cmake file.

      (ADB - 2021/06/03)

    - Remove arbitrary warning flag groups from CMake builds

      The arbitrary groups were created to reduce the quantity of warnings being
      reported that overwhelmed testing report systems. Considerable work has
      been accomplished to reduce the warning count and these arbitrary groups
      are no longer needed.
      Also the default for all warnings, HDF5_ENABLE_ALL_WARNINGS, is now ON.

      Visual Studio warnings C4100, C4706, and C4127 have been moved to
      developer warnings, HDF5_ENABLE_DEV_WARNINGS, and are disabled for normal builds.

      (ADB - 2021/03/22, HDFFV-11228)

    - Reclassify CMake messages, to allow new modes and --log-level option

      CMake message commands have a mode argument. By default, STATUS mode
      was chosen for any non-error message. CMake version 3.15 added additional
      modes, NOTICE, VERBOSE, DEBUG and TRACE. All message commands with a mode
      of STATUS were reviewed and most were reclassified as VERBOSE. The new
      mode was protected by a check for a CMake version of at least 3.15. If CMake
      version 3.17 or above is used, the user can use the command line option
      of "--log-level" to further restrict which message commands are displayed.

      (ADB - 2021/01/11, HDFFV-11144)

    - Fixes Autotools determination of the stat struct having an st_blocks field

      A missing parenthesis in an autoconf macro prevented building the test
      code used to determine if the stat struct contains the st_blocks field.
      Now that the test functions correctly, the H5_HAVE_STAT_ST_BLOCKS #define
      found in H5pubconf.h will be defined correctly on both the Autotools and
      CMake. This #define is only used in the tests and does not affect the
      HDF5 C library.

      (DER - 2021/01/07, HDFFV-11201)


    Tools
    -----
    - Changed how h5dump and h5ls identify long double.

        Long double support is not consistent across platforms. Tools will always
        identify long double as 128-bit [little/big]-endian float nn-bit precision.
        New test file created for datasets with attributes for float, double and
        long double. In addition any unknown integer or float datatype will now
        also show the number of bits for precision.
        These files are also used in the java tests.

        (ADB - 2021/03/24, HDFFV-11229)

    - Fixed tools argument parsing.

        Tools parsing used the length of the option from the long array to match
        the option from the command line. This incorrectly matched a shorter long
        name option that happened to be a subset of another long option.
        Changed to match whole names.

        (ADB - 2021/01/19, HDFFV-11106)


    Documentation
    -------------
    - Updated doxygen comments with changes for release

      (ADB - 2021/05/17)


    C++ APIs
    --------
    - Added DataSet::operator=

        Some compilers complain if the copy constructor is given explicitly
        but the assignment operator is implicitly set to default.

        (2021/05/19)


Platforms Tested
================

    Linux 5.13.14-200.fc34           GNU gcc (GCC) 11.2.1 2021078 (Red Hat 11.2.1-1)
    #1 SMP x86_64  GNU/Linux         GNU Fortran (GCC) 11.2.1 2021078 (Red Hat 11.2.1-1)
    Fedora34                         clang version 12.0.1 (Fedora 12.0.1-1.fc34)
                                     (cmake and autotools)
    
    Linux 5.11.0-34-generic          GNU gcc (GCC) 9.3.0-17ubuntu1
    #36-Ubuntu SMP x86_64 GNU/Linux  GNU Fortran (GCC) 9.3.0-17ubuntu1
    Ubuntu 20.04                     Ubuntu clang version 10.0.0-4
                                     (cmake and autotools)
    
    Linux 5.8.0-63-generic           GNU gcc (GCC) 10.3.0-1ubuntu1
    #71-Ubuntu SMP x86_64 GNU/Linux  GNU Fortran (GCC) 10.3.0-1ubuntu1
    Ubuntu20.10                      Ubuntu clang version 11.0.0-2
                                     (cmake and autotools)
    
    Linux 5.3.18-22-default          GNU gcc (SUSE Linux) 7.5.0
    #1 SMP x86_64  GNU/Linux         GNU Fortran (SUSE Linux) 7.5.0
    SUSE15sp2                        clang version 7.0.1 (tags/RELEASE_701/final 349238)
                                     (cmake and autotools)
    
    Linux-4.14.0-115.21.2            spectrum-mpi/rolling-release
    #1 SMP ppc64le GNU/Linux             clang 8.0.1, 11.0.1
    (lassen)                             GCC 7.3.1
                                         XL 16.1.1.2
                                     (cmake)
    
    Linux-4.12.14-150.75-default     cray-mpich/7.7.10
    #1 SMP x86_64 GNU/Linux              GCC 7.3.0, 8.2.0
    (cori)                               Intel (R) Version 19.0.3.199
                                     (cmake)
    
    Linux-4.12.14-197.86-default     cray-mpich/7.7.6
    # 1SMP x86_64 GNU/Linux              GCC  7.3.0, 9.3.0, 10.2.0
    (mutrino)                            Intel (R) Version 17.0.4, 18.0.5, 19.1.3
                                     (cmake)
    
    Linux 3.10.0-1160.36.2.el7.ppc64 gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)
    #1 SMP ppc64be GNU/Linux         g++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)
    Power8 (echidna)                 GNU Fortran (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)

    Linux 3.10.0-1160.24.1.el7       GNU C (gcc), Fortran (gfortran), C++ (g++)
    #1 SMP x86_64 GNU/Linux          compilers:
    Centos7                              Version 4.8.5 20150623 (Red Hat 4.8.5-4)
    (jelly/kituo/moohan)                 Version 4.9.3, Version 5.3.0, Version 6.3.0,
                                         Version 7.2.0, Version 8.3.0, Version 9.1.0
                                     Intel(R) C (icc), C++ (icpc), Fortran (icc)
                                     compilers:
                                         Version 17.0.0.098 Build 20160721
                                     GNU C (gcc) and C++ (g++) 4.8.5 compilers
                                         with NAG Fortran Compiler Release 6.1(Tozai)
                                     Intel(R) C (icc) and C++ (icpc) 17.0.0.098 compilers
                                         with NAG Fortran Compiler Release 6.1(Tozai)
                                     MPICH 3.1.4 compiled with GCC 4.9.3
                                     MPICH 3.3 compiled with GCC 7.2.0
                                     OpenMPI 2.1.6 compiled with icc 18.0.1
                                     OpenMPI 3.1.3 and 4.0.0 compiled with GCC 7.2.0
                                     PGI C, Fortran, C++ for 64-bit target on
                                     x86_64;
                                         Version 19.10-0

    Linux-3.10.0-1127.0.0.1chaos     openmpi-4.0.0
    #1 SMP x86_64 GNU/Linux              clang 6.0.0, 11.0.1
    (quartz)                             GCC 7.3.0, 8.1.0
                                         Intel 16.0.4, 18.0.2, 19.0.4

    macOS Apple M1 11.6              Apple clang version 12.0.5 (clang-1205.0.22.11)
    Darwin 20.6.0 arm64              gfortran GNU Fortran (Homebrew GCC 11.2.0) 11.1.0
    (macmini-m1)                     Intel icc/icpc/ifort version 2021.3.0 202106092021.3.0 20210609

    macOS Big Sur 11.3.1             Apple clang version 12.0.5 (clang-1205.0.22.9)
    Darwin 20.4.0 x86_64             gfortran GNU Fortran (Homebrew GCC 10.2.0_3) 10.2.0
    (bigsur-1)                       Intel icc/icpc/ifort version 2021.2.0 20210228

    macOS High Sierra 10.13.6        Apple LLVM version 10.0.0 (clang-1000.10.44.4)
    64-bit                           gfortran GNU Fortran (GCC) 6.3.0
    (bear)                           Intel icc/icpc/ifort version 19.0.4.233 20190416

    macOS Sierra 10.12.6             Apple LLVM version 9.0.0 (clang-900.39.2)
    64-bit                           gfortran GNU Fortran (GCC) 7.4.0
    (kite)                           Intel icc/icpc/ifort version 17.0.2

    Mac OS X El Capitan 10.11.6      Apple clang version 7.3.0 from Xcode 7.3
    64-bit                           gfortran GNU Fortran (GCC) 5.2.0
    (osx1011test)                    Intel icc/icpc/ifort version 16.0.2

    Linux 2.6.32-573.22.1.el6        GNU C (gcc), Fortran (gfortran), C++ (g++)
    #1 SMP x86_64 GNU/Linux          compilers:
    Centos6                              Version 4.4.7 20120313
    (platypus)                           Version 4.9.3, 5.3.0, 6.2.0
                                     MPICH 3.1.4 compiled with GCC 4.9.3

    Windows 10 x64                   MSVC C/C++ 19.0.24215.1
    w/ Visual Studio 2015            Intel C/C++/Fortran 18.0.5.20180823
    (cmake)

    Windows 10 x64                   MSVC C/C++ 19.16.27045.0
    w/ Visual Studio 2017            Intel C/C++/Fortran 19.0.5.20190815
    (cmake)

    Windows 10 x64                   MSVC C/C++ 9.29.30133.0
    w/ Visual Studio 2019            clang C/C++ 12.0.0
    (cmake)                          IntelLLVM C/C++ 2021.3.0 with MSVC-like command-line

    Windows 10 x64                   MSVC C/C++ is 19.29.30133.0
    w/ Visual Studio 2019            MSMPI 10.1 (C only)
    (cmake)


Configuration Options Tested
on above platforms             CMake option(=ON)             Autotools option
============================   =========================     ===================
C Library
F90/F2003                      HDF5_BUILD_FORTRAN            --enable-fortran
C++                            HDF5_BUILD_CPP_LIB            --enable-cxx
Java                           HDF5_BUILD_JAVA               --enable-java
Zlib                           HDF5_ENABLE_Z_LIB_SUPPORT     --with-zlib=<dir>
SZIP(Libaec)                   HDF5_ENABLE_SZIP_SUPPORT      --with-szlib=<dir>
C/Fortran Parallel             HDF5_ENABLE_PARALLEL          --enable-parallel
Shared C,C++,F90               BUILD_SHARED_LIBS             --enable-shared(1)
Threadsafe,
    C Library only             HDF5_ENABLE_THREADSAFE        --enable-threadsafe

Other test
configurations:
clang sanitizers               HDF5_ENABLE_SANITIZERS        No sanitizer option
                                                             for autotools
    Address                    USE_SANITIZER: Address
    Leak                       USE_SANITIZER: Leak
    Memory                     USE_SANITIZER: Memory
    Undefined                  USE_SANITIZER: Undefined

VFDs:
    Direct                     HDF5_ENABLE_DIRECT_VFD         --ennable-direct-vfd
    HDFS                       HDF5_ENABLE_HDFS               --with-libhdfs=DIR
    Mirror                     HDF5_ENABLE_MIRROR_VFD         --enable-mirror-vfd
    ROS3                       HDF5_ENABLE_ROS3_VFD           --enable-ros3-vfd
================================================================================
(1) enabled by default


Known Problems
==============
    Corrupted files submitted with CVE-2019-08396 and CVE-2019-8398 that caused
    segmentation faults with h5repack in HDF5 versions before 1.10.8 are no
    longer segfaulting, but a specific fix for the problems has not yet been
    identified and is still under investigation in jira issues HDFFV-10710 and
    HDFFV-10712.  A third corrupted file submitted with CVE-2019-9152 still
    causes a segmentation fault with h5repack; details in HDFFV-10719.

    Setting a variable-length dataset fill value will leak the memory allocated
    for the p field of the hvl_t struct. A fix is in progress for this.
    HDFFV-10840

    CMake files do not behave correctly with paths containing spaces.
    Do not use spaces in paths because the required escaping for handling spaces
    results in very complex and fragile build files.
    ADB - 2019/05/07

    At present, metadata cache images may not be generated by parallel
    applications.  Parallel applications can read files with metadata cache
    images, but since this is a collective operation, a deadlock is possible
    if one or more processes do not participate.

    Two tests fail attempting collective writes with OpenMPI 3.0.0/GCC-7.2.0-2.29:
        testphdf5 (ecdsetw, selnone, cchunk1, cchunk3, cchunk4, and actualio)
        t_shapesame (sscontig2)

    CPP ptable test fails on both VS2017 and VS2019 with Intel compiler, JIRA
    issue: HDFFV-10628.  This test will pass with VS2015 with Intel compiler.

    The subsetting option in ph5diff currently will fail and should be avoided.
    The subsetting option works correctly in serial h5diff.

    Known problems in previous releases can be found in the HISTORY*.txt files
    in the HDF5 source. Please report any new problems found to
    help@hdfgroup.org.


CMake vs. Autotools installations
=================================
While both build systems produce similar results, there are differences.
Each system produces the same set of folders on linux (only CMake works
on standard Windows); bin, include, lib and share. Autotools places the
COPYING and RELEASE.txt file in the root folder, CMake places them in
the share folder.

The bin folder contains the tools and the build scripts. Additionally, CMake
creates dynamic versions of the tools with the suffix "-shared". Autotools
installs one set of tools depending on the "--enable-shared" configuration
option.
  build scripts
  -------------
  Autotools: h5c++, h5cc, h5fc
  CMake: h5c++, h5cc, h5hlc++, h5hlcc

The include folder holds the header files and the fortran mod files. CMake
places the fortran mod files into separate shared and static subfolders,
while Autotools places one set of mod files into the include folder. Because
CMake produces a tools library, the header files for tools will appear in
the include folder.

The lib folder contains the library files, and CMake adds the pkgconfig
subfolder with the hdf5*.pc files used by the bin/build scripts created by
the CMake build. CMake separates the C interface code from the fortran code by
creating C-stub libraries for each Fortran library. In addition, only CMake
installs the tools library. The names of the szip libraries are different
between the build systems.

The share folder will have the most differences because CMake builds include
a number of CMake specific files for support of CMake's find_package and support
for the HDF5 Examples CMake project.

