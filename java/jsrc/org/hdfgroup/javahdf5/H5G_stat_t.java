// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5G_stat_t {
 *     unsigned long fileno[2];
 *     unsigned long objno[2];
 *     unsigned int nlink;
 *     H5G_obj_t type;
 *     time_t mtime;
 *     size_t linklen;
 *     H5O_stat_t ohdr;
 * }
 * }
 */
public class H5G_stat_t {

    H5G_stat_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(2, hdf5_h.C_LONG).withName("fileno"),
        MemoryLayout.sequenceLayout(2, hdf5_h.C_LONG).withName("objno"),
        hdf5_h.C_INT.withName("nlink"),
        hdf5_h.C_INT.withName("type"),
        hdf5_h.C_LONG.withName("mtime"),
        hdf5_h.C_LONG.withName("linklen"),
        H5O_stat_t.layout().withName("ohdr")
    ).withName("H5G_stat_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout fileno$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("fileno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long fileno[2]
     * }
     */
    public static final SequenceLayout fileno$layout() {
        return fileno$LAYOUT;
    }

    private static final long fileno$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long fileno[2]
     * }
     */
    public static final long fileno$offset() {
        return fileno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long fileno[2]
     * }
     */
    public static MemorySegment fileno(MemorySegment struct) {
        return struct.asSlice(fileno$OFFSET, fileno$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long fileno[2]
     * }
     */
    public static void fileno(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fileno$OFFSET, fileno$LAYOUT.byteSize());
    }

    private static long[] fileno$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned long fileno[2]
     * }
     */
    public static long[] fileno$dimensions() {
        return fileno$DIMS;
    }
    private static final VarHandle fileno$ELEM_HANDLE = fileno$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned long fileno[2]
     * }
     */
    public static long fileno(MemorySegment struct, long index0) {
        return (long)fileno$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned long fileno[2]
     * }
     */
    public static void fileno(MemorySegment struct, long index0, long fieldValue) {
        fileno$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout objno$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("objno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long objno[2]
     * }
     */
    public static final SequenceLayout objno$layout() {
        return objno$LAYOUT;
    }

    private static final long objno$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long objno[2]
     * }
     */
    public static final long objno$offset() {
        return objno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long objno[2]
     * }
     */
    public static MemorySegment objno(MemorySegment struct) {
        return struct.asSlice(objno$OFFSET, objno$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long objno[2]
     * }
     */
    public static void objno(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, objno$OFFSET, objno$LAYOUT.byteSize());
    }

    private static long[] objno$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned long objno[2]
     * }
     */
    public static long[] objno$dimensions() {
        return objno$DIMS;
    }
    private static final VarHandle objno$ELEM_HANDLE = objno$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned long objno[2]
     * }
     */
    public static long objno(MemorySegment struct, long index0) {
        return (long)objno$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned long objno[2]
     * }
     */
    public static void objno(MemorySegment struct, long index0, long fieldValue) {
        objno$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt nlink$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nlink"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int nlink
     * }
     */
    public static final OfInt nlink$layout() {
        return nlink$LAYOUT;
    }

    private static final long nlink$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int nlink
     * }
     */
    public static final long nlink$offset() {
        return nlink$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int nlink
     * }
     */
    public static int nlink(MemorySegment struct) {
        return struct.get(nlink$LAYOUT, nlink$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int nlink
     * }
     */
    public static void nlink(MemorySegment struct, int fieldValue) {
        struct.set(nlink$LAYOUT, nlink$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5G_obj_t type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5G_obj_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5G_obj_t type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5G_obj_t type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfLong mtime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mtime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * time_t mtime
     * }
     */
    public static final OfLong mtime$layout() {
        return mtime$LAYOUT;
    }

    private static final long mtime$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * time_t mtime
     * }
     */
    public static final long mtime$offset() {
        return mtime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * time_t mtime
     * }
     */
    public static long mtime(MemorySegment struct) {
        return struct.get(mtime$LAYOUT, mtime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * time_t mtime
     * }
     */
    public static void mtime(MemorySegment struct, long fieldValue) {
        struct.set(mtime$LAYOUT, mtime$OFFSET, fieldValue);
    }

    private static final OfLong linklen$LAYOUT = (OfLong)$LAYOUT.select(groupElement("linklen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t linklen
     * }
     */
    public static final OfLong linklen$layout() {
        return linklen$LAYOUT;
    }

    private static final long linklen$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t linklen
     * }
     */
    public static final long linklen$offset() {
        return linklen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t linklen
     * }
     */
    public static long linklen(MemorySegment struct) {
        return struct.get(linklen$LAYOUT, linklen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t linklen
     * }
     */
    public static void linklen(MemorySegment struct, long fieldValue) {
        struct.set(linklen$LAYOUT, linklen$OFFSET, fieldValue);
    }

    private static final GroupLayout ohdr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ohdr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5O_stat_t ohdr
     * }
     */
    public static final GroupLayout ohdr$layout() {
        return ohdr$LAYOUT;
    }

    private static final long ohdr$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5O_stat_t ohdr
     * }
     */
    public static final long ohdr$offset() {
        return ohdr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5O_stat_t ohdr
     * }
     */
    public static MemorySegment ohdr(MemorySegment struct) {
        return struct.asSlice(ohdr$OFFSET, ohdr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5O_stat_t ohdr
     * }
     */
    public static void ohdr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ohdr$OFFSET, ohdr$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

