// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5FD_onion_fapl_info_t {
 *     uint8_t version;
 *     hid_t backing_fapl_id;
 *     uint32_t page_size;
 *     H5FD_onion_target_file_constant_t store_target;
 *     uint64_t revision_num;
 *     uint8_t force_write_open;
 *     uint8_t creation_flags;
 *     char comment[256];
 * }
 * }
 */
public class H5FD_onion_fapl_info_t {

    H5FD_onion_fapl_info_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(hdf5_h.C_CHAR.withName("version"), MemoryLayout.paddingLayout(7),
                          hdf5_h.C_LONG.withName("backing_fapl_id"), hdf5_h.C_INT.withName("page_size"),
                          hdf5_h.C_INT.withName("store_target"), hdf5_h.C_LONG.withName("revision_num"),
                          hdf5_h.C_CHAR.withName("force_write_open"),
                          hdf5_h.C_CHAR.withName("creation_flags"),
                          MemoryLayout.sequenceLayout(256, hdf5_h.C_CHAR).withName("comment"),
                          MemoryLayout.paddingLayout(6))
            .withName("H5FD_onion_fapl_info_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfByte version$LAYOUT = (OfByte)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static final OfByte version$layout() { return version$LAYOUT; }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static final long version$offset() { return version$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static byte version(MemorySegment struct) { return struct.get(version$LAYOUT, version$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static void version(MemorySegment struct, byte fieldValue)
    {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfLong backing_fapl_id$LAYOUT =
        (OfLong)$LAYOUT.select(groupElement("backing_fapl_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hid_t backing_fapl_id
     * }
     */
    public static final OfLong backing_fapl_id$layout() { return backing_fapl_id$LAYOUT; }

    private static final long backing_fapl_id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hid_t backing_fapl_id
     * }
     */
    public static final long backing_fapl_id$offset() { return backing_fapl_id$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hid_t backing_fapl_id
     * }
     */
    public static long backing_fapl_id(MemorySegment struct)
    {
        return struct.get(backing_fapl_id$LAYOUT, backing_fapl_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hid_t backing_fapl_id
     * }
     */
    public static void backing_fapl_id(MemorySegment struct, long fieldValue)
    {
        struct.set(backing_fapl_id$LAYOUT, backing_fapl_id$OFFSET, fieldValue);
    }

    private static final OfInt page_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("page_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t page_size
     * }
     */
    public static final OfInt page_size$layout() { return page_size$LAYOUT; }

    private static final long page_size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t page_size
     * }
     */
    public static final long page_size$offset() { return page_size$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t page_size
     * }
     */
    public static int page_size(MemorySegment struct)
    {
        return struct.get(page_size$LAYOUT, page_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t page_size
     * }
     */
    public static void page_size(MemorySegment struct, int fieldValue)
    {
        struct.set(page_size$LAYOUT, page_size$OFFSET, fieldValue);
    }

    private static final OfInt store_target$LAYOUT = (OfInt)$LAYOUT.select(groupElement("store_target"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5FD_onion_target_file_constant_t store_target
     * }
     */
    public static final OfInt store_target$layout() { return store_target$LAYOUT; }

    private static final long store_target$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5FD_onion_target_file_constant_t store_target
     * }
     */
    public static final long store_target$offset() { return store_target$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5FD_onion_target_file_constant_t store_target
     * }
     */
    public static int store_target(MemorySegment struct)
    {
        return struct.get(store_target$LAYOUT, store_target$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5FD_onion_target_file_constant_t store_target
     * }
     */
    public static void store_target(MemorySegment struct, int fieldValue)
    {
        struct.set(store_target$LAYOUT, store_target$OFFSET, fieldValue);
    }

    private static final OfLong revision_num$LAYOUT = (OfLong)$LAYOUT.select(groupElement("revision_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t revision_num
     * }
     */
    public static final OfLong revision_num$layout() { return revision_num$LAYOUT; }

    private static final long revision_num$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t revision_num
     * }
     */
    public static final long revision_num$offset() { return revision_num$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t revision_num
     * }
     */
    public static long revision_num(MemorySegment struct)
    {
        return struct.get(revision_num$LAYOUT, revision_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t revision_num
     * }
     */
    public static void revision_num(MemorySegment struct, long fieldValue)
    {
        struct.set(revision_num$LAYOUT, revision_num$OFFSET, fieldValue);
    }

    private static final OfByte force_write_open$LAYOUT =
        (OfByte)$LAYOUT.select(groupElement("force_write_open"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t force_write_open
     * }
     */
    public static final OfByte force_write_open$layout() { return force_write_open$LAYOUT; }

    private static final long force_write_open$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t force_write_open
     * }
     */
    public static final long force_write_open$offset() { return force_write_open$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t force_write_open
     * }
     */
    public static byte force_write_open(MemorySegment struct)
    {
        return struct.get(force_write_open$LAYOUT, force_write_open$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t force_write_open
     * }
     */
    public static void force_write_open(MemorySegment struct, byte fieldValue)
    {
        struct.set(force_write_open$LAYOUT, force_write_open$OFFSET, fieldValue);
    }

    private static final OfByte creation_flags$LAYOUT =
        (OfByte)$LAYOUT.select(groupElement("creation_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t creation_flags
     * }
     */
    public static final OfByte creation_flags$layout() { return creation_flags$LAYOUT; }

    private static final long creation_flags$OFFSET = 33;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t creation_flags
     * }
     */
    public static final long creation_flags$offset() { return creation_flags$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t creation_flags
     * }
     */
    public static byte creation_flags(MemorySegment struct)
    {
        return struct.get(creation_flags$LAYOUT, creation_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t creation_flags
     * }
     */
    public static void creation_flags(MemorySegment struct, byte fieldValue)
    {
        struct.set(creation_flags$LAYOUT, creation_flags$OFFSET, fieldValue);
    }

    private static final SequenceLayout comment$LAYOUT =
        (SequenceLayout)$LAYOUT.select(groupElement("comment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char comment[256]
     * }
     */
    public static final SequenceLayout comment$layout() { return comment$LAYOUT; }

    private static final long comment$OFFSET = 34;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char comment[256]
     * }
     */
    public static final long comment$offset() { return comment$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char comment[256]
     * }
     */
    public static MemorySegment comment(MemorySegment struct)
    {
        return struct.asSlice(comment$OFFSET, comment$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char comment[256]
     * }
     */
    public static void comment(MemorySegment struct, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, struct, comment$OFFSET, comment$LAYOUT.byteSize());
    }

    private static long[] comment$DIMS = {256};

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char comment[256]
     * }
     */
    public static long[] comment$dimensions() { return comment$DIMS; }
    private static final VarHandle comment$ELEM_HANDLE = comment$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char comment[256]
     * }
     */
    public static byte comment(MemorySegment struct, long index0)
    {
        return (byte)comment$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char comment[256]
     * }
     */
    public static void comment(MemorySegment struct, long index0, byte fieldValue)
    {
        comment$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
