// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5F_info2_t {
 *     struct {
 *         unsigned int version;
 *         hsize_t super_size;
 *         hsize_t super_ext_size;
 *     } super;
 *     struct {
 *         unsigned int version;
 *         hsize_t meta_size;
 *         hsize_t tot_space;
 *     } free;
 *     struct {
 *         unsigned int version;
 *         hsize_t hdr_size;
 *         H5_ih_info_t msgs_info;
 *     } sohm;
 * }
 * }
 */
public class H5F_info2_t {

    H5F_info2_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        H5F_info2_t.super_.layout().withName("super"),
        H5F_info2_t.free.layout().withName("free"),
        H5F_info2_t.sohm.layout().withName("sohm")
    ).withName("H5F_info2_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t super_size;
     *     hsize_t super_ext_size;
     * }
     * }
     */
    public static class super_ {

        super_() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            hdf5_h.C_INT.withName("version"),
            MemoryLayout.paddingLayout(4),
            hdf5_h.C_LONG.withName("super_size"),
            hdf5_h.C_LONG.withName("super_ext_size")
        ).withName("$anon$126:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned int version
         * }
         */
        public static final OfInt version$layout() {
            return version$LAYOUT;
        }

        private static final long version$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned int version
         * }
         */
        public static final long version$offset() {
            return version$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned int version
         * }
         */
        public static int version(MemorySegment struct) {
            return struct.get(version$LAYOUT, version$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned int version
         * }
         */
        public static void version(MemorySegment struct, int fieldValue) {
            struct.set(version$LAYOUT, version$OFFSET, fieldValue);
        }

        private static final OfLong super_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("super_size"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hsize_t super_size
         * }
         */
        public static final OfLong super_size$layout() {
            return super_size$LAYOUT;
        }

        private static final long super_size$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hsize_t super_size
         * }
         */
        public static final long super_size$offset() {
            return super_size$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hsize_t super_size
         * }
         */
        public static long super_size(MemorySegment struct) {
            return struct.get(super_size$LAYOUT, super_size$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hsize_t super_size
         * }
         */
        public static void super_size(MemorySegment struct, long fieldValue) {
            struct.set(super_size$LAYOUT, super_size$OFFSET, fieldValue);
        }

        private static final OfLong super_ext_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("super_ext_size"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hsize_t super_ext_size
         * }
         */
        public static final OfLong super_ext_size$layout() {
            return super_ext_size$LAYOUT;
        }

        private static final long super_ext_size$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hsize_t super_ext_size
         * }
         */
        public static final long super_ext_size$offset() {
            return super_ext_size$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hsize_t super_ext_size
         * }
         */
        public static long super_ext_size(MemorySegment struct) {
            return struct.get(super_ext_size$LAYOUT, super_ext_size$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hsize_t super_ext_size
         * }
         */
        public static void super_ext_size(MemorySegment struct, long fieldValue) {
            struct.set(super_ext_size$LAYOUT, super_ext_size$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout super_$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("super"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t super_size;
     *     hsize_t super_ext_size;
     * } super
     * }
     */
    public static final GroupLayout super_$layout() {
        return super_$LAYOUT;
    }

    private static final long super_$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t super_size;
     *     hsize_t super_ext_size;
     * } super
     * }
     */
    public static final long super_$offset() {
        return super_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t super_size;
     *     hsize_t super_ext_size;
     * } super
     * }
     */
    public static MemorySegment super_(MemorySegment struct) {
        return struct.asSlice(super_$OFFSET, super_$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t super_size;
     *     hsize_t super_ext_size;
     * } super
     * }
     */
    public static void super_(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, super_$OFFSET, super_$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t meta_size;
     *     hsize_t tot_space;
     * }
     * }
     */
    public static class free {

        free() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            hdf5_h.C_INT.withName("version"),
            MemoryLayout.paddingLayout(4),
            hdf5_h.C_LONG.withName("meta_size"),
            hdf5_h.C_LONG.withName("tot_space")
        ).withName("$anon$131:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned int version
         * }
         */
        public static final OfInt version$layout() {
            return version$LAYOUT;
        }

        private static final long version$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned int version
         * }
         */
        public static final long version$offset() {
            return version$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned int version
         * }
         */
        public static int version(MemorySegment struct) {
            return struct.get(version$LAYOUT, version$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned int version
         * }
         */
        public static void version(MemorySegment struct, int fieldValue) {
            struct.set(version$LAYOUT, version$OFFSET, fieldValue);
        }

        private static final OfLong meta_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("meta_size"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hsize_t meta_size
         * }
         */
        public static final OfLong meta_size$layout() {
            return meta_size$LAYOUT;
        }

        private static final long meta_size$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hsize_t meta_size
         * }
         */
        public static final long meta_size$offset() {
            return meta_size$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hsize_t meta_size
         * }
         */
        public static long meta_size(MemorySegment struct) {
            return struct.get(meta_size$LAYOUT, meta_size$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hsize_t meta_size
         * }
         */
        public static void meta_size(MemorySegment struct, long fieldValue) {
            struct.set(meta_size$LAYOUT, meta_size$OFFSET, fieldValue);
        }

        private static final OfLong tot_space$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tot_space"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hsize_t tot_space
         * }
         */
        public static final OfLong tot_space$layout() {
            return tot_space$LAYOUT;
        }

        private static final long tot_space$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hsize_t tot_space
         * }
         */
        public static final long tot_space$offset() {
            return tot_space$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hsize_t tot_space
         * }
         */
        public static long tot_space(MemorySegment struct) {
            return struct.get(tot_space$LAYOUT, tot_space$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hsize_t tot_space
         * }
         */
        public static void tot_space(MemorySegment struct, long fieldValue) {
            struct.set(tot_space$LAYOUT, tot_space$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout free$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t meta_size;
     *     hsize_t tot_space;
     * } free
     * }
     */
    public static final GroupLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t meta_size;
     *     hsize_t tot_space;
     * } free
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t meta_size;
     *     hsize_t tot_space;
     * } free
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.asSlice(free$OFFSET, free$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t meta_size;
     *     hsize_t tot_space;
     * } free
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, free$OFFSET, free$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t hdr_size;
     *     H5_ih_info_t msgs_info;
     * }
     * }
     */
    public static class sohm {

        sohm() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            hdf5_h.C_INT.withName("version"),
            MemoryLayout.paddingLayout(4),
            hdf5_h.C_LONG.withName("hdr_size"),
            H5_ih_info_t.layout().withName("msgs_info")
        ).withName("$anon$136:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned int version
         * }
         */
        public static final OfInt version$layout() {
            return version$LAYOUT;
        }

        private static final long version$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned int version
         * }
         */
        public static final long version$offset() {
            return version$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned int version
         * }
         */
        public static int version(MemorySegment struct) {
            return struct.get(version$LAYOUT, version$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned int version
         * }
         */
        public static void version(MemorySegment struct, int fieldValue) {
            struct.set(version$LAYOUT, version$OFFSET, fieldValue);
        }

        private static final OfLong hdr_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hdr_size"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hsize_t hdr_size
         * }
         */
        public static final OfLong hdr_size$layout() {
            return hdr_size$LAYOUT;
        }

        private static final long hdr_size$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hsize_t hdr_size
         * }
         */
        public static final long hdr_size$offset() {
            return hdr_size$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hsize_t hdr_size
         * }
         */
        public static long hdr_size(MemorySegment struct) {
            return struct.get(hdr_size$LAYOUT, hdr_size$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hsize_t hdr_size
         * }
         */
        public static void hdr_size(MemorySegment struct, long fieldValue) {
            struct.set(hdr_size$LAYOUT, hdr_size$OFFSET, fieldValue);
        }

        private static final GroupLayout msgs_info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("msgs_info"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * H5_ih_info_t msgs_info
         * }
         */
        public static final GroupLayout msgs_info$layout() {
            return msgs_info$LAYOUT;
        }

        private static final long msgs_info$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * H5_ih_info_t msgs_info
         * }
         */
        public static final long msgs_info$offset() {
            return msgs_info$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * H5_ih_info_t msgs_info
         * }
         */
        public static MemorySegment msgs_info(MemorySegment struct) {
            return struct.asSlice(msgs_info$OFFSET, msgs_info$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * H5_ih_info_t msgs_info
         * }
         */
        public static void msgs_info(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, msgs_info$OFFSET, msgs_info$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout sohm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sohm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t hdr_size;
     *     H5_ih_info_t msgs_info;
     * } sohm
     * }
     */
    public static final GroupLayout sohm$layout() {
        return sohm$LAYOUT;
    }

    private static final long sohm$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t hdr_size;
     *     H5_ih_info_t msgs_info;
     * } sohm
     * }
     */
    public static final long sohm$offset() {
        return sohm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t hdr_size;
     *     H5_ih_info_t msgs_info;
     * } sohm
     * }
     */
    public static MemorySegment sohm(MemorySegment struct) {
        return struct.asSlice(sohm$OFFSET, sohm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int version;
     *     hsize_t hdr_size;
     *     H5_ih_info_t msgs_info;
     * } sohm
     * }
     */
    public static void sohm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sohm$OFFSET, sohm$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

