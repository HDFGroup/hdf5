// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5O_native_info_t {
 *     H5O_hdr_info_t hdr;
 *     struct {
 *         H5_ih_info_t obj;
 *         H5_ih_info_t attr;
 *     } meta_size;
 * }
 * }
 */
public class H5O_native_info_t {

    H5O_native_info_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(H5O_hdr_info_t.layout().withName("hdr"),
                          H5O_native_info_t.meta_size.layout().withName("meta_size"))
            .withName("H5O_native_info_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final GroupLayout hdr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("hdr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5O_hdr_info_t hdr
     * }
     */
    public static final GroupLayout hdr$layout() { return hdr$LAYOUT; }

    private static final long hdr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5O_hdr_info_t hdr
     * }
     */
    public static final long hdr$offset() { return hdr$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5O_hdr_info_t hdr
     * }
     */
    public static MemorySegment hdr(MemorySegment struct)
    {
        return struct.asSlice(hdr$OFFSET, hdr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5O_hdr_info_t hdr
     * }
     */
    public static void hdr(MemorySegment struct, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, struct, hdr$OFFSET, hdr$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     H5_ih_info_t obj;
     *     H5_ih_info_t attr;
     * }
     * }
     */
    public static class meta_size {

        meta_size()
        {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT =
            MemoryLayout
                .structLayout(H5_ih_info_t.layout().withName("obj"), H5_ih_info_t.layout().withName("attr"))
                .withName("$anon$166:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() { return $LAYOUT; }

        private static final GroupLayout obj$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("obj"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * H5_ih_info_t obj
         * }
         */
        public static final GroupLayout obj$layout() { return obj$LAYOUT; }

        private static final long obj$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * H5_ih_info_t obj
         * }
         */
        public static final long obj$offset() { return obj$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * H5_ih_info_t obj
         * }
         */
        public static MemorySegment obj(MemorySegment struct)
        {
            return struct.asSlice(obj$OFFSET, obj$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * H5_ih_info_t obj
         * }
         */
        public static void obj(MemorySegment struct, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, struct, obj$OFFSET, obj$LAYOUT.byteSize());
        }

        private static final GroupLayout attr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("attr"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * H5_ih_info_t attr
         * }
         */
        public static final GroupLayout attr$layout() { return attr$LAYOUT; }

        private static final long attr$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * H5_ih_info_t attr
         * }
         */
        public static final long attr$offset() { return attr$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * H5_ih_info_t attr
         * }
         */
        public static MemorySegment attr(MemorySegment struct)
        {
            return struct.asSlice(attr$OFFSET, attr$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * H5_ih_info_t attr
         * }
         */
        public static void attr(MemorySegment struct, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, struct, attr$OFFSET, attr$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index)
        {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator)
        {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
        {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout meta_size$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("meta_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     H5_ih_info_t obj;
     *     H5_ih_info_t attr;
     * } meta_size
     * }
     */
    public static final GroupLayout meta_size$layout() { return meta_size$LAYOUT; }

    private static final long meta_size$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     H5_ih_info_t obj;
     *     H5_ih_info_t attr;
     * } meta_size
     * }
     */
    public static final long meta_size$offset() { return meta_size$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     H5_ih_info_t obj;
     *     H5_ih_info_t attr;
     * } meta_size
     * }
     */
    public static MemorySegment meta_size(MemorySegment struct)
    {
        return struct.asSlice(meta_size$OFFSET, meta_size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     H5_ih_info_t obj;
     *     H5_ih_info_t attr;
     * } meta_size
     * }
     */
    public static void meta_size(MemorySegment struct, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, struct, meta_size$OFFSET, meta_size$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
