// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5FD_ctl_memcpy_args_t {
 *     void *dstbuf;
 *     hsize_t dst_off;
 *     const void *srcbuf;
 *     hsize_t src_off;
 *     size_t len;
 * }
 * }
 */
public class H5FD_ctl_memcpy_args_t {

    H5FD_ctl_memcpy_args_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_POINTER.withName("dstbuf"),
        hdf5_h.C_LONG.withName("dst_off"),
        hdf5_h.C_POINTER.withName("srcbuf"),
        hdf5_h.C_LONG.withName("src_off"),
        hdf5_h.C_LONG.withName("len")
    ).withName("H5FD_ctl_memcpy_args_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout dstbuf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dstbuf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *dstbuf
     * }
     */
    public static final AddressLayout dstbuf$layout() {
        return dstbuf$LAYOUT;
    }

    private static final long dstbuf$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *dstbuf
     * }
     */
    public static final long dstbuf$offset() {
        return dstbuf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *dstbuf
     * }
     */
    public static MemorySegment dstbuf(MemorySegment struct) {
        return struct.get(dstbuf$LAYOUT, dstbuf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *dstbuf
     * }
     */
    public static void dstbuf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dstbuf$LAYOUT, dstbuf$OFFSET, fieldValue);
    }

    private static final OfLong dst_off$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dst_off"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t dst_off
     * }
     */
    public static final OfLong dst_off$layout() {
        return dst_off$LAYOUT;
    }

    private static final long dst_off$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t dst_off
     * }
     */
    public static final long dst_off$offset() {
        return dst_off$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t dst_off
     * }
     */
    public static long dst_off(MemorySegment struct) {
        return struct.get(dst_off$LAYOUT, dst_off$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t dst_off
     * }
     */
    public static void dst_off(MemorySegment struct, long fieldValue) {
        struct.set(dst_off$LAYOUT, dst_off$OFFSET, fieldValue);
    }

    private static final AddressLayout srcbuf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("srcbuf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *srcbuf
     * }
     */
    public static final AddressLayout srcbuf$layout() {
        return srcbuf$LAYOUT;
    }

    private static final long srcbuf$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *srcbuf
     * }
     */
    public static final long srcbuf$offset() {
        return srcbuf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *srcbuf
     * }
     */
    public static MemorySegment srcbuf(MemorySegment struct) {
        return struct.get(srcbuf$LAYOUT, srcbuf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *srcbuf
     * }
     */
    public static void srcbuf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(srcbuf$LAYOUT, srcbuf$OFFSET, fieldValue);
    }

    private static final OfLong src_off$LAYOUT = (OfLong)$LAYOUT.select(groupElement("src_off"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t src_off
     * }
     */
    public static final OfLong src_off$layout() {
        return src_off$LAYOUT;
    }

    private static final long src_off$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t src_off
     * }
     */
    public static final long src_off$offset() {
        return src_off$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t src_off
     * }
     */
    public static long src_off(MemorySegment struct) {
        return struct.get(src_off$LAYOUT, src_off$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t src_off
     * }
     */
    public static void src_off(MemorySegment struct, long fieldValue) {
        struct.set(src_off$LAYOUT, src_off$OFFSET, fieldValue);
    }

    private static final OfLong len$LAYOUT = (OfLong)$LAYOUT.select(groupElement("len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t len
     * }
     */
    public static final OfLong len$layout() {
        return len$LAYOUT;
    }

    private static final long len$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t len
     * }
     */
    public static final long len$offset() {
        return len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t len
     * }
     */
    public static long len(MemorySegment struct) {
        return struct.get(len$LAYOUT, len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t len
     * }
     */
    public static void len(MemorySegment struct, long fieldValue) {
        struct.set(len$LAYOUT, len$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

