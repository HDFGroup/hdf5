// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5VL_native_file_get_page_buffering_stats_t {
 *     unsigned int *accesses;
 *     unsigned int *hits;
 *     unsigned int *misses;
 *     unsigned int *evictions;
 *     unsigned int *bypasses;
 * }
 * }
 */
public class H5VL_native_file_get_page_buffering_stats_t {

    H5VL_native_file_get_page_buffering_stats_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_POINTER.withName("accesses"),
        hdf5_h.C_POINTER.withName("hits"),
        hdf5_h.C_POINTER.withName("misses"),
        hdf5_h.C_POINTER.withName("evictions"),
        hdf5_h.C_POINTER.withName("bypasses")
    ).withName("H5VL_native_file_get_page_buffering_stats_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout accesses$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("accesses"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *accesses
     * }
     */
    public static final AddressLayout accesses$layout() {
        return accesses$LAYOUT;
    }

    private static final long accesses$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *accesses
     * }
     */
    public static final long accesses$offset() {
        return accesses$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *accesses
     * }
     */
    public static MemorySegment accesses(MemorySegment struct) {
        return struct.get(accesses$LAYOUT, accesses$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *accesses
     * }
     */
    public static void accesses(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(accesses$LAYOUT, accesses$OFFSET, fieldValue);
    }

    private static final AddressLayout hits$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *hits
     * }
     */
    public static final AddressLayout hits$layout() {
        return hits$LAYOUT;
    }

    private static final long hits$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *hits
     * }
     */
    public static final long hits$offset() {
        return hits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *hits
     * }
     */
    public static MemorySegment hits(MemorySegment struct) {
        return struct.get(hits$LAYOUT, hits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *hits
     * }
     */
    public static void hits(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hits$LAYOUT, hits$OFFSET, fieldValue);
    }

    private static final AddressLayout misses$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("misses"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *misses
     * }
     */
    public static final AddressLayout misses$layout() {
        return misses$LAYOUT;
    }

    private static final long misses$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *misses
     * }
     */
    public static final long misses$offset() {
        return misses$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *misses
     * }
     */
    public static MemorySegment misses(MemorySegment struct) {
        return struct.get(misses$LAYOUT, misses$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *misses
     * }
     */
    public static void misses(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(misses$LAYOUT, misses$OFFSET, fieldValue);
    }

    private static final AddressLayout evictions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("evictions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *evictions
     * }
     */
    public static final AddressLayout evictions$layout() {
        return evictions$LAYOUT;
    }

    private static final long evictions$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *evictions
     * }
     */
    public static final long evictions$offset() {
        return evictions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *evictions
     * }
     */
    public static MemorySegment evictions(MemorySegment struct) {
        return struct.get(evictions$LAYOUT, evictions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *evictions
     * }
     */
    public static void evictions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(evictions$LAYOUT, evictions$OFFSET, fieldValue);
    }

    private static final AddressLayout bypasses$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("bypasses"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *bypasses
     * }
     */
    public static final AddressLayout bypasses$layout() {
        return bypasses$LAYOUT;
    }

    private static final long bypasses$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *bypasses
     * }
     */
    public static final long bypasses$offset() {
        return bypasses$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *bypasses
     * }
     */
    public static MemorySegment bypasses(MemorySegment struct) {
        return struct.get(bypasses$LAYOUT, bypasses$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *bypasses
     * }
     */
    public static void bypasses(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(bypasses$LAYOUT, bypasses$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

