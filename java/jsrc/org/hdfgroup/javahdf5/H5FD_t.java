// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5FD_t {
 *     hid_t driver_id;
 *     const H5FD_class_t *cls;
 *     unsigned long fileno;
 *     unsigned int access_flags;
 *     unsigned long feature_flags;
 *     haddr_t maxaddr;
 *     haddr_t base_addr;
 *     hsize_t threshold;
 *     hsize_t alignment;
 *     hbool_t paged_aggr;
 * }
 * }
 */
public class H5FD_t {

    H5FD_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_LONG.withName("driver_id"),
        hdf5_h.C_POINTER.withName("cls"),
        hdf5_h.C_LONG.withName("fileno"),
        hdf5_h.C_INT.withName("access_flags"),
        MemoryLayout.paddingLayout(4),
        hdf5_h.C_LONG.withName("feature_flags"),
        hdf5_h.C_LONG.withName("maxaddr"),
        hdf5_h.C_LONG.withName("base_addr"),
        hdf5_h.C_LONG.withName("threshold"),
        hdf5_h.C_LONG.withName("alignment"),
        hdf5_h.C_BOOL.withName("paged_aggr"),
        MemoryLayout.paddingLayout(7)
    ).withName("H5FD_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong driver_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("driver_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hid_t driver_id
     * }
     */
    public static final OfLong driver_id$layout() {
        return driver_id$LAYOUT;
    }

    private static final long driver_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hid_t driver_id
     * }
     */
    public static final long driver_id$offset() {
        return driver_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hid_t driver_id
     * }
     */
    public static long driver_id(MemorySegment struct) {
        return struct.get(driver_id$LAYOUT, driver_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hid_t driver_id
     * }
     */
    public static void driver_id(MemorySegment struct, long fieldValue) {
        struct.set(driver_id$LAYOUT, driver_id$OFFSET, fieldValue);
    }

    private static final AddressLayout cls$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cls"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const H5FD_class_t *cls
     * }
     */
    public static final AddressLayout cls$layout() {
        return cls$LAYOUT;
    }

    private static final long cls$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const H5FD_class_t *cls
     * }
     */
    public static final long cls$offset() {
        return cls$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const H5FD_class_t *cls
     * }
     */
    public static MemorySegment cls(MemorySegment struct) {
        return struct.get(cls$LAYOUT, cls$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const H5FD_class_t *cls
     * }
     */
    public static void cls(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cls$LAYOUT, cls$OFFSET, fieldValue);
    }

    private static final OfLong fileno$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fileno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long fileno
     * }
     */
    public static final OfLong fileno$layout() {
        return fileno$LAYOUT;
    }

    private static final long fileno$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long fileno
     * }
     */
    public static final long fileno$offset() {
        return fileno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long fileno
     * }
     */
    public static long fileno(MemorySegment struct) {
        return struct.get(fileno$LAYOUT, fileno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long fileno
     * }
     */
    public static void fileno(MemorySegment struct, long fieldValue) {
        struct.set(fileno$LAYOUT, fileno$OFFSET, fieldValue);
    }

    private static final OfInt access_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("access_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int access_flags
     * }
     */
    public static final OfInt access_flags$layout() {
        return access_flags$LAYOUT;
    }

    private static final long access_flags$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int access_flags
     * }
     */
    public static final long access_flags$offset() {
        return access_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int access_flags
     * }
     */
    public static int access_flags(MemorySegment struct) {
        return struct.get(access_flags$LAYOUT, access_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int access_flags
     * }
     */
    public static void access_flags(MemorySegment struct, int fieldValue) {
        struct.set(access_flags$LAYOUT, access_flags$OFFSET, fieldValue);
    }

    private static final OfLong feature_flags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("feature_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long feature_flags
     * }
     */
    public static final OfLong feature_flags$layout() {
        return feature_flags$LAYOUT;
    }

    private static final long feature_flags$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long feature_flags
     * }
     */
    public static final long feature_flags$offset() {
        return feature_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long feature_flags
     * }
     */
    public static long feature_flags(MemorySegment struct) {
        return struct.get(feature_flags$LAYOUT, feature_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long feature_flags
     * }
     */
    public static void feature_flags(MemorySegment struct, long fieldValue) {
        struct.set(feature_flags$LAYOUT, feature_flags$OFFSET, fieldValue);
    }

    private static final OfLong maxaddr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("maxaddr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * haddr_t maxaddr
     * }
     */
    public static final OfLong maxaddr$layout() {
        return maxaddr$LAYOUT;
    }

    private static final long maxaddr$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * haddr_t maxaddr
     * }
     */
    public static final long maxaddr$offset() {
        return maxaddr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * haddr_t maxaddr
     * }
     */
    public static long maxaddr(MemorySegment struct) {
        return struct.get(maxaddr$LAYOUT, maxaddr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * haddr_t maxaddr
     * }
     */
    public static void maxaddr(MemorySegment struct, long fieldValue) {
        struct.set(maxaddr$LAYOUT, maxaddr$OFFSET, fieldValue);
    }

    private static final OfLong base_addr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("base_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * haddr_t base_addr
     * }
     */
    public static final OfLong base_addr$layout() {
        return base_addr$LAYOUT;
    }

    private static final long base_addr$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * haddr_t base_addr
     * }
     */
    public static final long base_addr$offset() {
        return base_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * haddr_t base_addr
     * }
     */
    public static long base_addr(MemorySegment struct) {
        return struct.get(base_addr$LAYOUT, base_addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * haddr_t base_addr
     * }
     */
    public static void base_addr(MemorySegment struct, long fieldValue) {
        struct.set(base_addr$LAYOUT, base_addr$OFFSET, fieldValue);
    }

    private static final OfLong threshold$LAYOUT = (OfLong)$LAYOUT.select(groupElement("threshold"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t threshold
     * }
     */
    public static final OfLong threshold$layout() {
        return threshold$LAYOUT;
    }

    private static final long threshold$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t threshold
     * }
     */
    public static final long threshold$offset() {
        return threshold$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t threshold
     * }
     */
    public static long threshold(MemorySegment struct) {
        return struct.get(threshold$LAYOUT, threshold$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t threshold
     * }
     */
    public static void threshold(MemorySegment struct, long fieldValue) {
        struct.set(threshold$LAYOUT, threshold$OFFSET, fieldValue);
    }

    private static final OfLong alignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("alignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t alignment
     * }
     */
    public static final OfLong alignment$layout() {
        return alignment$LAYOUT;
    }

    private static final long alignment$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t alignment
     * }
     */
    public static final long alignment$offset() {
        return alignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t alignment
     * }
     */
    public static long alignment(MemorySegment struct) {
        return struct.get(alignment$LAYOUT, alignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t alignment
     * }
     */
    public static void alignment(MemorySegment struct, long fieldValue) {
        struct.set(alignment$LAYOUT, alignment$OFFSET, fieldValue);
    }

    private static final OfBoolean paged_aggr$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("paged_aggr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hbool_t paged_aggr
     * }
     */
    public static final OfBoolean paged_aggr$layout() {
        return paged_aggr$LAYOUT;
    }

    private static final long paged_aggr$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hbool_t paged_aggr
     * }
     */
    public static final long paged_aggr$offset() {
        return paged_aggr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hbool_t paged_aggr
     * }
     */
    public static boolean paged_aggr(MemorySegment struct) {
        return struct.get(paged_aggr$LAYOUT, paged_aggr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hbool_t paged_aggr
     * }
     */
    public static void paged_aggr(MemorySegment struct, boolean fieldValue) {
        struct.set(paged_aggr$LAYOUT, paged_aggr$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

