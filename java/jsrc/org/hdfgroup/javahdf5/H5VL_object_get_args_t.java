// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5VL_object_get_args_t {
 *     H5VL_object_get_t op_type;
 *     union {
 *         struct {
 *             void **file;
 *         } get_file;
 *         struct {
 *             size_t buf_size;
 *             char *buf;
 *             size_t *name_len;
 *         } get_name;
 *         struct {
 *             H5O_type_t *obj_type;
 *         } get_type;
 *         struct {
 *             unsigned int fields;
 *             H5O_info2_t *oinfo;
 *         } get_info;
 *     } args;
 * }
 * }
 */
public class H5VL_object_get_args_t {

    H5VL_object_get_args_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_INT.withName("op_type"),
        MemoryLayout.paddingLayout(4),
        H5VL_object_get_args_t.args.layout().withName("args")
    ).withName("H5VL_object_get_args_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt op_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("op_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_object_get_t op_type
     * }
     */
    public static final OfInt op_type$layout() {
        return op_type$LAYOUT;
    }

    private static final long op_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_object_get_t op_type
     * }
     */
    public static final long op_type$offset() {
        return op_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_object_get_t op_type
     * }
     */
    public static int op_type(MemorySegment struct) {
        return struct.get(op_type$LAYOUT, op_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_object_get_t op_type
     * }
     */
    public static void op_type(MemorySegment struct, int fieldValue) {
        struct.set(op_type$LAYOUT, op_type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct {
     *         void **file;
     *     } get_file;
     *     struct {
     *         size_t buf_size;
     *         char *buf;
     *         size_t *name_len;
     *     } get_name;
     *     struct {
     *         H5O_type_t *obj_type;
     *     } get_type;
     *     struct {
     *         unsigned int fields;
     *         H5O_info2_t *oinfo;
     *     } get_info;
     * }
     * }
     */
    public static class args {

        args() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            H5VL_object_get_args_t.args.get_file.layout().withName("get_file"),
            H5VL_object_get_args_t.args.get_name.layout().withName("get_name"),
            H5VL_object_get_args_t.args.get_type.layout().withName("get_type"),
            H5VL_object_get_args_t.args.get_info.layout().withName("get_info")
        ).withName("$anon$688:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     void **file;
         * }
         * }
         */
        public static class get_file {

            get_file() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                hdf5_h.C_POINTER.withName("file")
            ).withName("$anon$690:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout file$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("file"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * void **file
             * }
             */
            public static final AddressLayout file$layout() {
                return file$LAYOUT;
            }

            private static final long file$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * void **file
             * }
             */
            public static final long file$offset() {
                return file$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * void **file
             * }
             */
            public static MemorySegment file(MemorySegment struct) {
                return struct.get(file$LAYOUT, file$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * void **file
             * }
             */
            public static void file(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(file$LAYOUT, file$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout get_file$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_file"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     void **file;
         * } get_file
         * }
         */
        public static final GroupLayout get_file$layout() {
            return get_file$LAYOUT;
        }

        private static final long get_file$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     void **file;
         * } get_file
         * }
         */
        public static final long get_file$offset() {
            return get_file$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     void **file;
         * } get_file
         * }
         */
        public static MemorySegment get_file(MemorySegment union) {
            return union.asSlice(get_file$OFFSET, get_file$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     void **file;
         * } get_file
         * }
         */
        public static void get_file(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, get_file$OFFSET, get_file$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     size_t buf_size;
         *     char *buf;
         *     size_t *name_len;
         * }
         * }
         */
        public static class get_name {

            get_name() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                hdf5_h.C_LONG.withName("buf_size"),
                hdf5_h.C_POINTER.withName("buf"),
                hdf5_h.C_POINTER.withName("name_len")
            ).withName("$anon$695:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final OfLong buf_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("buf_size"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * size_t buf_size
             * }
             */
            public static final OfLong buf_size$layout() {
                return buf_size$LAYOUT;
            }

            private static final long buf_size$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * size_t buf_size
             * }
             */
            public static final long buf_size$offset() {
                return buf_size$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * size_t buf_size
             * }
             */
            public static long buf_size(MemorySegment struct) {
                return struct.get(buf_size$LAYOUT, buf_size$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * size_t buf_size
             * }
             */
            public static void buf_size(MemorySegment struct, long fieldValue) {
                struct.set(buf_size$LAYOUT, buf_size$OFFSET, fieldValue);
            }

            private static final AddressLayout buf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buf"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * char *buf
             * }
             */
            public static final AddressLayout buf$layout() {
                return buf$LAYOUT;
            }

            private static final long buf$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * char *buf
             * }
             */
            public static final long buf$offset() {
                return buf$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * char *buf
             * }
             */
            public static MemorySegment buf(MemorySegment struct) {
                return struct.get(buf$LAYOUT, buf$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * char *buf
             * }
             */
            public static void buf(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(buf$LAYOUT, buf$OFFSET, fieldValue);
            }

            private static final AddressLayout name_len$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name_len"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * size_t *name_len
             * }
             */
            public static final AddressLayout name_len$layout() {
                return name_len$LAYOUT;
            }

            private static final long name_len$OFFSET = 16;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * size_t *name_len
             * }
             */
            public static final long name_len$offset() {
                return name_len$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * size_t *name_len
             * }
             */
            public static MemorySegment name_len(MemorySegment struct) {
                return struct.get(name_len$LAYOUT, name_len$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * size_t *name_len
             * }
             */
            public static void name_len(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(name_len$LAYOUT, name_len$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout get_name$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_name"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     size_t buf_size;
         *     char *buf;
         *     size_t *name_len;
         * } get_name
         * }
         */
        public static final GroupLayout get_name$layout() {
            return get_name$LAYOUT;
        }

        private static final long get_name$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     size_t buf_size;
         *     char *buf;
         *     size_t *name_len;
         * } get_name
         * }
         */
        public static final long get_name$offset() {
            return get_name$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     size_t buf_size;
         *     char *buf;
         *     size_t *name_len;
         * } get_name
         * }
         */
        public static MemorySegment get_name(MemorySegment union) {
            return union.asSlice(get_name$OFFSET, get_name$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     size_t buf_size;
         *     char *buf;
         *     size_t *name_len;
         * } get_name
         * }
         */
        public static void get_name(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, get_name$OFFSET, get_name$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     H5O_type_t *obj_type;
         * }
         * }
         */
        public static class get_type {

            get_type() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                hdf5_h.C_POINTER.withName("obj_type")
            ).withName("$anon$702:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout obj_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("obj_type"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * H5O_type_t *obj_type
             * }
             */
            public static final AddressLayout obj_type$layout() {
                return obj_type$LAYOUT;
            }

            private static final long obj_type$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * H5O_type_t *obj_type
             * }
             */
            public static final long obj_type$offset() {
                return obj_type$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * H5O_type_t *obj_type
             * }
             */
            public static MemorySegment obj_type(MemorySegment struct) {
                return struct.get(obj_type$LAYOUT, obj_type$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * H5O_type_t *obj_type
             * }
             */
            public static void obj_type(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(obj_type$LAYOUT, obj_type$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout get_type$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_type"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     H5O_type_t *obj_type;
         * } get_type
         * }
         */
        public static final GroupLayout get_type$layout() {
            return get_type$LAYOUT;
        }

        private static final long get_type$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     H5O_type_t *obj_type;
         * } get_type
         * }
         */
        public static final long get_type$offset() {
            return get_type$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     H5O_type_t *obj_type;
         * } get_type
         * }
         */
        public static MemorySegment get_type(MemorySegment union) {
            return union.asSlice(get_type$OFFSET, get_type$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     H5O_type_t *obj_type;
         * } get_type
         * }
         */
        public static void get_type(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, get_type$OFFSET, get_type$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     unsigned int fields;
         *     H5O_info2_t *oinfo;
         * }
         * }
         */
        public static class get_info {

            get_info() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                hdf5_h.C_INT.withName("fields"),
                MemoryLayout.paddingLayout(4),
                hdf5_h.C_POINTER.withName("oinfo")
            ).withName("$anon$707:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final OfInt fields$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fields"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * unsigned int fields
             * }
             */
            public static final OfInt fields$layout() {
                return fields$LAYOUT;
            }

            private static final long fields$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * unsigned int fields
             * }
             */
            public static final long fields$offset() {
                return fields$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * unsigned int fields
             * }
             */
            public static int fields(MemorySegment struct) {
                return struct.get(fields$LAYOUT, fields$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * unsigned int fields
             * }
             */
            public static void fields(MemorySegment struct, int fieldValue) {
                struct.set(fields$LAYOUT, fields$OFFSET, fieldValue);
            }

            private static final AddressLayout oinfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("oinfo"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * H5O_info2_t *oinfo
             * }
             */
            public static final AddressLayout oinfo$layout() {
                return oinfo$LAYOUT;
            }

            private static final long oinfo$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * H5O_info2_t *oinfo
             * }
             */
            public static final long oinfo$offset() {
                return oinfo$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * H5O_info2_t *oinfo
             * }
             */
            public static MemorySegment oinfo(MemorySegment struct) {
                return struct.get(oinfo$LAYOUT, oinfo$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * H5O_info2_t *oinfo
             * }
             */
            public static void oinfo(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(oinfo$LAYOUT, oinfo$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout get_info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_info"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     unsigned int fields;
         *     H5O_info2_t *oinfo;
         * } get_info
         * }
         */
        public static final GroupLayout get_info$layout() {
            return get_info$LAYOUT;
        }

        private static final long get_info$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     unsigned int fields;
         *     H5O_info2_t *oinfo;
         * } get_info
         * }
         */
        public static final long get_info$offset() {
            return get_info$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     unsigned int fields;
         *     H5O_info2_t *oinfo;
         * } get_info
         * }
         */
        public static MemorySegment get_info(MemorySegment union) {
            return union.asSlice(get_info$OFFSET, get_info$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     unsigned int fields;
         *     H5O_info2_t *oinfo;
         * } get_info
         * }
         */
        public static void get_info(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, get_info$OFFSET, get_info$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout args$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("args"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         void **file;
     *     } get_file;
     *     struct {
     *         size_t buf_size;
     *         char *buf;
     *         size_t *name_len;
     *     } get_name;
     *     struct {
     *         H5O_type_t *obj_type;
     *     } get_type;
     *     struct {
     *         unsigned int fields;
     *         H5O_info2_t *oinfo;
     *     } get_info;
     * } args
     * }
     */
    public static final GroupLayout args$layout() {
        return args$LAYOUT;
    }

    private static final long args$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         void **file;
     *     } get_file;
     *     struct {
     *         size_t buf_size;
     *         char *buf;
     *         size_t *name_len;
     *     } get_name;
     *     struct {
     *         H5O_type_t *obj_type;
     *     } get_type;
     *     struct {
     *         unsigned int fields;
     *         H5O_info2_t *oinfo;
     *     } get_info;
     * } args
     * }
     */
    public static final long args$offset() {
        return args$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         void **file;
     *     } get_file;
     *     struct {
     *         size_t buf_size;
     *         char *buf;
     *         size_t *name_len;
     *     } get_name;
     *     struct {
     *         H5O_type_t *obj_type;
     *     } get_type;
     *     struct {
     *         unsigned int fields;
     *         H5O_info2_t *oinfo;
     *     } get_info;
     * } args
     * }
     */
    public static MemorySegment args(MemorySegment struct) {
        return struct.asSlice(args$OFFSET, args$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         void **file;
     *     } get_file;
     *     struct {
     *         size_t buf_size;
     *         char *buf;
     *         size_t *name_len;
     *     } get_name;
     *     struct {
     *         H5O_type_t *obj_type;
     *     } get_type;
     *     struct {
     *         unsigned int fields;
     *         H5O_info2_t *oinfo;
     *     } get_info;
     * } args
     * }
     */
    public static void args(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, args$OFFSET, args$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

