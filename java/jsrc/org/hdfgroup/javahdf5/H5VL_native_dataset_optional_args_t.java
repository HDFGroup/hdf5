// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * union H5VL_native_dataset_optional_args_t {
 *     struct {
 *         H5D_chunk_index_t *idx_type;
 *     } get_chunk_idx_type;
 *     H5VL_native_dataset_get_chunk_storage_size_t get_chunk_storage_size;
 *     H5VL_native_dataset_get_num_chunks_t get_num_chunks;
 *     H5VL_native_dataset_get_chunk_info_by_idx_t get_chunk_info_by_idx;
 *     H5VL_native_dataset_get_chunk_info_by_coord_t get_chunk_info_by_coord;
 *     H5VL_native_dataset_chunk_read_t chunk_read;
 *     H5VL_native_dataset_chunk_write_t chunk_write;
 *     H5VL_native_dataset_get_vlen_buf_size_t get_vlen_buf_size;
 *     struct {
 *         haddr_t *offset;
 *     } get_offset;
 *     struct {
 *         H5D_chunk_iter_op_t op;
 *         void *op_data;
 *     } chunk_iter;
 * }
 * }
 */
public class H5VL_native_dataset_optional_args_t {

    H5VL_native_dataset_optional_args_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .unionLayout(
                H5VL_native_dataset_optional_args_t.get_chunk_idx_type.layout().withName(
                    "get_chunk_idx_type"),
                H5VL_native_dataset_get_chunk_storage_size_t.layout().withName("get_chunk_storage_size"),
                H5VL_native_dataset_get_num_chunks_t.layout().withName("get_num_chunks"),
                H5VL_native_dataset_get_chunk_info_by_idx_t.layout().withName("get_chunk_info_by_idx"),
                H5VL_native_dataset_get_chunk_info_by_coord_t.layout().withName("get_chunk_info_by_coord"),
                H5VL_native_dataset_chunk_read_t.layout().withName("chunk_read"),
                H5VL_native_dataset_chunk_write_t.layout().withName("chunk_write"),
                H5VL_native_dataset_get_vlen_buf_size_t.layout().withName("get_vlen_buf_size"),
                H5VL_native_dataset_optional_args_t.get_offset.layout().withName("get_offset"),
                H5VL_native_dataset_optional_args_t.chunk_iter.layout().withName("chunk_iter"))
            .withName("H5VL_native_dataset_optional_args_t");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    /**
     * {@snippet lang=c :
     * struct {
     *     H5D_chunk_index_t *idx_type;
     * }
     * }
     */
    public static class get_chunk_idx_type {

        get_chunk_idx_type()
        {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT =
            MemoryLayout.structLayout(hdf5_h.C_POINTER.withName("idx_type")).withName("$anon$148:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() { return $LAYOUT; }

        private static final AddressLayout idx_type$LAYOUT =
            (AddressLayout)$LAYOUT.select(groupElement("idx_type"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * H5D_chunk_index_t *idx_type
         * }
         */
        public static final AddressLayout idx_type$layout() { return idx_type$LAYOUT; }

        private static final long idx_type$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * H5D_chunk_index_t *idx_type
         * }
         */
        public static final long idx_type$offset() { return idx_type$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * H5D_chunk_index_t *idx_type
         * }
         */
        public static MemorySegment idx_type(MemorySegment struct)
        {
            return struct.get(idx_type$LAYOUT, idx_type$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * H5D_chunk_index_t *idx_type
         * }
         */
        public static void idx_type(MemorySegment struct, MemorySegment fieldValue)
        {
            struct.set(idx_type$LAYOUT, idx_type$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index)
        {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator)
        {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
        {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout get_chunk_idx_type$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("get_chunk_idx_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     H5D_chunk_index_t *idx_type;
     * } get_chunk_idx_type
     * }
     */
    public static final GroupLayout get_chunk_idx_type$layout() { return get_chunk_idx_type$LAYOUT; }

    private static final long get_chunk_idx_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     H5D_chunk_index_t *idx_type;
     * } get_chunk_idx_type
     * }
     */
    public static final long get_chunk_idx_type$offset() { return get_chunk_idx_type$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     H5D_chunk_index_t *idx_type;
     * } get_chunk_idx_type
     * }
     */
    public static MemorySegment get_chunk_idx_type(MemorySegment union)
    {
        return union.asSlice(get_chunk_idx_type$OFFSET, get_chunk_idx_type$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     H5D_chunk_index_t *idx_type;
     * } get_chunk_idx_type
     * }
     */
    public static void get_chunk_idx_type(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, get_chunk_idx_type$OFFSET,
                           get_chunk_idx_type$LAYOUT.byteSize());
    }

    private static final GroupLayout get_chunk_storage_size$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("get_chunk_storage_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_chunk_storage_size_t get_chunk_storage_size
     * }
     */
    public static final GroupLayout get_chunk_storage_size$layout() { return get_chunk_storage_size$LAYOUT; }

    private static final long get_chunk_storage_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_chunk_storage_size_t get_chunk_storage_size
     * }
     */
    public static final long get_chunk_storage_size$offset() { return get_chunk_storage_size$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_chunk_storage_size_t get_chunk_storage_size
     * }
     */
    public static MemorySegment get_chunk_storage_size(MemorySegment union)
    {
        return union.asSlice(get_chunk_storage_size$OFFSET, get_chunk_storage_size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_chunk_storage_size_t get_chunk_storage_size
     * }
     */
    public static void get_chunk_storage_size(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, get_chunk_storage_size$OFFSET,
                           get_chunk_storage_size$LAYOUT.byteSize());
    }

    private static final GroupLayout get_num_chunks$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("get_num_chunks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_num_chunks_t get_num_chunks
     * }
     */
    public static final GroupLayout get_num_chunks$layout() { return get_num_chunks$LAYOUT; }

    private static final long get_num_chunks$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_num_chunks_t get_num_chunks
     * }
     */
    public static final long get_num_chunks$offset() { return get_num_chunks$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_num_chunks_t get_num_chunks
     * }
     */
    public static MemorySegment get_num_chunks(MemorySegment union)
    {
        return union.asSlice(get_num_chunks$OFFSET, get_num_chunks$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_num_chunks_t get_num_chunks
     * }
     */
    public static void get_num_chunks(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, get_num_chunks$OFFSET, get_num_chunks$LAYOUT.byteSize());
    }

    private static final GroupLayout get_chunk_info_by_idx$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("get_chunk_info_by_idx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_chunk_info_by_idx_t get_chunk_info_by_idx
     * }
     */
    public static final GroupLayout get_chunk_info_by_idx$layout() { return get_chunk_info_by_idx$LAYOUT; }

    private static final long get_chunk_info_by_idx$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_chunk_info_by_idx_t get_chunk_info_by_idx
     * }
     */
    public static final long get_chunk_info_by_idx$offset() { return get_chunk_info_by_idx$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_chunk_info_by_idx_t get_chunk_info_by_idx
     * }
     */
    public static MemorySegment get_chunk_info_by_idx(MemorySegment union)
    {
        return union.asSlice(get_chunk_info_by_idx$OFFSET, get_chunk_info_by_idx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_chunk_info_by_idx_t get_chunk_info_by_idx
     * }
     */
    public static void get_chunk_info_by_idx(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, get_chunk_info_by_idx$OFFSET,
                           get_chunk_info_by_idx$LAYOUT.byteSize());
    }

    private static final GroupLayout get_chunk_info_by_coord$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("get_chunk_info_by_coord"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_chunk_info_by_coord_t get_chunk_info_by_coord
     * }
     */
    public static final GroupLayout get_chunk_info_by_coord$layout()
    {
        return get_chunk_info_by_coord$LAYOUT;
    }

    private static final long get_chunk_info_by_coord$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_chunk_info_by_coord_t get_chunk_info_by_coord
     * }
     */
    public static final long get_chunk_info_by_coord$offset() { return get_chunk_info_by_coord$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_chunk_info_by_coord_t get_chunk_info_by_coord
     * }
     */
    public static MemorySegment get_chunk_info_by_coord(MemorySegment union)
    {
        return union.asSlice(get_chunk_info_by_coord$OFFSET, get_chunk_info_by_coord$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_chunk_info_by_coord_t get_chunk_info_by_coord
     * }
     */
    public static void get_chunk_info_by_coord(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, get_chunk_info_by_coord$OFFSET,
                           get_chunk_info_by_coord$LAYOUT.byteSize());
    }

    private static final GroupLayout chunk_read$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("chunk_read"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_chunk_read_t chunk_read
     * }
     */
    public static final GroupLayout chunk_read$layout() { return chunk_read$LAYOUT; }

    private static final long chunk_read$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_chunk_read_t chunk_read
     * }
     */
    public static final long chunk_read$offset() { return chunk_read$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_chunk_read_t chunk_read
     * }
     */
    public static MemorySegment chunk_read(MemorySegment union)
    {
        return union.asSlice(chunk_read$OFFSET, chunk_read$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_chunk_read_t chunk_read
     * }
     */
    public static void chunk_read(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, chunk_read$OFFSET, chunk_read$LAYOUT.byteSize());
    }

    private static final GroupLayout chunk_write$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("chunk_write"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_chunk_write_t chunk_write
     * }
     */
    public static final GroupLayout chunk_write$layout() { return chunk_write$LAYOUT; }

    private static final long chunk_write$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_chunk_write_t chunk_write
     * }
     */
    public static final long chunk_write$offset() { return chunk_write$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_chunk_write_t chunk_write
     * }
     */
    public static MemorySegment chunk_write(MemorySegment union)
    {
        return union.asSlice(chunk_write$OFFSET, chunk_write$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_chunk_write_t chunk_write
     * }
     */
    public static void chunk_write(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, chunk_write$OFFSET, chunk_write$LAYOUT.byteSize());
    }

    private static final GroupLayout get_vlen_buf_size$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("get_vlen_buf_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_vlen_buf_size_t get_vlen_buf_size
     * }
     */
    public static final GroupLayout get_vlen_buf_size$layout() { return get_vlen_buf_size$LAYOUT; }

    private static final long get_vlen_buf_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_vlen_buf_size_t get_vlen_buf_size
     * }
     */
    public static final long get_vlen_buf_size$offset() { return get_vlen_buf_size$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_vlen_buf_size_t get_vlen_buf_size
     * }
     */
    public static MemorySegment get_vlen_buf_size(MemorySegment union)
    {
        return union.asSlice(get_vlen_buf_size$OFFSET, get_vlen_buf_size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_native_dataset_get_vlen_buf_size_t get_vlen_buf_size
     * }
     */
    public static void get_vlen_buf_size(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, get_vlen_buf_size$OFFSET,
                           get_vlen_buf_size$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     haddr_t *offset;
     * }
     * }
     */
    public static class get_offset {

        get_offset()
        {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT =
            MemoryLayout.structLayout(hdf5_h.C_POINTER.withName("offset")).withName("$anon$174:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() { return $LAYOUT; }

        private static final AddressLayout offset$LAYOUT =
            (AddressLayout)$LAYOUT.select(groupElement("offset"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * haddr_t *offset
         * }
         */
        public static final AddressLayout offset$layout() { return offset$LAYOUT; }

        private static final long offset$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * haddr_t *offset
         * }
         */
        public static final long offset$offset() { return offset$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * haddr_t *offset
         * }
         */
        public static MemorySegment offset(MemorySegment struct)
        {
            return struct.get(offset$LAYOUT, offset$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * haddr_t *offset
         * }
         */
        public static void offset(MemorySegment struct, MemorySegment fieldValue)
        {
            struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index)
        {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator)
        {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
        {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout get_offset$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("get_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     haddr_t *offset;
     * } get_offset
     * }
     */
    public static final GroupLayout get_offset$layout() { return get_offset$LAYOUT; }

    private static final long get_offset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     haddr_t *offset;
     * } get_offset
     * }
     */
    public static final long get_offset$offset() { return get_offset$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     haddr_t *offset;
     * } get_offset
     * }
     */
    public static MemorySegment get_offset(MemorySegment union)
    {
        return union.asSlice(get_offset$OFFSET, get_offset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     haddr_t *offset;
     * } get_offset
     * }
     */
    public static void get_offset(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, get_offset$OFFSET, get_offset$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     H5D_chunk_iter_op_t op;
     *     void *op_data;
     * }
     * }
     */
    public static class chunk_iter {

        chunk_iter()
        {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT =
            MemoryLayout.structLayout(hdf5_h.C_POINTER.withName("op"), hdf5_h.C_POINTER.withName("op_data"))
                .withName("$anon$179:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() { return $LAYOUT; }

        private static final AddressLayout op$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("op"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * H5D_chunk_iter_op_t op
         * }
         */
        public static final AddressLayout op$layout() { return op$LAYOUT; }

        private static final long op$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * H5D_chunk_iter_op_t op
         * }
         */
        public static final long op$offset() { return op$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * H5D_chunk_iter_op_t op
         * }
         */
        public static MemorySegment op(MemorySegment struct) { return struct.get(op$LAYOUT, op$OFFSET); }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * H5D_chunk_iter_op_t op
         * }
         */
        public static void op(MemorySegment struct, MemorySegment fieldValue)
        {
            struct.set(op$LAYOUT, op$OFFSET, fieldValue);
        }

        private static final AddressLayout op_data$LAYOUT =
            (AddressLayout)$LAYOUT.select(groupElement("op_data"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *op_data
         * }
         */
        public static final AddressLayout op_data$layout() { return op_data$LAYOUT; }

        private static final long op_data$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *op_data
         * }
         */
        public static final long op_data$offset() { return op_data$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *op_data
         * }
         */
        public static MemorySegment op_data(MemorySegment struct)
        {
            return struct.get(op_data$LAYOUT, op_data$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *op_data
         * }
         */
        public static void op_data(MemorySegment struct, MemorySegment fieldValue)
        {
            struct.set(op_data$LAYOUT, op_data$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index)
        {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator)
        {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
        {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout chunk_iter$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("chunk_iter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     H5D_chunk_iter_op_t op;
     *     void *op_data;
     * } chunk_iter
     * }
     */
    public static final GroupLayout chunk_iter$layout() { return chunk_iter$LAYOUT; }

    private static final long chunk_iter$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     H5D_chunk_iter_op_t op;
     *     void *op_data;
     * } chunk_iter
     * }
     */
    public static final long chunk_iter$offset() { return chunk_iter$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     H5D_chunk_iter_op_t op;
     *     void *op_data;
     * } chunk_iter
     * }
     */
    public static MemorySegment chunk_iter(MemorySegment union)
    {
        return union.asSlice(chunk_iter$OFFSET, chunk_iter$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     H5D_chunk_iter_op_t op;
     *     void *op_data;
     * } chunk_iter
     * }
     */
    public static void chunk_iter(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, chunk_iter$OFFSET, chunk_iter$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
