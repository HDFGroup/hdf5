// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5VL_file_get_name_args_t {
 *     H5I_type_t type;
 *     size_t buf_size;
 *     char *buf;
 *     size_t *file_name_len;
 * }
 * }
 */
public class H5VL_file_get_name_args_t {

    H5VL_file_get_name_args_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(hdf5_h.C_INT.withName("type"), MemoryLayout.paddingLayout(4),
                          hdf5_h.C_LONG.withName("buf_size"), hdf5_h.C_POINTER.withName("buf"),
                          hdf5_h.C_POINTER.withName("file_name_len"))
            .withName("H5VL_file_get_name_args_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5I_type_t type
     * }
     */
    public static final OfInt type$layout() { return type$LAYOUT; }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5I_type_t type
     * }
     */
    public static final long type$offset() { return type$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5I_type_t type
     * }
     */
    public static int type(MemorySegment struct) { return struct.get(type$LAYOUT, type$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5I_type_t type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue)
    {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfLong buf_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("buf_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t buf_size
     * }
     */
    public static final OfLong buf_size$layout() { return buf_size$LAYOUT; }

    private static final long buf_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t buf_size
     * }
     */
    public static final long buf_size$offset() { return buf_size$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t buf_size
     * }
     */
    public static long buf_size(MemorySegment struct) { return struct.get(buf_size$LAYOUT, buf_size$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t buf_size
     * }
     */
    public static void buf_size(MemorySegment struct, long fieldValue)
    {
        struct.set(buf_size$LAYOUT, buf_size$OFFSET, fieldValue);
    }

    private static final AddressLayout buf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *buf
     * }
     */
    public static final AddressLayout buf$layout() { return buf$LAYOUT; }

    private static final long buf$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *buf
     * }
     */
    public static final long buf$offset() { return buf$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *buf
     * }
     */
    public static MemorySegment buf(MemorySegment struct) { return struct.get(buf$LAYOUT, buf$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *buf
     * }
     */
    public static void buf(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(buf$LAYOUT, buf$OFFSET, fieldValue);
    }

    private static final AddressLayout file_name_len$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("file_name_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t *file_name_len
     * }
     */
    public static final AddressLayout file_name_len$layout() { return file_name_len$LAYOUT; }

    private static final long file_name_len$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t *file_name_len
     * }
     */
    public static final long file_name_len$offset() { return file_name_len$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t *file_name_len
     * }
     */
    public static MemorySegment file_name_len(MemorySegment struct)
    {
        return struct.get(file_name_len$LAYOUT, file_name_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t *file_name_len
     * }
     */
    public static void file_name_len(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(file_name_len$LAYOUT, file_name_len$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
