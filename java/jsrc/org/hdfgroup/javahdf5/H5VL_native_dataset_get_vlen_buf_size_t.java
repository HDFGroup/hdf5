// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5VL_native_dataset_get_vlen_buf_size_t {
 *     hid_t type_id;
 *     hid_t space_id;
 *     hsize_t *size;
 * }
 * }
 */
public class H5VL_native_dataset_get_vlen_buf_size_t {

    H5VL_native_dataset_get_vlen_buf_size_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(hdf5_h.C_LONG.withName("type_id"), hdf5_h.C_LONG.withName("space_id"),
                          hdf5_h.C_POINTER.withName("size"))
            .withName("H5VL_native_dataset_get_vlen_buf_size_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfLong type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("type_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hid_t type_id
     * }
     */
    public static final OfLong type_id$layout() { return type_id$LAYOUT; }

    private static final long type_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hid_t type_id
     * }
     */
    public static final long type_id$offset() { return type_id$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hid_t type_id
     * }
     */
    public static long type_id(MemorySegment struct) { return struct.get(type_id$LAYOUT, type_id$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hid_t type_id
     * }
     */
    public static void type_id(MemorySegment struct, long fieldValue)
    {
        struct.set(type_id$LAYOUT, type_id$OFFSET, fieldValue);
    }

    private static final OfLong space_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("space_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hid_t space_id
     * }
     */
    public static final OfLong space_id$layout() { return space_id$LAYOUT; }

    private static final long space_id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hid_t space_id
     * }
     */
    public static final long space_id$offset() { return space_id$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hid_t space_id
     * }
     */
    public static long space_id(MemorySegment struct) { return struct.get(space_id$LAYOUT, space_id$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hid_t space_id
     * }
     */
    public static void space_id(MemorySegment struct, long fieldValue)
    {
        struct.set(space_id$LAYOUT, space_id$OFFSET, fieldValue);
    }

    private static final AddressLayout size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t *size
     * }
     */
    public static final AddressLayout size$layout() { return size$LAYOUT; }

    private static final long size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t *size
     * }
     */
    public static final long size$offset() { return size$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t *size
     * }
     */
    public static MemorySegment size(MemorySegment struct) { return struct.get(size$LAYOUT, size$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t *size
     * }
     */
    public static void size(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
