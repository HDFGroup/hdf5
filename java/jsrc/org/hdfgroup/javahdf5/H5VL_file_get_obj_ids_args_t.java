// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5VL_file_get_obj_ids_args_t {
 *     unsigned int types;
 *     size_t max_objs;
 *     hid_t *oid_list;
 *     size_t *count;
 * }
 * }
 */
public class H5VL_file_get_obj_ids_args_t {

    H5VL_file_get_obj_ids_args_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_INT.withName("types"),
        MemoryLayout.paddingLayout(4),
        hdf5_h.C_LONG.withName("max_objs"),
        hdf5_h.C_POINTER.withName("oid_list"),
        hdf5_h.C_POINTER.withName("count")
    ).withName("H5VL_file_get_obj_ids_args_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt types$LAYOUT = (OfInt)$LAYOUT.select(groupElement("types"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int types
     * }
     */
    public static final OfInt types$layout() {
        return types$LAYOUT;
    }

    private static final long types$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int types
     * }
     */
    public static final long types$offset() {
        return types$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int types
     * }
     */
    public static int types(MemorySegment struct) {
        return struct.get(types$LAYOUT, types$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int types
     * }
     */
    public static void types(MemorySegment struct, int fieldValue) {
        struct.set(types$LAYOUT, types$OFFSET, fieldValue);
    }

    private static final OfLong max_objs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("max_objs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t max_objs
     * }
     */
    public static final OfLong max_objs$layout() {
        return max_objs$LAYOUT;
    }

    private static final long max_objs$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t max_objs
     * }
     */
    public static final long max_objs$offset() {
        return max_objs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t max_objs
     * }
     */
    public static long max_objs(MemorySegment struct) {
        return struct.get(max_objs$LAYOUT, max_objs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t max_objs
     * }
     */
    public static void max_objs(MemorySegment struct, long fieldValue) {
        struct.set(max_objs$LAYOUT, max_objs$OFFSET, fieldValue);
    }

    private static final AddressLayout oid_list$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("oid_list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hid_t *oid_list
     * }
     */
    public static final AddressLayout oid_list$layout() {
        return oid_list$LAYOUT;
    }

    private static final long oid_list$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hid_t *oid_list
     * }
     */
    public static final long oid_list$offset() {
        return oid_list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hid_t *oid_list
     * }
     */
    public static MemorySegment oid_list(MemorySegment struct) {
        return struct.get(oid_list$LAYOUT, oid_list$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hid_t *oid_list
     * }
     */
    public static void oid_list(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(oid_list$LAYOUT, oid_list$OFFSET, fieldValue);
    }

    private static final AddressLayout count$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t *count
     * }
     */
    public static final AddressLayout count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t *count
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t *count
     * }
     */
    public static MemorySegment count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t *count
     * }
     */
    public static void count(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

