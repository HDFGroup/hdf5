// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5VL_native_dataset_get_chunk_info_by_idx_t {
 *     hid_t space_id;
 *     hsize_t chk_index;
 *     hsize_t *offset;
 *     unsigned int *filter_mask;
 *     haddr_t *addr;
 *     hsize_t *size;
 * }
 * }
 */
public class H5VL_native_dataset_get_chunk_info_by_idx_t {

    H5VL_native_dataset_get_chunk_info_by_idx_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(hdf5_h.C_LONG.withName("space_id"), hdf5_h.C_LONG.withName("chk_index"),
                          hdf5_h.C_POINTER.withName("offset"), hdf5_h.C_POINTER.withName("filter_mask"),
                          hdf5_h.C_POINTER.withName("addr"), hdf5_h.C_POINTER.withName("size"))
            .withName("H5VL_native_dataset_get_chunk_info_by_idx_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfLong space_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("space_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hid_t space_id
     * }
     */
    public static final OfLong space_id$layout() { return space_id$LAYOUT; }

    private static final long space_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hid_t space_id
     * }
     */
    public static final long space_id$offset() { return space_id$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hid_t space_id
     * }
     */
    public static long space_id(MemorySegment struct) { return struct.get(space_id$LAYOUT, space_id$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hid_t space_id
     * }
     */
    public static void space_id(MemorySegment struct, long fieldValue)
    {
        struct.set(space_id$LAYOUT, space_id$OFFSET, fieldValue);
    }

    private static final OfLong chk_index$LAYOUT = (OfLong)$LAYOUT.select(groupElement("chk_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t chk_index
     * }
     */
    public static final OfLong chk_index$layout() { return chk_index$LAYOUT; }

    private static final long chk_index$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t chk_index
     * }
     */
    public static final long chk_index$offset() { return chk_index$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t chk_index
     * }
     */
    public static long chk_index(MemorySegment struct)
    {
        return struct.get(chk_index$LAYOUT, chk_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t chk_index
     * }
     */
    public static void chk_index(MemorySegment struct, long fieldValue)
    {
        struct.set(chk_index$LAYOUT, chk_index$OFFSET, fieldValue);
    }

    private static final AddressLayout offset$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t *offset
     * }
     */
    public static final AddressLayout offset$layout() { return offset$LAYOUT; }

    private static final long offset$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t *offset
     * }
     */
    public static final long offset$offset() { return offset$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t *offset
     * }
     */
    public static MemorySegment offset(MemorySegment struct)
    {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t *offset
     * }
     */
    public static void offset(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final AddressLayout filter_mask$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("filter_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *filter_mask
     * }
     */
    public static final AddressLayout filter_mask$layout() { return filter_mask$LAYOUT; }

    private static final long filter_mask$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *filter_mask
     * }
     */
    public static final long filter_mask$offset() { return filter_mask$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *filter_mask
     * }
     */
    public static MemorySegment filter_mask(MemorySegment struct)
    {
        return struct.get(filter_mask$LAYOUT, filter_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *filter_mask
     * }
     */
    public static void filter_mask(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(filter_mask$LAYOUT, filter_mask$OFFSET, fieldValue);
    }

    private static final AddressLayout addr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * haddr_t *addr
     * }
     */
    public static final AddressLayout addr$layout() { return addr$LAYOUT; }

    private static final long addr$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * haddr_t *addr
     * }
     */
    public static final long addr$offset() { return addr$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * haddr_t *addr
     * }
     */
    public static MemorySegment addr(MemorySegment struct) { return struct.get(addr$LAYOUT, addr$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * haddr_t *addr
     * }
     */
    public static void addr(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(addr$LAYOUT, addr$OFFSET, fieldValue);
    }

    private static final AddressLayout size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t *size
     * }
     */
    public static final AddressLayout size$layout() { return size$LAYOUT; }

    private static final long size$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t *size
     * }
     */
    public static final long size$offset() { return size$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t *size
     * }
     */
    public static MemorySegment size(MemorySegment struct) { return struct.get(size$LAYOUT, size$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t *size
     * }
     */
    public static void size(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
