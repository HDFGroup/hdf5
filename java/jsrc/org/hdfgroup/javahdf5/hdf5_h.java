// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class hdf5_h extends hdf5_h_1 {

    hdf5_h() {
        // Should not be called directly
    }
    private static final int H5D_MPIO_CHUNK_MIXED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_actual_io_mode_t.H5D_MPIO_CHUNK_MIXED = 3
     * }
     */
    public static int H5D_MPIO_CHUNK_MIXED() {
        return H5D_MPIO_CHUNK_MIXED;
    }
    private static final int H5D_MPIO_CONTIGUOUS_COLLECTIVE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_actual_io_mode_t.H5D_MPIO_CONTIGUOUS_COLLECTIVE = 4
     * }
     */
    public static int H5D_MPIO_CONTIGUOUS_COLLECTIVE() {
        return H5D_MPIO_CONTIGUOUS_COLLECTIVE;
    }
    private static final int H5D_MPIO_COLLECTIVE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_no_collective_cause_t.H5D_MPIO_COLLECTIVE = 0
     * }
     */
    public static int H5D_MPIO_COLLECTIVE() {
        return H5D_MPIO_COLLECTIVE;
    }
    private static final int H5D_MPIO_SET_INDEPENDENT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_no_collective_cause_t.H5D_MPIO_SET_INDEPENDENT = 1
     * }
     */
    public static int H5D_MPIO_SET_INDEPENDENT() {
        return H5D_MPIO_SET_INDEPENDENT;
    }
    private static final int H5D_MPIO_DATATYPE_CONVERSION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_no_collective_cause_t.H5D_MPIO_DATATYPE_CONVERSION = 2
     * }
     */
    public static int H5D_MPIO_DATATYPE_CONVERSION() {
        return H5D_MPIO_DATATYPE_CONVERSION;
    }
    private static final int H5D_MPIO_DATA_TRANSFORMS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_no_collective_cause_t.H5D_MPIO_DATA_TRANSFORMS = 4
     * }
     */
    public static int H5D_MPIO_DATA_TRANSFORMS() {
        return H5D_MPIO_DATA_TRANSFORMS;
    }
    private static final int H5D_MPIO_MPI_OPT_TYPES_ENV_VAR_DISABLED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_no_collective_cause_t.H5D_MPIO_MPI_OPT_TYPES_ENV_VAR_DISABLED = 8
     * }
     */
    public static int H5D_MPIO_MPI_OPT_TYPES_ENV_VAR_DISABLED() {
        return H5D_MPIO_MPI_OPT_TYPES_ENV_VAR_DISABLED;
    }
    private static final int H5D_MPIO_NOT_SIMPLE_OR_SCALAR_DATASPACES = (int)16L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_no_collective_cause_t.H5D_MPIO_NOT_SIMPLE_OR_SCALAR_DATASPACES = 16
     * }
     */
    public static int H5D_MPIO_NOT_SIMPLE_OR_SCALAR_DATASPACES() {
        return H5D_MPIO_NOT_SIMPLE_OR_SCALAR_DATASPACES;
    }
    private static final int H5D_MPIO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET = (int)32L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_no_collective_cause_t.H5D_MPIO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET = 32
     * }
     */
    public static int H5D_MPIO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET() {
        return H5D_MPIO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET;
    }
    private static final int H5D_MPIO_PARALLEL_FILTERED_WRITES_DISABLED = (int)64L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_no_collective_cause_t.H5D_MPIO_PARALLEL_FILTERED_WRITES_DISABLED = 64
     * }
     */
    public static int H5D_MPIO_PARALLEL_FILTERED_WRITES_DISABLED() {
        return H5D_MPIO_PARALLEL_FILTERED_WRITES_DISABLED;
    }
    private static final int H5D_MPIO_ERROR_WHILE_CHECKING_COLLECTIVE_POSSIBLE = (int)128L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_no_collective_cause_t.H5D_MPIO_ERROR_WHILE_CHECKING_COLLECTIVE_POSSIBLE = 128
     * }
     */
    public static int H5D_MPIO_ERROR_WHILE_CHECKING_COLLECTIVE_POSSIBLE() {
        return H5D_MPIO_ERROR_WHILE_CHECKING_COLLECTIVE_POSSIBLE;
    }
    private static final int H5D_MPIO_NO_SELECTION_IO = (int)256L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_no_collective_cause_t.H5D_MPIO_NO_SELECTION_IO = 256
     * }
     */
    public static int H5D_MPIO_NO_SELECTION_IO() {
        return H5D_MPIO_NO_SELECTION_IO;
    }
    private static final int H5D_MPIO_NO_COLLECTIVE_MAX_CAUSE = (int)512L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_no_collective_cause_t.H5D_MPIO_NO_COLLECTIVE_MAX_CAUSE = 512
     * }
     */
    public static int H5D_MPIO_NO_COLLECTIVE_MAX_CAUSE() {
        return H5D_MPIO_NO_COLLECTIVE_MAX_CAUSE;
    }
    private static final int H5D_SELECTION_IO_MODE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5D_selection_io_mode_t.H5D_SELECTION_IO_MODE_DEFAULT = 0
     * }
     */
    public static int H5D_SELECTION_IO_MODE_DEFAULT() {
        return H5D_SELECTION_IO_MODE_DEFAULT;
    }
    private static final int H5D_SELECTION_IO_MODE_OFF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5D_selection_io_mode_t.H5D_SELECTION_IO_MODE_OFF = 1
     * }
     */
    public static int H5D_SELECTION_IO_MODE_OFF() {
        return H5D_SELECTION_IO_MODE_OFF;
    }
    private static final int H5D_SELECTION_IO_MODE_ON = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5D_selection_io_mode_t.H5D_SELECTION_IO_MODE_ON = 2
     * }
     */
    public static int H5D_SELECTION_IO_MODE_ON() {
        return H5D_SELECTION_IO_MODE_ON;
    }

    private static class H5P_CLS_ROOT_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_ROOT_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_ROOT_ID_g
     * }
     */
    public static OfLong H5P_CLS_ROOT_ID_g$layout() {
        return H5P_CLS_ROOT_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_ROOT_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_ROOT_ID_g$segment() {
        return H5P_CLS_ROOT_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_ROOT_ID_g
     * }
     */
    public static long H5P_CLS_ROOT_ID_g() {
        return H5P_CLS_ROOT_ID_g$constants.SEGMENT.get(H5P_CLS_ROOT_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_ROOT_ID_g
     * }
     */
    public static void H5P_CLS_ROOT_ID_g(long varValue) {
        H5P_CLS_ROOT_ID_g$constants.SEGMENT.set(H5P_CLS_ROOT_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_OBJECT_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_OBJECT_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_OBJECT_CREATE_ID_g
     * }
     */
    public static OfLong H5P_CLS_OBJECT_CREATE_ID_g$layout() {
        return H5P_CLS_OBJECT_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_OBJECT_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_OBJECT_CREATE_ID_g$segment() {
        return H5P_CLS_OBJECT_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_OBJECT_CREATE_ID_g
     * }
     */
    public static long H5P_CLS_OBJECT_CREATE_ID_g() {
        return H5P_CLS_OBJECT_CREATE_ID_g$constants.SEGMENT.get(H5P_CLS_OBJECT_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_OBJECT_CREATE_ID_g
     * }
     */
    public static void H5P_CLS_OBJECT_CREATE_ID_g(long varValue) {
        H5P_CLS_OBJECT_CREATE_ID_g$constants.SEGMENT.set(H5P_CLS_OBJECT_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_FILE_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_FILE_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_FILE_CREATE_ID_g
     * }
     */
    public static OfLong H5P_CLS_FILE_CREATE_ID_g$layout() {
        return H5P_CLS_FILE_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_FILE_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_FILE_CREATE_ID_g$segment() {
        return H5P_CLS_FILE_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_FILE_CREATE_ID_g
     * }
     */
    public static long H5P_CLS_FILE_CREATE_ID_g() {
        return H5P_CLS_FILE_CREATE_ID_g$constants.SEGMENT.get(H5P_CLS_FILE_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_FILE_CREATE_ID_g
     * }
     */
    public static void H5P_CLS_FILE_CREATE_ID_g(long varValue) {
        H5P_CLS_FILE_CREATE_ID_g$constants.SEGMENT.set(H5P_CLS_FILE_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_FILE_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_FILE_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_FILE_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_CLS_FILE_ACCESS_ID_g$layout() {
        return H5P_CLS_FILE_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_FILE_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_FILE_ACCESS_ID_g$segment() {
        return H5P_CLS_FILE_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_FILE_ACCESS_ID_g
     * }
     */
    public static long H5P_CLS_FILE_ACCESS_ID_g() {
        return H5P_CLS_FILE_ACCESS_ID_g$constants.SEGMENT.get(H5P_CLS_FILE_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_FILE_ACCESS_ID_g
     * }
     */
    public static void H5P_CLS_FILE_ACCESS_ID_g(long varValue) {
        H5P_CLS_FILE_ACCESS_ID_g$constants.SEGMENT.set(H5P_CLS_FILE_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_DATASET_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_DATASET_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATASET_CREATE_ID_g
     * }
     */
    public static OfLong H5P_CLS_DATASET_CREATE_ID_g$layout() {
        return H5P_CLS_DATASET_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATASET_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_DATASET_CREATE_ID_g$segment() {
        return H5P_CLS_DATASET_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATASET_CREATE_ID_g
     * }
     */
    public static long H5P_CLS_DATASET_CREATE_ID_g() {
        return H5P_CLS_DATASET_CREATE_ID_g$constants.SEGMENT.get(H5P_CLS_DATASET_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATASET_CREATE_ID_g
     * }
     */
    public static void H5P_CLS_DATASET_CREATE_ID_g(long varValue) {
        H5P_CLS_DATASET_CREATE_ID_g$constants.SEGMENT.set(H5P_CLS_DATASET_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_DATASET_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_DATASET_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATASET_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_CLS_DATASET_ACCESS_ID_g$layout() {
        return H5P_CLS_DATASET_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATASET_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_DATASET_ACCESS_ID_g$segment() {
        return H5P_CLS_DATASET_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATASET_ACCESS_ID_g
     * }
     */
    public static long H5P_CLS_DATASET_ACCESS_ID_g() {
        return H5P_CLS_DATASET_ACCESS_ID_g$constants.SEGMENT.get(H5P_CLS_DATASET_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATASET_ACCESS_ID_g
     * }
     */
    public static void H5P_CLS_DATASET_ACCESS_ID_g(long varValue) {
        H5P_CLS_DATASET_ACCESS_ID_g$constants.SEGMENT.set(H5P_CLS_DATASET_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_DATASET_XFER_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_DATASET_XFER_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATASET_XFER_ID_g
     * }
     */
    public static OfLong H5P_CLS_DATASET_XFER_ID_g$layout() {
        return H5P_CLS_DATASET_XFER_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATASET_XFER_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_DATASET_XFER_ID_g$segment() {
        return H5P_CLS_DATASET_XFER_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATASET_XFER_ID_g
     * }
     */
    public static long H5P_CLS_DATASET_XFER_ID_g() {
        return H5P_CLS_DATASET_XFER_ID_g$constants.SEGMENT.get(H5P_CLS_DATASET_XFER_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATASET_XFER_ID_g
     * }
     */
    public static void H5P_CLS_DATASET_XFER_ID_g(long varValue) {
        H5P_CLS_DATASET_XFER_ID_g$constants.SEGMENT.set(H5P_CLS_DATASET_XFER_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_FILE_MOUNT_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_FILE_MOUNT_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_FILE_MOUNT_ID_g
     * }
     */
    public static OfLong H5P_CLS_FILE_MOUNT_ID_g$layout() {
        return H5P_CLS_FILE_MOUNT_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_FILE_MOUNT_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_FILE_MOUNT_ID_g$segment() {
        return H5P_CLS_FILE_MOUNT_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_FILE_MOUNT_ID_g
     * }
     */
    public static long H5P_CLS_FILE_MOUNT_ID_g() {
        return H5P_CLS_FILE_MOUNT_ID_g$constants.SEGMENT.get(H5P_CLS_FILE_MOUNT_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_FILE_MOUNT_ID_g
     * }
     */
    public static void H5P_CLS_FILE_MOUNT_ID_g(long varValue) {
        H5P_CLS_FILE_MOUNT_ID_g$constants.SEGMENT.set(H5P_CLS_FILE_MOUNT_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_GROUP_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_GROUP_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_GROUP_CREATE_ID_g
     * }
     */
    public static OfLong H5P_CLS_GROUP_CREATE_ID_g$layout() {
        return H5P_CLS_GROUP_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_GROUP_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_GROUP_CREATE_ID_g$segment() {
        return H5P_CLS_GROUP_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_GROUP_CREATE_ID_g
     * }
     */
    public static long H5P_CLS_GROUP_CREATE_ID_g() {
        return H5P_CLS_GROUP_CREATE_ID_g$constants.SEGMENT.get(H5P_CLS_GROUP_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_GROUP_CREATE_ID_g
     * }
     */
    public static void H5P_CLS_GROUP_CREATE_ID_g(long varValue) {
        H5P_CLS_GROUP_CREATE_ID_g$constants.SEGMENT.set(H5P_CLS_GROUP_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_GROUP_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_GROUP_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_GROUP_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_CLS_GROUP_ACCESS_ID_g$layout() {
        return H5P_CLS_GROUP_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_GROUP_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_GROUP_ACCESS_ID_g$segment() {
        return H5P_CLS_GROUP_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_GROUP_ACCESS_ID_g
     * }
     */
    public static long H5P_CLS_GROUP_ACCESS_ID_g() {
        return H5P_CLS_GROUP_ACCESS_ID_g$constants.SEGMENT.get(H5P_CLS_GROUP_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_GROUP_ACCESS_ID_g
     * }
     */
    public static void H5P_CLS_GROUP_ACCESS_ID_g(long varValue) {
        H5P_CLS_GROUP_ACCESS_ID_g$constants.SEGMENT.set(H5P_CLS_GROUP_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_DATATYPE_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_DATATYPE_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATATYPE_CREATE_ID_g
     * }
     */
    public static OfLong H5P_CLS_DATATYPE_CREATE_ID_g$layout() {
        return H5P_CLS_DATATYPE_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATATYPE_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_DATATYPE_CREATE_ID_g$segment() {
        return H5P_CLS_DATATYPE_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATATYPE_CREATE_ID_g
     * }
     */
    public static long H5P_CLS_DATATYPE_CREATE_ID_g() {
        return H5P_CLS_DATATYPE_CREATE_ID_g$constants.SEGMENT.get(H5P_CLS_DATATYPE_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATATYPE_CREATE_ID_g
     * }
     */
    public static void H5P_CLS_DATATYPE_CREATE_ID_g(long varValue) {
        H5P_CLS_DATATYPE_CREATE_ID_g$constants.SEGMENT.set(H5P_CLS_DATATYPE_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_DATATYPE_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_DATATYPE_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATATYPE_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_CLS_DATATYPE_ACCESS_ID_g$layout() {
        return H5P_CLS_DATATYPE_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATATYPE_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_DATATYPE_ACCESS_ID_g$segment() {
        return H5P_CLS_DATATYPE_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATATYPE_ACCESS_ID_g
     * }
     */
    public static long H5P_CLS_DATATYPE_ACCESS_ID_g() {
        return H5P_CLS_DATATYPE_ACCESS_ID_g$constants.SEGMENT.get(H5P_CLS_DATATYPE_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_DATATYPE_ACCESS_ID_g
     * }
     */
    public static void H5P_CLS_DATATYPE_ACCESS_ID_g(long varValue) {
        H5P_CLS_DATATYPE_ACCESS_ID_g$constants.SEGMENT.set(H5P_CLS_DATATYPE_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_MAP_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_MAP_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_MAP_CREATE_ID_g
     * }
     */
    public static OfLong H5P_CLS_MAP_CREATE_ID_g$layout() {
        return H5P_CLS_MAP_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_MAP_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_MAP_CREATE_ID_g$segment() {
        return H5P_CLS_MAP_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_MAP_CREATE_ID_g
     * }
     */
    public static long H5P_CLS_MAP_CREATE_ID_g() {
        return H5P_CLS_MAP_CREATE_ID_g$constants.SEGMENT.get(H5P_CLS_MAP_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_MAP_CREATE_ID_g
     * }
     */
    public static void H5P_CLS_MAP_CREATE_ID_g(long varValue) {
        H5P_CLS_MAP_CREATE_ID_g$constants.SEGMENT.set(H5P_CLS_MAP_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_MAP_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_MAP_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_MAP_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_CLS_MAP_ACCESS_ID_g$layout() {
        return H5P_CLS_MAP_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_MAP_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_MAP_ACCESS_ID_g$segment() {
        return H5P_CLS_MAP_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_MAP_ACCESS_ID_g
     * }
     */
    public static long H5P_CLS_MAP_ACCESS_ID_g() {
        return H5P_CLS_MAP_ACCESS_ID_g$constants.SEGMENT.get(H5P_CLS_MAP_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_MAP_ACCESS_ID_g
     * }
     */
    public static void H5P_CLS_MAP_ACCESS_ID_g(long varValue) {
        H5P_CLS_MAP_ACCESS_ID_g$constants.SEGMENT.set(H5P_CLS_MAP_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_STRING_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_STRING_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_STRING_CREATE_ID_g
     * }
     */
    public static OfLong H5P_CLS_STRING_CREATE_ID_g$layout() {
        return H5P_CLS_STRING_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_STRING_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_STRING_CREATE_ID_g$segment() {
        return H5P_CLS_STRING_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_STRING_CREATE_ID_g
     * }
     */
    public static long H5P_CLS_STRING_CREATE_ID_g() {
        return H5P_CLS_STRING_CREATE_ID_g$constants.SEGMENT.get(H5P_CLS_STRING_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_STRING_CREATE_ID_g
     * }
     */
    public static void H5P_CLS_STRING_CREATE_ID_g(long varValue) {
        H5P_CLS_STRING_CREATE_ID_g$constants.SEGMENT.set(H5P_CLS_STRING_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_ATTRIBUTE_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_ATTRIBUTE_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_ATTRIBUTE_CREATE_ID_g
     * }
     */
    public static OfLong H5P_CLS_ATTRIBUTE_CREATE_ID_g$layout() {
        return H5P_CLS_ATTRIBUTE_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_ATTRIBUTE_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_ATTRIBUTE_CREATE_ID_g$segment() {
        return H5P_CLS_ATTRIBUTE_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_ATTRIBUTE_CREATE_ID_g
     * }
     */
    public static long H5P_CLS_ATTRIBUTE_CREATE_ID_g() {
        return H5P_CLS_ATTRIBUTE_CREATE_ID_g$constants.SEGMENT.get(H5P_CLS_ATTRIBUTE_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_ATTRIBUTE_CREATE_ID_g
     * }
     */
    public static void H5P_CLS_ATTRIBUTE_CREATE_ID_g(long varValue) {
        H5P_CLS_ATTRIBUTE_CREATE_ID_g$constants.SEGMENT.set(H5P_CLS_ATTRIBUTE_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_ATTRIBUTE_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_ATTRIBUTE_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_ATTRIBUTE_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_CLS_ATTRIBUTE_ACCESS_ID_g$layout() {
        return H5P_CLS_ATTRIBUTE_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_ATTRIBUTE_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_ATTRIBUTE_ACCESS_ID_g$segment() {
        return H5P_CLS_ATTRIBUTE_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_ATTRIBUTE_ACCESS_ID_g
     * }
     */
    public static long H5P_CLS_ATTRIBUTE_ACCESS_ID_g() {
        return H5P_CLS_ATTRIBUTE_ACCESS_ID_g$constants.SEGMENT.get(H5P_CLS_ATTRIBUTE_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_ATTRIBUTE_ACCESS_ID_g
     * }
     */
    public static void H5P_CLS_ATTRIBUTE_ACCESS_ID_g(long varValue) {
        H5P_CLS_ATTRIBUTE_ACCESS_ID_g$constants.SEGMENT.set(H5P_CLS_ATTRIBUTE_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_OBJECT_COPY_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_OBJECT_COPY_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_OBJECT_COPY_ID_g
     * }
     */
    public static OfLong H5P_CLS_OBJECT_COPY_ID_g$layout() {
        return H5P_CLS_OBJECT_COPY_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_OBJECT_COPY_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_OBJECT_COPY_ID_g$segment() {
        return H5P_CLS_OBJECT_COPY_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_OBJECT_COPY_ID_g
     * }
     */
    public static long H5P_CLS_OBJECT_COPY_ID_g() {
        return H5P_CLS_OBJECT_COPY_ID_g$constants.SEGMENT.get(H5P_CLS_OBJECT_COPY_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_OBJECT_COPY_ID_g
     * }
     */
    public static void H5P_CLS_OBJECT_COPY_ID_g(long varValue) {
        H5P_CLS_OBJECT_COPY_ID_g$constants.SEGMENT.set(H5P_CLS_OBJECT_COPY_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_LINK_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_LINK_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_LINK_CREATE_ID_g
     * }
     */
    public static OfLong H5P_CLS_LINK_CREATE_ID_g$layout() {
        return H5P_CLS_LINK_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_LINK_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_LINK_CREATE_ID_g$segment() {
        return H5P_CLS_LINK_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_LINK_CREATE_ID_g
     * }
     */
    public static long H5P_CLS_LINK_CREATE_ID_g() {
        return H5P_CLS_LINK_CREATE_ID_g$constants.SEGMENT.get(H5P_CLS_LINK_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_LINK_CREATE_ID_g
     * }
     */
    public static void H5P_CLS_LINK_CREATE_ID_g(long varValue) {
        H5P_CLS_LINK_CREATE_ID_g$constants.SEGMENT.set(H5P_CLS_LINK_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_LINK_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_LINK_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_LINK_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_CLS_LINK_ACCESS_ID_g$layout() {
        return H5P_CLS_LINK_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_LINK_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_LINK_ACCESS_ID_g$segment() {
        return H5P_CLS_LINK_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_LINK_ACCESS_ID_g
     * }
     */
    public static long H5P_CLS_LINK_ACCESS_ID_g() {
        return H5P_CLS_LINK_ACCESS_ID_g$constants.SEGMENT.get(H5P_CLS_LINK_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_LINK_ACCESS_ID_g
     * }
     */
    public static void H5P_CLS_LINK_ACCESS_ID_g(long varValue) {
        H5P_CLS_LINK_ACCESS_ID_g$constants.SEGMENT.set(H5P_CLS_LINK_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_VOL_INITIALIZE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_VOL_INITIALIZE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_VOL_INITIALIZE_ID_g
     * }
     */
    public static OfLong H5P_CLS_VOL_INITIALIZE_ID_g$layout() {
        return H5P_CLS_VOL_INITIALIZE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_VOL_INITIALIZE_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_VOL_INITIALIZE_ID_g$segment() {
        return H5P_CLS_VOL_INITIALIZE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_VOL_INITIALIZE_ID_g
     * }
     */
    public static long H5P_CLS_VOL_INITIALIZE_ID_g() {
        return H5P_CLS_VOL_INITIALIZE_ID_g$constants.SEGMENT.get(H5P_CLS_VOL_INITIALIZE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_VOL_INITIALIZE_ID_g
     * }
     */
    public static void H5P_CLS_VOL_INITIALIZE_ID_g(long varValue) {
        H5P_CLS_VOL_INITIALIZE_ID_g$constants.SEGMENT.set(H5P_CLS_VOL_INITIALIZE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_CLS_REFERENCE_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_CLS_REFERENCE_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_REFERENCE_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_CLS_REFERENCE_ACCESS_ID_g$layout() {
        return H5P_CLS_REFERENCE_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_REFERENCE_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_CLS_REFERENCE_ACCESS_ID_g$segment() {
        return H5P_CLS_REFERENCE_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_REFERENCE_ACCESS_ID_g
     * }
     */
    public static long H5P_CLS_REFERENCE_ACCESS_ID_g() {
        return H5P_CLS_REFERENCE_ACCESS_ID_g$constants.SEGMENT.get(H5P_CLS_REFERENCE_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_CLS_REFERENCE_ACCESS_ID_g
     * }
     */
    public static void H5P_CLS_REFERENCE_ACCESS_ID_g(long varValue) {
        H5P_CLS_REFERENCE_ACCESS_ID_g$constants.SEGMENT.set(H5P_CLS_REFERENCE_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_FILE_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_FILE_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_FILE_CREATE_ID_g
     * }
     */
    public static OfLong H5P_LST_FILE_CREATE_ID_g$layout() {
        return H5P_LST_FILE_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_FILE_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_LST_FILE_CREATE_ID_g$segment() {
        return H5P_LST_FILE_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_FILE_CREATE_ID_g
     * }
     */
    public static long H5P_LST_FILE_CREATE_ID_g() {
        return H5P_LST_FILE_CREATE_ID_g$constants.SEGMENT.get(H5P_LST_FILE_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_FILE_CREATE_ID_g
     * }
     */
    public static void H5P_LST_FILE_CREATE_ID_g(long varValue) {
        H5P_LST_FILE_CREATE_ID_g$constants.SEGMENT.set(H5P_LST_FILE_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_FILE_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_FILE_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_FILE_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_LST_FILE_ACCESS_ID_g$layout() {
        return H5P_LST_FILE_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_FILE_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_LST_FILE_ACCESS_ID_g$segment() {
        return H5P_LST_FILE_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_FILE_ACCESS_ID_g
     * }
     */
    public static long H5P_LST_FILE_ACCESS_ID_g() {
        return H5P_LST_FILE_ACCESS_ID_g$constants.SEGMENT.get(H5P_LST_FILE_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_FILE_ACCESS_ID_g
     * }
     */
    public static void H5P_LST_FILE_ACCESS_ID_g(long varValue) {
        H5P_LST_FILE_ACCESS_ID_g$constants.SEGMENT.set(H5P_LST_FILE_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_DATASET_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_DATASET_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATASET_CREATE_ID_g
     * }
     */
    public static OfLong H5P_LST_DATASET_CREATE_ID_g$layout() {
        return H5P_LST_DATASET_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATASET_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_LST_DATASET_CREATE_ID_g$segment() {
        return H5P_LST_DATASET_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATASET_CREATE_ID_g
     * }
     */
    public static long H5P_LST_DATASET_CREATE_ID_g() {
        return H5P_LST_DATASET_CREATE_ID_g$constants.SEGMENT.get(H5P_LST_DATASET_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATASET_CREATE_ID_g
     * }
     */
    public static void H5P_LST_DATASET_CREATE_ID_g(long varValue) {
        H5P_LST_DATASET_CREATE_ID_g$constants.SEGMENT.set(H5P_LST_DATASET_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_DATASET_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_DATASET_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATASET_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_LST_DATASET_ACCESS_ID_g$layout() {
        return H5P_LST_DATASET_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATASET_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_LST_DATASET_ACCESS_ID_g$segment() {
        return H5P_LST_DATASET_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATASET_ACCESS_ID_g
     * }
     */
    public static long H5P_LST_DATASET_ACCESS_ID_g() {
        return H5P_LST_DATASET_ACCESS_ID_g$constants.SEGMENT.get(H5P_LST_DATASET_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATASET_ACCESS_ID_g
     * }
     */
    public static void H5P_LST_DATASET_ACCESS_ID_g(long varValue) {
        H5P_LST_DATASET_ACCESS_ID_g$constants.SEGMENT.set(H5P_LST_DATASET_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_DATASET_XFER_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_DATASET_XFER_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATASET_XFER_ID_g
     * }
     */
    public static OfLong H5P_LST_DATASET_XFER_ID_g$layout() {
        return H5P_LST_DATASET_XFER_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATASET_XFER_ID_g
     * }
     */
    public static MemorySegment H5P_LST_DATASET_XFER_ID_g$segment() {
        return H5P_LST_DATASET_XFER_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATASET_XFER_ID_g
     * }
     */
    public static long H5P_LST_DATASET_XFER_ID_g() {
        return H5P_LST_DATASET_XFER_ID_g$constants.SEGMENT.get(H5P_LST_DATASET_XFER_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATASET_XFER_ID_g
     * }
     */
    public static void H5P_LST_DATASET_XFER_ID_g(long varValue) {
        H5P_LST_DATASET_XFER_ID_g$constants.SEGMENT.set(H5P_LST_DATASET_XFER_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_FILE_MOUNT_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_FILE_MOUNT_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_FILE_MOUNT_ID_g
     * }
     */
    public static OfLong H5P_LST_FILE_MOUNT_ID_g$layout() {
        return H5P_LST_FILE_MOUNT_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_FILE_MOUNT_ID_g
     * }
     */
    public static MemorySegment H5P_LST_FILE_MOUNT_ID_g$segment() {
        return H5P_LST_FILE_MOUNT_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_FILE_MOUNT_ID_g
     * }
     */
    public static long H5P_LST_FILE_MOUNT_ID_g() {
        return H5P_LST_FILE_MOUNT_ID_g$constants.SEGMENT.get(H5P_LST_FILE_MOUNT_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_FILE_MOUNT_ID_g
     * }
     */
    public static void H5P_LST_FILE_MOUNT_ID_g(long varValue) {
        H5P_LST_FILE_MOUNT_ID_g$constants.SEGMENT.set(H5P_LST_FILE_MOUNT_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_GROUP_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_GROUP_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_GROUP_CREATE_ID_g
     * }
     */
    public static OfLong H5P_LST_GROUP_CREATE_ID_g$layout() {
        return H5P_LST_GROUP_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_GROUP_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_LST_GROUP_CREATE_ID_g$segment() {
        return H5P_LST_GROUP_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_GROUP_CREATE_ID_g
     * }
     */
    public static long H5P_LST_GROUP_CREATE_ID_g() {
        return H5P_LST_GROUP_CREATE_ID_g$constants.SEGMENT.get(H5P_LST_GROUP_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_GROUP_CREATE_ID_g
     * }
     */
    public static void H5P_LST_GROUP_CREATE_ID_g(long varValue) {
        H5P_LST_GROUP_CREATE_ID_g$constants.SEGMENT.set(H5P_LST_GROUP_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_GROUP_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_GROUP_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_GROUP_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_LST_GROUP_ACCESS_ID_g$layout() {
        return H5P_LST_GROUP_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_GROUP_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_LST_GROUP_ACCESS_ID_g$segment() {
        return H5P_LST_GROUP_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_GROUP_ACCESS_ID_g
     * }
     */
    public static long H5P_LST_GROUP_ACCESS_ID_g() {
        return H5P_LST_GROUP_ACCESS_ID_g$constants.SEGMENT.get(H5P_LST_GROUP_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_GROUP_ACCESS_ID_g
     * }
     */
    public static void H5P_LST_GROUP_ACCESS_ID_g(long varValue) {
        H5P_LST_GROUP_ACCESS_ID_g$constants.SEGMENT.set(H5P_LST_GROUP_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_DATATYPE_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_DATATYPE_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATATYPE_CREATE_ID_g
     * }
     */
    public static OfLong H5P_LST_DATATYPE_CREATE_ID_g$layout() {
        return H5P_LST_DATATYPE_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATATYPE_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_LST_DATATYPE_CREATE_ID_g$segment() {
        return H5P_LST_DATATYPE_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATATYPE_CREATE_ID_g
     * }
     */
    public static long H5P_LST_DATATYPE_CREATE_ID_g() {
        return H5P_LST_DATATYPE_CREATE_ID_g$constants.SEGMENT.get(H5P_LST_DATATYPE_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATATYPE_CREATE_ID_g
     * }
     */
    public static void H5P_LST_DATATYPE_CREATE_ID_g(long varValue) {
        H5P_LST_DATATYPE_CREATE_ID_g$constants.SEGMENT.set(H5P_LST_DATATYPE_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_DATATYPE_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_DATATYPE_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATATYPE_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_LST_DATATYPE_ACCESS_ID_g$layout() {
        return H5P_LST_DATATYPE_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATATYPE_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_LST_DATATYPE_ACCESS_ID_g$segment() {
        return H5P_LST_DATATYPE_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATATYPE_ACCESS_ID_g
     * }
     */
    public static long H5P_LST_DATATYPE_ACCESS_ID_g() {
        return H5P_LST_DATATYPE_ACCESS_ID_g$constants.SEGMENT.get(H5P_LST_DATATYPE_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_DATATYPE_ACCESS_ID_g
     * }
     */
    public static void H5P_LST_DATATYPE_ACCESS_ID_g(long varValue) {
        H5P_LST_DATATYPE_ACCESS_ID_g$constants.SEGMENT.set(H5P_LST_DATATYPE_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_MAP_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_MAP_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_MAP_CREATE_ID_g
     * }
     */
    public static OfLong H5P_LST_MAP_CREATE_ID_g$layout() {
        return H5P_LST_MAP_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_MAP_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_LST_MAP_CREATE_ID_g$segment() {
        return H5P_LST_MAP_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_MAP_CREATE_ID_g
     * }
     */
    public static long H5P_LST_MAP_CREATE_ID_g() {
        return H5P_LST_MAP_CREATE_ID_g$constants.SEGMENT.get(H5P_LST_MAP_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_MAP_CREATE_ID_g
     * }
     */
    public static void H5P_LST_MAP_CREATE_ID_g(long varValue) {
        H5P_LST_MAP_CREATE_ID_g$constants.SEGMENT.set(H5P_LST_MAP_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_MAP_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_MAP_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_MAP_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_LST_MAP_ACCESS_ID_g$layout() {
        return H5P_LST_MAP_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_MAP_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_LST_MAP_ACCESS_ID_g$segment() {
        return H5P_LST_MAP_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_MAP_ACCESS_ID_g
     * }
     */
    public static long H5P_LST_MAP_ACCESS_ID_g() {
        return H5P_LST_MAP_ACCESS_ID_g$constants.SEGMENT.get(H5P_LST_MAP_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_MAP_ACCESS_ID_g
     * }
     */
    public static void H5P_LST_MAP_ACCESS_ID_g(long varValue) {
        H5P_LST_MAP_ACCESS_ID_g$constants.SEGMENT.set(H5P_LST_MAP_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_ATTRIBUTE_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_ATTRIBUTE_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_ATTRIBUTE_CREATE_ID_g
     * }
     */
    public static OfLong H5P_LST_ATTRIBUTE_CREATE_ID_g$layout() {
        return H5P_LST_ATTRIBUTE_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_ATTRIBUTE_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_LST_ATTRIBUTE_CREATE_ID_g$segment() {
        return H5P_LST_ATTRIBUTE_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_ATTRIBUTE_CREATE_ID_g
     * }
     */
    public static long H5P_LST_ATTRIBUTE_CREATE_ID_g() {
        return H5P_LST_ATTRIBUTE_CREATE_ID_g$constants.SEGMENT.get(H5P_LST_ATTRIBUTE_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_ATTRIBUTE_CREATE_ID_g
     * }
     */
    public static void H5P_LST_ATTRIBUTE_CREATE_ID_g(long varValue) {
        H5P_LST_ATTRIBUTE_CREATE_ID_g$constants.SEGMENT.set(H5P_LST_ATTRIBUTE_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_ATTRIBUTE_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_ATTRIBUTE_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_ATTRIBUTE_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_LST_ATTRIBUTE_ACCESS_ID_g$layout() {
        return H5P_LST_ATTRIBUTE_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_ATTRIBUTE_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_LST_ATTRIBUTE_ACCESS_ID_g$segment() {
        return H5P_LST_ATTRIBUTE_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_ATTRIBUTE_ACCESS_ID_g
     * }
     */
    public static long H5P_LST_ATTRIBUTE_ACCESS_ID_g() {
        return H5P_LST_ATTRIBUTE_ACCESS_ID_g$constants.SEGMENT.get(H5P_LST_ATTRIBUTE_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_ATTRIBUTE_ACCESS_ID_g
     * }
     */
    public static void H5P_LST_ATTRIBUTE_ACCESS_ID_g(long varValue) {
        H5P_LST_ATTRIBUTE_ACCESS_ID_g$constants.SEGMENT.set(H5P_LST_ATTRIBUTE_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_OBJECT_COPY_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_OBJECT_COPY_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_OBJECT_COPY_ID_g
     * }
     */
    public static OfLong H5P_LST_OBJECT_COPY_ID_g$layout() {
        return H5P_LST_OBJECT_COPY_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_OBJECT_COPY_ID_g
     * }
     */
    public static MemorySegment H5P_LST_OBJECT_COPY_ID_g$segment() {
        return H5P_LST_OBJECT_COPY_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_OBJECT_COPY_ID_g
     * }
     */
    public static long H5P_LST_OBJECT_COPY_ID_g() {
        return H5P_LST_OBJECT_COPY_ID_g$constants.SEGMENT.get(H5P_LST_OBJECT_COPY_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_OBJECT_COPY_ID_g
     * }
     */
    public static void H5P_LST_OBJECT_COPY_ID_g(long varValue) {
        H5P_LST_OBJECT_COPY_ID_g$constants.SEGMENT.set(H5P_LST_OBJECT_COPY_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_LINK_CREATE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_LINK_CREATE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_LINK_CREATE_ID_g
     * }
     */
    public static OfLong H5P_LST_LINK_CREATE_ID_g$layout() {
        return H5P_LST_LINK_CREATE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_LINK_CREATE_ID_g
     * }
     */
    public static MemorySegment H5P_LST_LINK_CREATE_ID_g$segment() {
        return H5P_LST_LINK_CREATE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_LINK_CREATE_ID_g
     * }
     */
    public static long H5P_LST_LINK_CREATE_ID_g() {
        return H5P_LST_LINK_CREATE_ID_g$constants.SEGMENT.get(H5P_LST_LINK_CREATE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_LINK_CREATE_ID_g
     * }
     */
    public static void H5P_LST_LINK_CREATE_ID_g(long varValue) {
        H5P_LST_LINK_CREATE_ID_g$constants.SEGMENT.set(H5P_LST_LINK_CREATE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_LINK_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_LINK_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_LINK_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_LST_LINK_ACCESS_ID_g$layout() {
        return H5P_LST_LINK_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_LINK_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_LST_LINK_ACCESS_ID_g$segment() {
        return H5P_LST_LINK_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_LINK_ACCESS_ID_g
     * }
     */
    public static long H5P_LST_LINK_ACCESS_ID_g() {
        return H5P_LST_LINK_ACCESS_ID_g$constants.SEGMENT.get(H5P_LST_LINK_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_LINK_ACCESS_ID_g
     * }
     */
    public static void H5P_LST_LINK_ACCESS_ID_g(long varValue) {
        H5P_LST_LINK_ACCESS_ID_g$constants.SEGMENT.set(H5P_LST_LINK_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_VOL_INITIALIZE_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_VOL_INITIALIZE_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_VOL_INITIALIZE_ID_g
     * }
     */
    public static OfLong H5P_LST_VOL_INITIALIZE_ID_g$layout() {
        return H5P_LST_VOL_INITIALIZE_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_VOL_INITIALIZE_ID_g
     * }
     */
    public static MemorySegment H5P_LST_VOL_INITIALIZE_ID_g$segment() {
        return H5P_LST_VOL_INITIALIZE_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_VOL_INITIALIZE_ID_g
     * }
     */
    public static long H5P_LST_VOL_INITIALIZE_ID_g() {
        return H5P_LST_VOL_INITIALIZE_ID_g$constants.SEGMENT.get(H5P_LST_VOL_INITIALIZE_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_VOL_INITIALIZE_ID_g
     * }
     */
    public static void H5P_LST_VOL_INITIALIZE_ID_g(long varValue) {
        H5P_LST_VOL_INITIALIZE_ID_g$constants.SEGMENT.set(H5P_LST_VOL_INITIALIZE_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5P_LST_REFERENCE_ACCESS_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5P_LST_REFERENCE_ACCESS_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_REFERENCE_ACCESS_ID_g
     * }
     */
    public static OfLong H5P_LST_REFERENCE_ACCESS_ID_g$layout() {
        return H5P_LST_REFERENCE_ACCESS_ID_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_REFERENCE_ACCESS_ID_g
     * }
     */
    public static MemorySegment H5P_LST_REFERENCE_ACCESS_ID_g$segment() {
        return H5P_LST_REFERENCE_ACCESS_ID_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_REFERENCE_ACCESS_ID_g
     * }
     */
    public static long H5P_LST_REFERENCE_ACCESS_ID_g() {
        return H5P_LST_REFERENCE_ACCESS_ID_g$constants.SEGMENT.get(H5P_LST_REFERENCE_ACCESS_ID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5P_LST_REFERENCE_ACCESS_ID_g
     * }
     */
    public static void H5P_LST_REFERENCE_ACCESS_ID_g(long varValue) {
        H5P_LST_REFERENCE_ACCESS_ID_g$constants.SEGMENT.set(H5P_LST_REFERENCE_ACCESS_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5Pclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pclose(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pclose$descriptor() {
        return H5Pclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pclose(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pclose$handle() {
        return H5Pclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pclose(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pclose$address() {
        return H5Pclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pclose(hid_t plist_id)
     * }
     */
    public static int H5Pclose(long plist_id) {
        var mh$ = H5Pclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pclose", plist_id);
            }
            return (int)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pclose_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pclose_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pclose_class(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pclose_class$descriptor() {
        return H5Pclose_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pclose_class(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pclose_class$handle() {
        return H5Pclose_class.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pclose_class(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pclose_class$address() {
        return H5Pclose_class.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pclose_class(hid_t plist_id)
     * }
     */
    public static int H5Pclose_class(long plist_id) {
        var mh$ = H5Pclose_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pclose_class", plist_id);
            }
            return (int)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pcopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pcopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Pcopy(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pcopy$descriptor() {
        return H5Pcopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Pcopy(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pcopy$handle() {
        return H5Pcopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Pcopy(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pcopy$address() {
        return H5Pcopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5Pcopy(hid_t plist_id)
     * }
     */
    public static long H5Pcopy(long plist_id) {
        var mh$ = H5Pcopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pcopy", plist_id);
            }
            return (long)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pcopy_prop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pcopy_prop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pcopy_prop(hid_t dst_id, hid_t src_id, const char *name)
     * }
     */
    public static FunctionDescriptor H5Pcopy_prop$descriptor() {
        return H5Pcopy_prop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pcopy_prop(hid_t dst_id, hid_t src_id, const char *name)
     * }
     */
    public static MethodHandle H5Pcopy_prop$handle() {
        return H5Pcopy_prop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pcopy_prop(hid_t dst_id, hid_t src_id, const char *name)
     * }
     */
    public static MemorySegment H5Pcopy_prop$address() {
        return H5Pcopy_prop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pcopy_prop(hid_t dst_id, hid_t src_id, const char *name)
     * }
     */
    public static int H5Pcopy_prop(long dst_id, long src_id, MemorySegment name) {
        var mh$ = H5Pcopy_prop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pcopy_prop", dst_id, src_id, name);
            }
            return (int)mh$.invokeExact(dst_id, src_id, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pcreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pcreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Pcreate(hid_t cls_id)
     * }
     */
    public static FunctionDescriptor H5Pcreate$descriptor() {
        return H5Pcreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Pcreate(hid_t cls_id)
     * }
     */
    public static MethodHandle H5Pcreate$handle() {
        return H5Pcreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Pcreate(hid_t cls_id)
     * }
     */
    public static MemorySegment H5Pcreate$address() {
        return H5Pcreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5Pcreate(hid_t cls_id)
     * }
     */
    public static long H5Pcreate(long cls_id) {
        var mh$ = H5Pcreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pcreate", cls_id);
            }
            return (long)mh$.invokeExact(cls_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pcreate_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pcreate_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Pcreate_class(hid_t parent, const char *name, H5P_cls_create_func_t create, void *create_data, H5P_cls_copy_func_t copy, void *copy_data, H5P_cls_close_func_t close, void *close_data)
     * }
     */
    public static FunctionDescriptor H5Pcreate_class$descriptor() {
        return H5Pcreate_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Pcreate_class(hid_t parent, const char *name, H5P_cls_create_func_t create, void *create_data, H5P_cls_copy_func_t copy, void *copy_data, H5P_cls_close_func_t close, void *close_data)
     * }
     */
    public static MethodHandle H5Pcreate_class$handle() {
        return H5Pcreate_class.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Pcreate_class(hid_t parent, const char *name, H5P_cls_create_func_t create, void *create_data, H5P_cls_copy_func_t copy, void *copy_data, H5P_cls_close_func_t close, void *close_data)
     * }
     */
    public static MemorySegment H5Pcreate_class$address() {
        return H5Pcreate_class.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5Pcreate_class(hid_t parent, const char *name, H5P_cls_create_func_t create, void *create_data, H5P_cls_copy_func_t copy, void *copy_data, H5P_cls_close_func_t close, void *close_data)
     * }
     */
    public static long H5Pcreate_class(long parent, MemorySegment name, MemorySegment create, MemorySegment create_data, MemorySegment copy, MemorySegment copy_data, MemorySegment close, MemorySegment close_data) {
        var mh$ = H5Pcreate_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pcreate_class", parent, name, create, create_data, copy, copy_data, close, close_data);
            }
            return (long)mh$.invokeExact(parent, name, create, create_data, copy, copy_data, close, close_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pdecode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pdecode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Pdecode(const void *buf)
     * }
     */
    public static FunctionDescriptor H5Pdecode$descriptor() {
        return H5Pdecode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Pdecode(const void *buf)
     * }
     */
    public static MethodHandle H5Pdecode$handle() {
        return H5Pdecode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Pdecode(const void *buf)
     * }
     */
    public static MemorySegment H5Pdecode$address() {
        return H5Pdecode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5Pdecode(const void *buf)
     * }
     */
    public static long H5Pdecode(MemorySegment buf) {
        var mh$ = H5Pdecode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pdecode", buf);
            }
            return (long)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pencode2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pencode2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pencode2(hid_t plist_id, void *buf, size_t *nalloc, hid_t fapl_id)
     * }
     */
    public static FunctionDescriptor H5Pencode2$descriptor() {
        return H5Pencode2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pencode2(hid_t plist_id, void *buf, size_t *nalloc, hid_t fapl_id)
     * }
     */
    public static MethodHandle H5Pencode2$handle() {
        return H5Pencode2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pencode2(hid_t plist_id, void *buf, size_t *nalloc, hid_t fapl_id)
     * }
     */
    public static MemorySegment H5Pencode2$address() {
        return H5Pencode2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pencode2(hid_t plist_id, void *buf, size_t *nalloc, hid_t fapl_id)
     * }
     */
    public static int H5Pencode2(long plist_id, MemorySegment buf, MemorySegment nalloc, long fapl_id) {
        var mh$ = H5Pencode2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pencode2", plist_id, buf, nalloc, fapl_id);
            }
            return (int)mh$.invokeExact(plist_id, buf, nalloc, fapl_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pequal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pequal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Pequal(hid_t id1, hid_t id2)
     * }
     */
    public static FunctionDescriptor H5Pequal$descriptor() {
        return H5Pequal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Pequal(hid_t id1, hid_t id2)
     * }
     */
    public static MethodHandle H5Pequal$handle() {
        return H5Pequal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Pequal(hid_t id1, hid_t id2)
     * }
     */
    public static MemorySegment H5Pequal$address() {
        return H5Pequal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * htri_t H5Pequal(hid_t id1, hid_t id2)
     * }
     */
    public static int H5Pequal(long id1, long id2) {
        var mh$ = H5Pequal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pequal", id1, id2);
            }
            return (int)mh$.invokeExact(id1, id2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pexist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pexist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Pexist(hid_t plist_id, const char *name)
     * }
     */
    public static FunctionDescriptor H5Pexist$descriptor() {
        return H5Pexist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Pexist(hid_t plist_id, const char *name)
     * }
     */
    public static MethodHandle H5Pexist$handle() {
        return H5Pexist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Pexist(hid_t plist_id, const char *name)
     * }
     */
    public static MemorySegment H5Pexist$address() {
        return H5Pexist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * htri_t H5Pexist(hid_t plist_id, const char *name)
     * }
     */
    public static int H5Pexist(long plist_id, MemorySegment name) {
        var mh$ = H5Pexist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pexist", plist_id, name);
            }
            return (int)mh$.invokeExact(plist_id, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget(hid_t plist_id, const char *name, void *value)
     * }
     */
    public static FunctionDescriptor H5Pget$descriptor() {
        return H5Pget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget(hid_t plist_id, const char *name, void *value)
     * }
     */
    public static MethodHandle H5Pget$handle() {
        return H5Pget.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget(hid_t plist_id, const char *name, void *value)
     * }
     */
    public static MemorySegment H5Pget$address() {
        return H5Pget.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget(hid_t plist_id, const char *name, void *value)
     * }
     */
    public static int H5Pget(long plist_id, MemorySegment name, MemorySegment value) {
        var mh$ = H5Pget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget", plist_id, name, value);
            }
            return (int)mh$.invokeExact(plist_id, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Pget_class(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pget_class$descriptor() {
        return H5Pget_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Pget_class(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pget_class$handle() {
        return H5Pget_class.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Pget_class(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pget_class$address() {
        return H5Pget_class.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5Pget_class(hid_t plist_id)
     * }
     */
    public static long H5Pget_class(long plist_id) {
        var mh$ = H5Pget_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_class", plist_id);
            }
            return (long)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_class_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_class_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *H5Pget_class_name(hid_t pclass_id)
     * }
     */
    public static FunctionDescriptor H5Pget_class_name$descriptor() {
        return H5Pget_class_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *H5Pget_class_name(hid_t pclass_id)
     * }
     */
    public static MethodHandle H5Pget_class_name$handle() {
        return H5Pget_class_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *H5Pget_class_name(hid_t pclass_id)
     * }
     */
    public static MemorySegment H5Pget_class_name$address() {
        return H5Pget_class_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *H5Pget_class_name(hid_t pclass_id)
     * }
     */
    public static MemorySegment H5Pget_class_name(long pclass_id) {
        var mh$ = H5Pget_class_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_class_name", pclass_id);
            }
            return (MemorySegment)mh$.invokeExact(pclass_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_class_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_class_parent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Pget_class_parent(hid_t pclass_id)
     * }
     */
    public static FunctionDescriptor H5Pget_class_parent$descriptor() {
        return H5Pget_class_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Pget_class_parent(hid_t pclass_id)
     * }
     */
    public static MethodHandle H5Pget_class_parent$handle() {
        return H5Pget_class_parent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Pget_class_parent(hid_t pclass_id)
     * }
     */
    public static MemorySegment H5Pget_class_parent$address() {
        return H5Pget_class_parent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5Pget_class_parent(hid_t pclass_id)
     * }
     */
    public static long H5Pget_class_parent(long pclass_id) {
        var mh$ = H5Pget_class_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_class_parent", pclass_id);
            }
            return (long)mh$.invokeExact(pclass_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_nprops {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_nprops");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_nprops(hid_t id, size_t *nprops)
     * }
     */
    public static FunctionDescriptor H5Pget_nprops$descriptor() {
        return H5Pget_nprops.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_nprops(hid_t id, size_t *nprops)
     * }
     */
    public static MethodHandle H5Pget_nprops$handle() {
        return H5Pget_nprops.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_nprops(hid_t id, size_t *nprops)
     * }
     */
    public static MemorySegment H5Pget_nprops$address() {
        return H5Pget_nprops.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_nprops(hid_t id, size_t *nprops)
     * }
     */
    public static int H5Pget_nprops(long id, MemorySegment nprops) {
        var mh$ = H5Pget_nprops.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_nprops", id, nprops);
            }
            return (int)mh$.invokeExact(id, nprops);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_size(hid_t id, const char *name, size_t *size)
     * }
     */
    public static FunctionDescriptor H5Pget_size$descriptor() {
        return H5Pget_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_size(hid_t id, const char *name, size_t *size)
     * }
     */
    public static MethodHandle H5Pget_size$handle() {
        return H5Pget_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_size(hid_t id, const char *name, size_t *size)
     * }
     */
    public static MemorySegment H5Pget_size$address() {
        return H5Pget_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_size(hid_t id, const char *name, size_t *size)
     * }
     */
    public static int H5Pget_size(long id, MemorySegment name, MemorySegment size) {
        var mh$ = H5Pget_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_size", id, name, size);
            }
            return (int)mh$.invokeExact(id, name, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pinsert2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pinsert2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pinsert2(hid_t plist_id, const char *name, size_t size, void *value, H5P_prp_set_func_t set, H5P_prp_get_func_t get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t copy, H5P_prp_compare_func_t compare, H5P_prp_close_func_t close)
     * }
     */
    public static FunctionDescriptor H5Pinsert2$descriptor() {
        return H5Pinsert2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pinsert2(hid_t plist_id, const char *name, size_t size, void *value, H5P_prp_set_func_t set, H5P_prp_get_func_t get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t copy, H5P_prp_compare_func_t compare, H5P_prp_close_func_t close)
     * }
     */
    public static MethodHandle H5Pinsert2$handle() {
        return H5Pinsert2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pinsert2(hid_t plist_id, const char *name, size_t size, void *value, H5P_prp_set_func_t set, H5P_prp_get_func_t get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t copy, H5P_prp_compare_func_t compare, H5P_prp_close_func_t close)
     * }
     */
    public static MemorySegment H5Pinsert2$address() {
        return H5Pinsert2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pinsert2(hid_t plist_id, const char *name, size_t size, void *value, H5P_prp_set_func_t set, H5P_prp_get_func_t get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t copy, H5P_prp_compare_func_t compare, H5P_prp_close_func_t close)
     * }
     */
    public static int H5Pinsert2(long plist_id, MemorySegment name, long size, MemorySegment value, MemorySegment set, MemorySegment get, MemorySegment prp_del, MemorySegment copy, MemorySegment compare, MemorySegment close) {
        var mh$ = H5Pinsert2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pinsert2", plist_id, name, size, value, set, get, prp_del, copy, compare, close);
            }
            return (int)mh$.invokeExact(plist_id, name, size, value, set, get, prp_del, copy, compare, close);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pisa_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pisa_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Pisa_class(hid_t plist_id, hid_t pclass_id)
     * }
     */
    public static FunctionDescriptor H5Pisa_class$descriptor() {
        return H5Pisa_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Pisa_class(hid_t plist_id, hid_t pclass_id)
     * }
     */
    public static MethodHandle H5Pisa_class$handle() {
        return H5Pisa_class.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Pisa_class(hid_t plist_id, hid_t pclass_id)
     * }
     */
    public static MemorySegment H5Pisa_class$address() {
        return H5Pisa_class.ADDR;
    }

    /**
     * {@snippet lang=c :
     * htri_t H5Pisa_class(hid_t plist_id, hid_t pclass_id)
     * }
     */
    public static int H5Pisa_class(long plist_id, long pclass_id) {
        var mh$ = H5Pisa_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pisa_class", plist_id, pclass_id);
            }
            return (int)mh$.invokeExact(plist_id, pclass_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Piterate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Piterate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Piterate(hid_t id, int *idx, H5P_iterate_t iter_func, void *iter_data)
     * }
     */
    public static FunctionDescriptor H5Piterate$descriptor() {
        return H5Piterate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Piterate(hid_t id, int *idx, H5P_iterate_t iter_func, void *iter_data)
     * }
     */
    public static MethodHandle H5Piterate$handle() {
        return H5Piterate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Piterate(hid_t id, int *idx, H5P_iterate_t iter_func, void *iter_data)
     * }
     */
    public static MemorySegment H5Piterate$address() {
        return H5Piterate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int H5Piterate(hid_t id, int *idx, H5P_iterate_t iter_func, void *iter_data)
     * }
     */
    public static int H5Piterate(long id, MemorySegment idx, MemorySegment iter_func, MemorySegment iter_data) {
        var mh$ = H5Piterate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Piterate", id, idx, iter_func, iter_data);
            }
            return (int)mh$.invokeExact(id, idx, iter_func, iter_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pregister2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pregister2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pregister2(hid_t cls_id, const char *name, size_t size, void *def_value, H5P_prp_create_func_t create, H5P_prp_set_func_t set, H5P_prp_get_func_t get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t copy, H5P_prp_compare_func_t compare, H5P_prp_close_func_t close)
     * }
     */
    public static FunctionDescriptor H5Pregister2$descriptor() {
        return H5Pregister2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pregister2(hid_t cls_id, const char *name, size_t size, void *def_value, H5P_prp_create_func_t create, H5P_prp_set_func_t set, H5P_prp_get_func_t get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t copy, H5P_prp_compare_func_t compare, H5P_prp_close_func_t close)
     * }
     */
    public static MethodHandle H5Pregister2$handle() {
        return H5Pregister2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pregister2(hid_t cls_id, const char *name, size_t size, void *def_value, H5P_prp_create_func_t create, H5P_prp_set_func_t set, H5P_prp_get_func_t get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t copy, H5P_prp_compare_func_t compare, H5P_prp_close_func_t close)
     * }
     */
    public static MemorySegment H5Pregister2$address() {
        return H5Pregister2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pregister2(hid_t cls_id, const char *name, size_t size, void *def_value, H5P_prp_create_func_t create, H5P_prp_set_func_t set, H5P_prp_get_func_t get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t copy, H5P_prp_compare_func_t compare, H5P_prp_close_func_t close)
     * }
     */
    public static int H5Pregister2(long cls_id, MemorySegment name, long size, MemorySegment def_value, MemorySegment create, MemorySegment set, MemorySegment get, MemorySegment prp_del, MemorySegment copy, MemorySegment compare, MemorySegment close) {
        var mh$ = H5Pregister2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pregister2", cls_id, name, size, def_value, create, set, get, prp_del, copy, compare, close);
            }
            return (int)mh$.invokeExact(cls_id, name, size, def_value, create, set, get, prp_del, copy, compare, close);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Premove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Premove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Premove(hid_t plist_id, const char *name)
     * }
     */
    public static FunctionDescriptor H5Premove$descriptor() {
        return H5Premove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Premove(hid_t plist_id, const char *name)
     * }
     */
    public static MethodHandle H5Premove$handle() {
        return H5Premove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Premove(hid_t plist_id, const char *name)
     * }
     */
    public static MemorySegment H5Premove$address() {
        return H5Premove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Premove(hid_t plist_id, const char *name)
     * }
     */
    public static int H5Premove(long plist_id, MemorySegment name) {
        var mh$ = H5Premove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Premove", plist_id, name);
            }
            return (int)mh$.invokeExact(plist_id, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset(hid_t plist_id, const char *name, const void *value)
     * }
     */
    public static FunctionDescriptor H5Pset$descriptor() {
        return H5Pset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset(hid_t plist_id, const char *name, const void *value)
     * }
     */
    public static MethodHandle H5Pset$handle() {
        return H5Pset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset(hid_t plist_id, const char *name, const void *value)
     * }
     */
    public static MemorySegment H5Pset$address() {
        return H5Pset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset(hid_t plist_id, const char *name, const void *value)
     * }
     */
    public static int H5Pset(long plist_id, MemorySegment name, MemorySegment value) {
        var mh$ = H5Pset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset", plist_id, name, value);
            }
            return (int)mh$.invokeExact(plist_id, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Punregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Punregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Punregister(hid_t pclass_id, const char *name)
     * }
     */
    public static FunctionDescriptor H5Punregister$descriptor() {
        return H5Punregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Punregister(hid_t pclass_id, const char *name)
     * }
     */
    public static MethodHandle H5Punregister$handle() {
        return H5Punregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Punregister(hid_t pclass_id, const char *name)
     * }
     */
    public static MemorySegment H5Punregister$address() {
        return H5Punregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Punregister(hid_t pclass_id, const char *name)
     * }
     */
    public static int H5Punregister(long pclass_id, MemorySegment name) {
        var mh$ = H5Punregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Punregister", pclass_id, name);
            }
            return (int)mh$.invokeExact(pclass_id, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pall_filters_avail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pall_filters_avail");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Pall_filters_avail(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pall_filters_avail$descriptor() {
        return H5Pall_filters_avail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Pall_filters_avail(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pall_filters_avail$handle() {
        return H5Pall_filters_avail.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Pall_filters_avail(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pall_filters_avail$address() {
        return H5Pall_filters_avail.ADDR;
    }

    /**
     * {@snippet lang=c :
     * htri_t H5Pall_filters_avail(hid_t plist_id)
     * }
     */
    public static int H5Pall_filters_avail(long plist_id) {
        var mh$ = H5Pall_filters_avail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pall_filters_avail", plist_id);
            }
            return (int)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_attr_creation_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_attr_creation_order");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_attr_creation_order(hid_t plist_id, unsigned int *crt_order_flags)
     * }
     */
    public static FunctionDescriptor H5Pget_attr_creation_order$descriptor() {
        return H5Pget_attr_creation_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_attr_creation_order(hid_t plist_id, unsigned int *crt_order_flags)
     * }
     */
    public static MethodHandle H5Pget_attr_creation_order$handle() {
        return H5Pget_attr_creation_order.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_attr_creation_order(hid_t plist_id, unsigned int *crt_order_flags)
     * }
     */
    public static MemorySegment H5Pget_attr_creation_order$address() {
        return H5Pget_attr_creation_order.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_attr_creation_order(hid_t plist_id, unsigned int *crt_order_flags)
     * }
     */
    public static int H5Pget_attr_creation_order(long plist_id, MemorySegment crt_order_flags) {
        var mh$ = H5Pget_attr_creation_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_attr_creation_order", plist_id, crt_order_flags);
            }
            return (int)mh$.invokeExact(plist_id, crt_order_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_attr_phase_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_attr_phase_change");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_attr_phase_change(hid_t plist_id, unsigned int *max_compact, unsigned int *min_dense)
     * }
     */
    public static FunctionDescriptor H5Pget_attr_phase_change$descriptor() {
        return H5Pget_attr_phase_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_attr_phase_change(hid_t plist_id, unsigned int *max_compact, unsigned int *min_dense)
     * }
     */
    public static MethodHandle H5Pget_attr_phase_change$handle() {
        return H5Pget_attr_phase_change.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_attr_phase_change(hid_t plist_id, unsigned int *max_compact, unsigned int *min_dense)
     * }
     */
    public static MemorySegment H5Pget_attr_phase_change$address() {
        return H5Pget_attr_phase_change.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_attr_phase_change(hid_t plist_id, unsigned int *max_compact, unsigned int *min_dense)
     * }
     */
    public static int H5Pget_attr_phase_change(long plist_id, MemorySegment max_compact, MemorySegment min_dense) {
        var mh$ = H5Pget_attr_phase_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_attr_phase_change", plist_id, max_compact, min_dense);
            }
            return (int)mh$.invokeExact(plist_id, max_compact, min_dense);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_filter2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_filter2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5Z_filter_t H5Pget_filter2(hid_t plist_id, unsigned int idx, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[], unsigned int *filter_config)
     * }
     */
    public static FunctionDescriptor H5Pget_filter2$descriptor() {
        return H5Pget_filter2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5Z_filter_t H5Pget_filter2(hid_t plist_id, unsigned int idx, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[], unsigned int *filter_config)
     * }
     */
    public static MethodHandle H5Pget_filter2$handle() {
        return H5Pget_filter2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5Z_filter_t H5Pget_filter2(hid_t plist_id, unsigned int idx, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[], unsigned int *filter_config)
     * }
     */
    public static MemorySegment H5Pget_filter2$address() {
        return H5Pget_filter2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * H5Z_filter_t H5Pget_filter2(hid_t plist_id, unsigned int idx, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[], unsigned int *filter_config)
     * }
     */
    public static int H5Pget_filter2(long plist_id, int idx, MemorySegment flags, MemorySegment cd_nelmts, MemorySegment cd_values, long namelen, MemorySegment name, MemorySegment filter_config) {
        var mh$ = H5Pget_filter2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_filter2", plist_id, idx, flags, cd_nelmts, cd_values, namelen, name, filter_config);
            }
            return (int)mh$.invokeExact(plist_id, idx, flags, cd_nelmts, cd_values, namelen, name, filter_config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_filter_by_id2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_filter_by_id2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_filter_by_id2(hid_t plist_id, H5Z_filter_t filter_id, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[], unsigned int *filter_config)
     * }
     */
    public static FunctionDescriptor H5Pget_filter_by_id2$descriptor() {
        return H5Pget_filter_by_id2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_filter_by_id2(hid_t plist_id, H5Z_filter_t filter_id, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[], unsigned int *filter_config)
     * }
     */
    public static MethodHandle H5Pget_filter_by_id2$handle() {
        return H5Pget_filter_by_id2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_filter_by_id2(hid_t plist_id, H5Z_filter_t filter_id, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[], unsigned int *filter_config)
     * }
     */
    public static MemorySegment H5Pget_filter_by_id2$address() {
        return H5Pget_filter_by_id2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_filter_by_id2(hid_t plist_id, H5Z_filter_t filter_id, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[], unsigned int *filter_config)
     * }
     */
    public static int H5Pget_filter_by_id2(long plist_id, int filter_id, MemorySegment flags, MemorySegment cd_nelmts, MemorySegment cd_values, long namelen, MemorySegment name, MemorySegment filter_config) {
        var mh$ = H5Pget_filter_by_id2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_filter_by_id2", plist_id, filter_id, flags, cd_nelmts, cd_values, namelen, name, filter_config);
            }
            return (int)mh$.invokeExact(plist_id, filter_id, flags, cd_nelmts, cd_values, namelen, name, filter_config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_nfilters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_nfilters");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Pget_nfilters(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pget_nfilters$descriptor() {
        return H5Pget_nfilters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Pget_nfilters(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pget_nfilters$handle() {
        return H5Pget_nfilters.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Pget_nfilters(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pget_nfilters$address() {
        return H5Pget_nfilters.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int H5Pget_nfilters(hid_t plist_id)
     * }
     */
    public static int H5Pget_nfilters(long plist_id) {
        var mh$ = H5Pget_nfilters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_nfilters", plist_id);
            }
            return (int)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_obj_track_times {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_obj_track_times");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_obj_track_times(hid_t plist_id, hbool_t *track_times)
     * }
     */
    public static FunctionDescriptor H5Pget_obj_track_times$descriptor() {
        return H5Pget_obj_track_times.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_obj_track_times(hid_t plist_id, hbool_t *track_times)
     * }
     */
    public static MethodHandle H5Pget_obj_track_times$handle() {
        return H5Pget_obj_track_times.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_obj_track_times(hid_t plist_id, hbool_t *track_times)
     * }
     */
    public static MemorySegment H5Pget_obj_track_times$address() {
        return H5Pget_obj_track_times.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_obj_track_times(hid_t plist_id, hbool_t *track_times)
     * }
     */
    public static int H5Pget_obj_track_times(long plist_id, MemorySegment track_times) {
        var mh$ = H5Pget_obj_track_times.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_obj_track_times", plist_id, track_times);
            }
            return (int)mh$.invokeExact(plist_id, track_times);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pmodify_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pmodify_filter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pmodify_filter(hid_t plist_id, H5Z_filter_t filter, unsigned int flags, size_t cd_nelmts, const unsigned int cd_values[])
     * }
     */
    public static FunctionDescriptor H5Pmodify_filter$descriptor() {
        return H5Pmodify_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pmodify_filter(hid_t plist_id, H5Z_filter_t filter, unsigned int flags, size_t cd_nelmts, const unsigned int cd_values[])
     * }
     */
    public static MethodHandle H5Pmodify_filter$handle() {
        return H5Pmodify_filter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pmodify_filter(hid_t plist_id, H5Z_filter_t filter, unsigned int flags, size_t cd_nelmts, const unsigned int cd_values[])
     * }
     */
    public static MemorySegment H5Pmodify_filter$address() {
        return H5Pmodify_filter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pmodify_filter(hid_t plist_id, H5Z_filter_t filter, unsigned int flags, size_t cd_nelmts, const unsigned int cd_values[])
     * }
     */
    public static int H5Pmodify_filter(long plist_id, int filter, int flags, long cd_nelmts, MemorySegment cd_values) {
        var mh$ = H5Pmodify_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pmodify_filter", plist_id, filter, flags, cd_nelmts, cd_values);
            }
            return (int)mh$.invokeExact(plist_id, filter, flags, cd_nelmts, cd_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Premove_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Premove_filter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Premove_filter(hid_t plist_id, H5Z_filter_t filter)
     * }
     */
    public static FunctionDescriptor H5Premove_filter$descriptor() {
        return H5Premove_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Premove_filter(hid_t plist_id, H5Z_filter_t filter)
     * }
     */
    public static MethodHandle H5Premove_filter$handle() {
        return H5Premove_filter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Premove_filter(hid_t plist_id, H5Z_filter_t filter)
     * }
     */
    public static MemorySegment H5Premove_filter$address() {
        return H5Premove_filter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Premove_filter(hid_t plist_id, H5Z_filter_t filter)
     * }
     */
    public static int H5Premove_filter(long plist_id, int filter) {
        var mh$ = H5Premove_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Premove_filter", plist_id, filter);
            }
            return (int)mh$.invokeExact(plist_id, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_attr_creation_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_attr_creation_order");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_attr_creation_order(hid_t plist_id, unsigned int crt_order_flags)
     * }
     */
    public static FunctionDescriptor H5Pset_attr_creation_order$descriptor() {
        return H5Pset_attr_creation_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_attr_creation_order(hid_t plist_id, unsigned int crt_order_flags)
     * }
     */
    public static MethodHandle H5Pset_attr_creation_order$handle() {
        return H5Pset_attr_creation_order.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_attr_creation_order(hid_t plist_id, unsigned int crt_order_flags)
     * }
     */
    public static MemorySegment H5Pset_attr_creation_order$address() {
        return H5Pset_attr_creation_order.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_attr_creation_order(hid_t plist_id, unsigned int crt_order_flags)
     * }
     */
    public static int H5Pset_attr_creation_order(long plist_id, int crt_order_flags) {
        var mh$ = H5Pset_attr_creation_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_attr_creation_order", plist_id, crt_order_flags);
            }
            return (int)mh$.invokeExact(plist_id, crt_order_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_attr_phase_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_attr_phase_change");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_attr_phase_change(hid_t plist_id, unsigned int max_compact, unsigned int min_dense)
     * }
     */
    public static FunctionDescriptor H5Pset_attr_phase_change$descriptor() {
        return H5Pset_attr_phase_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_attr_phase_change(hid_t plist_id, unsigned int max_compact, unsigned int min_dense)
     * }
     */
    public static MethodHandle H5Pset_attr_phase_change$handle() {
        return H5Pset_attr_phase_change.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_attr_phase_change(hid_t plist_id, unsigned int max_compact, unsigned int min_dense)
     * }
     */
    public static MemorySegment H5Pset_attr_phase_change$address() {
        return H5Pset_attr_phase_change.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_attr_phase_change(hid_t plist_id, unsigned int max_compact, unsigned int min_dense)
     * }
     */
    public static int H5Pset_attr_phase_change(long plist_id, int max_compact, int min_dense) {
        var mh$ = H5Pset_attr_phase_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_attr_phase_change", plist_id, max_compact, min_dense);
            }
            return (int)mh$.invokeExact(plist_id, max_compact, min_dense);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_deflate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_deflate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_deflate(hid_t plist_id, unsigned int level)
     * }
     */
    public static FunctionDescriptor H5Pset_deflate$descriptor() {
        return H5Pset_deflate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_deflate(hid_t plist_id, unsigned int level)
     * }
     */
    public static MethodHandle H5Pset_deflate$handle() {
        return H5Pset_deflate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_deflate(hid_t plist_id, unsigned int level)
     * }
     */
    public static MemorySegment H5Pset_deflate$address() {
        return H5Pset_deflate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_deflate(hid_t plist_id, unsigned int level)
     * }
     */
    public static int H5Pset_deflate(long plist_id, int level) {
        var mh$ = H5Pset_deflate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_deflate", plist_id, level);
            }
            return (int)mh$.invokeExact(plist_id, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_filter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_filter(hid_t plist_id, H5Z_filter_t filter, unsigned int flags, size_t cd_nelmts, const unsigned int cd_values[])
     * }
     */
    public static FunctionDescriptor H5Pset_filter$descriptor() {
        return H5Pset_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_filter(hid_t plist_id, H5Z_filter_t filter, unsigned int flags, size_t cd_nelmts, const unsigned int cd_values[])
     * }
     */
    public static MethodHandle H5Pset_filter$handle() {
        return H5Pset_filter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_filter(hid_t plist_id, H5Z_filter_t filter, unsigned int flags, size_t cd_nelmts, const unsigned int cd_values[])
     * }
     */
    public static MemorySegment H5Pset_filter$address() {
        return H5Pset_filter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_filter(hid_t plist_id, H5Z_filter_t filter, unsigned int flags, size_t cd_nelmts, const unsigned int cd_values[])
     * }
     */
    public static int H5Pset_filter(long plist_id, int filter, int flags, long cd_nelmts, MemorySegment cd_values) {
        var mh$ = H5Pset_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_filter", plist_id, filter, flags, cd_nelmts, cd_values);
            }
            return (int)mh$.invokeExact(plist_id, filter, flags, cd_nelmts, cd_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fletcher32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fletcher32");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fletcher32(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pset_fletcher32$descriptor() {
        return H5Pset_fletcher32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fletcher32(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pset_fletcher32$handle() {
        return H5Pset_fletcher32.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fletcher32(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pset_fletcher32$address() {
        return H5Pset_fletcher32.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fletcher32(hid_t plist_id)
     * }
     */
    public static int H5Pset_fletcher32(long plist_id) {
        var mh$ = H5Pset_fletcher32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fletcher32", plist_id);
            }
            return (int)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_obj_track_times {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_BOOL
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_obj_track_times");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_obj_track_times(hid_t plist_id, hbool_t track_times)
     * }
     */
    public static FunctionDescriptor H5Pset_obj_track_times$descriptor() {
        return H5Pset_obj_track_times.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_obj_track_times(hid_t plist_id, hbool_t track_times)
     * }
     */
    public static MethodHandle H5Pset_obj_track_times$handle() {
        return H5Pset_obj_track_times.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_obj_track_times(hid_t plist_id, hbool_t track_times)
     * }
     */
    public static MemorySegment H5Pset_obj_track_times$address() {
        return H5Pset_obj_track_times.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_obj_track_times(hid_t plist_id, hbool_t track_times)
     * }
     */
    public static int H5Pset_obj_track_times(long plist_id, boolean track_times) {
        var mh$ = H5Pset_obj_track_times.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_obj_track_times", plist_id, track_times);
            }
            return (int)mh$.invokeExact(plist_id, track_times);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_file_space_page_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_file_space_page_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_space_page_size(hid_t plist_id, hsize_t *fsp_size)
     * }
     */
    public static FunctionDescriptor H5Pget_file_space_page_size$descriptor() {
        return H5Pget_file_space_page_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_space_page_size(hid_t plist_id, hsize_t *fsp_size)
     * }
     */
    public static MethodHandle H5Pget_file_space_page_size$handle() {
        return H5Pget_file_space_page_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_space_page_size(hid_t plist_id, hsize_t *fsp_size)
     * }
     */
    public static MemorySegment H5Pget_file_space_page_size$address() {
        return H5Pget_file_space_page_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_file_space_page_size(hid_t plist_id, hsize_t *fsp_size)
     * }
     */
    public static int H5Pget_file_space_page_size(long plist_id, MemorySegment fsp_size) {
        var mh$ = H5Pget_file_space_page_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_file_space_page_size", plist_id, fsp_size);
            }
            return (int)mh$.invokeExact(plist_id, fsp_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_file_space_strategy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_file_space_strategy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_space_strategy(hid_t plist_id, H5F_fspace_strategy_t *strategy, hbool_t *persist, hsize_t *threshold)
     * }
     */
    public static FunctionDescriptor H5Pget_file_space_strategy$descriptor() {
        return H5Pget_file_space_strategy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_space_strategy(hid_t plist_id, H5F_fspace_strategy_t *strategy, hbool_t *persist, hsize_t *threshold)
     * }
     */
    public static MethodHandle H5Pget_file_space_strategy$handle() {
        return H5Pget_file_space_strategy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_space_strategy(hid_t plist_id, H5F_fspace_strategy_t *strategy, hbool_t *persist, hsize_t *threshold)
     * }
     */
    public static MemorySegment H5Pget_file_space_strategy$address() {
        return H5Pget_file_space_strategy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_file_space_strategy(hid_t plist_id, H5F_fspace_strategy_t *strategy, hbool_t *persist, hsize_t *threshold)
     * }
     */
    public static int H5Pget_file_space_strategy(long plist_id, MemorySegment strategy, MemorySegment persist, MemorySegment threshold) {
        var mh$ = H5Pget_file_space_strategy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_file_space_strategy", plist_id, strategy, persist, threshold);
            }
            return (int)mh$.invokeExact(plist_id, strategy, persist, threshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_istore_k {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_istore_k");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_istore_k(hid_t plist_id, unsigned int *ik)
     * }
     */
    public static FunctionDescriptor H5Pget_istore_k$descriptor() {
        return H5Pget_istore_k.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_istore_k(hid_t plist_id, unsigned int *ik)
     * }
     */
    public static MethodHandle H5Pget_istore_k$handle() {
        return H5Pget_istore_k.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_istore_k(hid_t plist_id, unsigned int *ik)
     * }
     */
    public static MemorySegment H5Pget_istore_k$address() {
        return H5Pget_istore_k.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_istore_k(hid_t plist_id, unsigned int *ik)
     * }
     */
    public static int H5Pget_istore_k(long plist_id, MemorySegment ik) {
        var mh$ = H5Pget_istore_k.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_istore_k", plist_id, ik);
            }
            return (int)mh$.invokeExact(plist_id, ik);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_shared_mesg_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_shared_mesg_index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_shared_mesg_index(hid_t plist_id, unsigned int index_num, unsigned int *mesg_type_flags, unsigned int *min_mesg_size)
     * }
     */
    public static FunctionDescriptor H5Pget_shared_mesg_index$descriptor() {
        return H5Pget_shared_mesg_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_shared_mesg_index(hid_t plist_id, unsigned int index_num, unsigned int *mesg_type_flags, unsigned int *min_mesg_size)
     * }
     */
    public static MethodHandle H5Pget_shared_mesg_index$handle() {
        return H5Pget_shared_mesg_index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_shared_mesg_index(hid_t plist_id, unsigned int index_num, unsigned int *mesg_type_flags, unsigned int *min_mesg_size)
     * }
     */
    public static MemorySegment H5Pget_shared_mesg_index$address() {
        return H5Pget_shared_mesg_index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_shared_mesg_index(hid_t plist_id, unsigned int index_num, unsigned int *mesg_type_flags, unsigned int *min_mesg_size)
     * }
     */
    public static int H5Pget_shared_mesg_index(long plist_id, int index_num, MemorySegment mesg_type_flags, MemorySegment min_mesg_size) {
        var mh$ = H5Pget_shared_mesg_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_shared_mesg_index", plist_id, index_num, mesg_type_flags, min_mesg_size);
            }
            return (int)mh$.invokeExact(plist_id, index_num, mesg_type_flags, min_mesg_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_shared_mesg_nindexes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_shared_mesg_nindexes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_shared_mesg_nindexes(hid_t plist_id, unsigned int *nindexes)
     * }
     */
    public static FunctionDescriptor H5Pget_shared_mesg_nindexes$descriptor() {
        return H5Pget_shared_mesg_nindexes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_shared_mesg_nindexes(hid_t plist_id, unsigned int *nindexes)
     * }
     */
    public static MethodHandle H5Pget_shared_mesg_nindexes$handle() {
        return H5Pget_shared_mesg_nindexes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_shared_mesg_nindexes(hid_t plist_id, unsigned int *nindexes)
     * }
     */
    public static MemorySegment H5Pget_shared_mesg_nindexes$address() {
        return H5Pget_shared_mesg_nindexes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_shared_mesg_nindexes(hid_t plist_id, unsigned int *nindexes)
     * }
     */
    public static int H5Pget_shared_mesg_nindexes(long plist_id, MemorySegment nindexes) {
        var mh$ = H5Pget_shared_mesg_nindexes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_shared_mesg_nindexes", plist_id, nindexes);
            }
            return (int)mh$.invokeExact(plist_id, nindexes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_shared_mesg_phase_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_shared_mesg_phase_change");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_shared_mesg_phase_change(hid_t plist_id, unsigned int *max_list, unsigned int *min_btree)
     * }
     */
    public static FunctionDescriptor H5Pget_shared_mesg_phase_change$descriptor() {
        return H5Pget_shared_mesg_phase_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_shared_mesg_phase_change(hid_t plist_id, unsigned int *max_list, unsigned int *min_btree)
     * }
     */
    public static MethodHandle H5Pget_shared_mesg_phase_change$handle() {
        return H5Pget_shared_mesg_phase_change.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_shared_mesg_phase_change(hid_t plist_id, unsigned int *max_list, unsigned int *min_btree)
     * }
     */
    public static MemorySegment H5Pget_shared_mesg_phase_change$address() {
        return H5Pget_shared_mesg_phase_change.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_shared_mesg_phase_change(hid_t plist_id, unsigned int *max_list, unsigned int *min_btree)
     * }
     */
    public static int H5Pget_shared_mesg_phase_change(long plist_id, MemorySegment max_list, MemorySegment min_btree) {
        var mh$ = H5Pget_shared_mesg_phase_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_shared_mesg_phase_change", plist_id, max_list, min_btree);
            }
            return (int)mh$.invokeExact(plist_id, max_list, min_btree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_sizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_sizes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_sizes(hid_t plist_id, size_t *sizeof_addr, size_t *sizeof_size)
     * }
     */
    public static FunctionDescriptor H5Pget_sizes$descriptor() {
        return H5Pget_sizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_sizes(hid_t plist_id, size_t *sizeof_addr, size_t *sizeof_size)
     * }
     */
    public static MethodHandle H5Pget_sizes$handle() {
        return H5Pget_sizes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_sizes(hid_t plist_id, size_t *sizeof_addr, size_t *sizeof_size)
     * }
     */
    public static MemorySegment H5Pget_sizes$address() {
        return H5Pget_sizes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_sizes(hid_t plist_id, size_t *sizeof_addr, size_t *sizeof_size)
     * }
     */
    public static int H5Pget_sizes(long plist_id, MemorySegment sizeof_addr, MemorySegment sizeof_size) {
        var mh$ = H5Pget_sizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_sizes", plist_id, sizeof_addr, sizeof_size);
            }
            return (int)mh$.invokeExact(plist_id, sizeof_addr, sizeof_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_sym_k {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_sym_k");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_sym_k(hid_t plist_id, unsigned int *ik, unsigned int *lk)
     * }
     */
    public static FunctionDescriptor H5Pget_sym_k$descriptor() {
        return H5Pget_sym_k.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_sym_k(hid_t plist_id, unsigned int *ik, unsigned int *lk)
     * }
     */
    public static MethodHandle H5Pget_sym_k$handle() {
        return H5Pget_sym_k.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_sym_k(hid_t plist_id, unsigned int *ik, unsigned int *lk)
     * }
     */
    public static MemorySegment H5Pget_sym_k$address() {
        return H5Pget_sym_k.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_sym_k(hid_t plist_id, unsigned int *ik, unsigned int *lk)
     * }
     */
    public static int H5Pget_sym_k(long plist_id, MemorySegment ik, MemorySegment lk) {
        var mh$ = H5Pget_sym_k.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_sym_k", plist_id, ik, lk);
            }
            return (int)mh$.invokeExact(plist_id, ik, lk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_userblock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_userblock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_userblock(hid_t plist_id, hsize_t *size)
     * }
     */
    public static FunctionDescriptor H5Pget_userblock$descriptor() {
        return H5Pget_userblock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_userblock(hid_t plist_id, hsize_t *size)
     * }
     */
    public static MethodHandle H5Pget_userblock$handle() {
        return H5Pget_userblock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_userblock(hid_t plist_id, hsize_t *size)
     * }
     */
    public static MemorySegment H5Pget_userblock$address() {
        return H5Pget_userblock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_userblock(hid_t plist_id, hsize_t *size)
     * }
     */
    public static int H5Pget_userblock(long plist_id, MemorySegment size) {
        var mh$ = H5Pget_userblock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_userblock", plist_id, size);
            }
            return (int)mh$.invokeExact(plist_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_file_space_page_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_file_space_page_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_space_page_size(hid_t plist_id, hsize_t fsp_size)
     * }
     */
    public static FunctionDescriptor H5Pset_file_space_page_size$descriptor() {
        return H5Pset_file_space_page_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_space_page_size(hid_t plist_id, hsize_t fsp_size)
     * }
     */
    public static MethodHandle H5Pset_file_space_page_size$handle() {
        return H5Pset_file_space_page_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_space_page_size(hid_t plist_id, hsize_t fsp_size)
     * }
     */
    public static MemorySegment H5Pset_file_space_page_size$address() {
        return H5Pset_file_space_page_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_file_space_page_size(hid_t plist_id, hsize_t fsp_size)
     * }
     */
    public static int H5Pset_file_space_page_size(long plist_id, long fsp_size) {
        var mh$ = H5Pset_file_space_page_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_file_space_page_size", plist_id, fsp_size);
            }
            return (int)mh$.invokeExact(plist_id, fsp_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_file_space_strategy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_BOOL,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_file_space_strategy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_space_strategy(hid_t plist_id, H5F_fspace_strategy_t strategy, hbool_t persist, hsize_t threshold)
     * }
     */
    public static FunctionDescriptor H5Pset_file_space_strategy$descriptor() {
        return H5Pset_file_space_strategy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_space_strategy(hid_t plist_id, H5F_fspace_strategy_t strategy, hbool_t persist, hsize_t threshold)
     * }
     */
    public static MethodHandle H5Pset_file_space_strategy$handle() {
        return H5Pset_file_space_strategy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_space_strategy(hid_t plist_id, H5F_fspace_strategy_t strategy, hbool_t persist, hsize_t threshold)
     * }
     */
    public static MemorySegment H5Pset_file_space_strategy$address() {
        return H5Pset_file_space_strategy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_file_space_strategy(hid_t plist_id, H5F_fspace_strategy_t strategy, hbool_t persist, hsize_t threshold)
     * }
     */
    public static int H5Pset_file_space_strategy(long plist_id, int strategy, boolean persist, long threshold) {
        var mh$ = H5Pset_file_space_strategy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_file_space_strategy", plist_id, strategy, persist, threshold);
            }
            return (int)mh$.invokeExact(plist_id, strategy, persist, threshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_istore_k {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_istore_k");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_istore_k(hid_t plist_id, unsigned int ik)
     * }
     */
    public static FunctionDescriptor H5Pset_istore_k$descriptor() {
        return H5Pset_istore_k.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_istore_k(hid_t plist_id, unsigned int ik)
     * }
     */
    public static MethodHandle H5Pset_istore_k$handle() {
        return H5Pset_istore_k.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_istore_k(hid_t plist_id, unsigned int ik)
     * }
     */
    public static MemorySegment H5Pset_istore_k$address() {
        return H5Pset_istore_k.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_istore_k(hid_t plist_id, unsigned int ik)
     * }
     */
    public static int H5Pset_istore_k(long plist_id, int ik) {
        var mh$ = H5Pset_istore_k.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_istore_k", plist_id, ik);
            }
            return (int)mh$.invokeExact(plist_id, ik);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_shared_mesg_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_shared_mesg_index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_shared_mesg_index(hid_t plist_id, unsigned int index_num, unsigned int mesg_type_flags, unsigned int min_mesg_size)
     * }
     */
    public static FunctionDescriptor H5Pset_shared_mesg_index$descriptor() {
        return H5Pset_shared_mesg_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_shared_mesg_index(hid_t plist_id, unsigned int index_num, unsigned int mesg_type_flags, unsigned int min_mesg_size)
     * }
     */
    public static MethodHandle H5Pset_shared_mesg_index$handle() {
        return H5Pset_shared_mesg_index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_shared_mesg_index(hid_t plist_id, unsigned int index_num, unsigned int mesg_type_flags, unsigned int min_mesg_size)
     * }
     */
    public static MemorySegment H5Pset_shared_mesg_index$address() {
        return H5Pset_shared_mesg_index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_shared_mesg_index(hid_t plist_id, unsigned int index_num, unsigned int mesg_type_flags, unsigned int min_mesg_size)
     * }
     */
    public static int H5Pset_shared_mesg_index(long plist_id, int index_num, int mesg_type_flags, int min_mesg_size) {
        var mh$ = H5Pset_shared_mesg_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_shared_mesg_index", plist_id, index_num, mesg_type_flags, min_mesg_size);
            }
            return (int)mh$.invokeExact(plist_id, index_num, mesg_type_flags, min_mesg_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_shared_mesg_nindexes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_shared_mesg_nindexes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_shared_mesg_nindexes(hid_t plist_id, unsigned int nindexes)
     * }
     */
    public static FunctionDescriptor H5Pset_shared_mesg_nindexes$descriptor() {
        return H5Pset_shared_mesg_nindexes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_shared_mesg_nindexes(hid_t plist_id, unsigned int nindexes)
     * }
     */
    public static MethodHandle H5Pset_shared_mesg_nindexes$handle() {
        return H5Pset_shared_mesg_nindexes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_shared_mesg_nindexes(hid_t plist_id, unsigned int nindexes)
     * }
     */
    public static MemorySegment H5Pset_shared_mesg_nindexes$address() {
        return H5Pset_shared_mesg_nindexes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_shared_mesg_nindexes(hid_t plist_id, unsigned int nindexes)
     * }
     */
    public static int H5Pset_shared_mesg_nindexes(long plist_id, int nindexes) {
        var mh$ = H5Pset_shared_mesg_nindexes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_shared_mesg_nindexes", plist_id, nindexes);
            }
            return (int)mh$.invokeExact(plist_id, nindexes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_shared_mesg_phase_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_shared_mesg_phase_change");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_shared_mesg_phase_change(hid_t plist_id, unsigned int max_list, unsigned int min_btree)
     * }
     */
    public static FunctionDescriptor H5Pset_shared_mesg_phase_change$descriptor() {
        return H5Pset_shared_mesg_phase_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_shared_mesg_phase_change(hid_t plist_id, unsigned int max_list, unsigned int min_btree)
     * }
     */
    public static MethodHandle H5Pset_shared_mesg_phase_change$handle() {
        return H5Pset_shared_mesg_phase_change.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_shared_mesg_phase_change(hid_t plist_id, unsigned int max_list, unsigned int min_btree)
     * }
     */
    public static MemorySegment H5Pset_shared_mesg_phase_change$address() {
        return H5Pset_shared_mesg_phase_change.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_shared_mesg_phase_change(hid_t plist_id, unsigned int max_list, unsigned int min_btree)
     * }
     */
    public static int H5Pset_shared_mesg_phase_change(long plist_id, int max_list, int min_btree) {
        var mh$ = H5Pset_shared_mesg_phase_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_shared_mesg_phase_change", plist_id, max_list, min_btree);
            }
            return (int)mh$.invokeExact(plist_id, max_list, min_btree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_sizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_sizes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_sizes(hid_t plist_id, size_t sizeof_addr, size_t sizeof_size)
     * }
     */
    public static FunctionDescriptor H5Pset_sizes$descriptor() {
        return H5Pset_sizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_sizes(hid_t plist_id, size_t sizeof_addr, size_t sizeof_size)
     * }
     */
    public static MethodHandle H5Pset_sizes$handle() {
        return H5Pset_sizes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_sizes(hid_t plist_id, size_t sizeof_addr, size_t sizeof_size)
     * }
     */
    public static MemorySegment H5Pset_sizes$address() {
        return H5Pset_sizes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_sizes(hid_t plist_id, size_t sizeof_addr, size_t sizeof_size)
     * }
     */
    public static int H5Pset_sizes(long plist_id, long sizeof_addr, long sizeof_size) {
        var mh$ = H5Pset_sizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_sizes", plist_id, sizeof_addr, sizeof_size);
            }
            return (int)mh$.invokeExact(plist_id, sizeof_addr, sizeof_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_sym_k {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_sym_k");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_sym_k(hid_t plist_id, unsigned int ik, unsigned int lk)
     * }
     */
    public static FunctionDescriptor H5Pset_sym_k$descriptor() {
        return H5Pset_sym_k.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_sym_k(hid_t plist_id, unsigned int ik, unsigned int lk)
     * }
     */
    public static MethodHandle H5Pset_sym_k$handle() {
        return H5Pset_sym_k.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_sym_k(hid_t plist_id, unsigned int ik, unsigned int lk)
     * }
     */
    public static MemorySegment H5Pset_sym_k$address() {
        return H5Pset_sym_k.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_sym_k(hid_t plist_id, unsigned int ik, unsigned int lk)
     * }
     */
    public static int H5Pset_sym_k(long plist_id, int ik, int lk) {
        var mh$ = H5Pset_sym_k.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_sym_k", plist_id, ik, lk);
            }
            return (int)mh$.invokeExact(plist_id, ik, lk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_userblock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_userblock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_userblock(hid_t plist_id, hsize_t size)
     * }
     */
    public static FunctionDescriptor H5Pset_userblock$descriptor() {
        return H5Pset_userblock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_userblock(hid_t plist_id, hsize_t size)
     * }
     */
    public static MethodHandle H5Pset_userblock$handle() {
        return H5Pset_userblock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_userblock(hid_t plist_id, hsize_t size)
     * }
     */
    public static MemorySegment H5Pset_userblock$address() {
        return H5Pset_userblock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_userblock(hid_t plist_id, hsize_t size)
     * }
     */
    public static int H5Pset_userblock(long plist_id, long size) {
        var mh$ = H5Pset_userblock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_userblock", plist_id, size);
            }
            return (int)mh$.invokeExact(plist_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_alignment");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_alignment(hid_t fapl_id, hsize_t *threshold, hsize_t *alignment)
     * }
     */
    public static FunctionDescriptor H5Pget_alignment$descriptor() {
        return H5Pget_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_alignment(hid_t fapl_id, hsize_t *threshold, hsize_t *alignment)
     * }
     */
    public static MethodHandle H5Pget_alignment$handle() {
        return H5Pget_alignment.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_alignment(hid_t fapl_id, hsize_t *threshold, hsize_t *alignment)
     * }
     */
    public static MemorySegment H5Pget_alignment$address() {
        return H5Pget_alignment.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_alignment(hid_t fapl_id, hsize_t *threshold, hsize_t *alignment)
     * }
     */
    public static int H5Pget_alignment(long fapl_id, MemorySegment threshold, MemorySegment alignment) {
        var mh$ = H5Pget_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_alignment", fapl_id, threshold, alignment);
            }
            return (int)mh$.invokeExact(fapl_id, threshold, alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_cache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_cache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_cache(hid_t plist_id, int *mdc_nelmts, size_t *rdcc_nslots, size_t *rdcc_nbytes, double *rdcc_w0)
     * }
     */
    public static FunctionDescriptor H5Pget_cache$descriptor() {
        return H5Pget_cache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_cache(hid_t plist_id, int *mdc_nelmts, size_t *rdcc_nslots, size_t *rdcc_nbytes, double *rdcc_w0)
     * }
     */
    public static MethodHandle H5Pget_cache$handle() {
        return H5Pget_cache.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_cache(hid_t plist_id, int *mdc_nelmts, size_t *rdcc_nslots, size_t *rdcc_nbytes, double *rdcc_w0)
     * }
     */
    public static MemorySegment H5Pget_cache$address() {
        return H5Pget_cache.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_cache(hid_t plist_id, int *mdc_nelmts, size_t *rdcc_nslots, size_t *rdcc_nbytes, double *rdcc_w0)
     * }
     */
    public static int H5Pget_cache(long plist_id, MemorySegment mdc_nelmts, MemorySegment rdcc_nslots, MemorySegment rdcc_nbytes, MemorySegment rdcc_w0) {
        var mh$ = H5Pget_cache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_cache", plist_id, mdc_nelmts, rdcc_nslots, rdcc_nbytes, rdcc_w0);
            }
            return (int)mh$.invokeExact(plist_id, mdc_nelmts, rdcc_nslots, rdcc_nbytes, rdcc_w0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_core_write_tracking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_core_write_tracking");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_core_write_tracking(hid_t fapl_id, hbool_t *is_enabled, size_t *page_size)
     * }
     */
    public static FunctionDescriptor H5Pget_core_write_tracking$descriptor() {
        return H5Pget_core_write_tracking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_core_write_tracking(hid_t fapl_id, hbool_t *is_enabled, size_t *page_size)
     * }
     */
    public static MethodHandle H5Pget_core_write_tracking$handle() {
        return H5Pget_core_write_tracking.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_core_write_tracking(hid_t fapl_id, hbool_t *is_enabled, size_t *page_size)
     * }
     */
    public static MemorySegment H5Pget_core_write_tracking$address() {
        return H5Pget_core_write_tracking.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_core_write_tracking(hid_t fapl_id, hbool_t *is_enabled, size_t *page_size)
     * }
     */
    public static int H5Pget_core_write_tracking(long fapl_id, MemorySegment is_enabled, MemorySegment page_size) {
        var mh$ = H5Pget_core_write_tracking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_core_write_tracking", fapl_id, is_enabled, page_size);
            }
            return (int)mh$.invokeExact(fapl_id, is_enabled, page_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_driver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_driver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Pget_driver(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pget_driver$descriptor() {
        return H5Pget_driver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Pget_driver(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pget_driver$handle() {
        return H5Pget_driver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Pget_driver(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pget_driver$address() {
        return H5Pget_driver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5Pget_driver(hid_t plist_id)
     * }
     */
    public static long H5Pget_driver(long plist_id) {
        var mh$ = H5Pget_driver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_driver", plist_id);
            }
            return (long)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_driver_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_driver_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *H5Pget_driver_info(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pget_driver_info$descriptor() {
        return H5Pget_driver_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *H5Pget_driver_info(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pget_driver_info$handle() {
        return H5Pget_driver_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *H5Pget_driver_info(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pget_driver_info$address() {
        return H5Pget_driver_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *H5Pget_driver_info(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pget_driver_info(long plist_id) {
        var mh$ = H5Pget_driver_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_driver_info", plist_id);
            }
            return (MemorySegment)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_driver_config_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_driver_config_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Pget_driver_config_str(hid_t fapl_id, char *config_buf, size_t buf_size)
     * }
     */
    public static FunctionDescriptor H5Pget_driver_config_str$descriptor() {
        return H5Pget_driver_config_str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Pget_driver_config_str(hid_t fapl_id, char *config_buf, size_t buf_size)
     * }
     */
    public static MethodHandle H5Pget_driver_config_str$handle() {
        return H5Pget_driver_config_str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Pget_driver_config_str(hid_t fapl_id, char *config_buf, size_t buf_size)
     * }
     */
    public static MemorySegment H5Pget_driver_config_str$address() {
        return H5Pget_driver_config_str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t H5Pget_driver_config_str(hid_t fapl_id, char *config_buf, size_t buf_size)
     * }
     */
    public static long H5Pget_driver_config_str(long fapl_id, MemorySegment config_buf, long buf_size) {
        var mh$ = H5Pget_driver_config_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_driver_config_str", fapl_id, config_buf, buf_size);
            }
            return (long)mh$.invokeExact(fapl_id, config_buf, buf_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_elink_file_cache_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_elink_file_cache_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_elink_file_cache_size(hid_t plist_id, unsigned int *efc_size)
     * }
     */
    public static FunctionDescriptor H5Pget_elink_file_cache_size$descriptor() {
        return H5Pget_elink_file_cache_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_elink_file_cache_size(hid_t plist_id, unsigned int *efc_size)
     * }
     */
    public static MethodHandle H5Pget_elink_file_cache_size$handle() {
        return H5Pget_elink_file_cache_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_elink_file_cache_size(hid_t plist_id, unsigned int *efc_size)
     * }
     */
    public static MemorySegment H5Pget_elink_file_cache_size$address() {
        return H5Pget_elink_file_cache_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_elink_file_cache_size(hid_t plist_id, unsigned int *efc_size)
     * }
     */
    public static int H5Pget_elink_file_cache_size(long plist_id, MemorySegment efc_size) {
        var mh$ = H5Pget_elink_file_cache_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_elink_file_cache_size", plist_id, efc_size);
            }
            return (int)mh$.invokeExact(plist_id, efc_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_evict_on_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_evict_on_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_evict_on_close(hid_t fapl_id, hbool_t *evict_on_close)
     * }
     */
    public static FunctionDescriptor H5Pget_evict_on_close$descriptor() {
        return H5Pget_evict_on_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_evict_on_close(hid_t fapl_id, hbool_t *evict_on_close)
     * }
     */
    public static MethodHandle H5Pget_evict_on_close$handle() {
        return H5Pget_evict_on_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_evict_on_close(hid_t fapl_id, hbool_t *evict_on_close)
     * }
     */
    public static MemorySegment H5Pget_evict_on_close$address() {
        return H5Pget_evict_on_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_evict_on_close(hid_t fapl_id, hbool_t *evict_on_close)
     * }
     */
    public static int H5Pget_evict_on_close(long fapl_id, MemorySegment evict_on_close) {
        var mh$ = H5Pget_evict_on_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_evict_on_close", fapl_id, evict_on_close);
            }
            return (int)mh$.invokeExact(fapl_id, evict_on_close);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_family_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_family_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_family_offset(hid_t fapl_id, hsize_t *offset)
     * }
     */
    public static FunctionDescriptor H5Pget_family_offset$descriptor() {
        return H5Pget_family_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_family_offset(hid_t fapl_id, hsize_t *offset)
     * }
     */
    public static MethodHandle H5Pget_family_offset$handle() {
        return H5Pget_family_offset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_family_offset(hid_t fapl_id, hsize_t *offset)
     * }
     */
    public static MemorySegment H5Pget_family_offset$address() {
        return H5Pget_family_offset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_family_offset(hid_t fapl_id, hsize_t *offset)
     * }
     */
    public static int H5Pget_family_offset(long fapl_id, MemorySegment offset) {
        var mh$ = H5Pget_family_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_family_offset", fapl_id, offset);
            }
            return (int)mh$.invokeExact(fapl_id, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_fclose_degree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_fclose_degree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_fclose_degree(hid_t fapl_id, H5F_close_degree_t *degree)
     * }
     */
    public static FunctionDescriptor H5Pget_fclose_degree$descriptor() {
        return H5Pget_fclose_degree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_fclose_degree(hid_t fapl_id, H5F_close_degree_t *degree)
     * }
     */
    public static MethodHandle H5Pget_fclose_degree$handle() {
        return H5Pget_fclose_degree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_fclose_degree(hid_t fapl_id, H5F_close_degree_t *degree)
     * }
     */
    public static MemorySegment H5Pget_fclose_degree$address() {
        return H5Pget_fclose_degree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_fclose_degree(hid_t fapl_id, H5F_close_degree_t *degree)
     * }
     */
    public static int H5Pget_fclose_degree(long fapl_id, MemorySegment degree) {
        var mh$ = H5Pget_fclose_degree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_fclose_degree", fapl_id, degree);
            }
            return (int)mh$.invokeExact(fapl_id, degree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_file_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_file_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_image(hid_t fapl_id, void **buf_ptr_ptr, size_t *buf_len_ptr)
     * }
     */
    public static FunctionDescriptor H5Pget_file_image$descriptor() {
        return H5Pget_file_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_image(hid_t fapl_id, void **buf_ptr_ptr, size_t *buf_len_ptr)
     * }
     */
    public static MethodHandle H5Pget_file_image$handle() {
        return H5Pget_file_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_image(hid_t fapl_id, void **buf_ptr_ptr, size_t *buf_len_ptr)
     * }
     */
    public static MemorySegment H5Pget_file_image$address() {
        return H5Pget_file_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_file_image(hid_t fapl_id, void **buf_ptr_ptr, size_t *buf_len_ptr)
     * }
     */
    public static int H5Pget_file_image(long fapl_id, MemorySegment buf_ptr_ptr, MemorySegment buf_len_ptr) {
        var mh$ = H5Pget_file_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_file_image", fapl_id, buf_ptr_ptr, buf_len_ptr);
            }
            return (int)mh$.invokeExact(fapl_id, buf_ptr_ptr, buf_len_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_file_image_callbacks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_file_image_callbacks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_image_callbacks(hid_t fapl_id, H5FD_file_image_callbacks_t *callbacks_ptr)
     * }
     */
    public static FunctionDescriptor H5Pget_file_image_callbacks$descriptor() {
        return H5Pget_file_image_callbacks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_image_callbacks(hid_t fapl_id, H5FD_file_image_callbacks_t *callbacks_ptr)
     * }
     */
    public static MethodHandle H5Pget_file_image_callbacks$handle() {
        return H5Pget_file_image_callbacks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_image_callbacks(hid_t fapl_id, H5FD_file_image_callbacks_t *callbacks_ptr)
     * }
     */
    public static MemorySegment H5Pget_file_image_callbacks$address() {
        return H5Pget_file_image_callbacks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_file_image_callbacks(hid_t fapl_id, H5FD_file_image_callbacks_t *callbacks_ptr)
     * }
     */
    public static int H5Pget_file_image_callbacks(long fapl_id, MemorySegment callbacks_ptr) {
        var mh$ = H5Pget_file_image_callbacks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_file_image_callbacks", fapl_id, callbacks_ptr);
            }
            return (int)mh$.invokeExact(fapl_id, callbacks_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_file_locking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_file_locking");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_locking(hid_t fapl_id, hbool_t *use_file_locking, hbool_t *ignore_when_disabled)
     * }
     */
    public static FunctionDescriptor H5Pget_file_locking$descriptor() {
        return H5Pget_file_locking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_locking(hid_t fapl_id, hbool_t *use_file_locking, hbool_t *ignore_when_disabled)
     * }
     */
    public static MethodHandle H5Pget_file_locking$handle() {
        return H5Pget_file_locking.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_locking(hid_t fapl_id, hbool_t *use_file_locking, hbool_t *ignore_when_disabled)
     * }
     */
    public static MemorySegment H5Pget_file_locking$address() {
        return H5Pget_file_locking.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_file_locking(hid_t fapl_id, hbool_t *use_file_locking, hbool_t *ignore_when_disabled)
     * }
     */
    public static int H5Pget_file_locking(long fapl_id, MemorySegment use_file_locking, MemorySegment ignore_when_disabled) {
        var mh$ = H5Pget_file_locking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_file_locking", fapl_id, use_file_locking, ignore_when_disabled);
            }
            return (int)mh$.invokeExact(fapl_id, use_file_locking, ignore_when_disabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_gc_references {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_gc_references");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_gc_references(hid_t fapl_id, unsigned int *gc_ref)
     * }
     */
    public static FunctionDescriptor H5Pget_gc_references$descriptor() {
        return H5Pget_gc_references.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_gc_references(hid_t fapl_id, unsigned int *gc_ref)
     * }
     */
    public static MethodHandle H5Pget_gc_references$handle() {
        return H5Pget_gc_references.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_gc_references(hid_t fapl_id, unsigned int *gc_ref)
     * }
     */
    public static MemorySegment H5Pget_gc_references$address() {
        return H5Pget_gc_references.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_gc_references(hid_t fapl_id, unsigned int *gc_ref)
     * }
     */
    public static int H5Pget_gc_references(long fapl_id, MemorySegment gc_ref) {
        var mh$ = H5Pget_gc_references.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_gc_references", fapl_id, gc_ref);
            }
            return (int)mh$.invokeExact(fapl_id, gc_ref);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_libver_bounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_libver_bounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_libver_bounds(hid_t plist_id, H5F_libver_t *low, H5F_libver_t *high)
     * }
     */
    public static FunctionDescriptor H5Pget_libver_bounds$descriptor() {
        return H5Pget_libver_bounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_libver_bounds(hid_t plist_id, H5F_libver_t *low, H5F_libver_t *high)
     * }
     */
    public static MethodHandle H5Pget_libver_bounds$handle() {
        return H5Pget_libver_bounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_libver_bounds(hid_t plist_id, H5F_libver_t *low, H5F_libver_t *high)
     * }
     */
    public static MemorySegment H5Pget_libver_bounds$address() {
        return H5Pget_libver_bounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_libver_bounds(hid_t plist_id, H5F_libver_t *low, H5F_libver_t *high)
     * }
     */
    public static int H5Pget_libver_bounds(long plist_id, MemorySegment low, MemorySegment high) {
        var mh$ = H5Pget_libver_bounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_libver_bounds", plist_id, low, high);
            }
            return (int)mh$.invokeExact(plist_id, low, high);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_mdc_config {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_mdc_config");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_mdc_config(hid_t plist_id, H5AC_cache_config_t *config_ptr)
     * }
     */
    public static FunctionDescriptor H5Pget_mdc_config$descriptor() {
        return H5Pget_mdc_config.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_mdc_config(hid_t plist_id, H5AC_cache_config_t *config_ptr)
     * }
     */
    public static MethodHandle H5Pget_mdc_config$handle() {
        return H5Pget_mdc_config.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_mdc_config(hid_t plist_id, H5AC_cache_config_t *config_ptr)
     * }
     */
    public static MemorySegment H5Pget_mdc_config$address() {
        return H5Pget_mdc_config.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_mdc_config(hid_t plist_id, H5AC_cache_config_t *config_ptr)
     * }
     */
    public static int H5Pget_mdc_config(long plist_id, MemorySegment config_ptr) {
        var mh$ = H5Pget_mdc_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_mdc_config", plist_id, config_ptr);
            }
            return (int)mh$.invokeExact(plist_id, config_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_mdc_image_config {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_mdc_image_config");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_mdc_image_config(hid_t plist_id, H5AC_cache_image_config_t *config_ptr)
     * }
     */
    public static FunctionDescriptor H5Pget_mdc_image_config$descriptor() {
        return H5Pget_mdc_image_config.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_mdc_image_config(hid_t plist_id, H5AC_cache_image_config_t *config_ptr)
     * }
     */
    public static MethodHandle H5Pget_mdc_image_config$handle() {
        return H5Pget_mdc_image_config.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_mdc_image_config(hid_t plist_id, H5AC_cache_image_config_t *config_ptr)
     * }
     */
    public static MemorySegment H5Pget_mdc_image_config$address() {
        return H5Pget_mdc_image_config.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_mdc_image_config(hid_t plist_id, H5AC_cache_image_config_t *config_ptr)
     * }
     */
    public static int H5Pget_mdc_image_config(long plist_id, MemorySegment config_ptr) {
        var mh$ = H5Pget_mdc_image_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_mdc_image_config", plist_id, config_ptr);
            }
            return (int)mh$.invokeExact(plist_id, config_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_mdc_log_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_mdc_log_options");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_mdc_log_options(hid_t plist_id, hbool_t *is_enabled, char *location, size_t *location_size, hbool_t *start_on_access)
     * }
     */
    public static FunctionDescriptor H5Pget_mdc_log_options$descriptor() {
        return H5Pget_mdc_log_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_mdc_log_options(hid_t plist_id, hbool_t *is_enabled, char *location, size_t *location_size, hbool_t *start_on_access)
     * }
     */
    public static MethodHandle H5Pget_mdc_log_options$handle() {
        return H5Pget_mdc_log_options.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_mdc_log_options(hid_t plist_id, hbool_t *is_enabled, char *location, size_t *location_size, hbool_t *start_on_access)
     * }
     */
    public static MemorySegment H5Pget_mdc_log_options$address() {
        return H5Pget_mdc_log_options.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_mdc_log_options(hid_t plist_id, hbool_t *is_enabled, char *location, size_t *location_size, hbool_t *start_on_access)
     * }
     */
    public static int H5Pget_mdc_log_options(long plist_id, MemorySegment is_enabled, MemorySegment location, MemorySegment location_size, MemorySegment start_on_access) {
        var mh$ = H5Pget_mdc_log_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_mdc_log_options", plist_id, is_enabled, location, location_size, start_on_access);
            }
            return (int)mh$.invokeExact(plist_id, is_enabled, location, location_size, start_on_access);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_meta_block_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_meta_block_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_meta_block_size(hid_t fapl_id, hsize_t *size)
     * }
     */
    public static FunctionDescriptor H5Pget_meta_block_size$descriptor() {
        return H5Pget_meta_block_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_meta_block_size(hid_t fapl_id, hsize_t *size)
     * }
     */
    public static MethodHandle H5Pget_meta_block_size$handle() {
        return H5Pget_meta_block_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_meta_block_size(hid_t fapl_id, hsize_t *size)
     * }
     */
    public static MemorySegment H5Pget_meta_block_size$address() {
        return H5Pget_meta_block_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_meta_block_size(hid_t fapl_id, hsize_t *size)
     * }
     */
    public static int H5Pget_meta_block_size(long fapl_id, MemorySegment size) {
        var mh$ = H5Pget_meta_block_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_meta_block_size", fapl_id, size);
            }
            return (int)mh$.invokeExact(fapl_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_metadata_read_attempts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_metadata_read_attempts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_metadata_read_attempts(hid_t plist_id, unsigned int *attempts)
     * }
     */
    public static FunctionDescriptor H5Pget_metadata_read_attempts$descriptor() {
        return H5Pget_metadata_read_attempts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_metadata_read_attempts(hid_t plist_id, unsigned int *attempts)
     * }
     */
    public static MethodHandle H5Pget_metadata_read_attempts$handle() {
        return H5Pget_metadata_read_attempts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_metadata_read_attempts(hid_t plist_id, unsigned int *attempts)
     * }
     */
    public static MemorySegment H5Pget_metadata_read_attempts$address() {
        return H5Pget_metadata_read_attempts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_metadata_read_attempts(hid_t plist_id, unsigned int *attempts)
     * }
     */
    public static int H5Pget_metadata_read_attempts(long plist_id, MemorySegment attempts) {
        var mh$ = H5Pget_metadata_read_attempts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_metadata_read_attempts", plist_id, attempts);
            }
            return (int)mh$.invokeExact(plist_id, attempts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_multi_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_multi_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_multi_type(hid_t fapl_id, H5FD_mem_t *type)
     * }
     */
    public static FunctionDescriptor H5Pget_multi_type$descriptor() {
        return H5Pget_multi_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_multi_type(hid_t fapl_id, H5FD_mem_t *type)
     * }
     */
    public static MethodHandle H5Pget_multi_type$handle() {
        return H5Pget_multi_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_multi_type(hid_t fapl_id, H5FD_mem_t *type)
     * }
     */
    public static MemorySegment H5Pget_multi_type$address() {
        return H5Pget_multi_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_multi_type(hid_t fapl_id, H5FD_mem_t *type)
     * }
     */
    public static int H5Pget_multi_type(long fapl_id, MemorySegment type) {
        var mh$ = H5Pget_multi_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_multi_type", fapl_id, type);
            }
            return (int)mh$.invokeExact(fapl_id, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_object_flush_cb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_object_flush_cb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_object_flush_cb(hid_t plist_id, H5F_flush_cb_t *func, void **udata)
     * }
     */
    public static FunctionDescriptor H5Pget_object_flush_cb$descriptor() {
        return H5Pget_object_flush_cb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_object_flush_cb(hid_t plist_id, H5F_flush_cb_t *func, void **udata)
     * }
     */
    public static MethodHandle H5Pget_object_flush_cb$handle() {
        return H5Pget_object_flush_cb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_object_flush_cb(hid_t plist_id, H5F_flush_cb_t *func, void **udata)
     * }
     */
    public static MemorySegment H5Pget_object_flush_cb$address() {
        return H5Pget_object_flush_cb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_object_flush_cb(hid_t plist_id, H5F_flush_cb_t *func, void **udata)
     * }
     */
    public static int H5Pget_object_flush_cb(long plist_id, MemorySegment func, MemorySegment udata) {
        var mh$ = H5Pget_object_flush_cb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_object_flush_cb", plist_id, func, udata);
            }
            return (int)mh$.invokeExact(plist_id, func, udata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_page_buffer_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_page_buffer_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_page_buffer_size(hid_t plist_id, size_t *buf_size, unsigned int *min_meta_perc, unsigned int *min_raw_perc)
     * }
     */
    public static FunctionDescriptor H5Pget_page_buffer_size$descriptor() {
        return H5Pget_page_buffer_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_page_buffer_size(hid_t plist_id, size_t *buf_size, unsigned int *min_meta_perc, unsigned int *min_raw_perc)
     * }
     */
    public static MethodHandle H5Pget_page_buffer_size$handle() {
        return H5Pget_page_buffer_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_page_buffer_size(hid_t plist_id, size_t *buf_size, unsigned int *min_meta_perc, unsigned int *min_raw_perc)
     * }
     */
    public static MemorySegment H5Pget_page_buffer_size$address() {
        return H5Pget_page_buffer_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_page_buffer_size(hid_t plist_id, size_t *buf_size, unsigned int *min_meta_perc, unsigned int *min_raw_perc)
     * }
     */
    public static int H5Pget_page_buffer_size(long plist_id, MemorySegment buf_size, MemorySegment min_meta_perc, MemorySegment min_raw_perc) {
        var mh$ = H5Pget_page_buffer_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_page_buffer_size", plist_id, buf_size, min_meta_perc, min_raw_perc);
            }
            return (int)mh$.invokeExact(plist_id, buf_size, min_meta_perc, min_raw_perc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_sieve_buf_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_sieve_buf_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_sieve_buf_size(hid_t fapl_id, size_t *size)
     * }
     */
    public static FunctionDescriptor H5Pget_sieve_buf_size$descriptor() {
        return H5Pget_sieve_buf_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_sieve_buf_size(hid_t fapl_id, size_t *size)
     * }
     */
    public static MethodHandle H5Pget_sieve_buf_size$handle() {
        return H5Pget_sieve_buf_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_sieve_buf_size(hid_t fapl_id, size_t *size)
     * }
     */
    public static MemorySegment H5Pget_sieve_buf_size$address() {
        return H5Pget_sieve_buf_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_sieve_buf_size(hid_t fapl_id, size_t *size)
     * }
     */
    public static int H5Pget_sieve_buf_size(long fapl_id, MemorySegment size) {
        var mh$ = H5Pget_sieve_buf_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_sieve_buf_size", fapl_id, size);
            }
            return (int)mh$.invokeExact(fapl_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_small_data_block_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_small_data_block_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_small_data_block_size(hid_t fapl_id, hsize_t *size)
     * }
     */
    public static FunctionDescriptor H5Pget_small_data_block_size$descriptor() {
        return H5Pget_small_data_block_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_small_data_block_size(hid_t fapl_id, hsize_t *size)
     * }
     */
    public static MethodHandle H5Pget_small_data_block_size$handle() {
        return H5Pget_small_data_block_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_small_data_block_size(hid_t fapl_id, hsize_t *size)
     * }
     */
    public static MemorySegment H5Pget_small_data_block_size$address() {
        return H5Pget_small_data_block_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_small_data_block_size(hid_t fapl_id, hsize_t *size)
     * }
     */
    public static int H5Pget_small_data_block_size(long fapl_id, MemorySegment size) {
        var mh$ = H5Pget_small_data_block_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_small_data_block_size", fapl_id, size);
            }
            return (int)mh$.invokeExact(fapl_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_vol_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_vol_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_vol_id(hid_t plist_id, hid_t *vol_id)
     * }
     */
    public static FunctionDescriptor H5Pget_vol_id$descriptor() {
        return H5Pget_vol_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_vol_id(hid_t plist_id, hid_t *vol_id)
     * }
     */
    public static MethodHandle H5Pget_vol_id$handle() {
        return H5Pget_vol_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_vol_id(hid_t plist_id, hid_t *vol_id)
     * }
     */
    public static MemorySegment H5Pget_vol_id$address() {
        return H5Pget_vol_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_vol_id(hid_t plist_id, hid_t *vol_id)
     * }
     */
    public static int H5Pget_vol_id(long plist_id, MemorySegment vol_id) {
        var mh$ = H5Pget_vol_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_vol_id", plist_id, vol_id);
            }
            return (int)mh$.invokeExact(plist_id, vol_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_vol_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_vol_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_vol_info(hid_t plist_id, void **vol_info)
     * }
     */
    public static FunctionDescriptor H5Pget_vol_info$descriptor() {
        return H5Pget_vol_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_vol_info(hid_t plist_id, void **vol_info)
     * }
     */
    public static MethodHandle H5Pget_vol_info$handle() {
        return H5Pget_vol_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_vol_info(hid_t plist_id, void **vol_info)
     * }
     */
    public static MemorySegment H5Pget_vol_info$address() {
        return H5Pget_vol_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_vol_info(hid_t plist_id, void **vol_info)
     * }
     */
    public static int H5Pget_vol_info(long plist_id, MemorySegment vol_info) {
        var mh$ = H5Pget_vol_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_vol_info", plist_id, vol_info);
            }
            return (int)mh$.invokeExact(plist_id, vol_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_alignment");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_alignment(hid_t fapl_id, hsize_t threshold, hsize_t alignment)
     * }
     */
    public static FunctionDescriptor H5Pset_alignment$descriptor() {
        return H5Pset_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_alignment(hid_t fapl_id, hsize_t threshold, hsize_t alignment)
     * }
     */
    public static MethodHandle H5Pset_alignment$handle() {
        return H5Pset_alignment.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_alignment(hid_t fapl_id, hsize_t threshold, hsize_t alignment)
     * }
     */
    public static MemorySegment H5Pset_alignment$address() {
        return H5Pset_alignment.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_alignment(hid_t fapl_id, hsize_t threshold, hsize_t alignment)
     * }
     */
    public static int H5Pset_alignment(long fapl_id, long threshold, long alignment) {
        var mh$ = H5Pset_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_alignment", fapl_id, threshold, alignment);
            }
            return (int)mh$.invokeExact(fapl_id, threshold, alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_cache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_cache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_cache(hid_t plist_id, int mdc_nelmts, size_t rdcc_nslots, size_t rdcc_nbytes, double rdcc_w0)
     * }
     */
    public static FunctionDescriptor H5Pset_cache$descriptor() {
        return H5Pset_cache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_cache(hid_t plist_id, int mdc_nelmts, size_t rdcc_nslots, size_t rdcc_nbytes, double rdcc_w0)
     * }
     */
    public static MethodHandle H5Pset_cache$handle() {
        return H5Pset_cache.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_cache(hid_t plist_id, int mdc_nelmts, size_t rdcc_nslots, size_t rdcc_nbytes, double rdcc_w0)
     * }
     */
    public static MemorySegment H5Pset_cache$address() {
        return H5Pset_cache.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_cache(hid_t plist_id, int mdc_nelmts, size_t rdcc_nslots, size_t rdcc_nbytes, double rdcc_w0)
     * }
     */
    public static int H5Pset_cache(long plist_id, int mdc_nelmts, long rdcc_nslots, long rdcc_nbytes, double rdcc_w0) {
        var mh$ = H5Pset_cache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_cache", plist_id, mdc_nelmts, rdcc_nslots, rdcc_nbytes, rdcc_w0);
            }
            return (int)mh$.invokeExact(plist_id, mdc_nelmts, rdcc_nslots, rdcc_nbytes, rdcc_w0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_core_write_tracking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_BOOL,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_core_write_tracking");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_core_write_tracking(hid_t fapl_id, hbool_t is_enabled, size_t page_size)
     * }
     */
    public static FunctionDescriptor H5Pset_core_write_tracking$descriptor() {
        return H5Pset_core_write_tracking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_core_write_tracking(hid_t fapl_id, hbool_t is_enabled, size_t page_size)
     * }
     */
    public static MethodHandle H5Pset_core_write_tracking$handle() {
        return H5Pset_core_write_tracking.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_core_write_tracking(hid_t fapl_id, hbool_t is_enabled, size_t page_size)
     * }
     */
    public static MemorySegment H5Pset_core_write_tracking$address() {
        return H5Pset_core_write_tracking.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_core_write_tracking(hid_t fapl_id, hbool_t is_enabled, size_t page_size)
     * }
     */
    public static int H5Pset_core_write_tracking(long fapl_id, boolean is_enabled, long page_size) {
        var mh$ = H5Pset_core_write_tracking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_core_write_tracking", fapl_id, is_enabled, page_size);
            }
            return (int)mh$.invokeExact(fapl_id, is_enabled, page_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_driver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_driver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_driver(hid_t plist_id, hid_t driver_id, const void *driver_info)
     * }
     */
    public static FunctionDescriptor H5Pset_driver$descriptor() {
        return H5Pset_driver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_driver(hid_t plist_id, hid_t driver_id, const void *driver_info)
     * }
     */
    public static MethodHandle H5Pset_driver$handle() {
        return H5Pset_driver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_driver(hid_t plist_id, hid_t driver_id, const void *driver_info)
     * }
     */
    public static MemorySegment H5Pset_driver$address() {
        return H5Pset_driver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_driver(hid_t plist_id, hid_t driver_id, const void *driver_info)
     * }
     */
    public static int H5Pset_driver(long plist_id, long driver_id, MemorySegment driver_info) {
        var mh$ = H5Pset_driver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_driver", plist_id, driver_id, driver_info);
            }
            return (int)mh$.invokeExact(plist_id, driver_id, driver_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_driver_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_driver_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_driver_by_name(hid_t plist_id, const char *driver_name, const char *driver_config)
     * }
     */
    public static FunctionDescriptor H5Pset_driver_by_name$descriptor() {
        return H5Pset_driver_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_driver_by_name(hid_t plist_id, const char *driver_name, const char *driver_config)
     * }
     */
    public static MethodHandle H5Pset_driver_by_name$handle() {
        return H5Pset_driver_by_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_driver_by_name(hid_t plist_id, const char *driver_name, const char *driver_config)
     * }
     */
    public static MemorySegment H5Pset_driver_by_name$address() {
        return H5Pset_driver_by_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_driver_by_name(hid_t plist_id, const char *driver_name, const char *driver_config)
     * }
     */
    public static int H5Pset_driver_by_name(long plist_id, MemorySegment driver_name, MemorySegment driver_config) {
        var mh$ = H5Pset_driver_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_driver_by_name", plist_id, driver_name, driver_config);
            }
            return (int)mh$.invokeExact(plist_id, driver_name, driver_config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_driver_by_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_driver_by_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_driver_by_value(hid_t plist_id, H5FD_class_value_t driver_value, const char *driver_config)
     * }
     */
    public static FunctionDescriptor H5Pset_driver_by_value$descriptor() {
        return H5Pset_driver_by_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_driver_by_value(hid_t plist_id, H5FD_class_value_t driver_value, const char *driver_config)
     * }
     */
    public static MethodHandle H5Pset_driver_by_value$handle() {
        return H5Pset_driver_by_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_driver_by_value(hid_t plist_id, H5FD_class_value_t driver_value, const char *driver_config)
     * }
     */
    public static MemorySegment H5Pset_driver_by_value$address() {
        return H5Pset_driver_by_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_driver_by_value(hid_t plist_id, H5FD_class_value_t driver_value, const char *driver_config)
     * }
     */
    public static int H5Pset_driver_by_value(long plist_id, int driver_value, MemorySegment driver_config) {
        var mh$ = H5Pset_driver_by_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_driver_by_value", plist_id, driver_value, driver_config);
            }
            return (int)mh$.invokeExact(plist_id, driver_value, driver_config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_elink_file_cache_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_elink_file_cache_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_file_cache_size(hid_t plist_id, unsigned int efc_size)
     * }
     */
    public static FunctionDescriptor H5Pset_elink_file_cache_size$descriptor() {
        return H5Pset_elink_file_cache_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_file_cache_size(hid_t plist_id, unsigned int efc_size)
     * }
     */
    public static MethodHandle H5Pset_elink_file_cache_size$handle() {
        return H5Pset_elink_file_cache_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_file_cache_size(hid_t plist_id, unsigned int efc_size)
     * }
     */
    public static MemorySegment H5Pset_elink_file_cache_size$address() {
        return H5Pset_elink_file_cache_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_elink_file_cache_size(hid_t plist_id, unsigned int efc_size)
     * }
     */
    public static int H5Pset_elink_file_cache_size(long plist_id, int efc_size) {
        var mh$ = H5Pset_elink_file_cache_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_elink_file_cache_size", plist_id, efc_size);
            }
            return (int)mh$.invokeExact(plist_id, efc_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_evict_on_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_BOOL
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_evict_on_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_evict_on_close(hid_t fapl_id, hbool_t evict_on_close)
     * }
     */
    public static FunctionDescriptor H5Pset_evict_on_close$descriptor() {
        return H5Pset_evict_on_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_evict_on_close(hid_t fapl_id, hbool_t evict_on_close)
     * }
     */
    public static MethodHandle H5Pset_evict_on_close$handle() {
        return H5Pset_evict_on_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_evict_on_close(hid_t fapl_id, hbool_t evict_on_close)
     * }
     */
    public static MemorySegment H5Pset_evict_on_close$address() {
        return H5Pset_evict_on_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_evict_on_close(hid_t fapl_id, hbool_t evict_on_close)
     * }
     */
    public static int H5Pset_evict_on_close(long fapl_id, boolean evict_on_close) {
        var mh$ = H5Pset_evict_on_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_evict_on_close", fapl_id, evict_on_close);
            }
            return (int)mh$.invokeExact(fapl_id, evict_on_close);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_family_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_family_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_family_offset(hid_t fapl_id, hsize_t offset)
     * }
     */
    public static FunctionDescriptor H5Pset_family_offset$descriptor() {
        return H5Pset_family_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_family_offset(hid_t fapl_id, hsize_t offset)
     * }
     */
    public static MethodHandle H5Pset_family_offset$handle() {
        return H5Pset_family_offset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_family_offset(hid_t fapl_id, hsize_t offset)
     * }
     */
    public static MemorySegment H5Pset_family_offset$address() {
        return H5Pset_family_offset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_family_offset(hid_t fapl_id, hsize_t offset)
     * }
     */
    public static int H5Pset_family_offset(long fapl_id, long offset) {
        var mh$ = H5Pset_family_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_family_offset", fapl_id, offset);
            }
            return (int)mh$.invokeExact(fapl_id, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fclose_degree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fclose_degree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fclose_degree(hid_t fapl_id, H5F_close_degree_t degree)
     * }
     */
    public static FunctionDescriptor H5Pset_fclose_degree$descriptor() {
        return H5Pset_fclose_degree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fclose_degree(hid_t fapl_id, H5F_close_degree_t degree)
     * }
     */
    public static MethodHandle H5Pset_fclose_degree$handle() {
        return H5Pset_fclose_degree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fclose_degree(hid_t fapl_id, H5F_close_degree_t degree)
     * }
     */
    public static MemorySegment H5Pset_fclose_degree$address() {
        return H5Pset_fclose_degree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fclose_degree(hid_t fapl_id, H5F_close_degree_t degree)
     * }
     */
    public static int H5Pset_fclose_degree(long fapl_id, int degree) {
        var mh$ = H5Pset_fclose_degree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fclose_degree", fapl_id, degree);
            }
            return (int)mh$.invokeExact(fapl_id, degree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_file_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_file_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_image(hid_t fapl_id, void *buf_ptr, size_t buf_len)
     * }
     */
    public static FunctionDescriptor H5Pset_file_image$descriptor() {
        return H5Pset_file_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_image(hid_t fapl_id, void *buf_ptr, size_t buf_len)
     * }
     */
    public static MethodHandle H5Pset_file_image$handle() {
        return H5Pset_file_image.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_image(hid_t fapl_id, void *buf_ptr, size_t buf_len)
     * }
     */
    public static MemorySegment H5Pset_file_image$address() {
        return H5Pset_file_image.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_file_image(hid_t fapl_id, void *buf_ptr, size_t buf_len)
     * }
     */
    public static int H5Pset_file_image(long fapl_id, MemorySegment buf_ptr, long buf_len) {
        var mh$ = H5Pset_file_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_file_image", fapl_id, buf_ptr, buf_len);
            }
            return (int)mh$.invokeExact(fapl_id, buf_ptr, buf_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_file_image_callbacks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_file_image_callbacks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_image_callbacks(hid_t fapl_id, H5FD_file_image_callbacks_t *callbacks_ptr)
     * }
     */
    public static FunctionDescriptor H5Pset_file_image_callbacks$descriptor() {
        return H5Pset_file_image_callbacks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_image_callbacks(hid_t fapl_id, H5FD_file_image_callbacks_t *callbacks_ptr)
     * }
     */
    public static MethodHandle H5Pset_file_image_callbacks$handle() {
        return H5Pset_file_image_callbacks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_image_callbacks(hid_t fapl_id, H5FD_file_image_callbacks_t *callbacks_ptr)
     * }
     */
    public static MemorySegment H5Pset_file_image_callbacks$address() {
        return H5Pset_file_image_callbacks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_file_image_callbacks(hid_t fapl_id, H5FD_file_image_callbacks_t *callbacks_ptr)
     * }
     */
    public static int H5Pset_file_image_callbacks(long fapl_id, MemorySegment callbacks_ptr) {
        var mh$ = H5Pset_file_image_callbacks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_file_image_callbacks", fapl_id, callbacks_ptr);
            }
            return (int)mh$.invokeExact(fapl_id, callbacks_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_file_locking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_BOOL,
            hdf5_h.C_BOOL
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_file_locking");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_locking(hid_t fapl_id, hbool_t use_file_locking, hbool_t ignore_when_disabled)
     * }
     */
    public static FunctionDescriptor H5Pset_file_locking$descriptor() {
        return H5Pset_file_locking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_locking(hid_t fapl_id, hbool_t use_file_locking, hbool_t ignore_when_disabled)
     * }
     */
    public static MethodHandle H5Pset_file_locking$handle() {
        return H5Pset_file_locking.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_locking(hid_t fapl_id, hbool_t use_file_locking, hbool_t ignore_when_disabled)
     * }
     */
    public static MemorySegment H5Pset_file_locking$address() {
        return H5Pset_file_locking.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_file_locking(hid_t fapl_id, hbool_t use_file_locking, hbool_t ignore_when_disabled)
     * }
     */
    public static int H5Pset_file_locking(long fapl_id, boolean use_file_locking, boolean ignore_when_disabled) {
        var mh$ = H5Pset_file_locking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_file_locking", fapl_id, use_file_locking, ignore_when_disabled);
            }
            return (int)mh$.invokeExact(fapl_id, use_file_locking, ignore_when_disabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_gc_references {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_gc_references");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_gc_references(hid_t fapl_id, unsigned int gc_ref)
     * }
     */
    public static FunctionDescriptor H5Pset_gc_references$descriptor() {
        return H5Pset_gc_references.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_gc_references(hid_t fapl_id, unsigned int gc_ref)
     * }
     */
    public static MethodHandle H5Pset_gc_references$handle() {
        return H5Pset_gc_references.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_gc_references(hid_t fapl_id, unsigned int gc_ref)
     * }
     */
    public static MemorySegment H5Pset_gc_references$address() {
        return H5Pset_gc_references.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_gc_references(hid_t fapl_id, unsigned int gc_ref)
     * }
     */
    public static int H5Pset_gc_references(long fapl_id, int gc_ref) {
        var mh$ = H5Pset_gc_references.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_gc_references", fapl_id, gc_ref);
            }
            return (int)mh$.invokeExact(fapl_id, gc_ref);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_libver_bounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_libver_bounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_libver_bounds(hid_t plist_id, H5F_libver_t low, H5F_libver_t high)
     * }
     */
    public static FunctionDescriptor H5Pset_libver_bounds$descriptor() {
        return H5Pset_libver_bounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_libver_bounds(hid_t plist_id, H5F_libver_t low, H5F_libver_t high)
     * }
     */
    public static MethodHandle H5Pset_libver_bounds$handle() {
        return H5Pset_libver_bounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_libver_bounds(hid_t plist_id, H5F_libver_t low, H5F_libver_t high)
     * }
     */
    public static MemorySegment H5Pset_libver_bounds$address() {
        return H5Pset_libver_bounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_libver_bounds(hid_t plist_id, H5F_libver_t low, H5F_libver_t high)
     * }
     */
    public static int H5Pset_libver_bounds(long plist_id, int low, int high) {
        var mh$ = H5Pset_libver_bounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_libver_bounds", plist_id, low, high);
            }
            return (int)mh$.invokeExact(plist_id, low, high);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_mdc_config {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_mdc_config");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_mdc_config(hid_t plist_id, H5AC_cache_config_t *config_ptr)
     * }
     */
    public static FunctionDescriptor H5Pset_mdc_config$descriptor() {
        return H5Pset_mdc_config.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_mdc_config(hid_t plist_id, H5AC_cache_config_t *config_ptr)
     * }
     */
    public static MethodHandle H5Pset_mdc_config$handle() {
        return H5Pset_mdc_config.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_mdc_config(hid_t plist_id, H5AC_cache_config_t *config_ptr)
     * }
     */
    public static MemorySegment H5Pset_mdc_config$address() {
        return H5Pset_mdc_config.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_mdc_config(hid_t plist_id, H5AC_cache_config_t *config_ptr)
     * }
     */
    public static int H5Pset_mdc_config(long plist_id, MemorySegment config_ptr) {
        var mh$ = H5Pset_mdc_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_mdc_config", plist_id, config_ptr);
            }
            return (int)mh$.invokeExact(plist_id, config_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_mdc_log_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_BOOL,
            hdf5_h.C_POINTER,
            hdf5_h.C_BOOL
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_mdc_log_options");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_mdc_log_options(hid_t plist_id, hbool_t is_enabled, const char *location, hbool_t start_on_access)
     * }
     */
    public static FunctionDescriptor H5Pset_mdc_log_options$descriptor() {
        return H5Pset_mdc_log_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_mdc_log_options(hid_t plist_id, hbool_t is_enabled, const char *location, hbool_t start_on_access)
     * }
     */
    public static MethodHandle H5Pset_mdc_log_options$handle() {
        return H5Pset_mdc_log_options.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_mdc_log_options(hid_t plist_id, hbool_t is_enabled, const char *location, hbool_t start_on_access)
     * }
     */
    public static MemorySegment H5Pset_mdc_log_options$address() {
        return H5Pset_mdc_log_options.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_mdc_log_options(hid_t plist_id, hbool_t is_enabled, const char *location, hbool_t start_on_access)
     * }
     */
    public static int H5Pset_mdc_log_options(long plist_id, boolean is_enabled, MemorySegment location, boolean start_on_access) {
        var mh$ = H5Pset_mdc_log_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_mdc_log_options", plist_id, is_enabled, location, start_on_access);
            }
            return (int)mh$.invokeExact(plist_id, is_enabled, location, start_on_access);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_meta_block_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_meta_block_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_meta_block_size(hid_t fapl_id, hsize_t size)
     * }
     */
    public static FunctionDescriptor H5Pset_meta_block_size$descriptor() {
        return H5Pset_meta_block_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_meta_block_size(hid_t fapl_id, hsize_t size)
     * }
     */
    public static MethodHandle H5Pset_meta_block_size$handle() {
        return H5Pset_meta_block_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_meta_block_size(hid_t fapl_id, hsize_t size)
     * }
     */
    public static MemorySegment H5Pset_meta_block_size$address() {
        return H5Pset_meta_block_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_meta_block_size(hid_t fapl_id, hsize_t size)
     * }
     */
    public static int H5Pset_meta_block_size(long fapl_id, long size) {
        var mh$ = H5Pset_meta_block_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_meta_block_size", fapl_id, size);
            }
            return (int)mh$.invokeExact(fapl_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_metadata_read_attempts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_metadata_read_attempts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_metadata_read_attempts(hid_t plist_id, unsigned int attempts)
     * }
     */
    public static FunctionDescriptor H5Pset_metadata_read_attempts$descriptor() {
        return H5Pset_metadata_read_attempts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_metadata_read_attempts(hid_t plist_id, unsigned int attempts)
     * }
     */
    public static MethodHandle H5Pset_metadata_read_attempts$handle() {
        return H5Pset_metadata_read_attempts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_metadata_read_attempts(hid_t plist_id, unsigned int attempts)
     * }
     */
    public static MemorySegment H5Pset_metadata_read_attempts$address() {
        return H5Pset_metadata_read_attempts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_metadata_read_attempts(hid_t plist_id, unsigned int attempts)
     * }
     */
    public static int H5Pset_metadata_read_attempts(long plist_id, int attempts) {
        var mh$ = H5Pset_metadata_read_attempts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_metadata_read_attempts", plist_id, attempts);
            }
            return (int)mh$.invokeExact(plist_id, attempts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_multi_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_multi_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_multi_type(hid_t fapl_id, H5FD_mem_t type)
     * }
     */
    public static FunctionDescriptor H5Pset_multi_type$descriptor() {
        return H5Pset_multi_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_multi_type(hid_t fapl_id, H5FD_mem_t type)
     * }
     */
    public static MethodHandle H5Pset_multi_type$handle() {
        return H5Pset_multi_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_multi_type(hid_t fapl_id, H5FD_mem_t type)
     * }
     */
    public static MemorySegment H5Pset_multi_type$address() {
        return H5Pset_multi_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_multi_type(hid_t fapl_id, H5FD_mem_t type)
     * }
     */
    public static int H5Pset_multi_type(long fapl_id, int type) {
        var mh$ = H5Pset_multi_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_multi_type", fapl_id, type);
            }
            return (int)mh$.invokeExact(fapl_id, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_object_flush_cb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_object_flush_cb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_object_flush_cb(hid_t plist_id, H5F_flush_cb_t func, void *udata)
     * }
     */
    public static FunctionDescriptor H5Pset_object_flush_cb$descriptor() {
        return H5Pset_object_flush_cb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_object_flush_cb(hid_t plist_id, H5F_flush_cb_t func, void *udata)
     * }
     */
    public static MethodHandle H5Pset_object_flush_cb$handle() {
        return H5Pset_object_flush_cb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_object_flush_cb(hid_t plist_id, H5F_flush_cb_t func, void *udata)
     * }
     */
    public static MemorySegment H5Pset_object_flush_cb$address() {
        return H5Pset_object_flush_cb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_object_flush_cb(hid_t plist_id, H5F_flush_cb_t func, void *udata)
     * }
     */
    public static int H5Pset_object_flush_cb(long plist_id, MemorySegment func, MemorySegment udata) {
        var mh$ = H5Pset_object_flush_cb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_object_flush_cb", plist_id, func, udata);
            }
            return (int)mh$.invokeExact(plist_id, func, udata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_sieve_buf_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_sieve_buf_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_sieve_buf_size(hid_t fapl_id, size_t size)
     * }
     */
    public static FunctionDescriptor H5Pset_sieve_buf_size$descriptor() {
        return H5Pset_sieve_buf_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_sieve_buf_size(hid_t fapl_id, size_t size)
     * }
     */
    public static MethodHandle H5Pset_sieve_buf_size$handle() {
        return H5Pset_sieve_buf_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_sieve_buf_size(hid_t fapl_id, size_t size)
     * }
     */
    public static MemorySegment H5Pset_sieve_buf_size$address() {
        return H5Pset_sieve_buf_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_sieve_buf_size(hid_t fapl_id, size_t size)
     * }
     */
    public static int H5Pset_sieve_buf_size(long fapl_id, long size) {
        var mh$ = H5Pset_sieve_buf_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_sieve_buf_size", fapl_id, size);
            }
            return (int)mh$.invokeExact(fapl_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_small_data_block_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_small_data_block_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_small_data_block_size(hid_t fapl_id, hsize_t size)
     * }
     */
    public static FunctionDescriptor H5Pset_small_data_block_size$descriptor() {
        return H5Pset_small_data_block_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_small_data_block_size(hid_t fapl_id, hsize_t size)
     * }
     */
    public static MethodHandle H5Pset_small_data_block_size$handle() {
        return H5Pset_small_data_block_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_small_data_block_size(hid_t fapl_id, hsize_t size)
     * }
     */
    public static MemorySegment H5Pset_small_data_block_size$address() {
        return H5Pset_small_data_block_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_small_data_block_size(hid_t fapl_id, hsize_t size)
     * }
     */
    public static int H5Pset_small_data_block_size(long fapl_id, long size) {
        var mh$ = H5Pset_small_data_block_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_small_data_block_size", fapl_id, size);
            }
            return (int)mh$.invokeExact(fapl_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_vol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_vol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_vol(hid_t plist_id, hid_t new_vol_id, const void *new_vol_info)
     * }
     */
    public static FunctionDescriptor H5Pset_vol$descriptor() {
        return H5Pset_vol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_vol(hid_t plist_id, hid_t new_vol_id, const void *new_vol_info)
     * }
     */
    public static MethodHandle H5Pset_vol$handle() {
        return H5Pset_vol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_vol(hid_t plist_id, hid_t new_vol_id, const void *new_vol_info)
     * }
     */
    public static MemorySegment H5Pset_vol$address() {
        return H5Pset_vol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_vol(hid_t plist_id, hid_t new_vol_id, const void *new_vol_info)
     * }
     */
    public static int H5Pset_vol(long plist_id, long new_vol_id, MemorySegment new_vol_info) {
        var mh$ = H5Pset_vol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_vol", plist_id, new_vol_id, new_vol_info);
            }
            return (int)mh$.invokeExact(plist_id, new_vol_id, new_vol_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_vol_cap_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_vol_cap_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_vol_cap_flags(hid_t plist_id, uint64_t *cap_flags)
     * }
     */
    public static FunctionDescriptor H5Pget_vol_cap_flags$descriptor() {
        return H5Pget_vol_cap_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_vol_cap_flags(hid_t plist_id, uint64_t *cap_flags)
     * }
     */
    public static MethodHandle H5Pget_vol_cap_flags$handle() {
        return H5Pget_vol_cap_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_vol_cap_flags(hid_t plist_id, uint64_t *cap_flags)
     * }
     */
    public static MemorySegment H5Pget_vol_cap_flags$address() {
        return H5Pget_vol_cap_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_vol_cap_flags(hid_t plist_id, uint64_t *cap_flags)
     * }
     */
    public static int H5Pget_vol_cap_flags(long plist_id, MemorySegment cap_flags) {
        var mh$ = H5Pget_vol_cap_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_vol_cap_flags", plist_id, cap_flags);
            }
            return (int)mh$.invokeExact(plist_id, cap_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_mdc_image_config {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_mdc_image_config");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_mdc_image_config(hid_t plist_id, H5AC_cache_image_config_t *config_ptr)
     * }
     */
    public static FunctionDescriptor H5Pset_mdc_image_config$descriptor() {
        return H5Pset_mdc_image_config.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_mdc_image_config(hid_t plist_id, H5AC_cache_image_config_t *config_ptr)
     * }
     */
    public static MethodHandle H5Pset_mdc_image_config$handle() {
        return H5Pset_mdc_image_config.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_mdc_image_config(hid_t plist_id, H5AC_cache_image_config_t *config_ptr)
     * }
     */
    public static MemorySegment H5Pset_mdc_image_config$address() {
        return H5Pset_mdc_image_config.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_mdc_image_config(hid_t plist_id, H5AC_cache_image_config_t *config_ptr)
     * }
     */
    public static int H5Pset_mdc_image_config(long plist_id, MemorySegment config_ptr) {
        var mh$ = H5Pset_mdc_image_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_mdc_image_config", plist_id, config_ptr);
            }
            return (int)mh$.invokeExact(plist_id, config_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_page_buffer_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_page_buffer_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_page_buffer_size(hid_t plist_id, size_t buf_size, unsigned int min_meta_per, unsigned int min_raw_per)
     * }
     */
    public static FunctionDescriptor H5Pset_page_buffer_size$descriptor() {
        return H5Pset_page_buffer_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_page_buffer_size(hid_t plist_id, size_t buf_size, unsigned int min_meta_per, unsigned int min_raw_per)
     * }
     */
    public static MethodHandle H5Pset_page_buffer_size$handle() {
        return H5Pset_page_buffer_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_page_buffer_size(hid_t plist_id, size_t buf_size, unsigned int min_meta_per, unsigned int min_raw_per)
     * }
     */
    public static MemorySegment H5Pset_page_buffer_size$address() {
        return H5Pset_page_buffer_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_page_buffer_size(hid_t plist_id, size_t buf_size, unsigned int min_meta_per, unsigned int min_raw_per)
     * }
     */
    public static int H5Pset_page_buffer_size(long plist_id, long buf_size, int min_meta_per, int min_raw_per) {
        var mh$ = H5Pset_page_buffer_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_page_buffer_size", plist_id, buf_size, min_meta_per, min_raw_per);
            }
            return (int)mh$.invokeExact(plist_id, buf_size, min_meta_per, min_raw_per);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_relax_file_integrity_checks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_relax_file_integrity_checks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_relax_file_integrity_checks(hid_t plist_id, uint64_t flags)
     * }
     */
    public static FunctionDescriptor H5Pset_relax_file_integrity_checks$descriptor() {
        return H5Pset_relax_file_integrity_checks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_relax_file_integrity_checks(hid_t plist_id, uint64_t flags)
     * }
     */
    public static MethodHandle H5Pset_relax_file_integrity_checks$handle() {
        return H5Pset_relax_file_integrity_checks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_relax_file_integrity_checks(hid_t plist_id, uint64_t flags)
     * }
     */
    public static MemorySegment H5Pset_relax_file_integrity_checks$address() {
        return H5Pset_relax_file_integrity_checks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_relax_file_integrity_checks(hid_t plist_id, uint64_t flags)
     * }
     */
    public static int H5Pset_relax_file_integrity_checks(long plist_id, long flags) {
        var mh$ = H5Pset_relax_file_integrity_checks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_relax_file_integrity_checks", plist_id, flags);
            }
            return (int)mh$.invokeExact(plist_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_relax_file_integrity_checks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_relax_file_integrity_checks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_relax_file_integrity_checks(hid_t plist_id, uint64_t *flags)
     * }
     */
    public static FunctionDescriptor H5Pget_relax_file_integrity_checks$descriptor() {
        return H5Pget_relax_file_integrity_checks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_relax_file_integrity_checks(hid_t plist_id, uint64_t *flags)
     * }
     */
    public static MethodHandle H5Pget_relax_file_integrity_checks$handle() {
        return H5Pget_relax_file_integrity_checks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_relax_file_integrity_checks(hid_t plist_id, uint64_t *flags)
     * }
     */
    public static MemorySegment H5Pget_relax_file_integrity_checks$address() {
        return H5Pget_relax_file_integrity_checks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_relax_file_integrity_checks(hid_t plist_id, uint64_t *flags)
     * }
     */
    public static int H5Pget_relax_file_integrity_checks(long plist_id, MemorySegment flags) {
        var mh$ = H5Pget_relax_file_integrity_checks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_relax_file_integrity_checks", plist_id, flags);
            }
            return (int)mh$.invokeExact(plist_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pfill_value_defined {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pfill_value_defined");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pfill_value_defined(hid_t plist, H5D_fill_value_t *status)
     * }
     */
    public static FunctionDescriptor H5Pfill_value_defined$descriptor() {
        return H5Pfill_value_defined.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pfill_value_defined(hid_t plist, H5D_fill_value_t *status)
     * }
     */
    public static MethodHandle H5Pfill_value_defined$handle() {
        return H5Pfill_value_defined.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pfill_value_defined(hid_t plist, H5D_fill_value_t *status)
     * }
     */
    public static MemorySegment H5Pfill_value_defined$address() {
        return H5Pfill_value_defined.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pfill_value_defined(hid_t plist, H5D_fill_value_t *status)
     * }
     */
    public static int H5Pfill_value_defined(long plist, MemorySegment status) {
        var mh$ = H5Pfill_value_defined.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pfill_value_defined", plist, status);
            }
            return (int)mh$.invokeExact(plist, status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_alloc_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_alloc_time");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_alloc_time(hid_t plist_id, H5D_alloc_time_t *alloc_time)
     * }
     */
    public static FunctionDescriptor H5Pget_alloc_time$descriptor() {
        return H5Pget_alloc_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_alloc_time(hid_t plist_id, H5D_alloc_time_t *alloc_time)
     * }
     */
    public static MethodHandle H5Pget_alloc_time$handle() {
        return H5Pget_alloc_time.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_alloc_time(hid_t plist_id, H5D_alloc_time_t *alloc_time)
     * }
     */
    public static MemorySegment H5Pget_alloc_time$address() {
        return H5Pget_alloc_time.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_alloc_time(hid_t plist_id, H5D_alloc_time_t *alloc_time)
     * }
     */
    public static int H5Pget_alloc_time(long plist_id, MemorySegment alloc_time) {
        var mh$ = H5Pget_alloc_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_alloc_time", plist_id, alloc_time);
            }
            return (int)mh$.invokeExact(plist_id, alloc_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_chunk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_chunk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Pget_chunk(hid_t plist_id, int max_ndims, hsize_t dim[])
     * }
     */
    public static FunctionDescriptor H5Pget_chunk$descriptor() {
        return H5Pget_chunk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Pget_chunk(hid_t plist_id, int max_ndims, hsize_t dim[])
     * }
     */
    public static MethodHandle H5Pget_chunk$handle() {
        return H5Pget_chunk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Pget_chunk(hid_t plist_id, int max_ndims, hsize_t dim[])
     * }
     */
    public static MemorySegment H5Pget_chunk$address() {
        return H5Pget_chunk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int H5Pget_chunk(hid_t plist_id, int max_ndims, hsize_t dim[])
     * }
     */
    public static int H5Pget_chunk(long plist_id, int max_ndims, MemorySegment dim) {
        var mh$ = H5Pget_chunk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_chunk", plist_id, max_ndims, dim);
            }
            return (int)mh$.invokeExact(plist_id, max_ndims, dim);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_chunk_opts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_chunk_opts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_chunk_opts(hid_t plist_id, unsigned int *opts)
     * }
     */
    public static FunctionDescriptor H5Pget_chunk_opts$descriptor() {
        return H5Pget_chunk_opts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_chunk_opts(hid_t plist_id, unsigned int *opts)
     * }
     */
    public static MethodHandle H5Pget_chunk_opts$handle() {
        return H5Pget_chunk_opts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_chunk_opts(hid_t plist_id, unsigned int *opts)
     * }
     */
    public static MemorySegment H5Pget_chunk_opts$address() {
        return H5Pget_chunk_opts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_chunk_opts(hid_t plist_id, unsigned int *opts)
     * }
     */
    public static int H5Pget_chunk_opts(long plist_id, MemorySegment opts) {
        var mh$ = H5Pget_chunk_opts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_chunk_opts", plist_id, opts);
            }
            return (int)mh$.invokeExact(plist_id, opts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_dset_no_attrs_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_dset_no_attrs_hint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_dset_no_attrs_hint(hid_t dcpl_id, hbool_t *minimize)
     * }
     */
    public static FunctionDescriptor H5Pget_dset_no_attrs_hint$descriptor() {
        return H5Pget_dset_no_attrs_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_dset_no_attrs_hint(hid_t dcpl_id, hbool_t *minimize)
     * }
     */
    public static MethodHandle H5Pget_dset_no_attrs_hint$handle() {
        return H5Pget_dset_no_attrs_hint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_dset_no_attrs_hint(hid_t dcpl_id, hbool_t *minimize)
     * }
     */
    public static MemorySegment H5Pget_dset_no_attrs_hint$address() {
        return H5Pget_dset_no_attrs_hint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_dset_no_attrs_hint(hid_t dcpl_id, hbool_t *minimize)
     * }
     */
    public static int H5Pget_dset_no_attrs_hint(long dcpl_id, MemorySegment minimize) {
        var mh$ = H5Pget_dset_no_attrs_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_dset_no_attrs_hint", dcpl_id, minimize);
            }
            return (int)mh$.invokeExact(dcpl_id, minimize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_external {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_external");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_external(hid_t plist_id, unsigned int idx, size_t name_size, char *name, HDoff_t *offset, hsize_t *size)
     * }
     */
    public static FunctionDescriptor H5Pget_external$descriptor() {
        return H5Pget_external.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_external(hid_t plist_id, unsigned int idx, size_t name_size, char *name, HDoff_t *offset, hsize_t *size)
     * }
     */
    public static MethodHandle H5Pget_external$handle() {
        return H5Pget_external.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_external(hid_t plist_id, unsigned int idx, size_t name_size, char *name, HDoff_t *offset, hsize_t *size)
     * }
     */
    public static MemorySegment H5Pget_external$address() {
        return H5Pget_external.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_external(hid_t plist_id, unsigned int idx, size_t name_size, char *name, HDoff_t *offset, hsize_t *size)
     * }
     */
    public static int H5Pget_external(long plist_id, int idx, long name_size, MemorySegment name, MemorySegment offset, MemorySegment size) {
        var mh$ = H5Pget_external.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_external", plist_id, idx, name_size, name, offset, size);
            }
            return (int)mh$.invokeExact(plist_id, idx, name_size, name, offset, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_external_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_external_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Pget_external_count(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pget_external_count$descriptor() {
        return H5Pget_external_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Pget_external_count(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pget_external_count$handle() {
        return H5Pget_external_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Pget_external_count(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pget_external_count$address() {
        return H5Pget_external_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int H5Pget_external_count(hid_t plist_id)
     * }
     */
    public static int H5Pget_external_count(long plist_id) {
        var mh$ = H5Pget_external_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_external_count", plist_id);
            }
            return (int)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_fill_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_fill_time");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_fill_time(hid_t plist_id, H5D_fill_time_t *fill_time)
     * }
     */
    public static FunctionDescriptor H5Pget_fill_time$descriptor() {
        return H5Pget_fill_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_fill_time(hid_t plist_id, H5D_fill_time_t *fill_time)
     * }
     */
    public static MethodHandle H5Pget_fill_time$handle() {
        return H5Pget_fill_time.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_fill_time(hid_t plist_id, H5D_fill_time_t *fill_time)
     * }
     */
    public static MemorySegment H5Pget_fill_time$address() {
        return H5Pget_fill_time.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_fill_time(hid_t plist_id, H5D_fill_time_t *fill_time)
     * }
     */
    public static int H5Pget_fill_time(long plist_id, MemorySegment fill_time) {
        var mh$ = H5Pget_fill_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_fill_time", plist_id, fill_time);
            }
            return (int)mh$.invokeExact(plist_id, fill_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_fill_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_fill_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_fill_value(hid_t plist_id, hid_t type_id, void *value)
     * }
     */
    public static FunctionDescriptor H5Pget_fill_value$descriptor() {
        return H5Pget_fill_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_fill_value(hid_t plist_id, hid_t type_id, void *value)
     * }
     */
    public static MethodHandle H5Pget_fill_value$handle() {
        return H5Pget_fill_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_fill_value(hid_t plist_id, hid_t type_id, void *value)
     * }
     */
    public static MemorySegment H5Pget_fill_value$address() {
        return H5Pget_fill_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_fill_value(hid_t plist_id, hid_t type_id, void *value)
     * }
     */
    public static int H5Pget_fill_value(long plist_id, long type_id, MemorySegment value) {
        var mh$ = H5Pget_fill_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_fill_value", plist_id, type_id, value);
            }
            return (int)mh$.invokeExact(plist_id, type_id, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_layout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5D_layout_t H5Pget_layout(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pget_layout$descriptor() {
        return H5Pget_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5D_layout_t H5Pget_layout(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pget_layout$handle() {
        return H5Pget_layout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5D_layout_t H5Pget_layout(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pget_layout$address() {
        return H5Pget_layout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * H5D_layout_t H5Pget_layout(hid_t plist_id)
     * }
     */
    public static int H5Pget_layout(long plist_id) {
        var mh$ = H5Pget_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_layout", plist_id);
            }
            return (int)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_virtual_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_virtual_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_virtual_count(hid_t dcpl_id, size_t *count)
     * }
     */
    public static FunctionDescriptor H5Pget_virtual_count$descriptor() {
        return H5Pget_virtual_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_virtual_count(hid_t dcpl_id, size_t *count)
     * }
     */
    public static MethodHandle H5Pget_virtual_count$handle() {
        return H5Pget_virtual_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_virtual_count(hid_t dcpl_id, size_t *count)
     * }
     */
    public static MemorySegment H5Pget_virtual_count$address() {
        return H5Pget_virtual_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_virtual_count(hid_t dcpl_id, size_t *count)
     * }
     */
    public static int H5Pget_virtual_count(long dcpl_id, MemorySegment count) {
        var mh$ = H5Pget_virtual_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_virtual_count", dcpl_id, count);
            }
            return (int)mh$.invokeExact(dcpl_id, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_virtual_dsetname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_virtual_dsetname");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Pget_virtual_dsetname(hid_t dcpl_id, size_t index, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor H5Pget_virtual_dsetname$descriptor() {
        return H5Pget_virtual_dsetname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Pget_virtual_dsetname(hid_t dcpl_id, size_t index, char *name, size_t size)
     * }
     */
    public static MethodHandle H5Pget_virtual_dsetname$handle() {
        return H5Pget_virtual_dsetname.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Pget_virtual_dsetname(hid_t dcpl_id, size_t index, char *name, size_t size)
     * }
     */
    public static MemorySegment H5Pget_virtual_dsetname$address() {
        return H5Pget_virtual_dsetname.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t H5Pget_virtual_dsetname(hid_t dcpl_id, size_t index, char *name, size_t size)
     * }
     */
    public static long H5Pget_virtual_dsetname(long dcpl_id, long index, MemorySegment name, long size) {
        var mh$ = H5Pget_virtual_dsetname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_virtual_dsetname", dcpl_id, index, name, size);
            }
            return (long)mh$.invokeExact(dcpl_id, index, name, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_virtual_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_virtual_filename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Pget_virtual_filename(hid_t dcpl_id, size_t index, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor H5Pget_virtual_filename$descriptor() {
        return H5Pget_virtual_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Pget_virtual_filename(hid_t dcpl_id, size_t index, char *name, size_t size)
     * }
     */
    public static MethodHandle H5Pget_virtual_filename$handle() {
        return H5Pget_virtual_filename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Pget_virtual_filename(hid_t dcpl_id, size_t index, char *name, size_t size)
     * }
     */
    public static MemorySegment H5Pget_virtual_filename$address() {
        return H5Pget_virtual_filename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t H5Pget_virtual_filename(hid_t dcpl_id, size_t index, char *name, size_t size)
     * }
     */
    public static long H5Pget_virtual_filename(long dcpl_id, long index, MemorySegment name, long size) {
        var mh$ = H5Pget_virtual_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_virtual_filename", dcpl_id, index, name, size);
            }
            return (long)mh$.invokeExact(dcpl_id, index, name, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_virtual_srcspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_virtual_srcspace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Pget_virtual_srcspace(hid_t dcpl_id, size_t index)
     * }
     */
    public static FunctionDescriptor H5Pget_virtual_srcspace$descriptor() {
        return H5Pget_virtual_srcspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Pget_virtual_srcspace(hid_t dcpl_id, size_t index)
     * }
     */
    public static MethodHandle H5Pget_virtual_srcspace$handle() {
        return H5Pget_virtual_srcspace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Pget_virtual_srcspace(hid_t dcpl_id, size_t index)
     * }
     */
    public static MemorySegment H5Pget_virtual_srcspace$address() {
        return H5Pget_virtual_srcspace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5Pget_virtual_srcspace(hid_t dcpl_id, size_t index)
     * }
     */
    public static long H5Pget_virtual_srcspace(long dcpl_id, long index) {
        var mh$ = H5Pget_virtual_srcspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_virtual_srcspace", dcpl_id, index);
            }
            return (long)mh$.invokeExact(dcpl_id, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_virtual_vspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_virtual_vspace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Pget_virtual_vspace(hid_t dcpl_id, size_t index)
     * }
     */
    public static FunctionDescriptor H5Pget_virtual_vspace$descriptor() {
        return H5Pget_virtual_vspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Pget_virtual_vspace(hid_t dcpl_id, size_t index)
     * }
     */
    public static MethodHandle H5Pget_virtual_vspace$handle() {
        return H5Pget_virtual_vspace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Pget_virtual_vspace(hid_t dcpl_id, size_t index)
     * }
     */
    public static MemorySegment H5Pget_virtual_vspace$address() {
        return H5Pget_virtual_vspace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5Pget_virtual_vspace(hid_t dcpl_id, size_t index)
     * }
     */
    public static long H5Pget_virtual_vspace(long dcpl_id, long index) {
        var mh$ = H5Pget_virtual_vspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_virtual_vspace", dcpl_id, index);
            }
            return (long)mh$.invokeExact(dcpl_id, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_alloc_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_alloc_time");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_alloc_time(hid_t plist_id, H5D_alloc_time_t alloc_time)
     * }
     */
    public static FunctionDescriptor H5Pset_alloc_time$descriptor() {
        return H5Pset_alloc_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_alloc_time(hid_t plist_id, H5D_alloc_time_t alloc_time)
     * }
     */
    public static MethodHandle H5Pset_alloc_time$handle() {
        return H5Pset_alloc_time.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_alloc_time(hid_t plist_id, H5D_alloc_time_t alloc_time)
     * }
     */
    public static MemorySegment H5Pset_alloc_time$address() {
        return H5Pset_alloc_time.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_alloc_time(hid_t plist_id, H5D_alloc_time_t alloc_time)
     * }
     */
    public static int H5Pset_alloc_time(long plist_id, int alloc_time) {
        var mh$ = H5Pset_alloc_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_alloc_time", plist_id, alloc_time);
            }
            return (int)mh$.invokeExact(plist_id, alloc_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_chunk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_chunk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_chunk(hid_t plist_id, int ndims, const hsize_t dim[])
     * }
     */
    public static FunctionDescriptor H5Pset_chunk$descriptor() {
        return H5Pset_chunk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_chunk(hid_t plist_id, int ndims, const hsize_t dim[])
     * }
     */
    public static MethodHandle H5Pset_chunk$handle() {
        return H5Pset_chunk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_chunk(hid_t plist_id, int ndims, const hsize_t dim[])
     * }
     */
    public static MemorySegment H5Pset_chunk$address() {
        return H5Pset_chunk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_chunk(hid_t plist_id, int ndims, const hsize_t dim[])
     * }
     */
    public static int H5Pset_chunk(long plist_id, int ndims, MemorySegment dim) {
        var mh$ = H5Pset_chunk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_chunk", plist_id, ndims, dim);
            }
            return (int)mh$.invokeExact(plist_id, ndims, dim);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_chunk_opts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_chunk_opts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_chunk_opts(hid_t plist_id, unsigned int opts)
     * }
     */
    public static FunctionDescriptor H5Pset_chunk_opts$descriptor() {
        return H5Pset_chunk_opts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_chunk_opts(hid_t plist_id, unsigned int opts)
     * }
     */
    public static MethodHandle H5Pset_chunk_opts$handle() {
        return H5Pset_chunk_opts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_chunk_opts(hid_t plist_id, unsigned int opts)
     * }
     */
    public static MemorySegment H5Pset_chunk_opts$address() {
        return H5Pset_chunk_opts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_chunk_opts(hid_t plist_id, unsigned int opts)
     * }
     */
    public static int H5Pset_chunk_opts(long plist_id, int opts) {
        var mh$ = H5Pset_chunk_opts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_chunk_opts", plist_id, opts);
            }
            return (int)mh$.invokeExact(plist_id, opts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_dset_no_attrs_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_BOOL
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_dset_no_attrs_hint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_dset_no_attrs_hint(hid_t dcpl_id, hbool_t minimize)
     * }
     */
    public static FunctionDescriptor H5Pset_dset_no_attrs_hint$descriptor() {
        return H5Pset_dset_no_attrs_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_dset_no_attrs_hint(hid_t dcpl_id, hbool_t minimize)
     * }
     */
    public static MethodHandle H5Pset_dset_no_attrs_hint$handle() {
        return H5Pset_dset_no_attrs_hint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_dset_no_attrs_hint(hid_t dcpl_id, hbool_t minimize)
     * }
     */
    public static MemorySegment H5Pset_dset_no_attrs_hint$address() {
        return H5Pset_dset_no_attrs_hint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_dset_no_attrs_hint(hid_t dcpl_id, hbool_t minimize)
     * }
     */
    public static int H5Pset_dset_no_attrs_hint(long dcpl_id, boolean minimize) {
        var mh$ = H5Pset_dset_no_attrs_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_dset_no_attrs_hint", dcpl_id, minimize);
            }
            return (int)mh$.invokeExact(dcpl_id, minimize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_external {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_external");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_external(hid_t plist_id, const char *name, HDoff_t offset, hsize_t size)
     * }
     */
    public static FunctionDescriptor H5Pset_external$descriptor() {
        return H5Pset_external.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_external(hid_t plist_id, const char *name, HDoff_t offset, hsize_t size)
     * }
     */
    public static MethodHandle H5Pset_external$handle() {
        return H5Pset_external.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_external(hid_t plist_id, const char *name, HDoff_t offset, hsize_t size)
     * }
     */
    public static MemorySegment H5Pset_external$address() {
        return H5Pset_external.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_external(hid_t plist_id, const char *name, HDoff_t offset, hsize_t size)
     * }
     */
    public static int H5Pset_external(long plist_id, MemorySegment name, long offset, long size) {
        var mh$ = H5Pset_external.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_external", plist_id, name, offset, size);
            }
            return (int)mh$.invokeExact(plist_id, name, offset, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fill_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fill_time");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fill_time(hid_t plist_id, H5D_fill_time_t fill_time)
     * }
     */
    public static FunctionDescriptor H5Pset_fill_time$descriptor() {
        return H5Pset_fill_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fill_time(hid_t plist_id, H5D_fill_time_t fill_time)
     * }
     */
    public static MethodHandle H5Pset_fill_time$handle() {
        return H5Pset_fill_time.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fill_time(hid_t plist_id, H5D_fill_time_t fill_time)
     * }
     */
    public static MemorySegment H5Pset_fill_time$address() {
        return H5Pset_fill_time.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fill_time(hid_t plist_id, H5D_fill_time_t fill_time)
     * }
     */
    public static int H5Pset_fill_time(long plist_id, int fill_time) {
        var mh$ = H5Pset_fill_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fill_time", plist_id, fill_time);
            }
            return (int)mh$.invokeExact(plist_id, fill_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fill_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fill_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fill_value(hid_t plist_id, hid_t type_id, const void *value)
     * }
     */
    public static FunctionDescriptor H5Pset_fill_value$descriptor() {
        return H5Pset_fill_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fill_value(hid_t plist_id, hid_t type_id, const void *value)
     * }
     */
    public static MethodHandle H5Pset_fill_value$handle() {
        return H5Pset_fill_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fill_value(hid_t plist_id, hid_t type_id, const void *value)
     * }
     */
    public static MemorySegment H5Pset_fill_value$address() {
        return H5Pset_fill_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fill_value(hid_t plist_id, hid_t type_id, const void *value)
     * }
     */
    public static int H5Pset_fill_value(long plist_id, long type_id, MemorySegment value) {
        var mh$ = H5Pset_fill_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fill_value", plist_id, type_id, value);
            }
            return (int)mh$.invokeExact(plist_id, type_id, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_shuffle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_shuffle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_shuffle(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pset_shuffle$descriptor() {
        return H5Pset_shuffle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_shuffle(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pset_shuffle$handle() {
        return H5Pset_shuffle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_shuffle(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pset_shuffle$address() {
        return H5Pset_shuffle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_shuffle(hid_t plist_id)
     * }
     */
    public static int H5Pset_shuffle(long plist_id) {
        var mh$ = H5Pset_shuffle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_shuffle", plist_id);
            }
            return (int)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_layout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_layout(hid_t plist_id, H5D_layout_t layout)
     * }
     */
    public static FunctionDescriptor H5Pset_layout$descriptor() {
        return H5Pset_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_layout(hid_t plist_id, H5D_layout_t layout)
     * }
     */
    public static MethodHandle H5Pset_layout$handle() {
        return H5Pset_layout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_layout(hid_t plist_id, H5D_layout_t layout)
     * }
     */
    public static MemorySegment H5Pset_layout$address() {
        return H5Pset_layout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_layout(hid_t plist_id, H5D_layout_t layout)
     * }
     */
    public static int H5Pset_layout(long plist_id, int layout) {
        var mh$ = H5Pset_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_layout", plist_id, layout);
            }
            return (int)mh$.invokeExact(plist_id, layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_nbit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_nbit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_nbit(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pset_nbit$descriptor() {
        return H5Pset_nbit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_nbit(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pset_nbit$handle() {
        return H5Pset_nbit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_nbit(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pset_nbit$address() {
        return H5Pset_nbit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_nbit(hid_t plist_id)
     * }
     */
    public static int H5Pset_nbit(long plist_id) {
        var mh$ = H5Pset_nbit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_nbit", plist_id);
            }
            return (int)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_scaleoffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_scaleoffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_scaleoffset(hid_t plist_id, H5Z_SO_scale_type_t scale_type, int scale_factor)
     * }
     */
    public static FunctionDescriptor H5Pset_scaleoffset$descriptor() {
        return H5Pset_scaleoffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_scaleoffset(hid_t plist_id, H5Z_SO_scale_type_t scale_type, int scale_factor)
     * }
     */
    public static MethodHandle H5Pset_scaleoffset$handle() {
        return H5Pset_scaleoffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_scaleoffset(hid_t plist_id, H5Z_SO_scale_type_t scale_type, int scale_factor)
     * }
     */
    public static MemorySegment H5Pset_scaleoffset$address() {
        return H5Pset_scaleoffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_scaleoffset(hid_t plist_id, H5Z_SO_scale_type_t scale_type, int scale_factor)
     * }
     */
    public static int H5Pset_scaleoffset(long plist_id, int scale_type, int scale_factor) {
        var mh$ = H5Pset_scaleoffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_scaleoffset", plist_id, scale_type, scale_factor);
            }
            return (int)mh$.invokeExact(plist_id, scale_type, scale_factor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_szip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_szip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_szip(hid_t plist_id, unsigned int options_mask, unsigned int pixels_per_block)
     * }
     */
    public static FunctionDescriptor H5Pset_szip$descriptor() {
        return H5Pset_szip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_szip(hid_t plist_id, unsigned int options_mask, unsigned int pixels_per_block)
     * }
     */
    public static MethodHandle H5Pset_szip$handle() {
        return H5Pset_szip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_szip(hid_t plist_id, unsigned int options_mask, unsigned int pixels_per_block)
     * }
     */
    public static MemorySegment H5Pset_szip$address() {
        return H5Pset_szip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_szip(hid_t plist_id, unsigned int options_mask, unsigned int pixels_per_block)
     * }
     */
    public static int H5Pset_szip(long plist_id, int options_mask, int pixels_per_block) {
        var mh$ = H5Pset_szip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_szip", plist_id, options_mask, pixels_per_block);
            }
            return (int)mh$.invokeExact(plist_id, options_mask, pixels_per_block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_virtual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_virtual");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_virtual(hid_t dcpl_id, hid_t vspace_id, const char *src_file_name, const char *src_dset_name, hid_t src_space_id)
     * }
     */
    public static FunctionDescriptor H5Pset_virtual$descriptor() {
        return H5Pset_virtual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_virtual(hid_t dcpl_id, hid_t vspace_id, const char *src_file_name, const char *src_dset_name, hid_t src_space_id)
     * }
     */
    public static MethodHandle H5Pset_virtual$handle() {
        return H5Pset_virtual.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_virtual(hid_t dcpl_id, hid_t vspace_id, const char *src_file_name, const char *src_dset_name, hid_t src_space_id)
     * }
     */
    public static MemorySegment H5Pset_virtual$address() {
        return H5Pset_virtual.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_virtual(hid_t dcpl_id, hid_t vspace_id, const char *src_file_name, const char *src_dset_name, hid_t src_space_id)
     * }
     */
    public static int H5Pset_virtual(long dcpl_id, long vspace_id, MemorySegment src_file_name, MemorySegment src_dset_name, long src_space_id) {
        var mh$ = H5Pset_virtual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_virtual", dcpl_id, vspace_id, src_file_name, src_dset_name, src_space_id);
            }
            return (int)mh$.invokeExact(dcpl_id, vspace_id, src_file_name, src_dset_name, src_space_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_append_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_append_flush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_append_flush(hid_t dapl_id, unsigned int dims, hsize_t boundary[], H5D_append_cb_t *func, void **udata)
     * }
     */
    public static FunctionDescriptor H5Pget_append_flush$descriptor() {
        return H5Pget_append_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_append_flush(hid_t dapl_id, unsigned int dims, hsize_t boundary[], H5D_append_cb_t *func, void **udata)
     * }
     */
    public static MethodHandle H5Pget_append_flush$handle() {
        return H5Pget_append_flush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_append_flush(hid_t dapl_id, unsigned int dims, hsize_t boundary[], H5D_append_cb_t *func, void **udata)
     * }
     */
    public static MemorySegment H5Pget_append_flush$address() {
        return H5Pget_append_flush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_append_flush(hid_t dapl_id, unsigned int dims, hsize_t boundary[], H5D_append_cb_t *func, void **udata)
     * }
     */
    public static int H5Pget_append_flush(long dapl_id, int dims, MemorySegment boundary, MemorySegment func, MemorySegment udata) {
        var mh$ = H5Pget_append_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_append_flush", dapl_id, dims, boundary, func, udata);
            }
            return (int)mh$.invokeExact(dapl_id, dims, boundary, func, udata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_chunk_cache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_chunk_cache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_chunk_cache(hid_t dapl_id, size_t *rdcc_nslots, size_t *rdcc_nbytes, double *rdcc_w0)
     * }
     */
    public static FunctionDescriptor H5Pget_chunk_cache$descriptor() {
        return H5Pget_chunk_cache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_chunk_cache(hid_t dapl_id, size_t *rdcc_nslots, size_t *rdcc_nbytes, double *rdcc_w0)
     * }
     */
    public static MethodHandle H5Pget_chunk_cache$handle() {
        return H5Pget_chunk_cache.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_chunk_cache(hid_t dapl_id, size_t *rdcc_nslots, size_t *rdcc_nbytes, double *rdcc_w0)
     * }
     */
    public static MemorySegment H5Pget_chunk_cache$address() {
        return H5Pget_chunk_cache.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_chunk_cache(hid_t dapl_id, size_t *rdcc_nslots, size_t *rdcc_nbytes, double *rdcc_w0)
     * }
     */
    public static int H5Pget_chunk_cache(long dapl_id, MemorySegment rdcc_nslots, MemorySegment rdcc_nbytes, MemorySegment rdcc_w0) {
        var mh$ = H5Pget_chunk_cache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_chunk_cache", dapl_id, rdcc_nslots, rdcc_nbytes, rdcc_w0);
            }
            return (int)mh$.invokeExact(dapl_id, rdcc_nslots, rdcc_nbytes, rdcc_w0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_efile_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_efile_prefix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Pget_efile_prefix(hid_t dapl_id, char *prefix, size_t size)
     * }
     */
    public static FunctionDescriptor H5Pget_efile_prefix$descriptor() {
        return H5Pget_efile_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Pget_efile_prefix(hid_t dapl_id, char *prefix, size_t size)
     * }
     */
    public static MethodHandle H5Pget_efile_prefix$handle() {
        return H5Pget_efile_prefix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Pget_efile_prefix(hid_t dapl_id, char *prefix, size_t size)
     * }
     */
    public static MemorySegment H5Pget_efile_prefix$address() {
        return H5Pget_efile_prefix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t H5Pget_efile_prefix(hid_t dapl_id, char *prefix, size_t size)
     * }
     */
    public static long H5Pget_efile_prefix(long dapl_id, MemorySegment prefix, long size) {
        var mh$ = H5Pget_efile_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_efile_prefix", dapl_id, prefix, size);
            }
            return (long)mh$.invokeExact(dapl_id, prefix, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_virtual_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_virtual_prefix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Pget_virtual_prefix(hid_t dapl_id, char *prefix, size_t size)
     * }
     */
    public static FunctionDescriptor H5Pget_virtual_prefix$descriptor() {
        return H5Pget_virtual_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Pget_virtual_prefix(hid_t dapl_id, char *prefix, size_t size)
     * }
     */
    public static MethodHandle H5Pget_virtual_prefix$handle() {
        return H5Pget_virtual_prefix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Pget_virtual_prefix(hid_t dapl_id, char *prefix, size_t size)
     * }
     */
    public static MemorySegment H5Pget_virtual_prefix$address() {
        return H5Pget_virtual_prefix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t H5Pget_virtual_prefix(hid_t dapl_id, char *prefix, size_t size)
     * }
     */
    public static long H5Pget_virtual_prefix(long dapl_id, MemorySegment prefix, long size) {
        var mh$ = H5Pget_virtual_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_virtual_prefix", dapl_id, prefix, size);
            }
            return (long)mh$.invokeExact(dapl_id, prefix, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_virtual_printf_gap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_virtual_printf_gap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_virtual_printf_gap(hid_t dapl_id, hsize_t *gap_size)
     * }
     */
    public static FunctionDescriptor H5Pget_virtual_printf_gap$descriptor() {
        return H5Pget_virtual_printf_gap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_virtual_printf_gap(hid_t dapl_id, hsize_t *gap_size)
     * }
     */
    public static MethodHandle H5Pget_virtual_printf_gap$handle() {
        return H5Pget_virtual_printf_gap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_virtual_printf_gap(hid_t dapl_id, hsize_t *gap_size)
     * }
     */
    public static MemorySegment H5Pget_virtual_printf_gap$address() {
        return H5Pget_virtual_printf_gap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_virtual_printf_gap(hid_t dapl_id, hsize_t *gap_size)
     * }
     */
    public static int H5Pget_virtual_printf_gap(long dapl_id, MemorySegment gap_size) {
        var mh$ = H5Pget_virtual_printf_gap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_virtual_printf_gap", dapl_id, gap_size);
            }
            return (int)mh$.invokeExact(dapl_id, gap_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_virtual_view {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_virtual_view");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_virtual_view(hid_t dapl_id, H5D_vds_view_t *view)
     * }
     */
    public static FunctionDescriptor H5Pget_virtual_view$descriptor() {
        return H5Pget_virtual_view.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_virtual_view(hid_t dapl_id, H5D_vds_view_t *view)
     * }
     */
    public static MethodHandle H5Pget_virtual_view$handle() {
        return H5Pget_virtual_view.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_virtual_view(hid_t dapl_id, H5D_vds_view_t *view)
     * }
     */
    public static MemorySegment H5Pget_virtual_view$address() {
        return H5Pget_virtual_view.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_virtual_view(hid_t dapl_id, H5D_vds_view_t *view)
     * }
     */
    public static int H5Pget_virtual_view(long dapl_id, MemorySegment view) {
        var mh$ = H5Pget_virtual_view.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_virtual_view", dapl_id, view);
            }
            return (int)mh$.invokeExact(dapl_id, view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_append_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_append_flush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_append_flush(hid_t dapl_id, unsigned int ndims, const hsize_t boundary[], H5D_append_cb_t func, void *udata)
     * }
     */
    public static FunctionDescriptor H5Pset_append_flush$descriptor() {
        return H5Pset_append_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_append_flush(hid_t dapl_id, unsigned int ndims, const hsize_t boundary[], H5D_append_cb_t func, void *udata)
     * }
     */
    public static MethodHandle H5Pset_append_flush$handle() {
        return H5Pset_append_flush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_append_flush(hid_t dapl_id, unsigned int ndims, const hsize_t boundary[], H5D_append_cb_t func, void *udata)
     * }
     */
    public static MemorySegment H5Pset_append_flush$address() {
        return H5Pset_append_flush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_append_flush(hid_t dapl_id, unsigned int ndims, const hsize_t boundary[], H5D_append_cb_t func, void *udata)
     * }
     */
    public static int H5Pset_append_flush(long dapl_id, int ndims, MemorySegment boundary, MemorySegment func, MemorySegment udata) {
        var mh$ = H5Pset_append_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_append_flush", dapl_id, ndims, boundary, func, udata);
            }
            return (int)mh$.invokeExact(dapl_id, ndims, boundary, func, udata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_chunk_cache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_chunk_cache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_chunk_cache(hid_t dapl_id, size_t rdcc_nslots, size_t rdcc_nbytes, double rdcc_w0)
     * }
     */
    public static FunctionDescriptor H5Pset_chunk_cache$descriptor() {
        return H5Pset_chunk_cache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_chunk_cache(hid_t dapl_id, size_t rdcc_nslots, size_t rdcc_nbytes, double rdcc_w0)
     * }
     */
    public static MethodHandle H5Pset_chunk_cache$handle() {
        return H5Pset_chunk_cache.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_chunk_cache(hid_t dapl_id, size_t rdcc_nslots, size_t rdcc_nbytes, double rdcc_w0)
     * }
     */
    public static MemorySegment H5Pset_chunk_cache$address() {
        return H5Pset_chunk_cache.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_chunk_cache(hid_t dapl_id, size_t rdcc_nslots, size_t rdcc_nbytes, double rdcc_w0)
     * }
     */
    public static int H5Pset_chunk_cache(long dapl_id, long rdcc_nslots, long rdcc_nbytes, double rdcc_w0) {
        var mh$ = H5Pset_chunk_cache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_chunk_cache", dapl_id, rdcc_nslots, rdcc_nbytes, rdcc_w0);
            }
            return (int)mh$.invokeExact(dapl_id, rdcc_nslots, rdcc_nbytes, rdcc_w0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_efile_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_efile_prefix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_efile_prefix(hid_t dapl_id, const char *prefix)
     * }
     */
    public static FunctionDescriptor H5Pset_efile_prefix$descriptor() {
        return H5Pset_efile_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_efile_prefix(hid_t dapl_id, const char *prefix)
     * }
     */
    public static MethodHandle H5Pset_efile_prefix$handle() {
        return H5Pset_efile_prefix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_efile_prefix(hid_t dapl_id, const char *prefix)
     * }
     */
    public static MemorySegment H5Pset_efile_prefix$address() {
        return H5Pset_efile_prefix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_efile_prefix(hid_t dapl_id, const char *prefix)
     * }
     */
    public static int H5Pset_efile_prefix(long dapl_id, MemorySegment prefix) {
        var mh$ = H5Pset_efile_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_efile_prefix", dapl_id, prefix);
            }
            return (int)mh$.invokeExact(dapl_id, prefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_virtual_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_virtual_prefix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_virtual_prefix(hid_t dapl_id, const char *prefix)
     * }
     */
    public static FunctionDescriptor H5Pset_virtual_prefix$descriptor() {
        return H5Pset_virtual_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_virtual_prefix(hid_t dapl_id, const char *prefix)
     * }
     */
    public static MethodHandle H5Pset_virtual_prefix$handle() {
        return H5Pset_virtual_prefix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_virtual_prefix(hid_t dapl_id, const char *prefix)
     * }
     */
    public static MemorySegment H5Pset_virtual_prefix$address() {
        return H5Pset_virtual_prefix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_virtual_prefix(hid_t dapl_id, const char *prefix)
     * }
     */
    public static int H5Pset_virtual_prefix(long dapl_id, MemorySegment prefix) {
        var mh$ = H5Pset_virtual_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_virtual_prefix", dapl_id, prefix);
            }
            return (int)mh$.invokeExact(dapl_id, prefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_virtual_printf_gap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_virtual_printf_gap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_virtual_printf_gap(hid_t dapl_id, hsize_t gap_size)
     * }
     */
    public static FunctionDescriptor H5Pset_virtual_printf_gap$descriptor() {
        return H5Pset_virtual_printf_gap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_virtual_printf_gap(hid_t dapl_id, hsize_t gap_size)
     * }
     */
    public static MethodHandle H5Pset_virtual_printf_gap$handle() {
        return H5Pset_virtual_printf_gap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_virtual_printf_gap(hid_t dapl_id, hsize_t gap_size)
     * }
     */
    public static MemorySegment H5Pset_virtual_printf_gap$address() {
        return H5Pset_virtual_printf_gap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_virtual_printf_gap(hid_t dapl_id, hsize_t gap_size)
     * }
     */
    public static int H5Pset_virtual_printf_gap(long dapl_id, long gap_size) {
        var mh$ = H5Pset_virtual_printf_gap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_virtual_printf_gap", dapl_id, gap_size);
            }
            return (int)mh$.invokeExact(dapl_id, gap_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_virtual_view {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_virtual_view");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_virtual_view(hid_t dapl_id, H5D_vds_view_t view)
     * }
     */
    public static FunctionDescriptor H5Pset_virtual_view$descriptor() {
        return H5Pset_virtual_view.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_virtual_view(hid_t dapl_id, H5D_vds_view_t view)
     * }
     */
    public static MethodHandle H5Pset_virtual_view$handle() {
        return H5Pset_virtual_view.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_virtual_view(hid_t dapl_id, H5D_vds_view_t view)
     * }
     */
    public static MemorySegment H5Pset_virtual_view$address() {
        return H5Pset_virtual_view.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_virtual_view(hid_t dapl_id, H5D_vds_view_t view)
     * }
     */
    public static int H5Pset_virtual_view(long dapl_id, int view) {
        var mh$ = H5Pset_virtual_view.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_virtual_view", dapl_id, view);
            }
            return (int)mh$.invokeExact(dapl_id, view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_btree_ratios {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_btree_ratios");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_btree_ratios(hid_t plist_id, double *left, double *middle, double *right)
     * }
     */
    public static FunctionDescriptor H5Pget_btree_ratios$descriptor() {
        return H5Pget_btree_ratios.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_btree_ratios(hid_t plist_id, double *left, double *middle, double *right)
     * }
     */
    public static MethodHandle H5Pget_btree_ratios$handle() {
        return H5Pget_btree_ratios.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_btree_ratios(hid_t plist_id, double *left, double *middle, double *right)
     * }
     */
    public static MemorySegment H5Pget_btree_ratios$address() {
        return H5Pget_btree_ratios.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_btree_ratios(hid_t plist_id, double *left, double *middle, double *right)
     * }
     */
    public static int H5Pget_btree_ratios(long plist_id, MemorySegment left, MemorySegment middle, MemorySegment right) {
        var mh$ = H5Pget_btree_ratios.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_btree_ratios", plist_id, left, middle, right);
            }
            return (int)mh$.invokeExact(plist_id, left, middle, right);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t H5Pget_buffer(hid_t plist_id, void **tconv, void **bkg)
     * }
     */
    public static FunctionDescriptor H5Pget_buffer$descriptor() {
        return H5Pget_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t H5Pget_buffer(hid_t plist_id, void **tconv, void **bkg)
     * }
     */
    public static MethodHandle H5Pget_buffer$handle() {
        return H5Pget_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t H5Pget_buffer(hid_t plist_id, void **tconv, void **bkg)
     * }
     */
    public static MemorySegment H5Pget_buffer$address() {
        return H5Pget_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t H5Pget_buffer(hid_t plist_id, void **tconv, void **bkg)
     * }
     */
    public static long H5Pget_buffer(long plist_id, MemorySegment tconv, MemorySegment bkg) {
        var mh$ = H5Pget_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_buffer", plist_id, tconv, bkg);
            }
            return (long)mh$.invokeExact(plist_id, tconv, bkg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_data_transform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_data_transform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Pget_data_transform(hid_t plist_id, char *expression, size_t size)
     * }
     */
    public static FunctionDescriptor H5Pget_data_transform$descriptor() {
        return H5Pget_data_transform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Pget_data_transform(hid_t plist_id, char *expression, size_t size)
     * }
     */
    public static MethodHandle H5Pget_data_transform$handle() {
        return H5Pget_data_transform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Pget_data_transform(hid_t plist_id, char *expression, size_t size)
     * }
     */
    public static MemorySegment H5Pget_data_transform$address() {
        return H5Pget_data_transform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t H5Pget_data_transform(hid_t plist_id, char *expression, size_t size)
     * }
     */
    public static long H5Pget_data_transform(long plist_id, MemorySegment expression, long size) {
        var mh$ = H5Pget_data_transform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_data_transform", plist_id, expression, size);
            }
            return (long)mh$.invokeExact(plist_id, expression, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_edc_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_edc_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5Z_EDC_t H5Pget_edc_check(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pget_edc_check$descriptor() {
        return H5Pget_edc_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5Z_EDC_t H5Pget_edc_check(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pget_edc_check$handle() {
        return H5Pget_edc_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5Z_EDC_t H5Pget_edc_check(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pget_edc_check$address() {
        return H5Pget_edc_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * H5Z_EDC_t H5Pget_edc_check(hid_t plist_id)
     * }
     */
    public static int H5Pget_edc_check(long plist_id) {
        var mh$ = H5Pget_edc_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_edc_check", plist_id);
            }
            return (int)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_hyper_vector_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_hyper_vector_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_hyper_vector_size(hid_t fapl_id, size_t *size)
     * }
     */
    public static FunctionDescriptor H5Pget_hyper_vector_size$descriptor() {
        return H5Pget_hyper_vector_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_hyper_vector_size(hid_t fapl_id, size_t *size)
     * }
     */
    public static MethodHandle H5Pget_hyper_vector_size$handle() {
        return H5Pget_hyper_vector_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_hyper_vector_size(hid_t fapl_id, size_t *size)
     * }
     */
    public static MemorySegment H5Pget_hyper_vector_size$address() {
        return H5Pget_hyper_vector_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_hyper_vector_size(hid_t fapl_id, size_t *size)
     * }
     */
    public static int H5Pget_hyper_vector_size(long fapl_id, MemorySegment size) {
        var mh$ = H5Pget_hyper_vector_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_hyper_vector_size", fapl_id, size);
            }
            return (int)mh$.invokeExact(fapl_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_preserve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_preserve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Pget_preserve(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pget_preserve$descriptor() {
        return H5Pget_preserve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Pget_preserve(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pget_preserve$handle() {
        return H5Pget_preserve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Pget_preserve(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pget_preserve$address() {
        return H5Pget_preserve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int H5Pget_preserve(hid_t plist_id)
     * }
     */
    public static int H5Pget_preserve(long plist_id) {
        var mh$ = H5Pget_preserve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_preserve", plist_id);
            }
            return (int)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_type_conv_cb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_type_conv_cb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_type_conv_cb(hid_t dxpl_id, H5T_conv_except_func_t *op, void **operate_data)
     * }
     */
    public static FunctionDescriptor H5Pget_type_conv_cb$descriptor() {
        return H5Pget_type_conv_cb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_type_conv_cb(hid_t dxpl_id, H5T_conv_except_func_t *op, void **operate_data)
     * }
     */
    public static MethodHandle H5Pget_type_conv_cb$handle() {
        return H5Pget_type_conv_cb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_type_conv_cb(hid_t dxpl_id, H5T_conv_except_func_t *op, void **operate_data)
     * }
     */
    public static MemorySegment H5Pget_type_conv_cb$address() {
        return H5Pget_type_conv_cb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_type_conv_cb(hid_t dxpl_id, H5T_conv_except_func_t *op, void **operate_data)
     * }
     */
    public static int H5Pget_type_conv_cb(long dxpl_id, MemorySegment op, MemorySegment operate_data) {
        var mh$ = H5Pget_type_conv_cb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_type_conv_cb", dxpl_id, op, operate_data);
            }
            return (int)mh$.invokeExact(dxpl_id, op, operate_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_vlen_mem_manager {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_vlen_mem_manager");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_vlen_mem_manager(hid_t plist_id, H5MM_allocate_t *alloc_func, void **alloc_info, H5MM_free_t *free_func, void **free_info)
     * }
     */
    public static FunctionDescriptor H5Pget_vlen_mem_manager$descriptor() {
        return H5Pget_vlen_mem_manager.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_vlen_mem_manager(hid_t plist_id, H5MM_allocate_t *alloc_func, void **alloc_info, H5MM_free_t *free_func, void **free_info)
     * }
     */
    public static MethodHandle H5Pget_vlen_mem_manager$handle() {
        return H5Pget_vlen_mem_manager.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_vlen_mem_manager(hid_t plist_id, H5MM_allocate_t *alloc_func, void **alloc_info, H5MM_free_t *free_func, void **free_info)
     * }
     */
    public static MemorySegment H5Pget_vlen_mem_manager$address() {
        return H5Pget_vlen_mem_manager.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_vlen_mem_manager(hid_t plist_id, H5MM_allocate_t *alloc_func, void **alloc_info, H5MM_free_t *free_func, void **free_info)
     * }
     */
    public static int H5Pget_vlen_mem_manager(long plist_id, MemorySegment alloc_func, MemorySegment alloc_info, MemorySegment free_func, MemorySegment free_info) {
        var mh$ = H5Pget_vlen_mem_manager.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_vlen_mem_manager", plist_id, alloc_func, alloc_info, free_func, free_info);
            }
            return (int)mh$.invokeExact(plist_id, alloc_func, alloc_info, free_func, free_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_btree_ratios {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_DOUBLE,
            hdf5_h.C_DOUBLE,
            hdf5_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_btree_ratios");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_btree_ratios(hid_t plist_id, double left, double middle, double right)
     * }
     */
    public static FunctionDescriptor H5Pset_btree_ratios$descriptor() {
        return H5Pset_btree_ratios.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_btree_ratios(hid_t plist_id, double left, double middle, double right)
     * }
     */
    public static MethodHandle H5Pset_btree_ratios$handle() {
        return H5Pset_btree_ratios.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_btree_ratios(hid_t plist_id, double left, double middle, double right)
     * }
     */
    public static MemorySegment H5Pset_btree_ratios$address() {
        return H5Pset_btree_ratios.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_btree_ratios(hid_t plist_id, double left, double middle, double right)
     * }
     */
    public static int H5Pset_btree_ratios(long plist_id, double left, double middle, double right) {
        var mh$ = H5Pset_btree_ratios.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_btree_ratios", plist_id, left, middle, right);
            }
            return (int)mh$.invokeExact(plist_id, left, middle, right);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_buffer(hid_t plist_id, size_t size, void *tconv, void *bkg)
     * }
     */
    public static FunctionDescriptor H5Pset_buffer$descriptor() {
        return H5Pset_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_buffer(hid_t plist_id, size_t size, void *tconv, void *bkg)
     * }
     */
    public static MethodHandle H5Pset_buffer$handle() {
        return H5Pset_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_buffer(hid_t plist_id, size_t size, void *tconv, void *bkg)
     * }
     */
    public static MemorySegment H5Pset_buffer$address() {
        return H5Pset_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_buffer(hid_t plist_id, size_t size, void *tconv, void *bkg)
     * }
     */
    public static int H5Pset_buffer(long plist_id, long size, MemorySegment tconv, MemorySegment bkg) {
        var mh$ = H5Pset_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_buffer", plist_id, size, tconv, bkg);
            }
            return (int)mh$.invokeExact(plist_id, size, tconv, bkg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_data_transform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_data_transform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_data_transform(hid_t plist_id, const char *expression)
     * }
     */
    public static FunctionDescriptor H5Pset_data_transform$descriptor() {
        return H5Pset_data_transform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_data_transform(hid_t plist_id, const char *expression)
     * }
     */
    public static MethodHandle H5Pset_data_transform$handle() {
        return H5Pset_data_transform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_data_transform(hid_t plist_id, const char *expression)
     * }
     */
    public static MemorySegment H5Pset_data_transform$address() {
        return H5Pset_data_transform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_data_transform(hid_t plist_id, const char *expression)
     * }
     */
    public static int H5Pset_data_transform(long plist_id, MemorySegment expression) {
        var mh$ = H5Pset_data_transform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_data_transform", plist_id, expression);
            }
            return (int)mh$.invokeExact(plist_id, expression);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_edc_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_edc_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_edc_check(hid_t plist_id, H5Z_EDC_t check)
     * }
     */
    public static FunctionDescriptor H5Pset_edc_check$descriptor() {
        return H5Pset_edc_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_edc_check(hid_t plist_id, H5Z_EDC_t check)
     * }
     */
    public static MethodHandle H5Pset_edc_check$handle() {
        return H5Pset_edc_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_edc_check(hid_t plist_id, H5Z_EDC_t check)
     * }
     */
    public static MemorySegment H5Pset_edc_check$address() {
        return H5Pset_edc_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_edc_check(hid_t plist_id, H5Z_EDC_t check)
     * }
     */
    public static int H5Pset_edc_check(long plist_id, int check) {
        var mh$ = H5Pset_edc_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_edc_check", plist_id, check);
            }
            return (int)mh$.invokeExact(plist_id, check);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_filter_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_filter_callback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_filter_callback(hid_t plist_id, H5Z_filter_func_t func, void *op_data)
     * }
     */
    public static FunctionDescriptor H5Pset_filter_callback$descriptor() {
        return H5Pset_filter_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_filter_callback(hid_t plist_id, H5Z_filter_func_t func, void *op_data)
     * }
     */
    public static MethodHandle H5Pset_filter_callback$handle() {
        return H5Pset_filter_callback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_filter_callback(hid_t plist_id, H5Z_filter_func_t func, void *op_data)
     * }
     */
    public static MemorySegment H5Pset_filter_callback$address() {
        return H5Pset_filter_callback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_filter_callback(hid_t plist_id, H5Z_filter_func_t func, void *op_data)
     * }
     */
    public static int H5Pset_filter_callback(long plist_id, MemorySegment func, MemorySegment op_data) {
        var mh$ = H5Pset_filter_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_filter_callback", plist_id, func, op_data);
            }
            return (int)mh$.invokeExact(plist_id, func, op_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_hyper_vector_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_hyper_vector_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_hyper_vector_size(hid_t plist_id, size_t size)
     * }
     */
    public static FunctionDescriptor H5Pset_hyper_vector_size$descriptor() {
        return H5Pset_hyper_vector_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_hyper_vector_size(hid_t plist_id, size_t size)
     * }
     */
    public static MethodHandle H5Pset_hyper_vector_size$handle() {
        return H5Pset_hyper_vector_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_hyper_vector_size(hid_t plist_id, size_t size)
     * }
     */
    public static MemorySegment H5Pset_hyper_vector_size$address() {
        return H5Pset_hyper_vector_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_hyper_vector_size(hid_t plist_id, size_t size)
     * }
     */
    public static int H5Pset_hyper_vector_size(long plist_id, long size) {
        var mh$ = H5Pset_hyper_vector_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_hyper_vector_size", plist_id, size);
            }
            return (int)mh$.invokeExact(plist_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_preserve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_BOOL
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_preserve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_preserve(hid_t plist_id, hbool_t status)
     * }
     */
    public static FunctionDescriptor H5Pset_preserve$descriptor() {
        return H5Pset_preserve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_preserve(hid_t plist_id, hbool_t status)
     * }
     */
    public static MethodHandle H5Pset_preserve$handle() {
        return H5Pset_preserve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_preserve(hid_t plist_id, hbool_t status)
     * }
     */
    public static MemorySegment H5Pset_preserve$address() {
        return H5Pset_preserve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_preserve(hid_t plist_id, hbool_t status)
     * }
     */
    public static int H5Pset_preserve(long plist_id, boolean status) {
        var mh$ = H5Pset_preserve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_preserve", plist_id, status);
            }
            return (int)mh$.invokeExact(plist_id, status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_type_conv_cb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_type_conv_cb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_type_conv_cb(hid_t dxpl_id, H5T_conv_except_func_t op, void *operate_data)
     * }
     */
    public static FunctionDescriptor H5Pset_type_conv_cb$descriptor() {
        return H5Pset_type_conv_cb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_type_conv_cb(hid_t dxpl_id, H5T_conv_except_func_t op, void *operate_data)
     * }
     */
    public static MethodHandle H5Pset_type_conv_cb$handle() {
        return H5Pset_type_conv_cb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_type_conv_cb(hid_t dxpl_id, H5T_conv_except_func_t op, void *operate_data)
     * }
     */
    public static MemorySegment H5Pset_type_conv_cb$address() {
        return H5Pset_type_conv_cb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_type_conv_cb(hid_t dxpl_id, H5T_conv_except_func_t op, void *operate_data)
     * }
     */
    public static int H5Pset_type_conv_cb(long dxpl_id, MemorySegment op, MemorySegment operate_data) {
        var mh$ = H5Pset_type_conv_cb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_type_conv_cb", dxpl_id, op, operate_data);
            }
            return (int)mh$.invokeExact(dxpl_id, op, operate_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_vlen_mem_manager {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_vlen_mem_manager");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_vlen_mem_manager(hid_t plist_id, H5MM_allocate_t alloc_func, void *alloc_info, H5MM_free_t free_func, void *free_info)
     * }
     */
    public static FunctionDescriptor H5Pset_vlen_mem_manager$descriptor() {
        return H5Pset_vlen_mem_manager.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_vlen_mem_manager(hid_t plist_id, H5MM_allocate_t alloc_func, void *alloc_info, H5MM_free_t free_func, void *free_info)
     * }
     */
    public static MethodHandle H5Pset_vlen_mem_manager$handle() {
        return H5Pset_vlen_mem_manager.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_vlen_mem_manager(hid_t plist_id, H5MM_allocate_t alloc_func, void *alloc_info, H5MM_free_t free_func, void *free_info)
     * }
     */
    public static MemorySegment H5Pset_vlen_mem_manager$address() {
        return H5Pset_vlen_mem_manager.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_vlen_mem_manager(hid_t plist_id, H5MM_allocate_t alloc_func, void *alloc_info, H5MM_free_t free_func, void *free_info)
     * }
     */
    public static int H5Pset_vlen_mem_manager(long plist_id, MemorySegment alloc_func, MemorySegment alloc_info, MemorySegment free_func, MemorySegment free_info) {
        var mh$ = H5Pset_vlen_mem_manager.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_vlen_mem_manager", plist_id, alloc_func, alloc_info, free_func, free_info);
            }
            return (int)mh$.invokeExact(plist_id, alloc_func, alloc_info, free_func, free_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_dataset_io_hyperslab_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_dataset_io_hyperslab_selection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_dataset_io_hyperslab_selection(hid_t plist_id, unsigned int rank, H5S_seloper_t op, const hsize_t start[], const hsize_t stride[], const hsize_t count[], const hsize_t block[])
     * }
     */
    public static FunctionDescriptor H5Pset_dataset_io_hyperslab_selection$descriptor() {
        return H5Pset_dataset_io_hyperslab_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_dataset_io_hyperslab_selection(hid_t plist_id, unsigned int rank, H5S_seloper_t op, const hsize_t start[], const hsize_t stride[], const hsize_t count[], const hsize_t block[])
     * }
     */
    public static MethodHandle H5Pset_dataset_io_hyperslab_selection$handle() {
        return H5Pset_dataset_io_hyperslab_selection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_dataset_io_hyperslab_selection(hid_t plist_id, unsigned int rank, H5S_seloper_t op, const hsize_t start[], const hsize_t stride[], const hsize_t count[], const hsize_t block[])
     * }
     */
    public static MemorySegment H5Pset_dataset_io_hyperslab_selection$address() {
        return H5Pset_dataset_io_hyperslab_selection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_dataset_io_hyperslab_selection(hid_t plist_id, unsigned int rank, H5S_seloper_t op, const hsize_t start[], const hsize_t stride[], const hsize_t count[], const hsize_t block[])
     * }
     */
    public static int H5Pset_dataset_io_hyperslab_selection(long plist_id, int rank, int op, MemorySegment start, MemorySegment stride, MemorySegment count, MemorySegment block) {
        var mh$ = H5Pset_dataset_io_hyperslab_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_dataset_io_hyperslab_selection", plist_id, rank, op, start, stride, count, block);
            }
            return (int)mh$.invokeExact(plist_id, rank, op, start, stride, count, block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_selection_io {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_selection_io");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_selection_io(hid_t plist_id, H5D_selection_io_mode_t selection_io_mode)
     * }
     */
    public static FunctionDescriptor H5Pset_selection_io$descriptor() {
        return H5Pset_selection_io.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_selection_io(hid_t plist_id, H5D_selection_io_mode_t selection_io_mode)
     * }
     */
    public static MethodHandle H5Pset_selection_io$handle() {
        return H5Pset_selection_io.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_selection_io(hid_t plist_id, H5D_selection_io_mode_t selection_io_mode)
     * }
     */
    public static MemorySegment H5Pset_selection_io$address() {
        return H5Pset_selection_io.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_selection_io(hid_t plist_id, H5D_selection_io_mode_t selection_io_mode)
     * }
     */
    public static int H5Pset_selection_io(long plist_id, int selection_io_mode) {
        var mh$ = H5Pset_selection_io.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_selection_io", plist_id, selection_io_mode);
            }
            return (int)mh$.invokeExact(plist_id, selection_io_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_selection_io {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_selection_io");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_selection_io(hid_t plist_id, H5D_selection_io_mode_t *selection_io_mode)
     * }
     */
    public static FunctionDescriptor H5Pget_selection_io$descriptor() {
        return H5Pget_selection_io.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_selection_io(hid_t plist_id, H5D_selection_io_mode_t *selection_io_mode)
     * }
     */
    public static MethodHandle H5Pget_selection_io$handle() {
        return H5Pget_selection_io.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_selection_io(hid_t plist_id, H5D_selection_io_mode_t *selection_io_mode)
     * }
     */
    public static MemorySegment H5Pget_selection_io$address() {
        return H5Pget_selection_io.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_selection_io(hid_t plist_id, H5D_selection_io_mode_t *selection_io_mode)
     * }
     */
    public static int H5Pget_selection_io(long plist_id, MemorySegment selection_io_mode) {
        var mh$ = H5Pget_selection_io.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_selection_io", plist_id, selection_io_mode);
            }
            return (int)mh$.invokeExact(plist_id, selection_io_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_no_selection_io_cause {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_no_selection_io_cause");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_no_selection_io_cause(hid_t plist_id, uint32_t *no_selection_io_cause)
     * }
     */
    public static FunctionDescriptor H5Pget_no_selection_io_cause$descriptor() {
        return H5Pget_no_selection_io_cause.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_no_selection_io_cause(hid_t plist_id, uint32_t *no_selection_io_cause)
     * }
     */
    public static MethodHandle H5Pget_no_selection_io_cause$handle() {
        return H5Pget_no_selection_io_cause.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_no_selection_io_cause(hid_t plist_id, uint32_t *no_selection_io_cause)
     * }
     */
    public static MemorySegment H5Pget_no_selection_io_cause$address() {
        return H5Pget_no_selection_io_cause.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_no_selection_io_cause(hid_t plist_id, uint32_t *no_selection_io_cause)
     * }
     */
    public static int H5Pget_no_selection_io_cause(long plist_id, MemorySegment no_selection_io_cause) {
        var mh$ = H5Pget_no_selection_io_cause.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_no_selection_io_cause", plist_id, no_selection_io_cause);
            }
            return (int)mh$.invokeExact(plist_id, no_selection_io_cause);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_actual_selection_io_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_actual_selection_io_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_actual_selection_io_mode(hid_t plist_id, uint32_t *actual_selection_io_mode)
     * }
     */
    public static FunctionDescriptor H5Pget_actual_selection_io_mode$descriptor() {
        return H5Pget_actual_selection_io_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_actual_selection_io_mode(hid_t plist_id, uint32_t *actual_selection_io_mode)
     * }
     */
    public static MethodHandle H5Pget_actual_selection_io_mode$handle() {
        return H5Pget_actual_selection_io_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_actual_selection_io_mode(hid_t plist_id, uint32_t *actual_selection_io_mode)
     * }
     */
    public static MemorySegment H5Pget_actual_selection_io_mode$address() {
        return H5Pget_actual_selection_io_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_actual_selection_io_mode(hid_t plist_id, uint32_t *actual_selection_io_mode)
     * }
     */
    public static int H5Pget_actual_selection_io_mode(long plist_id, MemorySegment actual_selection_io_mode) {
        var mh$ = H5Pget_actual_selection_io_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_actual_selection_io_mode", plist_id, actual_selection_io_mode);
            }
            return (int)mh$.invokeExact(plist_id, actual_selection_io_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_modify_write_buf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_BOOL
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_modify_write_buf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_modify_write_buf(hid_t plist_id, hbool_t modify_write_buf)
     * }
     */
    public static FunctionDescriptor H5Pset_modify_write_buf$descriptor() {
        return H5Pset_modify_write_buf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_modify_write_buf(hid_t plist_id, hbool_t modify_write_buf)
     * }
     */
    public static MethodHandle H5Pset_modify_write_buf$handle() {
        return H5Pset_modify_write_buf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_modify_write_buf(hid_t plist_id, hbool_t modify_write_buf)
     * }
     */
    public static MemorySegment H5Pset_modify_write_buf$address() {
        return H5Pset_modify_write_buf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_modify_write_buf(hid_t plist_id, hbool_t modify_write_buf)
     * }
     */
    public static int H5Pset_modify_write_buf(long plist_id, boolean modify_write_buf) {
        var mh$ = H5Pset_modify_write_buf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_modify_write_buf", plist_id, modify_write_buf);
            }
            return (int)mh$.invokeExact(plist_id, modify_write_buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_modify_write_buf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_modify_write_buf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_modify_write_buf(hid_t plist_id, hbool_t *modify_write_buf)
     * }
     */
    public static FunctionDescriptor H5Pget_modify_write_buf$descriptor() {
        return H5Pget_modify_write_buf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_modify_write_buf(hid_t plist_id, hbool_t *modify_write_buf)
     * }
     */
    public static MethodHandle H5Pget_modify_write_buf$handle() {
        return H5Pget_modify_write_buf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_modify_write_buf(hid_t plist_id, hbool_t *modify_write_buf)
     * }
     */
    public static MemorySegment H5Pget_modify_write_buf$address() {
        return H5Pget_modify_write_buf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_modify_write_buf(hid_t plist_id, hbool_t *modify_write_buf)
     * }
     */
    public static int H5Pget_modify_write_buf(long plist_id, MemorySegment modify_write_buf) {
        var mh$ = H5Pget_modify_write_buf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_modify_write_buf", plist_id, modify_write_buf);
            }
            return (int)mh$.invokeExact(plist_id, modify_write_buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_create_intermediate_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_create_intermediate_group");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_create_intermediate_group(hid_t plist_id, unsigned int *crt_intmd)
     * }
     */
    public static FunctionDescriptor H5Pget_create_intermediate_group$descriptor() {
        return H5Pget_create_intermediate_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_create_intermediate_group(hid_t plist_id, unsigned int *crt_intmd)
     * }
     */
    public static MethodHandle H5Pget_create_intermediate_group$handle() {
        return H5Pget_create_intermediate_group.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_create_intermediate_group(hid_t plist_id, unsigned int *crt_intmd)
     * }
     */
    public static MemorySegment H5Pget_create_intermediate_group$address() {
        return H5Pget_create_intermediate_group.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_create_intermediate_group(hid_t plist_id, unsigned int *crt_intmd)
     * }
     */
    public static int H5Pget_create_intermediate_group(long plist_id, MemorySegment crt_intmd) {
        var mh$ = H5Pget_create_intermediate_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_create_intermediate_group", plist_id, crt_intmd);
            }
            return (int)mh$.invokeExact(plist_id, crt_intmd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_create_intermediate_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_create_intermediate_group");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_create_intermediate_group(hid_t plist_id, unsigned int crt_intmd)
     * }
     */
    public static FunctionDescriptor H5Pset_create_intermediate_group$descriptor() {
        return H5Pset_create_intermediate_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_create_intermediate_group(hid_t plist_id, unsigned int crt_intmd)
     * }
     */
    public static MethodHandle H5Pset_create_intermediate_group$handle() {
        return H5Pset_create_intermediate_group.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_create_intermediate_group(hid_t plist_id, unsigned int crt_intmd)
     * }
     */
    public static MemorySegment H5Pset_create_intermediate_group$address() {
        return H5Pset_create_intermediate_group.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_create_intermediate_group(hid_t plist_id, unsigned int crt_intmd)
     * }
     */
    public static int H5Pset_create_intermediate_group(long plist_id, int crt_intmd) {
        var mh$ = H5Pset_create_intermediate_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_create_intermediate_group", plist_id, crt_intmd);
            }
            return (int)mh$.invokeExact(plist_id, crt_intmd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_est_link_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_est_link_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_est_link_info(hid_t plist_id, unsigned int *est_num_entries, unsigned int *est_name_len)
     * }
     */
    public static FunctionDescriptor H5Pget_est_link_info$descriptor() {
        return H5Pget_est_link_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_est_link_info(hid_t plist_id, unsigned int *est_num_entries, unsigned int *est_name_len)
     * }
     */
    public static MethodHandle H5Pget_est_link_info$handle() {
        return H5Pget_est_link_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_est_link_info(hid_t plist_id, unsigned int *est_num_entries, unsigned int *est_name_len)
     * }
     */
    public static MemorySegment H5Pget_est_link_info$address() {
        return H5Pget_est_link_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_est_link_info(hid_t plist_id, unsigned int *est_num_entries, unsigned int *est_name_len)
     * }
     */
    public static int H5Pget_est_link_info(long plist_id, MemorySegment est_num_entries, MemorySegment est_name_len) {
        var mh$ = H5Pget_est_link_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_est_link_info", plist_id, est_num_entries, est_name_len);
            }
            return (int)mh$.invokeExact(plist_id, est_num_entries, est_name_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_link_creation_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_link_creation_order");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_link_creation_order(hid_t plist_id, unsigned int *crt_order_flags)
     * }
     */
    public static FunctionDescriptor H5Pget_link_creation_order$descriptor() {
        return H5Pget_link_creation_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_link_creation_order(hid_t plist_id, unsigned int *crt_order_flags)
     * }
     */
    public static MethodHandle H5Pget_link_creation_order$handle() {
        return H5Pget_link_creation_order.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_link_creation_order(hid_t plist_id, unsigned int *crt_order_flags)
     * }
     */
    public static MemorySegment H5Pget_link_creation_order$address() {
        return H5Pget_link_creation_order.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_link_creation_order(hid_t plist_id, unsigned int *crt_order_flags)
     * }
     */
    public static int H5Pget_link_creation_order(long plist_id, MemorySegment crt_order_flags) {
        var mh$ = H5Pget_link_creation_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_link_creation_order", plist_id, crt_order_flags);
            }
            return (int)mh$.invokeExact(plist_id, crt_order_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_link_phase_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_link_phase_change");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_link_phase_change(hid_t plist_id, unsigned int *max_compact, unsigned int *min_dense)
     * }
     */
    public static FunctionDescriptor H5Pget_link_phase_change$descriptor() {
        return H5Pget_link_phase_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_link_phase_change(hid_t plist_id, unsigned int *max_compact, unsigned int *min_dense)
     * }
     */
    public static MethodHandle H5Pget_link_phase_change$handle() {
        return H5Pget_link_phase_change.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_link_phase_change(hid_t plist_id, unsigned int *max_compact, unsigned int *min_dense)
     * }
     */
    public static MemorySegment H5Pget_link_phase_change$address() {
        return H5Pget_link_phase_change.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_link_phase_change(hid_t plist_id, unsigned int *max_compact, unsigned int *min_dense)
     * }
     */
    public static int H5Pget_link_phase_change(long plist_id, MemorySegment max_compact, MemorySegment min_dense) {
        var mh$ = H5Pget_link_phase_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_link_phase_change", plist_id, max_compact, min_dense);
            }
            return (int)mh$.invokeExact(plist_id, max_compact, min_dense);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_local_heap_size_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_local_heap_size_hint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_local_heap_size_hint(hid_t plist_id, size_t *size_hint)
     * }
     */
    public static FunctionDescriptor H5Pget_local_heap_size_hint$descriptor() {
        return H5Pget_local_heap_size_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_local_heap_size_hint(hid_t plist_id, size_t *size_hint)
     * }
     */
    public static MethodHandle H5Pget_local_heap_size_hint$handle() {
        return H5Pget_local_heap_size_hint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_local_heap_size_hint(hid_t plist_id, size_t *size_hint)
     * }
     */
    public static MemorySegment H5Pget_local_heap_size_hint$address() {
        return H5Pget_local_heap_size_hint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_local_heap_size_hint(hid_t plist_id, size_t *size_hint)
     * }
     */
    public static int H5Pget_local_heap_size_hint(long plist_id, MemorySegment size_hint) {
        var mh$ = H5Pget_local_heap_size_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_local_heap_size_hint", plist_id, size_hint);
            }
            return (int)mh$.invokeExact(plist_id, size_hint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_est_link_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_est_link_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_est_link_info(hid_t plist_id, unsigned int est_num_entries, unsigned int est_name_len)
     * }
     */
    public static FunctionDescriptor H5Pset_est_link_info$descriptor() {
        return H5Pset_est_link_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_est_link_info(hid_t plist_id, unsigned int est_num_entries, unsigned int est_name_len)
     * }
     */
    public static MethodHandle H5Pset_est_link_info$handle() {
        return H5Pset_est_link_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_est_link_info(hid_t plist_id, unsigned int est_num_entries, unsigned int est_name_len)
     * }
     */
    public static MemorySegment H5Pset_est_link_info$address() {
        return H5Pset_est_link_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_est_link_info(hid_t plist_id, unsigned int est_num_entries, unsigned int est_name_len)
     * }
     */
    public static int H5Pset_est_link_info(long plist_id, int est_num_entries, int est_name_len) {
        var mh$ = H5Pset_est_link_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_est_link_info", plist_id, est_num_entries, est_name_len);
            }
            return (int)mh$.invokeExact(plist_id, est_num_entries, est_name_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_link_creation_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_link_creation_order");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_link_creation_order(hid_t plist_id, unsigned int crt_order_flags)
     * }
     */
    public static FunctionDescriptor H5Pset_link_creation_order$descriptor() {
        return H5Pset_link_creation_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_link_creation_order(hid_t plist_id, unsigned int crt_order_flags)
     * }
     */
    public static MethodHandle H5Pset_link_creation_order$handle() {
        return H5Pset_link_creation_order.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_link_creation_order(hid_t plist_id, unsigned int crt_order_flags)
     * }
     */
    public static MemorySegment H5Pset_link_creation_order$address() {
        return H5Pset_link_creation_order.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_link_creation_order(hid_t plist_id, unsigned int crt_order_flags)
     * }
     */
    public static int H5Pset_link_creation_order(long plist_id, int crt_order_flags) {
        var mh$ = H5Pset_link_creation_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_link_creation_order", plist_id, crt_order_flags);
            }
            return (int)mh$.invokeExact(plist_id, crt_order_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_link_phase_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_link_phase_change");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_link_phase_change(hid_t plist_id, unsigned int max_compact, unsigned int min_dense)
     * }
     */
    public static FunctionDescriptor H5Pset_link_phase_change$descriptor() {
        return H5Pset_link_phase_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_link_phase_change(hid_t plist_id, unsigned int max_compact, unsigned int min_dense)
     * }
     */
    public static MethodHandle H5Pset_link_phase_change$handle() {
        return H5Pset_link_phase_change.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_link_phase_change(hid_t plist_id, unsigned int max_compact, unsigned int min_dense)
     * }
     */
    public static MemorySegment H5Pset_link_phase_change$address() {
        return H5Pset_link_phase_change.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_link_phase_change(hid_t plist_id, unsigned int max_compact, unsigned int min_dense)
     * }
     */
    public static int H5Pset_link_phase_change(long plist_id, int max_compact, int min_dense) {
        var mh$ = H5Pset_link_phase_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_link_phase_change", plist_id, max_compact, min_dense);
            }
            return (int)mh$.invokeExact(plist_id, max_compact, min_dense);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_local_heap_size_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_local_heap_size_hint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_local_heap_size_hint(hid_t plist_id, size_t size_hint)
     * }
     */
    public static FunctionDescriptor H5Pset_local_heap_size_hint$descriptor() {
        return H5Pset_local_heap_size_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_local_heap_size_hint(hid_t plist_id, size_t size_hint)
     * }
     */
    public static MethodHandle H5Pset_local_heap_size_hint$handle() {
        return H5Pset_local_heap_size_hint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_local_heap_size_hint(hid_t plist_id, size_t size_hint)
     * }
     */
    public static MemorySegment H5Pset_local_heap_size_hint$address() {
        return H5Pset_local_heap_size_hint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_local_heap_size_hint(hid_t plist_id, size_t size_hint)
     * }
     */
    public static int H5Pset_local_heap_size_hint(long plist_id, long size_hint) {
        var mh$ = H5Pset_local_heap_size_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_local_heap_size_hint", plist_id, size_hint);
            }
            return (int)mh$.invokeExact(plist_id, size_hint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_char_encoding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_char_encoding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_char_encoding(hid_t plist_id, H5T_cset_t *encoding)
     * }
     */
    public static FunctionDescriptor H5Pget_char_encoding$descriptor() {
        return H5Pget_char_encoding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_char_encoding(hid_t plist_id, H5T_cset_t *encoding)
     * }
     */
    public static MethodHandle H5Pget_char_encoding$handle() {
        return H5Pget_char_encoding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_char_encoding(hid_t plist_id, H5T_cset_t *encoding)
     * }
     */
    public static MemorySegment H5Pget_char_encoding$address() {
        return H5Pget_char_encoding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_char_encoding(hid_t plist_id, H5T_cset_t *encoding)
     * }
     */
    public static int H5Pget_char_encoding(long plist_id, MemorySegment encoding) {
        var mh$ = H5Pget_char_encoding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_char_encoding", plist_id, encoding);
            }
            return (int)mh$.invokeExact(plist_id, encoding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_char_encoding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_char_encoding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_char_encoding(hid_t plist_id, H5T_cset_t encoding)
     * }
     */
    public static FunctionDescriptor H5Pset_char_encoding$descriptor() {
        return H5Pset_char_encoding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_char_encoding(hid_t plist_id, H5T_cset_t encoding)
     * }
     */
    public static MethodHandle H5Pset_char_encoding$handle() {
        return H5Pset_char_encoding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_char_encoding(hid_t plist_id, H5T_cset_t encoding)
     * }
     */
    public static MemorySegment H5Pset_char_encoding$address() {
        return H5Pset_char_encoding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_char_encoding(hid_t plist_id, H5T_cset_t encoding)
     * }
     */
    public static int H5Pset_char_encoding(long plist_id, int encoding) {
        var mh$ = H5Pset_char_encoding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_char_encoding", plist_id, encoding);
            }
            return (int)mh$.invokeExact(plist_id, encoding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_elink_acc_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_elink_acc_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_elink_acc_flags(hid_t lapl_id, unsigned int *flags)
     * }
     */
    public static FunctionDescriptor H5Pget_elink_acc_flags$descriptor() {
        return H5Pget_elink_acc_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_elink_acc_flags(hid_t lapl_id, unsigned int *flags)
     * }
     */
    public static MethodHandle H5Pget_elink_acc_flags$handle() {
        return H5Pget_elink_acc_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_elink_acc_flags(hid_t lapl_id, unsigned int *flags)
     * }
     */
    public static MemorySegment H5Pget_elink_acc_flags$address() {
        return H5Pget_elink_acc_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_elink_acc_flags(hid_t lapl_id, unsigned int *flags)
     * }
     */
    public static int H5Pget_elink_acc_flags(long lapl_id, MemorySegment flags) {
        var mh$ = H5Pget_elink_acc_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_elink_acc_flags", lapl_id, flags);
            }
            return (int)mh$.invokeExact(lapl_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_elink_cb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_elink_cb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_elink_cb(hid_t lapl_id, H5L_elink_traverse_t *func, void **op_data)
     * }
     */
    public static FunctionDescriptor H5Pget_elink_cb$descriptor() {
        return H5Pget_elink_cb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_elink_cb(hid_t lapl_id, H5L_elink_traverse_t *func, void **op_data)
     * }
     */
    public static MethodHandle H5Pget_elink_cb$handle() {
        return H5Pget_elink_cb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_elink_cb(hid_t lapl_id, H5L_elink_traverse_t *func, void **op_data)
     * }
     */
    public static MemorySegment H5Pget_elink_cb$address() {
        return H5Pget_elink_cb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_elink_cb(hid_t lapl_id, H5L_elink_traverse_t *func, void **op_data)
     * }
     */
    public static int H5Pget_elink_cb(long lapl_id, MemorySegment func, MemorySegment op_data) {
        var mh$ = H5Pget_elink_cb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_elink_cb", lapl_id, func, op_data);
            }
            return (int)mh$.invokeExact(lapl_id, func, op_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_elink_fapl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_elink_fapl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Pget_elink_fapl(hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Pget_elink_fapl$descriptor() {
        return H5Pget_elink_fapl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Pget_elink_fapl(hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Pget_elink_fapl$handle() {
        return H5Pget_elink_fapl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Pget_elink_fapl(hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Pget_elink_fapl$address() {
        return H5Pget_elink_fapl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5Pget_elink_fapl(hid_t lapl_id)
     * }
     */
    public static long H5Pget_elink_fapl(long lapl_id) {
        var mh$ = H5Pget_elink_fapl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_elink_fapl", lapl_id);
            }
            return (long)mh$.invokeExact(lapl_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_elink_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_elink_prefix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Pget_elink_prefix(hid_t plist_id, char *prefix, size_t size)
     * }
     */
    public static FunctionDescriptor H5Pget_elink_prefix$descriptor() {
        return H5Pget_elink_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Pget_elink_prefix(hid_t plist_id, char *prefix, size_t size)
     * }
     */
    public static MethodHandle H5Pget_elink_prefix$handle() {
        return H5Pget_elink_prefix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Pget_elink_prefix(hid_t plist_id, char *prefix, size_t size)
     * }
     */
    public static MemorySegment H5Pget_elink_prefix$address() {
        return H5Pget_elink_prefix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t H5Pget_elink_prefix(hid_t plist_id, char *prefix, size_t size)
     * }
     */
    public static long H5Pget_elink_prefix(long plist_id, MemorySegment prefix, long size) {
        var mh$ = H5Pget_elink_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_elink_prefix", plist_id, prefix, size);
            }
            return (long)mh$.invokeExact(plist_id, prefix, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_nlinks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_nlinks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_nlinks(hid_t plist_id, size_t *nlinks)
     * }
     */
    public static FunctionDescriptor H5Pget_nlinks$descriptor() {
        return H5Pget_nlinks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_nlinks(hid_t plist_id, size_t *nlinks)
     * }
     */
    public static MethodHandle H5Pget_nlinks$handle() {
        return H5Pget_nlinks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_nlinks(hid_t plist_id, size_t *nlinks)
     * }
     */
    public static MemorySegment H5Pget_nlinks$address() {
        return H5Pget_nlinks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_nlinks(hid_t plist_id, size_t *nlinks)
     * }
     */
    public static int H5Pget_nlinks(long plist_id, MemorySegment nlinks) {
        var mh$ = H5Pget_nlinks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_nlinks", plist_id, nlinks);
            }
            return (int)mh$.invokeExact(plist_id, nlinks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_elink_acc_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_elink_acc_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_acc_flags(hid_t lapl_id, unsigned int flags)
     * }
     */
    public static FunctionDescriptor H5Pset_elink_acc_flags$descriptor() {
        return H5Pset_elink_acc_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_acc_flags(hid_t lapl_id, unsigned int flags)
     * }
     */
    public static MethodHandle H5Pset_elink_acc_flags$handle() {
        return H5Pset_elink_acc_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_acc_flags(hid_t lapl_id, unsigned int flags)
     * }
     */
    public static MemorySegment H5Pset_elink_acc_flags$address() {
        return H5Pset_elink_acc_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_elink_acc_flags(hid_t lapl_id, unsigned int flags)
     * }
     */
    public static int H5Pset_elink_acc_flags(long lapl_id, int flags) {
        var mh$ = H5Pset_elink_acc_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_elink_acc_flags", lapl_id, flags);
            }
            return (int)mh$.invokeExact(lapl_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_elink_cb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_elink_cb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_cb(hid_t lapl_id, H5L_elink_traverse_t func, void *op_data)
     * }
     */
    public static FunctionDescriptor H5Pset_elink_cb$descriptor() {
        return H5Pset_elink_cb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_cb(hid_t lapl_id, H5L_elink_traverse_t func, void *op_data)
     * }
     */
    public static MethodHandle H5Pset_elink_cb$handle() {
        return H5Pset_elink_cb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_cb(hid_t lapl_id, H5L_elink_traverse_t func, void *op_data)
     * }
     */
    public static MemorySegment H5Pset_elink_cb$address() {
        return H5Pset_elink_cb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_elink_cb(hid_t lapl_id, H5L_elink_traverse_t func, void *op_data)
     * }
     */
    public static int H5Pset_elink_cb(long lapl_id, MemorySegment func, MemorySegment op_data) {
        var mh$ = H5Pset_elink_cb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_elink_cb", lapl_id, func, op_data);
            }
            return (int)mh$.invokeExact(lapl_id, func, op_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_elink_fapl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_elink_fapl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_fapl(hid_t lapl_id, hid_t fapl_id)
     * }
     */
    public static FunctionDescriptor H5Pset_elink_fapl$descriptor() {
        return H5Pset_elink_fapl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_fapl(hid_t lapl_id, hid_t fapl_id)
     * }
     */
    public static MethodHandle H5Pset_elink_fapl$handle() {
        return H5Pset_elink_fapl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_fapl(hid_t lapl_id, hid_t fapl_id)
     * }
     */
    public static MemorySegment H5Pset_elink_fapl$address() {
        return H5Pset_elink_fapl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_elink_fapl(hid_t lapl_id, hid_t fapl_id)
     * }
     */
    public static int H5Pset_elink_fapl(long lapl_id, long fapl_id) {
        var mh$ = H5Pset_elink_fapl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_elink_fapl", lapl_id, fapl_id);
            }
            return (int)mh$.invokeExact(lapl_id, fapl_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_elink_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_elink_prefix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_prefix(hid_t plist_id, const char *prefix)
     * }
     */
    public static FunctionDescriptor H5Pset_elink_prefix$descriptor() {
        return H5Pset_elink_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_prefix(hid_t plist_id, const char *prefix)
     * }
     */
    public static MethodHandle H5Pset_elink_prefix$handle() {
        return H5Pset_elink_prefix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_elink_prefix(hid_t plist_id, const char *prefix)
     * }
     */
    public static MemorySegment H5Pset_elink_prefix$address() {
        return H5Pset_elink_prefix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_elink_prefix(hid_t plist_id, const char *prefix)
     * }
     */
    public static int H5Pset_elink_prefix(long plist_id, MemorySegment prefix) {
        var mh$ = H5Pset_elink_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_elink_prefix", plist_id, prefix);
            }
            return (int)mh$.invokeExact(plist_id, prefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_nlinks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_nlinks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_nlinks(hid_t plist_id, size_t nlinks)
     * }
     */
    public static FunctionDescriptor H5Pset_nlinks$descriptor() {
        return H5Pset_nlinks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_nlinks(hid_t plist_id, size_t nlinks)
     * }
     */
    public static MethodHandle H5Pset_nlinks$handle() {
        return H5Pset_nlinks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_nlinks(hid_t plist_id, size_t nlinks)
     * }
     */
    public static MemorySegment H5Pset_nlinks$address() {
        return H5Pset_nlinks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_nlinks(hid_t plist_id, size_t nlinks)
     * }
     */
    public static int H5Pset_nlinks(long plist_id, long nlinks) {
        var mh$ = H5Pset_nlinks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_nlinks", plist_id, nlinks);
            }
            return (int)mh$.invokeExact(plist_id, nlinks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Padd_merge_committed_dtype_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Padd_merge_committed_dtype_path");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Padd_merge_committed_dtype_path(hid_t plist_id, const char *path)
     * }
     */
    public static FunctionDescriptor H5Padd_merge_committed_dtype_path$descriptor() {
        return H5Padd_merge_committed_dtype_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Padd_merge_committed_dtype_path(hid_t plist_id, const char *path)
     * }
     */
    public static MethodHandle H5Padd_merge_committed_dtype_path$handle() {
        return H5Padd_merge_committed_dtype_path.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Padd_merge_committed_dtype_path(hid_t plist_id, const char *path)
     * }
     */
    public static MemorySegment H5Padd_merge_committed_dtype_path$address() {
        return H5Padd_merge_committed_dtype_path.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Padd_merge_committed_dtype_path(hid_t plist_id, const char *path)
     * }
     */
    public static int H5Padd_merge_committed_dtype_path(long plist_id, MemorySegment path) {
        var mh$ = H5Padd_merge_committed_dtype_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Padd_merge_committed_dtype_path", plist_id, path);
            }
            return (int)mh$.invokeExact(plist_id, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pfree_merge_committed_dtype_paths {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pfree_merge_committed_dtype_paths");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pfree_merge_committed_dtype_paths(hid_t plist_id)
     * }
     */
    public static FunctionDescriptor H5Pfree_merge_committed_dtype_paths$descriptor() {
        return H5Pfree_merge_committed_dtype_paths.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pfree_merge_committed_dtype_paths(hid_t plist_id)
     * }
     */
    public static MethodHandle H5Pfree_merge_committed_dtype_paths$handle() {
        return H5Pfree_merge_committed_dtype_paths.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pfree_merge_committed_dtype_paths(hid_t plist_id)
     * }
     */
    public static MemorySegment H5Pfree_merge_committed_dtype_paths$address() {
        return H5Pfree_merge_committed_dtype_paths.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pfree_merge_committed_dtype_paths(hid_t plist_id)
     * }
     */
    public static int H5Pfree_merge_committed_dtype_paths(long plist_id) {
        var mh$ = H5Pfree_merge_committed_dtype_paths.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pfree_merge_committed_dtype_paths", plist_id);
            }
            return (int)mh$.invokeExact(plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_copy_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_copy_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_copy_object(hid_t plist_id, unsigned int *copy_options)
     * }
     */
    public static FunctionDescriptor H5Pget_copy_object$descriptor() {
        return H5Pget_copy_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_copy_object(hid_t plist_id, unsigned int *copy_options)
     * }
     */
    public static MethodHandle H5Pget_copy_object$handle() {
        return H5Pget_copy_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_copy_object(hid_t plist_id, unsigned int *copy_options)
     * }
     */
    public static MemorySegment H5Pget_copy_object$address() {
        return H5Pget_copy_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_copy_object(hid_t plist_id, unsigned int *copy_options)
     * }
     */
    public static int H5Pget_copy_object(long plist_id, MemorySegment copy_options) {
        var mh$ = H5Pget_copy_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_copy_object", plist_id, copy_options);
            }
            return (int)mh$.invokeExact(plist_id, copy_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_mcdt_search_cb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_mcdt_search_cb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_mcdt_search_cb(hid_t plist_id, H5O_mcdt_search_cb_t *func, void **op_data)
     * }
     */
    public static FunctionDescriptor H5Pget_mcdt_search_cb$descriptor() {
        return H5Pget_mcdt_search_cb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_mcdt_search_cb(hid_t plist_id, H5O_mcdt_search_cb_t *func, void **op_data)
     * }
     */
    public static MethodHandle H5Pget_mcdt_search_cb$handle() {
        return H5Pget_mcdt_search_cb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_mcdt_search_cb(hid_t plist_id, H5O_mcdt_search_cb_t *func, void **op_data)
     * }
     */
    public static MemorySegment H5Pget_mcdt_search_cb$address() {
        return H5Pget_mcdt_search_cb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_mcdt_search_cb(hid_t plist_id, H5O_mcdt_search_cb_t *func, void **op_data)
     * }
     */
    public static int H5Pget_mcdt_search_cb(long plist_id, MemorySegment func, MemorySegment op_data) {
        var mh$ = H5Pget_mcdt_search_cb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_mcdt_search_cb", plist_id, func, op_data);
            }
            return (int)mh$.invokeExact(plist_id, func, op_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_copy_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_copy_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_copy_object(hid_t plist_id, unsigned int copy_options)
     * }
     */
    public static FunctionDescriptor H5Pset_copy_object$descriptor() {
        return H5Pset_copy_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_copy_object(hid_t plist_id, unsigned int copy_options)
     * }
     */
    public static MethodHandle H5Pset_copy_object$handle() {
        return H5Pset_copy_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_copy_object(hid_t plist_id, unsigned int copy_options)
     * }
     */
    public static MemorySegment H5Pset_copy_object$address() {
        return H5Pset_copy_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_copy_object(hid_t plist_id, unsigned int copy_options)
     * }
     */
    public static int H5Pset_copy_object(long plist_id, int copy_options) {
        var mh$ = H5Pset_copy_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_copy_object", plist_id, copy_options);
            }
            return (int)mh$.invokeExact(plist_id, copy_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_mcdt_search_cb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_mcdt_search_cb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_mcdt_search_cb(hid_t plist_id, H5O_mcdt_search_cb_t func, void *op_data)
     * }
     */
    public static FunctionDescriptor H5Pset_mcdt_search_cb$descriptor() {
        return H5Pset_mcdt_search_cb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_mcdt_search_cb(hid_t plist_id, H5O_mcdt_search_cb_t func, void *op_data)
     * }
     */
    public static MethodHandle H5Pset_mcdt_search_cb$handle() {
        return H5Pset_mcdt_search_cb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_mcdt_search_cb(hid_t plist_id, H5O_mcdt_search_cb_t func, void *op_data)
     * }
     */
    public static MemorySegment H5Pset_mcdt_search_cb$address() {
        return H5Pset_mcdt_search_cb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_mcdt_search_cb(hid_t plist_id, H5O_mcdt_search_cb_t func, void *op_data)
     * }
     */
    public static int H5Pset_mcdt_search_cb(long plist_id, MemorySegment func, MemorySegment op_data) {
        var mh$ = H5Pset_mcdt_search_cb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_mcdt_search_cb", plist_id, func, op_data);
            }
            return (int)mh$.invokeExact(plist_id, func, op_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pregister1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pregister1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pregister1(hid_t cls_id, const char *name, size_t size, void *def_value, H5P_prp_create_func_t prp_create, H5P_prp_set_func_t prp_set, H5P_prp_get_func_t prp_get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t prp_copy, H5P_prp_close_func_t prp_close)
     * }
     */
    public static FunctionDescriptor H5Pregister1$descriptor() {
        return H5Pregister1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pregister1(hid_t cls_id, const char *name, size_t size, void *def_value, H5P_prp_create_func_t prp_create, H5P_prp_set_func_t prp_set, H5P_prp_get_func_t prp_get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t prp_copy, H5P_prp_close_func_t prp_close)
     * }
     */
    public static MethodHandle H5Pregister1$handle() {
        return H5Pregister1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pregister1(hid_t cls_id, const char *name, size_t size, void *def_value, H5P_prp_create_func_t prp_create, H5P_prp_set_func_t prp_set, H5P_prp_get_func_t prp_get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t prp_copy, H5P_prp_close_func_t prp_close)
     * }
     */
    public static MemorySegment H5Pregister1$address() {
        return H5Pregister1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pregister1(hid_t cls_id, const char *name, size_t size, void *def_value, H5P_prp_create_func_t prp_create, H5P_prp_set_func_t prp_set, H5P_prp_get_func_t prp_get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t prp_copy, H5P_prp_close_func_t prp_close)
     * }
     */
    public static int H5Pregister1(long cls_id, MemorySegment name, long size, MemorySegment def_value, MemorySegment prp_create, MemorySegment prp_set, MemorySegment prp_get, MemorySegment prp_del, MemorySegment prp_copy, MemorySegment prp_close) {
        var mh$ = H5Pregister1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pregister1", cls_id, name, size, def_value, prp_create, prp_set, prp_get, prp_del, prp_copy, prp_close);
            }
            return (int)mh$.invokeExact(cls_id, name, size, def_value, prp_create, prp_set, prp_get, prp_del, prp_copy, prp_close);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pinsert1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pinsert1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pinsert1(hid_t plist_id, const char *name, size_t size, void *value, H5P_prp_set_func_t prp_set, H5P_prp_get_func_t prp_get, H5P_prp_delete_func_t prp_delete, H5P_prp_copy_func_t prp_copy, H5P_prp_close_func_t prp_close)
     * }
     */
    public static FunctionDescriptor H5Pinsert1$descriptor() {
        return H5Pinsert1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pinsert1(hid_t plist_id, const char *name, size_t size, void *value, H5P_prp_set_func_t prp_set, H5P_prp_get_func_t prp_get, H5P_prp_delete_func_t prp_delete, H5P_prp_copy_func_t prp_copy, H5P_prp_close_func_t prp_close)
     * }
     */
    public static MethodHandle H5Pinsert1$handle() {
        return H5Pinsert1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pinsert1(hid_t plist_id, const char *name, size_t size, void *value, H5P_prp_set_func_t prp_set, H5P_prp_get_func_t prp_get, H5P_prp_delete_func_t prp_delete, H5P_prp_copy_func_t prp_copy, H5P_prp_close_func_t prp_close)
     * }
     */
    public static MemorySegment H5Pinsert1$address() {
        return H5Pinsert1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pinsert1(hid_t plist_id, const char *name, size_t size, void *value, H5P_prp_set_func_t prp_set, H5P_prp_get_func_t prp_get, H5P_prp_delete_func_t prp_delete, H5P_prp_copy_func_t prp_copy, H5P_prp_close_func_t prp_close)
     * }
     */
    public static int H5Pinsert1(long plist_id, MemorySegment name, long size, MemorySegment value, MemorySegment prp_set, MemorySegment prp_get, MemorySegment prp_delete, MemorySegment prp_copy, MemorySegment prp_close) {
        var mh$ = H5Pinsert1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pinsert1", plist_id, name, size, value, prp_set, prp_get, prp_delete, prp_copy, prp_close);
            }
            return (int)mh$.invokeExact(plist_id, name, size, value, prp_set, prp_get, prp_delete, prp_copy, prp_close);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pencode1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pencode1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pencode1(hid_t plist_id, void *buf, size_t *nalloc)
     * }
     */
    public static FunctionDescriptor H5Pencode1$descriptor() {
        return H5Pencode1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pencode1(hid_t plist_id, void *buf, size_t *nalloc)
     * }
     */
    public static MethodHandle H5Pencode1$handle() {
        return H5Pencode1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pencode1(hid_t plist_id, void *buf, size_t *nalloc)
     * }
     */
    public static MemorySegment H5Pencode1$address() {
        return H5Pencode1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pencode1(hid_t plist_id, void *buf, size_t *nalloc)
     * }
     */
    public static int H5Pencode1(long plist_id, MemorySegment buf, MemorySegment nalloc) {
        var mh$ = H5Pencode1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pencode1", plist_id, buf, nalloc);
            }
            return (int)mh$.invokeExact(plist_id, buf, nalloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_filter1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_filter1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5Z_filter_t H5Pget_filter1(hid_t plist_id, unsigned int filter, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[])
     * }
     */
    public static FunctionDescriptor H5Pget_filter1$descriptor() {
        return H5Pget_filter1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5Z_filter_t H5Pget_filter1(hid_t plist_id, unsigned int filter, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[])
     * }
     */
    public static MethodHandle H5Pget_filter1$handle() {
        return H5Pget_filter1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5Z_filter_t H5Pget_filter1(hid_t plist_id, unsigned int filter, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[])
     * }
     */
    public static MemorySegment H5Pget_filter1$address() {
        return H5Pget_filter1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * H5Z_filter_t H5Pget_filter1(hid_t plist_id, unsigned int filter, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[])
     * }
     */
    public static int H5Pget_filter1(long plist_id, int filter, MemorySegment flags, MemorySegment cd_nelmts, MemorySegment cd_values, long namelen, MemorySegment name) {
        var mh$ = H5Pget_filter1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_filter1", plist_id, filter, flags, cd_nelmts, cd_values, namelen, name);
            }
            return (int)mh$.invokeExact(plist_id, filter, flags, cd_nelmts, cd_values, namelen, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_filter_by_id1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_filter_by_id1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_filter_by_id1(hid_t plist_id, H5Z_filter_t id, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[])
     * }
     */
    public static FunctionDescriptor H5Pget_filter_by_id1$descriptor() {
        return H5Pget_filter_by_id1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_filter_by_id1(hid_t plist_id, H5Z_filter_t id, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[])
     * }
     */
    public static MethodHandle H5Pget_filter_by_id1$handle() {
        return H5Pget_filter_by_id1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_filter_by_id1(hid_t plist_id, H5Z_filter_t id, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[])
     * }
     */
    public static MemorySegment H5Pget_filter_by_id1$address() {
        return H5Pget_filter_by_id1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_filter_by_id1(hid_t plist_id, H5Z_filter_t id, unsigned int *flags, size_t *cd_nelmts, unsigned int cd_values[], size_t namelen, char name[])
     * }
     */
    public static int H5Pget_filter_by_id1(long plist_id, int id, MemorySegment flags, MemorySegment cd_nelmts, MemorySegment cd_values, long namelen, MemorySegment name) {
        var mh$ = H5Pget_filter_by_id1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_filter_by_id1", plist_id, id, flags, cd_nelmts, cd_values, namelen, name);
            }
            return (int)mh$.invokeExact(plist_id, id, flags, cd_nelmts, cd_values, namelen, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_version(hid_t plist_id, unsigned int *boot, unsigned int *freelist, unsigned int *stab, unsigned int *shhdr)
     * }
     */
    public static FunctionDescriptor H5Pget_version$descriptor() {
        return H5Pget_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_version(hid_t plist_id, unsigned int *boot, unsigned int *freelist, unsigned int *stab, unsigned int *shhdr)
     * }
     */
    public static MethodHandle H5Pget_version$handle() {
        return H5Pget_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_version(hid_t plist_id, unsigned int *boot, unsigned int *freelist, unsigned int *stab, unsigned int *shhdr)
     * }
     */
    public static MemorySegment H5Pget_version$address() {
        return H5Pget_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_version(hid_t plist_id, unsigned int *boot, unsigned int *freelist, unsigned int *stab, unsigned int *shhdr)
     * }
     */
    public static int H5Pget_version(long plist_id, MemorySegment boot, MemorySegment freelist, MemorySegment stab, MemorySegment shhdr) {
        var mh$ = H5Pget_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_version", plist_id, boot, freelist, stab, shhdr);
            }
            return (int)mh$.invokeExact(plist_id, boot, freelist, stab, shhdr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_file_space {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_file_space");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_space(hid_t plist_id, H5F_file_space_type_t strategy, hsize_t threshold)
     * }
     */
    public static FunctionDescriptor H5Pset_file_space$descriptor() {
        return H5Pset_file_space.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_space(hid_t plist_id, H5F_file_space_type_t strategy, hsize_t threshold)
     * }
     */
    public static MethodHandle H5Pset_file_space$handle() {
        return H5Pset_file_space.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_file_space(hid_t plist_id, H5F_file_space_type_t strategy, hsize_t threshold)
     * }
     */
    public static MemorySegment H5Pset_file_space$address() {
        return H5Pset_file_space.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_file_space(hid_t plist_id, H5F_file_space_type_t strategy, hsize_t threshold)
     * }
     */
    public static int H5Pset_file_space(long plist_id, int strategy, long threshold) {
        var mh$ = H5Pset_file_space.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_file_space", plist_id, strategy, threshold);
            }
            return (int)mh$.invokeExact(plist_id, strategy, threshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_file_space {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_file_space");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_space(hid_t plist_id, H5F_file_space_type_t *strategy, hsize_t *threshold)
     * }
     */
    public static FunctionDescriptor H5Pget_file_space$descriptor() {
        return H5Pget_file_space.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_space(hid_t plist_id, H5F_file_space_type_t *strategy, hsize_t *threshold)
     * }
     */
    public static MethodHandle H5Pget_file_space$handle() {
        return H5Pget_file_space.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_file_space(hid_t plist_id, H5F_file_space_type_t *strategy, hsize_t *threshold)
     * }
     */
    public static MemorySegment H5Pget_file_space$address() {
        return H5Pget_file_space.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_file_space(hid_t plist_id, H5F_file_space_type_t *strategy, hsize_t *threshold)
     * }
     */
    public static int H5Pget_file_space(long plist_id, MemorySegment strategy, MemorySegment threshold) {
        var mh$ = H5Pget_file_space.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_file_space", plist_id, strategy, threshold);
            }
            return (int)mh$.invokeExact(plist_id, strategy, threshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5PL_TYPE_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5PL_type_t.H5PL_TYPE_ERROR = -1
     * }
     */
    public static int H5PL_TYPE_ERROR() {
        return H5PL_TYPE_ERROR;
    }
    private static final int H5PL_TYPE_FILTER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5PL_type_t.H5PL_TYPE_FILTER = 0
     * }
     */
    public static int H5PL_TYPE_FILTER() {
        return H5PL_TYPE_FILTER;
    }
    private static final int H5PL_TYPE_VOL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5PL_type_t.H5PL_TYPE_VOL = 1
     * }
     */
    public static int H5PL_TYPE_VOL() {
        return H5PL_TYPE_VOL;
    }
    private static final int H5PL_TYPE_VFD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5PL_type_t.H5PL_TYPE_VFD = 2
     * }
     */
    public static int H5PL_TYPE_VFD() {
        return H5PL_TYPE_VFD;
    }
    private static final int H5PL_TYPE_NONE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5PL_type_t.H5PL_TYPE_NONE = 3
     * }
     */
    public static int H5PL_TYPE_NONE() {
        return H5PL_TYPE_NONE;
    }

    private static class H5PLset_loading_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5PLset_loading_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5PLset_loading_state(unsigned int plugin_control_mask)
     * }
     */
    public static FunctionDescriptor H5PLset_loading_state$descriptor() {
        return H5PLset_loading_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5PLset_loading_state(unsigned int plugin_control_mask)
     * }
     */
    public static MethodHandle H5PLset_loading_state$handle() {
        return H5PLset_loading_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5PLset_loading_state(unsigned int plugin_control_mask)
     * }
     */
    public static MemorySegment H5PLset_loading_state$address() {
        return H5PLset_loading_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5PLset_loading_state(unsigned int plugin_control_mask)
     * }
     */
    public static int H5PLset_loading_state(int plugin_control_mask) {
        var mh$ = H5PLset_loading_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5PLset_loading_state", plugin_control_mask);
            }
            return (int)mh$.invokeExact(plugin_control_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5PLget_loading_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5PLget_loading_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5PLget_loading_state(unsigned int *plugin_control_mask)
     * }
     */
    public static FunctionDescriptor H5PLget_loading_state$descriptor() {
        return H5PLget_loading_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5PLget_loading_state(unsigned int *plugin_control_mask)
     * }
     */
    public static MethodHandle H5PLget_loading_state$handle() {
        return H5PLget_loading_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5PLget_loading_state(unsigned int *plugin_control_mask)
     * }
     */
    public static MemorySegment H5PLget_loading_state$address() {
        return H5PLget_loading_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5PLget_loading_state(unsigned int *plugin_control_mask)
     * }
     */
    public static int H5PLget_loading_state(MemorySegment plugin_control_mask) {
        var mh$ = H5PLget_loading_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5PLget_loading_state", plugin_control_mask);
            }
            return (int)mh$.invokeExact(plugin_control_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5PLappend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5PLappend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5PLappend(const char *search_path)
     * }
     */
    public static FunctionDescriptor H5PLappend$descriptor() {
        return H5PLappend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5PLappend(const char *search_path)
     * }
     */
    public static MethodHandle H5PLappend$handle() {
        return H5PLappend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5PLappend(const char *search_path)
     * }
     */
    public static MemorySegment H5PLappend$address() {
        return H5PLappend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5PLappend(const char *search_path)
     * }
     */
    public static int H5PLappend(MemorySegment search_path) {
        var mh$ = H5PLappend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5PLappend", search_path);
            }
            return (int)mh$.invokeExact(search_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5PLprepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5PLprepend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5PLprepend(const char *search_path)
     * }
     */
    public static FunctionDescriptor H5PLprepend$descriptor() {
        return H5PLprepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5PLprepend(const char *search_path)
     * }
     */
    public static MethodHandle H5PLprepend$handle() {
        return H5PLprepend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5PLprepend(const char *search_path)
     * }
     */
    public static MemorySegment H5PLprepend$address() {
        return H5PLprepend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5PLprepend(const char *search_path)
     * }
     */
    public static int H5PLprepend(MemorySegment search_path) {
        var mh$ = H5PLprepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5PLprepend", search_path);
            }
            return (int)mh$.invokeExact(search_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5PLreplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5PLreplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5PLreplace(const char *search_path, unsigned int index)
     * }
     */
    public static FunctionDescriptor H5PLreplace$descriptor() {
        return H5PLreplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5PLreplace(const char *search_path, unsigned int index)
     * }
     */
    public static MethodHandle H5PLreplace$handle() {
        return H5PLreplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5PLreplace(const char *search_path, unsigned int index)
     * }
     */
    public static MemorySegment H5PLreplace$address() {
        return H5PLreplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5PLreplace(const char *search_path, unsigned int index)
     * }
     */
    public static int H5PLreplace(MemorySegment search_path, int index) {
        var mh$ = H5PLreplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5PLreplace", search_path, index);
            }
            return (int)mh$.invokeExact(search_path, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5PLinsert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5PLinsert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5PLinsert(const char *search_path, unsigned int index)
     * }
     */
    public static FunctionDescriptor H5PLinsert$descriptor() {
        return H5PLinsert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5PLinsert(const char *search_path, unsigned int index)
     * }
     */
    public static MethodHandle H5PLinsert$handle() {
        return H5PLinsert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5PLinsert(const char *search_path, unsigned int index)
     * }
     */
    public static MemorySegment H5PLinsert$address() {
        return H5PLinsert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5PLinsert(const char *search_path, unsigned int index)
     * }
     */
    public static int H5PLinsert(MemorySegment search_path, int index) {
        var mh$ = H5PLinsert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5PLinsert", search_path, index);
            }
            return (int)mh$.invokeExact(search_path, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5PLremove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5PLremove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5PLremove(unsigned int index)
     * }
     */
    public static FunctionDescriptor H5PLremove$descriptor() {
        return H5PLremove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5PLremove(unsigned int index)
     * }
     */
    public static MethodHandle H5PLremove$handle() {
        return H5PLremove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5PLremove(unsigned int index)
     * }
     */
    public static MemorySegment H5PLremove$address() {
        return H5PLremove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5PLremove(unsigned int index)
     * }
     */
    public static int H5PLremove(int index) {
        var mh$ = H5PLremove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5PLremove", index);
            }
            return (int)mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5PLget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5PLget");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5PLget(unsigned int index, char *path_buf, size_t buf_size)
     * }
     */
    public static FunctionDescriptor H5PLget$descriptor() {
        return H5PLget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5PLget(unsigned int index, char *path_buf, size_t buf_size)
     * }
     */
    public static MethodHandle H5PLget$handle() {
        return H5PLget.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5PLget(unsigned int index, char *path_buf, size_t buf_size)
     * }
     */
    public static MemorySegment H5PLget$address() {
        return H5PLget.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t H5PLget(unsigned int index, char *path_buf, size_t buf_size)
     * }
     */
    public static long H5PLget(int index, MemorySegment path_buf, long buf_size) {
        var mh$ = H5PLget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5PLget", index, path_buf, buf_size);
            }
            return (long)mh$.invokeExact(index, path_buf, buf_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5PLsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5PLsize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5PLsize(unsigned int *num_paths)
     * }
     */
    public static FunctionDescriptor H5PLsize$descriptor() {
        return H5PLsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5PLsize(unsigned int *num_paths)
     * }
     */
    public static MethodHandle H5PLsize$handle() {
        return H5PLsize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5PLsize(unsigned int *num_paths)
     * }
     */
    public static MemorySegment H5PLsize$address() {
        return H5PLsize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5PLsize(unsigned int *num_paths)
     * }
     */
    public static int H5PLsize(MemorySegment num_paths) {
        var mh$ = H5PLsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5PLsize", num_paths);
            }
            return (int)mh$.invokeExact(num_paths);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5ESinsert_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5ESinsert_request");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5ESinsert_request(hid_t es_id, hid_t connector_id, void *request)
     * }
     */
    public static FunctionDescriptor H5ESinsert_request$descriptor() {
        return H5ESinsert_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5ESinsert_request(hid_t es_id, hid_t connector_id, void *request)
     * }
     */
    public static MethodHandle H5ESinsert_request$handle() {
        return H5ESinsert_request.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5ESinsert_request(hid_t es_id, hid_t connector_id, void *request)
     * }
     */
    public static MemorySegment H5ESinsert_request$address() {
        return H5ESinsert_request.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5ESinsert_request(hid_t es_id, hid_t connector_id, void *request)
     * }
     */
    public static int H5ESinsert_request(long es_id, long connector_id, MemorySegment request) {
        var mh$ = H5ESinsert_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5ESinsert_request", es_id, connector_id, request);
            }
            return (int)mh$.invokeExact(es_id, connector_id, request);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5ESget_requests {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5ESget_requests");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5ESget_requests(hid_t es_id, H5_iter_order_t order, hid_t *connector_ids, void **requests, size_t array_len, size_t *count)
     * }
     */
    public static FunctionDescriptor H5ESget_requests$descriptor() {
        return H5ESget_requests.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5ESget_requests(hid_t es_id, H5_iter_order_t order, hid_t *connector_ids, void **requests, size_t array_len, size_t *count)
     * }
     */
    public static MethodHandle H5ESget_requests$handle() {
        return H5ESget_requests.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5ESget_requests(hid_t es_id, H5_iter_order_t order, hid_t *connector_ids, void **requests, size_t array_len, size_t *count)
     * }
     */
    public static MemorySegment H5ESget_requests$address() {
        return H5ESget_requests.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5ESget_requests(hid_t es_id, H5_iter_order_t order, hid_t *connector_ids, void **requests, size_t array_len, size_t *count)
     * }
     */
    public static int H5ESget_requests(long es_id, int order, MemorySegment connector_ids, MemorySegment requests, long array_len, MemorySegment count) {
        var mh$ = H5ESget_requests.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5ESget_requests", es_id, order, connector_ids, requests, array_len, count);
            }
            return (int)mh$.invokeExact(es_id, order, connector_ids, requests, array_len, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDperform_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDperform_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5FDperform_init(H5FD_init_t op)
     * }
     */
    public static FunctionDescriptor H5FDperform_init$descriptor() {
        return H5FDperform_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5FDperform_init(H5FD_init_t op)
     * }
     */
    public static MethodHandle H5FDperform_init$handle() {
        return H5FDperform_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5FDperform_init(H5FD_init_t op)
     * }
     */
    public static MemorySegment H5FDperform_init$address() {
        return H5FDperform_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5FDperform_init(H5FD_init_t op)
     * }
     */
    public static long H5FDperform_init(MemorySegment op) {
        var mh$ = H5FDperform_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDperform_init", op);
            }
            return (long)mh$.invokeExact(op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5FDregister(const H5FD_class_t *cls)
     * }
     */
    public static FunctionDescriptor H5FDregister$descriptor() {
        return H5FDregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5FDregister(const H5FD_class_t *cls)
     * }
     */
    public static MethodHandle H5FDregister$handle() {
        return H5FDregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5FDregister(const H5FD_class_t *cls)
     * }
     */
    public static MemorySegment H5FDregister$address() {
        return H5FDregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5FDregister(const H5FD_class_t *cls)
     * }
     */
    public static long H5FDregister(MemorySegment cls) {
        var mh$ = H5FDregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDregister", cls);
            }
            return (long)mh$.invokeExact(cls);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDis_driver_registered_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDis_driver_registered_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5FDis_driver_registered_by_name(const char *driver_name)
     * }
     */
    public static FunctionDescriptor H5FDis_driver_registered_by_name$descriptor() {
        return H5FDis_driver_registered_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5FDis_driver_registered_by_name(const char *driver_name)
     * }
     */
    public static MethodHandle H5FDis_driver_registered_by_name$handle() {
        return H5FDis_driver_registered_by_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5FDis_driver_registered_by_name(const char *driver_name)
     * }
     */
    public static MemorySegment H5FDis_driver_registered_by_name$address() {
        return H5FDis_driver_registered_by_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * htri_t H5FDis_driver_registered_by_name(const char *driver_name)
     * }
     */
    public static int H5FDis_driver_registered_by_name(MemorySegment driver_name) {
        var mh$ = H5FDis_driver_registered_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDis_driver_registered_by_name", driver_name);
            }
            return (int)mh$.invokeExact(driver_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDis_driver_registered_by_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDis_driver_registered_by_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5FDis_driver_registered_by_value(H5FD_class_value_t driver_value)
     * }
     */
    public static FunctionDescriptor H5FDis_driver_registered_by_value$descriptor() {
        return H5FDis_driver_registered_by_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5FDis_driver_registered_by_value(H5FD_class_value_t driver_value)
     * }
     */
    public static MethodHandle H5FDis_driver_registered_by_value$handle() {
        return H5FDis_driver_registered_by_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5FDis_driver_registered_by_value(H5FD_class_value_t driver_value)
     * }
     */
    public static MemorySegment H5FDis_driver_registered_by_value$address() {
        return H5FDis_driver_registered_by_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * htri_t H5FDis_driver_registered_by_value(H5FD_class_value_t driver_value)
     * }
     */
    public static int H5FDis_driver_registered_by_value(int driver_value) {
        var mh$ = H5FDis_driver_registered_by_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDis_driver_registered_by_value", driver_value);
            }
            return (int)mh$.invokeExact(driver_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDunregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDunregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDunregister(hid_t driver_id)
     * }
     */
    public static FunctionDescriptor H5FDunregister$descriptor() {
        return H5FDunregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDunregister(hid_t driver_id)
     * }
     */
    public static MethodHandle H5FDunregister$handle() {
        return H5FDunregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDunregister(hid_t driver_id)
     * }
     */
    public static MemorySegment H5FDunregister$address() {
        return H5FDunregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDunregister(hid_t driver_id)
     * }
     */
    public static int H5FDunregister(long driver_id) {
        var mh$ = H5FDunregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDunregister", driver_id);
            }
            return (int)mh$.invokeExact(driver_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5FD_t *H5FDopen(const char *name, unsigned int flags, hid_t fapl_id, haddr_t maxaddr)
     * }
     */
    public static FunctionDescriptor H5FDopen$descriptor() {
        return H5FDopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5FD_t *H5FDopen(const char *name, unsigned int flags, hid_t fapl_id, haddr_t maxaddr)
     * }
     */
    public static MethodHandle H5FDopen$handle() {
        return H5FDopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5FD_t *H5FDopen(const char *name, unsigned int flags, hid_t fapl_id, haddr_t maxaddr)
     * }
     */
    public static MemorySegment H5FDopen$address() {
        return H5FDopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * H5FD_t *H5FDopen(const char *name, unsigned int flags, hid_t fapl_id, haddr_t maxaddr)
     * }
     */
    public static MemorySegment H5FDopen(MemorySegment name, int flags, long fapl_id, long maxaddr) {
        var mh$ = H5FDopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDopen", name, flags, fapl_id, maxaddr);
            }
            return (MemorySegment)mh$.invokeExact(name, flags, fapl_id, maxaddr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDclose(H5FD_t *file)
     * }
     */
    public static FunctionDescriptor H5FDclose$descriptor() {
        return H5FDclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDclose(H5FD_t *file)
     * }
     */
    public static MethodHandle H5FDclose$handle() {
        return H5FDclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDclose(H5FD_t *file)
     * }
     */
    public static MemorySegment H5FDclose$address() {
        return H5FDclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDclose(H5FD_t *file)
     * }
     */
    public static int H5FDclose(MemorySegment file) {
        var mh$ = H5FDclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDclose", file);
            }
            return (int)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDcmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDcmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5FDcmp(const H5FD_t *f1, const H5FD_t *f2)
     * }
     */
    public static FunctionDescriptor H5FDcmp$descriptor() {
        return H5FDcmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5FDcmp(const H5FD_t *f1, const H5FD_t *f2)
     * }
     */
    public static MethodHandle H5FDcmp$handle() {
        return H5FDcmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5FDcmp(const H5FD_t *f1, const H5FD_t *f2)
     * }
     */
    public static MemorySegment H5FDcmp$address() {
        return H5FDcmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int H5FDcmp(const H5FD_t *f1, const H5FD_t *f2)
     * }
     */
    public static int H5FDcmp(MemorySegment f1, MemorySegment f2) {
        var mh$ = H5FDcmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDcmp", f1, f2);
            }
            return (int)mh$.invokeExact(f1, f2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDquery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDquery");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDquery(const H5FD_t *f, unsigned long *flags)
     * }
     */
    public static FunctionDescriptor H5FDquery$descriptor() {
        return H5FDquery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDquery(const H5FD_t *f, unsigned long *flags)
     * }
     */
    public static MethodHandle H5FDquery$handle() {
        return H5FDquery.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDquery(const H5FD_t *f, unsigned long *flags)
     * }
     */
    public static MemorySegment H5FDquery$address() {
        return H5FDquery.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDquery(const H5FD_t *f, unsigned long *flags)
     * }
     */
    public static int H5FDquery(MemorySegment f, MemorySegment flags) {
        var mh$ = H5FDquery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDquery", f, flags);
            }
            return (int)mh$.invokeExact(f, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * haddr_t H5FDalloc(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, hsize_t size)
     * }
     */
    public static FunctionDescriptor H5FDalloc$descriptor() {
        return H5FDalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * haddr_t H5FDalloc(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, hsize_t size)
     * }
     */
    public static MethodHandle H5FDalloc$handle() {
        return H5FDalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * haddr_t H5FDalloc(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, hsize_t size)
     * }
     */
    public static MemorySegment H5FDalloc$address() {
        return H5FDalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * haddr_t H5FDalloc(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, hsize_t size)
     * }
     */
    public static long H5FDalloc(MemorySegment file, int type, long dxpl_id, long size) {
        var mh$ = H5FDalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDalloc", file, type, dxpl_id, size);
            }
            return (long)mh$.invokeExact(file, type, dxpl_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDfree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDfree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDfree(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, hsize_t size)
     * }
     */
    public static FunctionDescriptor H5FDfree$descriptor() {
        return H5FDfree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDfree(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, hsize_t size)
     * }
     */
    public static MethodHandle H5FDfree$handle() {
        return H5FDfree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDfree(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, hsize_t size)
     * }
     */
    public static MemorySegment H5FDfree$address() {
        return H5FDfree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDfree(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, hsize_t size)
     * }
     */
    public static int H5FDfree(MemorySegment file, int type, long dxpl_id, long addr, long size) {
        var mh$ = H5FDfree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDfree", file, type, dxpl_id, addr, size);
            }
            return (int)mh$.invokeExact(file, type, dxpl_id, addr, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDget_eoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDget_eoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * haddr_t H5FDget_eoa(H5FD_t *file, H5FD_mem_t type)
     * }
     */
    public static FunctionDescriptor H5FDget_eoa$descriptor() {
        return H5FDget_eoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * haddr_t H5FDget_eoa(H5FD_t *file, H5FD_mem_t type)
     * }
     */
    public static MethodHandle H5FDget_eoa$handle() {
        return H5FDget_eoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * haddr_t H5FDget_eoa(H5FD_t *file, H5FD_mem_t type)
     * }
     */
    public static MemorySegment H5FDget_eoa$address() {
        return H5FDget_eoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * haddr_t H5FDget_eoa(H5FD_t *file, H5FD_mem_t type)
     * }
     */
    public static long H5FDget_eoa(MemorySegment file, int type) {
        var mh$ = H5FDget_eoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDget_eoa", file, type);
            }
            return (long)mh$.invokeExact(file, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDset_eoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDset_eoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDset_eoa(H5FD_t *file, H5FD_mem_t type, haddr_t eoa)
     * }
     */
    public static FunctionDescriptor H5FDset_eoa$descriptor() {
        return H5FDset_eoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDset_eoa(H5FD_t *file, H5FD_mem_t type, haddr_t eoa)
     * }
     */
    public static MethodHandle H5FDset_eoa$handle() {
        return H5FDset_eoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDset_eoa(H5FD_t *file, H5FD_mem_t type, haddr_t eoa)
     * }
     */
    public static MemorySegment H5FDset_eoa$address() {
        return H5FDset_eoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDset_eoa(H5FD_t *file, H5FD_mem_t type, haddr_t eoa)
     * }
     */
    public static int H5FDset_eoa(MemorySegment file, int type, long eoa) {
        var mh$ = H5FDset_eoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDset_eoa", file, type, eoa);
            }
            return (int)mh$.invokeExact(file, type, eoa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDget_eof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDget_eof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * haddr_t H5FDget_eof(H5FD_t *file, H5FD_mem_t type)
     * }
     */
    public static FunctionDescriptor H5FDget_eof$descriptor() {
        return H5FDget_eof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * haddr_t H5FDget_eof(H5FD_t *file, H5FD_mem_t type)
     * }
     */
    public static MethodHandle H5FDget_eof$handle() {
        return H5FDget_eof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * haddr_t H5FDget_eof(H5FD_t *file, H5FD_mem_t type)
     * }
     */
    public static MemorySegment H5FDget_eof$address() {
        return H5FDget_eof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * haddr_t H5FDget_eof(H5FD_t *file, H5FD_mem_t type)
     * }
     */
    public static long H5FDget_eof(MemorySegment file, int type) {
        var mh$ = H5FDget_eof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDget_eof", file, type);
            }
            return (long)mh$.invokeExact(file, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDget_vfd_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDget_vfd_handle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDget_vfd_handle(H5FD_t *file, hid_t fapl, void **file_handle)
     * }
     */
    public static FunctionDescriptor H5FDget_vfd_handle$descriptor() {
        return H5FDget_vfd_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDget_vfd_handle(H5FD_t *file, hid_t fapl, void **file_handle)
     * }
     */
    public static MethodHandle H5FDget_vfd_handle$handle() {
        return H5FDget_vfd_handle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDget_vfd_handle(H5FD_t *file, hid_t fapl, void **file_handle)
     * }
     */
    public static MemorySegment H5FDget_vfd_handle$address() {
        return H5FDget_vfd_handle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDget_vfd_handle(H5FD_t *file, hid_t fapl, void **file_handle)
     * }
     */
    public static int H5FDget_vfd_handle(MemorySegment file, long fapl, MemorySegment file_handle) {
        var mh$ = H5FDget_vfd_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDget_vfd_handle", file, fapl, file_handle);
            }
            return (int)mh$.invokeExact(file, fapl, file_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDread(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, size_t size, void *buf)
     * }
     */
    public static FunctionDescriptor H5FDread$descriptor() {
        return H5FDread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDread(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, size_t size, void *buf)
     * }
     */
    public static MethodHandle H5FDread$handle() {
        return H5FDread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDread(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, size_t size, void *buf)
     * }
     */
    public static MemorySegment H5FDread$address() {
        return H5FDread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDread(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, size_t size, void *buf)
     * }
     */
    public static int H5FDread(MemorySegment file, int type, long dxpl_id, long addr, long size, MemorySegment buf) {
        var mh$ = H5FDread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDread", file, type, dxpl_id, addr, size, buf);
            }
            return (int)mh$.invokeExact(file, type, dxpl_id, addr, size, buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDwrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDwrite(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, size_t size, const void *buf)
     * }
     */
    public static FunctionDescriptor H5FDwrite$descriptor() {
        return H5FDwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDwrite(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, size_t size, const void *buf)
     * }
     */
    public static MethodHandle H5FDwrite$handle() {
        return H5FDwrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDwrite(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, size_t size, const void *buf)
     * }
     */
    public static MemorySegment H5FDwrite$address() {
        return H5FDwrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDwrite(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, size_t size, const void *buf)
     * }
     */
    public static int H5FDwrite(MemorySegment file, int type, long dxpl_id, long addr, long size, MemorySegment buf) {
        var mh$ = H5FDwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDwrite", file, type, dxpl_id, addr, size, buf);
            }
            return (int)mh$.invokeExact(file, type, dxpl_id, addr, size, buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDread_vector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDread_vector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDread_vector(H5FD_t *file, hid_t dxpl_id, uint32_t count, H5FD_mem_t types[], haddr_t addrs[], size_t sizes[], void *bufs[])
     * }
     */
    public static FunctionDescriptor H5FDread_vector$descriptor() {
        return H5FDread_vector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDread_vector(H5FD_t *file, hid_t dxpl_id, uint32_t count, H5FD_mem_t types[], haddr_t addrs[], size_t sizes[], void *bufs[])
     * }
     */
    public static MethodHandle H5FDread_vector$handle() {
        return H5FDread_vector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDread_vector(H5FD_t *file, hid_t dxpl_id, uint32_t count, H5FD_mem_t types[], haddr_t addrs[], size_t sizes[], void *bufs[])
     * }
     */
    public static MemorySegment H5FDread_vector$address() {
        return H5FDread_vector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDread_vector(H5FD_t *file, hid_t dxpl_id, uint32_t count, H5FD_mem_t types[], haddr_t addrs[], size_t sizes[], void *bufs[])
     * }
     */
    public static int H5FDread_vector(MemorySegment file, long dxpl_id, int count, MemorySegment types, MemorySegment addrs, MemorySegment sizes, MemorySegment bufs) {
        var mh$ = H5FDread_vector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDread_vector", file, dxpl_id, count, types, addrs, sizes, bufs);
            }
            return (int)mh$.invokeExact(file, dxpl_id, count, types, addrs, sizes, bufs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDwrite_vector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDwrite_vector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDwrite_vector(H5FD_t *file, hid_t dxpl_id, uint32_t count, H5FD_mem_t types[], haddr_t addrs[], size_t sizes[], const void *bufs[])
     * }
     */
    public static FunctionDescriptor H5FDwrite_vector$descriptor() {
        return H5FDwrite_vector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDwrite_vector(H5FD_t *file, hid_t dxpl_id, uint32_t count, H5FD_mem_t types[], haddr_t addrs[], size_t sizes[], const void *bufs[])
     * }
     */
    public static MethodHandle H5FDwrite_vector$handle() {
        return H5FDwrite_vector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDwrite_vector(H5FD_t *file, hid_t dxpl_id, uint32_t count, H5FD_mem_t types[], haddr_t addrs[], size_t sizes[], const void *bufs[])
     * }
     */
    public static MemorySegment H5FDwrite_vector$address() {
        return H5FDwrite_vector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDwrite_vector(H5FD_t *file, hid_t dxpl_id, uint32_t count, H5FD_mem_t types[], haddr_t addrs[], size_t sizes[], const void *bufs[])
     * }
     */
    public static int H5FDwrite_vector(MemorySegment file, long dxpl_id, int count, MemorySegment types, MemorySegment addrs, MemorySegment sizes, MemorySegment bufs) {
        var mh$ = H5FDwrite_vector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDwrite_vector", file, dxpl_id, count, types, addrs, sizes, bufs);
            }
            return (int)mh$.invokeExact(file, dxpl_id, count, types, addrs, sizes, bufs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDread_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDread_selection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDread_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], void *bufs[])
     * }
     */
    public static FunctionDescriptor H5FDread_selection$descriptor() {
        return H5FDread_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDread_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], void *bufs[])
     * }
     */
    public static MethodHandle H5FDread_selection$handle() {
        return H5FDread_selection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDread_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], void *bufs[])
     * }
     */
    public static MemorySegment H5FDread_selection$address() {
        return H5FDread_selection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDread_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], void *bufs[])
     * }
     */
    public static int H5FDread_selection(MemorySegment file, int type, long dxpl_id, int count, MemorySegment mem_spaces, MemorySegment file_spaces, MemorySegment offsets, MemorySegment element_sizes, MemorySegment bufs) {
        var mh$ = H5FDread_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDread_selection", file, type, dxpl_id, count, mem_spaces, file_spaces, offsets, element_sizes, bufs);
            }
            return (int)mh$.invokeExact(file, type, dxpl_id, count, mem_spaces, file_spaces, offsets, element_sizes, bufs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDwrite_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDwrite_selection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDwrite_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], const void *bufs[])
     * }
     */
    public static FunctionDescriptor H5FDwrite_selection$descriptor() {
        return H5FDwrite_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDwrite_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], const void *bufs[])
     * }
     */
    public static MethodHandle H5FDwrite_selection$handle() {
        return H5FDwrite_selection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDwrite_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], const void *bufs[])
     * }
     */
    public static MemorySegment H5FDwrite_selection$address() {
        return H5FDwrite_selection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDwrite_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], const void *bufs[])
     * }
     */
    public static int H5FDwrite_selection(MemorySegment file, int type, long dxpl_id, int count, MemorySegment mem_spaces, MemorySegment file_spaces, MemorySegment offsets, MemorySegment element_sizes, MemorySegment bufs) {
        var mh$ = H5FDwrite_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDwrite_selection", file, type, dxpl_id, count, mem_spaces, file_spaces, offsets, element_sizes, bufs);
            }
            return (int)mh$.invokeExact(file, type, dxpl_id, count, mem_spaces, file_spaces, offsets, element_sizes, bufs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDread_vector_from_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDread_vector_from_selection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDread_vector_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], void *bufs[])
     * }
     */
    public static FunctionDescriptor H5FDread_vector_from_selection$descriptor() {
        return H5FDread_vector_from_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDread_vector_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], void *bufs[])
     * }
     */
    public static MethodHandle H5FDread_vector_from_selection$handle() {
        return H5FDread_vector_from_selection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDread_vector_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], void *bufs[])
     * }
     */
    public static MemorySegment H5FDread_vector_from_selection$address() {
        return H5FDread_vector_from_selection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDread_vector_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], void *bufs[])
     * }
     */
    public static int H5FDread_vector_from_selection(MemorySegment file, int type, long dxpl_id, int count, MemorySegment mem_spaces, MemorySegment file_spaces, MemorySegment offsets, MemorySegment element_sizes, MemorySegment bufs) {
        var mh$ = H5FDread_vector_from_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDread_vector_from_selection", file, type, dxpl_id, count, mem_spaces, file_spaces, offsets, element_sizes, bufs);
            }
            return (int)mh$.invokeExact(file, type, dxpl_id, count, mem_spaces, file_spaces, offsets, element_sizes, bufs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDwrite_vector_from_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDwrite_vector_from_selection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDwrite_vector_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], const void *bufs[])
     * }
     */
    public static FunctionDescriptor H5FDwrite_vector_from_selection$descriptor() {
        return H5FDwrite_vector_from_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDwrite_vector_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], const void *bufs[])
     * }
     */
    public static MethodHandle H5FDwrite_vector_from_selection$handle() {
        return H5FDwrite_vector_from_selection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDwrite_vector_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], const void *bufs[])
     * }
     */
    public static MemorySegment H5FDwrite_vector_from_selection$address() {
        return H5FDwrite_vector_from_selection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDwrite_vector_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_spaces[], hid_t file_spaces[], haddr_t offsets[], size_t element_sizes[], const void *bufs[])
     * }
     */
    public static int H5FDwrite_vector_from_selection(MemorySegment file, int type, long dxpl_id, int count, MemorySegment mem_spaces, MemorySegment file_spaces, MemorySegment offsets, MemorySegment element_sizes, MemorySegment bufs) {
        var mh$ = H5FDwrite_vector_from_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDwrite_vector_from_selection", file, type, dxpl_id, count, mem_spaces, file_spaces, offsets, element_sizes, bufs);
            }
            return (int)mh$.invokeExact(file, type, dxpl_id, count, mem_spaces, file_spaces, offsets, element_sizes, bufs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDread_from_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDread_from_selection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDread_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_space_ids[], hid_t file_space_ids[], haddr_t offsets[], size_t element_sizes[], void *bufs[])
     * }
     */
    public static FunctionDescriptor H5FDread_from_selection$descriptor() {
        return H5FDread_from_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDread_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_space_ids[], hid_t file_space_ids[], haddr_t offsets[], size_t element_sizes[], void *bufs[])
     * }
     */
    public static MethodHandle H5FDread_from_selection$handle() {
        return H5FDread_from_selection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDread_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_space_ids[], hid_t file_space_ids[], haddr_t offsets[], size_t element_sizes[], void *bufs[])
     * }
     */
    public static MemorySegment H5FDread_from_selection$address() {
        return H5FDread_from_selection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDread_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_space_ids[], hid_t file_space_ids[], haddr_t offsets[], size_t element_sizes[], void *bufs[])
     * }
     */
    public static int H5FDread_from_selection(MemorySegment file, int type, long dxpl_id, int count, MemorySegment mem_space_ids, MemorySegment file_space_ids, MemorySegment offsets, MemorySegment element_sizes, MemorySegment bufs) {
        var mh$ = H5FDread_from_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDread_from_selection", file, type, dxpl_id, count, mem_space_ids, file_space_ids, offsets, element_sizes, bufs);
            }
            return (int)mh$.invokeExact(file, type, dxpl_id, count, mem_space_ids, file_space_ids, offsets, element_sizes, bufs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDwrite_from_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDwrite_from_selection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDwrite_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_space_ids[], hid_t file_space_ids[], haddr_t offsets[], size_t element_sizes[], const void *bufs[])
     * }
     */
    public static FunctionDescriptor H5FDwrite_from_selection$descriptor() {
        return H5FDwrite_from_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDwrite_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_space_ids[], hid_t file_space_ids[], haddr_t offsets[], size_t element_sizes[], const void *bufs[])
     * }
     */
    public static MethodHandle H5FDwrite_from_selection$handle() {
        return H5FDwrite_from_selection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDwrite_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_space_ids[], hid_t file_space_ids[], haddr_t offsets[], size_t element_sizes[], const void *bufs[])
     * }
     */
    public static MemorySegment H5FDwrite_from_selection$address() {
        return H5FDwrite_from_selection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDwrite_from_selection(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, uint32_t count, hid_t mem_space_ids[], hid_t file_space_ids[], haddr_t offsets[], size_t element_sizes[], const void *bufs[])
     * }
     */
    public static int H5FDwrite_from_selection(MemorySegment file, int type, long dxpl_id, int count, MemorySegment mem_space_ids, MemorySegment file_space_ids, MemorySegment offsets, MemorySegment element_sizes, MemorySegment bufs) {
        var mh$ = H5FDwrite_from_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDwrite_from_selection", file, type, dxpl_id, count, mem_space_ids, file_space_ids, offsets, element_sizes, bufs);
            }
            return (int)mh$.invokeExact(file, type, dxpl_id, count, mem_space_ids, file_space_ids, offsets, element_sizes, bufs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_BOOL
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDflush(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
     * }
     */
    public static FunctionDescriptor H5FDflush$descriptor() {
        return H5FDflush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDflush(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
     * }
     */
    public static MethodHandle H5FDflush$handle() {
        return H5FDflush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDflush(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
     * }
     */
    public static MemorySegment H5FDflush$address() {
        return H5FDflush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDflush(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
     * }
     */
    public static int H5FDflush(MemorySegment file, long dxpl_id, boolean closing) {
        var mh$ = H5FDflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDflush", file, dxpl_id, closing);
            }
            return (int)mh$.invokeExact(file, dxpl_id, closing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDtruncate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_BOOL
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDtruncate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDtruncate(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
     * }
     */
    public static FunctionDescriptor H5FDtruncate$descriptor() {
        return H5FDtruncate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDtruncate(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
     * }
     */
    public static MethodHandle H5FDtruncate$handle() {
        return H5FDtruncate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDtruncate(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
     * }
     */
    public static MemorySegment H5FDtruncate$address() {
        return H5FDtruncate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDtruncate(H5FD_t *file, hid_t dxpl_id, hbool_t closing)
     * }
     */
    public static int H5FDtruncate(MemorySegment file, long dxpl_id, boolean closing) {
        var mh$ = H5FDtruncate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDtruncate", file, dxpl_id, closing);
            }
            return (int)mh$.invokeExact(file, dxpl_id, closing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_BOOL
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDlock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDlock(H5FD_t *file, hbool_t rw)
     * }
     */
    public static FunctionDescriptor H5FDlock$descriptor() {
        return H5FDlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDlock(H5FD_t *file, hbool_t rw)
     * }
     */
    public static MethodHandle H5FDlock$handle() {
        return H5FDlock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDlock(H5FD_t *file, hbool_t rw)
     * }
     */
    public static MemorySegment H5FDlock$address() {
        return H5FDlock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDlock(H5FD_t *file, hbool_t rw)
     * }
     */
    public static int H5FDlock(MemorySegment file, boolean rw) {
        var mh$ = H5FDlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDlock", file, rw);
            }
            return (int)mh$.invokeExact(file, rw);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDunlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDunlock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDunlock(H5FD_t *file)
     * }
     */
    public static FunctionDescriptor H5FDunlock$descriptor() {
        return H5FDunlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDunlock(H5FD_t *file)
     * }
     */
    public static MethodHandle H5FDunlock$handle() {
        return H5FDunlock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDunlock(H5FD_t *file)
     * }
     */
    public static MemorySegment H5FDunlock$address() {
        return H5FDunlock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDunlock(H5FD_t *file)
     * }
     */
    public static int H5FDunlock(MemorySegment file) {
        var mh$ = H5FDunlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDunlock", file);
            }
            return (int)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDdelete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDdelete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDdelete(const char *name, hid_t fapl_id)
     * }
     */
    public static FunctionDescriptor H5FDdelete$descriptor() {
        return H5FDdelete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDdelete(const char *name, hid_t fapl_id)
     * }
     */
    public static MethodHandle H5FDdelete$handle() {
        return H5FDdelete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDdelete(const char *name, hid_t fapl_id)
     * }
     */
    public static MemorySegment H5FDdelete$address() {
        return H5FDdelete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDdelete(const char *name, hid_t fapl_id)
     * }
     */
    public static int H5FDdelete(MemorySegment name, long fapl_id) {
        var mh$ = H5FDdelete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDdelete", name, fapl_id);
            }
            return (int)mh$.invokeExact(name, fapl_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDctl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDctl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDctl(H5FD_t *file, uint64_t op_code, uint64_t flags, const void *input, void **output)
     * }
     */
    public static FunctionDescriptor H5FDctl$descriptor() {
        return H5FDctl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDctl(H5FD_t *file, uint64_t op_code, uint64_t flags, const void *input, void **output)
     * }
     */
    public static MethodHandle H5FDctl$handle() {
        return H5FDctl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDctl(H5FD_t *file, uint64_t op_code, uint64_t flags, const void *input, void **output)
     * }
     */
    public static MemorySegment H5FDctl$address() {
        return H5FDctl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDctl(H5FD_t *file, uint64_t op_code, uint64_t flags, const void *input, void **output)
     * }
     */
    public static int H5FDctl(MemorySegment file, long op_code, long flags, MemorySegment input, MemorySegment output) {
        var mh$ = H5FDctl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDctl", file, op_code, flags, input, output);
            }
            return (int)mh$.invokeExact(file, op_code, flags, input, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Iregister_future {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Iregister_future");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Iregister_future(H5I_type_t type, const void *object, H5I_future_realize_func_t realize_cb, H5I_future_discard_func_t discard_cb)
     * }
     */
    public static FunctionDescriptor H5Iregister_future$descriptor() {
        return H5Iregister_future.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Iregister_future(H5I_type_t type, const void *object, H5I_future_realize_func_t realize_cb, H5I_future_discard_func_t discard_cb)
     * }
     */
    public static MethodHandle H5Iregister_future$handle() {
        return H5Iregister_future.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Iregister_future(H5I_type_t type, const void *object, H5I_future_realize_func_t realize_cb, H5I_future_discard_func_t discard_cb)
     * }
     */
    public static MemorySegment H5Iregister_future$address() {
        return H5Iregister_future.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5Iregister_future(H5I_type_t type, const void *object, H5I_future_realize_func_t realize_cb, H5I_future_discard_func_t discard_cb)
     * }
     */
    public static long H5Iregister_future(int type, MemorySegment object, MemorySegment realize_cb, MemorySegment discard_cb) {
        var mh$ = H5Iregister_future.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Iregister_future", type, object, realize_cb, discard_cb);
            }
            return (long)mh$.invokeExact(type, object, realize_cb, discard_cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lregister(const H5L_class_t *cls)
     * }
     */
    public static FunctionDescriptor H5Lregister$descriptor() {
        return H5Lregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lregister(const H5L_class_t *cls)
     * }
     */
    public static MethodHandle H5Lregister$handle() {
        return H5Lregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lregister(const H5L_class_t *cls)
     * }
     */
    public static MemorySegment H5Lregister$address() {
        return H5Lregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Lregister(const H5L_class_t *cls)
     * }
     */
    public static int H5Lregister(MemorySegment cls) {
        var mh$ = H5Lregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lregister", cls);
            }
            return (int)mh$.invokeExact(cls);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lunregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lunregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lunregister(H5L_type_t id)
     * }
     */
    public static FunctionDescriptor H5Lunregister$descriptor() {
        return H5Lunregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lunregister(H5L_type_t id)
     * }
     */
    public static MethodHandle H5Lunregister$handle() {
        return H5Lunregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lunregister(H5L_type_t id)
     * }
     */
    public static MemorySegment H5Lunregister$address() {
        return H5Lunregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Lunregister(H5L_type_t id)
     * }
     */
    public static int H5Lunregister(int id) {
        var mh$ = H5Lunregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lunregister", id);
            }
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5T_CONV_INIT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5T_cmd_t.H5T_CONV_INIT = 0
     * }
     */
    public static int H5T_CONV_INIT() {
        return H5T_CONV_INIT;
    }
    private static final int H5T_CONV_CONV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5T_cmd_t.H5T_CONV_CONV = 1
     * }
     */
    public static int H5T_CONV_CONV() {
        return H5T_CONV_CONV;
    }
    private static final int H5T_CONV_FREE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5T_cmd_t.H5T_CONV_FREE = 2
     * }
     */
    public static int H5T_CONV_FREE() {
        return H5T_CONV_FREE;
    }
    private static final int H5T_BKG_NO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5T_bkg_t.H5T_BKG_NO = 0
     * }
     */
    public static int H5T_BKG_NO() {
        return H5T_BKG_NO;
    }
    private static final int H5T_BKG_TEMP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5T_bkg_t.H5T_BKG_TEMP = 1
     * }
     */
    public static int H5T_BKG_TEMP() {
        return H5T_BKG_TEMP;
    }
    private static final int H5T_BKG_YES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5T_bkg_t.H5T_BKG_YES = 2
     * }
     */
    public static int H5T_BKG_YES() {
        return H5T_BKG_YES;
    }
    private static final int H5T_PERS_DONTCARE = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5T_pers_t.H5T_PERS_DONTCARE = -1
     * }
     */
    public static int H5T_PERS_DONTCARE() {
        return H5T_PERS_DONTCARE;
    }
    private static final int H5T_PERS_HARD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5T_pers_t.H5T_PERS_HARD = 0
     * }
     */
    public static int H5T_PERS_HARD() {
        return H5T_PERS_HARD;
    }
    private static final int H5T_PERS_SOFT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5T_pers_t.H5T_PERS_SOFT = 1
     * }
     */
    public static int H5T_PERS_SOFT() {
        return H5T_PERS_SOFT;
    }

    private static class H5Tregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tregister(H5T_pers_t pers, const char *name, hid_t src_id, hid_t dst_id, H5T_conv_t func)
     * }
     */
    public static FunctionDescriptor H5Tregister$descriptor() {
        return H5Tregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tregister(H5T_pers_t pers, const char *name, hid_t src_id, hid_t dst_id, H5T_conv_t func)
     * }
     */
    public static MethodHandle H5Tregister$handle() {
        return H5Tregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tregister(H5T_pers_t pers, const char *name, hid_t src_id, hid_t dst_id, H5T_conv_t func)
     * }
     */
    public static MemorySegment H5Tregister$address() {
        return H5Tregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Tregister(H5T_pers_t pers, const char *name, hid_t src_id, hid_t dst_id, H5T_conv_t func)
     * }
     */
    public static int H5Tregister(int pers, MemorySegment name, long src_id, long dst_id, MemorySegment func) {
        var mh$ = H5Tregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tregister", pers, name, src_id, dst_id, func);
            }
            return (int)mh$.invokeExact(pers, name, src_id, dst_id, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tunregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tunregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tunregister(H5T_pers_t pers, const char *name, hid_t src_id, hid_t dst_id, H5T_conv_t func)
     * }
     */
    public static FunctionDescriptor H5Tunregister$descriptor() {
        return H5Tunregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tunregister(H5T_pers_t pers, const char *name, hid_t src_id, hid_t dst_id, H5T_conv_t func)
     * }
     */
    public static MethodHandle H5Tunregister$handle() {
        return H5Tunregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tunregister(H5T_pers_t pers, const char *name, hid_t src_id, hid_t dst_id, H5T_conv_t func)
     * }
     */
    public static MemorySegment H5Tunregister$address() {
        return H5Tunregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Tunregister(H5T_pers_t pers, const char *name, hid_t src_id, hid_t dst_id, H5T_conv_t func)
     * }
     */
    public static int H5Tunregister(int pers, MemorySegment name, long src_id, long dst_id, MemorySegment func) {
        var mh$ = H5Tunregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tunregister", pers, name, src_id, dst_id, func);
            }
            return (int)mh$.invokeExact(pers, name, src_id, dst_id, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tfind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tfind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5T_conv_t H5Tfind(hid_t src_id, hid_t dst_id, H5T_cdata_t **pcdata)
     * }
     */
    public static FunctionDescriptor H5Tfind$descriptor() {
        return H5Tfind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5T_conv_t H5Tfind(hid_t src_id, hid_t dst_id, H5T_cdata_t **pcdata)
     * }
     */
    public static MethodHandle H5Tfind$handle() {
        return H5Tfind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5T_conv_t H5Tfind(hid_t src_id, hid_t dst_id, H5T_cdata_t **pcdata)
     * }
     */
    public static MemorySegment H5Tfind$address() {
        return H5Tfind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * H5T_conv_t H5Tfind(hid_t src_id, hid_t dst_id, H5T_cdata_t **pcdata)
     * }
     */
    public static MemorySegment H5Tfind(long src_id, long dst_id, MemorySegment pcdata) {
        var mh$ = H5Tfind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tfind", src_id, dst_id, pcdata);
            }
            return (MemorySegment)mh$.invokeExact(src_id, dst_id, pcdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tcompiler_conv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tcompiler_conv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Tcompiler_conv(hid_t src_id, hid_t dst_id)
     * }
     */
    public static FunctionDescriptor H5Tcompiler_conv$descriptor() {
        return H5Tcompiler_conv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Tcompiler_conv(hid_t src_id, hid_t dst_id)
     * }
     */
    public static MethodHandle H5Tcompiler_conv$handle() {
        return H5Tcompiler_conv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Tcompiler_conv(hid_t src_id, hid_t dst_id)
     * }
     */
    public static MemorySegment H5Tcompiler_conv$address() {
        return H5Tcompiler_conv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * htri_t H5Tcompiler_conv(hid_t src_id, hid_t dst_id)
     * }
     */
    public static int H5Tcompiler_conv(long src_id, long dst_id) {
        var mh$ = H5Tcompiler_conv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tcompiler_conv", src_id, dst_id);
            }
            return (int)mh$.invokeExact(src_id, dst_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5TSmutex_acquire {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5TSmutex_acquire");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5TSmutex_acquire(unsigned int lock_count, bool *acquired)
     * }
     */
    public static FunctionDescriptor H5TSmutex_acquire$descriptor() {
        return H5TSmutex_acquire.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5TSmutex_acquire(unsigned int lock_count, bool *acquired)
     * }
     */
    public static MethodHandle H5TSmutex_acquire$handle() {
        return H5TSmutex_acquire.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5TSmutex_acquire(unsigned int lock_count, bool *acquired)
     * }
     */
    public static MemorySegment H5TSmutex_acquire$address() {
        return H5TSmutex_acquire.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5TSmutex_acquire(unsigned int lock_count, bool *acquired)
     * }
     */
    public static int H5TSmutex_acquire(int lock_count, MemorySegment acquired) {
        var mh$ = H5TSmutex_acquire.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5TSmutex_acquire", lock_count, acquired);
            }
            return (int)mh$.invokeExact(lock_count, acquired);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5TSmutex_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5TSmutex_release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5TSmutex_release(unsigned int *lock_count)
     * }
     */
    public static FunctionDescriptor H5TSmutex_release$descriptor() {
        return H5TSmutex_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5TSmutex_release(unsigned int *lock_count)
     * }
     */
    public static MethodHandle H5TSmutex_release$handle() {
        return H5TSmutex_release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5TSmutex_release(unsigned int *lock_count)
     * }
     */
    public static MemorySegment H5TSmutex_release$address() {
        return H5TSmutex_release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5TSmutex_release(unsigned int *lock_count)
     * }
     */
    public static int H5TSmutex_release(MemorySegment lock_count) {
        var mh$ = H5TSmutex_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5TSmutex_release", lock_count);
            }
            return (int)mh$.invokeExact(lock_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5TSmutex_get_attempt_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5TSmutex_get_attempt_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5TSmutex_get_attempt_count(unsigned int *count)
     * }
     */
    public static FunctionDescriptor H5TSmutex_get_attempt_count$descriptor() {
        return H5TSmutex_get_attempt_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5TSmutex_get_attempt_count(unsigned int *count)
     * }
     */
    public static MethodHandle H5TSmutex_get_attempt_count$handle() {
        return H5TSmutex_get_attempt_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5TSmutex_get_attempt_count(unsigned int *count)
     * }
     */
    public static MemorySegment H5TSmutex_get_attempt_count$address() {
        return H5TSmutex_get_attempt_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5TSmutex_get_attempt_count(unsigned int *count)
     * }
     */
    public static int H5TSmutex_get_attempt_count(MemorySegment count) {
        var mh$ = H5TSmutex_get_attempt_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5TSmutex_get_attempt_count", count);
            }
            return (int)mh$.invokeExact(count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Zregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Zregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Zregister(const void *cls)
     * }
     */
    public static FunctionDescriptor H5Zregister$descriptor() {
        return H5Zregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Zregister(const void *cls)
     * }
     */
    public static MethodHandle H5Zregister$handle() {
        return H5Zregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Zregister(const void *cls)
     * }
     */
    public static MemorySegment H5Zregister$address() {
        return H5Zregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Zregister(const void *cls)
     * }
     */
    public static int H5Zregister(MemorySegment cls) {
        var mh$ = H5Zregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Zregister", cls);
            }
            return (int)mh$.invokeExact(cls);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Zunregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Zunregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Zunregister(H5Z_filter_t id)
     * }
     */
    public static FunctionDescriptor H5Zunregister$descriptor() {
        return H5Zunregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Zunregister(H5Z_filter_t id)
     * }
     */
    public static MethodHandle H5Zunregister$handle() {
        return H5Zunregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Zunregister(H5Z_filter_t id)
     * }
     */
    public static MemorySegment H5Zunregister$address() {
        return H5Zunregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Zunregister(H5Z_filter_t id)
     * }
     */
    public static int H5Zunregister(int id) {
        var mh$ = H5Zunregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Zunregister", id);
            }
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLcmp_connector_cls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLcmp_connector_cls");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLcmp_connector_cls(int *cmp, hid_t connector_id1, hid_t connector_id2)
     * }
     */
    public static FunctionDescriptor H5VLcmp_connector_cls$descriptor() {
        return H5VLcmp_connector_cls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLcmp_connector_cls(int *cmp, hid_t connector_id1, hid_t connector_id2)
     * }
     */
    public static MethodHandle H5VLcmp_connector_cls$handle() {
        return H5VLcmp_connector_cls.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLcmp_connector_cls(int *cmp, hid_t connector_id1, hid_t connector_id2)
     * }
     */
    public static MemorySegment H5VLcmp_connector_cls$address() {
        return H5VLcmp_connector_cls.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLcmp_connector_cls(int *cmp, hid_t connector_id1, hid_t connector_id2)
     * }
     */
    public static int H5VLcmp_connector_cls(MemorySegment cmp, long connector_id1, long connector_id2) {
        var mh$ = H5VLcmp_connector_cls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLcmp_connector_cls", cmp, connector_id1, connector_id2);
            }
            return (int)mh$.invokeExact(cmp, connector_id1, connector_id2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLwrap_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLwrap_register");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5VLwrap_register(void *obj, H5I_type_t type)
     * }
     */
    public static FunctionDescriptor H5VLwrap_register$descriptor() {
        return H5VLwrap_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5VLwrap_register(void *obj, H5I_type_t type)
     * }
     */
    public static MethodHandle H5VLwrap_register$handle() {
        return H5VLwrap_register.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5VLwrap_register(void *obj, H5I_type_t type)
     * }
     */
    public static MemorySegment H5VLwrap_register$address() {
        return H5VLwrap_register.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5VLwrap_register(void *obj, H5I_type_t type)
     * }
     */
    public static long H5VLwrap_register(MemorySegment obj, int type) {
        var mh$ = H5VLwrap_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLwrap_register", obj, type);
            }
            return (long)mh$.invokeExact(obj, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLretrieve_lib_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLretrieve_lib_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLretrieve_lib_state(void **state)
     * }
     */
    public static FunctionDescriptor H5VLretrieve_lib_state$descriptor() {
        return H5VLretrieve_lib_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLretrieve_lib_state(void **state)
     * }
     */
    public static MethodHandle H5VLretrieve_lib_state$handle() {
        return H5VLretrieve_lib_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLretrieve_lib_state(void **state)
     * }
     */
    public static MemorySegment H5VLretrieve_lib_state$address() {
        return H5VLretrieve_lib_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLretrieve_lib_state(void **state)
     * }
     */
    public static int H5VLretrieve_lib_state(MemorySegment state) {
        var mh$ = H5VLretrieve_lib_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLretrieve_lib_state", state);
            }
            return (int)mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLstart_lib_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT    );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLstart_lib_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLstart_lib_state()
     * }
     */
    public static FunctionDescriptor H5VLstart_lib_state$descriptor() {
        return H5VLstart_lib_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLstart_lib_state()
     * }
     */
    public static MethodHandle H5VLstart_lib_state$handle() {
        return H5VLstart_lib_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLstart_lib_state()
     * }
     */
    public static MemorySegment H5VLstart_lib_state$address() {
        return H5VLstart_lib_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLstart_lib_state()
     * }
     */
    public static int H5VLstart_lib_state() {
        var mh$ = H5VLstart_lib_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLstart_lib_state");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLrestore_lib_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLrestore_lib_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLrestore_lib_state(const void *state)
     * }
     */
    public static FunctionDescriptor H5VLrestore_lib_state$descriptor() {
        return H5VLrestore_lib_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLrestore_lib_state(const void *state)
     * }
     */
    public static MethodHandle H5VLrestore_lib_state$handle() {
        return H5VLrestore_lib_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLrestore_lib_state(const void *state)
     * }
     */
    public static MemorySegment H5VLrestore_lib_state$address() {
        return H5VLrestore_lib_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLrestore_lib_state(const void *state)
     * }
     */
    public static int H5VLrestore_lib_state(MemorySegment state) {
        var mh$ = H5VLrestore_lib_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLrestore_lib_state", state);
            }
            return (int)mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLfinish_lib_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT    );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLfinish_lib_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLfinish_lib_state()
     * }
     */
    public static FunctionDescriptor H5VLfinish_lib_state$descriptor() {
        return H5VLfinish_lib_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLfinish_lib_state()
     * }
     */
    public static MethodHandle H5VLfinish_lib_state$handle() {
        return H5VLfinish_lib_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLfinish_lib_state()
     * }
     */
    public static MemorySegment H5VLfinish_lib_state$address() {
        return H5VLfinish_lib_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLfinish_lib_state()
     * }
     */
    public static int H5VLfinish_lib_state() {
        var mh$ = H5VLfinish_lib_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLfinish_lib_state");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLfree_lib_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLfree_lib_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLfree_lib_state(void *state)
     * }
     */
    public static FunctionDescriptor H5VLfree_lib_state$descriptor() {
        return H5VLfree_lib_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLfree_lib_state(void *state)
     * }
     */
    public static MethodHandle H5VLfree_lib_state$handle() {
        return H5VLfree_lib_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLfree_lib_state(void *state)
     * }
     */
    public static MemorySegment H5VLfree_lib_state$address() {
        return H5VLfree_lib_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLfree_lib_state(void *state)
     * }
     */
    public static int H5VLfree_lib_state(MemorySegment state) {
        var mh$ = H5VLfree_lib_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLfree_lib_state", state);
            }
            return (int)mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLget_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLget_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLget_object(void *obj, hid_t connector_id)
     * }
     */
    public static FunctionDescriptor H5VLget_object$descriptor() {
        return H5VLget_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLget_object(void *obj, hid_t connector_id)
     * }
     */
    public static MethodHandle H5VLget_object$handle() {
        return H5VLget_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLget_object(void *obj, hid_t connector_id)
     * }
     */
    public static MemorySegment H5VLget_object$address() {
        return H5VLget_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLget_object(void *obj, hid_t connector_id)
     * }
     */
    public static MemorySegment H5VLget_object(MemorySegment obj, long connector_id) {
        var mh$ = H5VLget_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLget_object", obj, connector_id);
            }
            return (MemorySegment)mh$.invokeExact(obj, connector_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLget_wrap_ctx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLget_wrap_ctx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLget_wrap_ctx(void *obj, hid_t connector_id, void **wrap_ctx)
     * }
     */
    public static FunctionDescriptor H5VLget_wrap_ctx$descriptor() {
        return H5VLget_wrap_ctx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLget_wrap_ctx(void *obj, hid_t connector_id, void **wrap_ctx)
     * }
     */
    public static MethodHandle H5VLget_wrap_ctx$handle() {
        return H5VLget_wrap_ctx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLget_wrap_ctx(void *obj, hid_t connector_id, void **wrap_ctx)
     * }
     */
    public static MemorySegment H5VLget_wrap_ctx$address() {
        return H5VLget_wrap_ctx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLget_wrap_ctx(void *obj, hid_t connector_id, void **wrap_ctx)
     * }
     */
    public static int H5VLget_wrap_ctx(MemorySegment obj, long connector_id, MemorySegment wrap_ctx) {
        var mh$ = H5VLget_wrap_ctx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLget_wrap_ctx", obj, connector_id, wrap_ctx);
            }
            return (int)mh$.invokeExact(obj, connector_id, wrap_ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLwrap_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLwrap_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLwrap_object(void *obj, H5I_type_t obj_type, hid_t connector_id, void *wrap_ctx)
     * }
     */
    public static FunctionDescriptor H5VLwrap_object$descriptor() {
        return H5VLwrap_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLwrap_object(void *obj, H5I_type_t obj_type, hid_t connector_id, void *wrap_ctx)
     * }
     */
    public static MethodHandle H5VLwrap_object$handle() {
        return H5VLwrap_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLwrap_object(void *obj, H5I_type_t obj_type, hid_t connector_id, void *wrap_ctx)
     * }
     */
    public static MemorySegment H5VLwrap_object$address() {
        return H5VLwrap_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLwrap_object(void *obj, H5I_type_t obj_type, hid_t connector_id, void *wrap_ctx)
     * }
     */
    public static MemorySegment H5VLwrap_object(MemorySegment obj, int obj_type, long connector_id, MemorySegment wrap_ctx) {
        var mh$ = H5VLwrap_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLwrap_object", obj, obj_type, connector_id, wrap_ctx);
            }
            return (MemorySegment)mh$.invokeExact(obj, obj_type, connector_id, wrap_ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLunwrap_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLunwrap_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLunwrap_object(void *obj, hid_t connector_id)
     * }
     */
    public static FunctionDescriptor H5VLunwrap_object$descriptor() {
        return H5VLunwrap_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLunwrap_object(void *obj, hid_t connector_id)
     * }
     */
    public static MethodHandle H5VLunwrap_object$handle() {
        return H5VLunwrap_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLunwrap_object(void *obj, hid_t connector_id)
     * }
     */
    public static MemorySegment H5VLunwrap_object$address() {
        return H5VLunwrap_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLunwrap_object(void *obj, hid_t connector_id)
     * }
     */
    public static MemorySegment H5VLunwrap_object(MemorySegment obj, long connector_id) {
        var mh$ = H5VLunwrap_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLunwrap_object", obj, connector_id);
            }
            return (MemorySegment)mh$.invokeExact(obj, connector_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLfree_wrap_ctx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLfree_wrap_ctx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLfree_wrap_ctx(void *wrap_ctx, hid_t connector_id)
     * }
     */
    public static FunctionDescriptor H5VLfree_wrap_ctx$descriptor() {
        return H5VLfree_wrap_ctx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLfree_wrap_ctx(void *wrap_ctx, hid_t connector_id)
     * }
     */
    public static MethodHandle H5VLfree_wrap_ctx$handle() {
        return H5VLfree_wrap_ctx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLfree_wrap_ctx(void *wrap_ctx, hid_t connector_id)
     * }
     */
    public static MemorySegment H5VLfree_wrap_ctx$address() {
        return H5VLfree_wrap_ctx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLfree_wrap_ctx(void *wrap_ctx, hid_t connector_id)
     * }
     */
    public static int H5VLfree_wrap_ctx(MemorySegment wrap_ctx, long connector_id) {
        var mh$ = H5VLfree_wrap_ctx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLfree_wrap_ctx", wrap_ctx, connector_id);
            }
            return (int)mh$.invokeExact(wrap_ctx, connector_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLinitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLinitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLinitialize(hid_t connector_id, hid_t vipl_id)
     * }
     */
    public static FunctionDescriptor H5VLinitialize$descriptor() {
        return H5VLinitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLinitialize(hid_t connector_id, hid_t vipl_id)
     * }
     */
    public static MethodHandle H5VLinitialize$handle() {
        return H5VLinitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLinitialize(hid_t connector_id, hid_t vipl_id)
     * }
     */
    public static MemorySegment H5VLinitialize$address() {
        return H5VLinitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLinitialize(hid_t connector_id, hid_t vipl_id)
     * }
     */
    public static int H5VLinitialize(long connector_id, long vipl_id) {
        var mh$ = H5VLinitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLinitialize", connector_id, vipl_id);
            }
            return (int)mh$.invokeExact(connector_id, vipl_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLterminate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLterminate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLterminate(hid_t connector_id)
     * }
     */
    public static FunctionDescriptor H5VLterminate$descriptor() {
        return H5VLterminate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLterminate(hid_t connector_id)
     * }
     */
    public static MethodHandle H5VLterminate$handle() {
        return H5VLterminate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLterminate(hid_t connector_id)
     * }
     */
    public static MemorySegment H5VLterminate$address() {
        return H5VLterminate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLterminate(hid_t connector_id)
     * }
     */
    public static int H5VLterminate(long connector_id) {
        var mh$ = H5VLterminate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLterminate", connector_id);
            }
            return (int)mh$.invokeExact(connector_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLget_cap_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLget_cap_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLget_cap_flags(hid_t connector_id, uint64_t *cap_flags)
     * }
     */
    public static FunctionDescriptor H5VLget_cap_flags$descriptor() {
        return H5VLget_cap_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLget_cap_flags(hid_t connector_id, uint64_t *cap_flags)
     * }
     */
    public static MethodHandle H5VLget_cap_flags$handle() {
        return H5VLget_cap_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLget_cap_flags(hid_t connector_id, uint64_t *cap_flags)
     * }
     */
    public static MemorySegment H5VLget_cap_flags$address() {
        return H5VLget_cap_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLget_cap_flags(hid_t connector_id, uint64_t *cap_flags)
     * }
     */
    public static int H5VLget_cap_flags(long connector_id, MemorySegment cap_flags) {
        var mh$ = H5VLget_cap_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLget_cap_flags", connector_id, cap_flags);
            }
            return (int)mh$.invokeExact(connector_id, cap_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLget_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLget_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLget_value(hid_t connector_id, H5VL_class_value_t *conn_value)
     * }
     */
    public static FunctionDescriptor H5VLget_value$descriptor() {
        return H5VLget_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLget_value(hid_t connector_id, H5VL_class_value_t *conn_value)
     * }
     */
    public static MethodHandle H5VLget_value$handle() {
        return H5VLget_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLget_value(hid_t connector_id, H5VL_class_value_t *conn_value)
     * }
     */
    public static MemorySegment H5VLget_value$address() {
        return H5VLget_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLget_value(hid_t connector_id, H5VL_class_value_t *conn_value)
     * }
     */
    public static int H5VLget_value(long connector_id, MemorySegment conn_value) {
        var mh$ = H5VLget_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLget_value", connector_id, conn_value);
            }
            return (int)mh$.invokeExact(connector_id, conn_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLcopy_connector_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLcopy_connector_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLcopy_connector_info(hid_t connector_id, void **dst_vol_info, void *src_vol_info)
     * }
     */
    public static FunctionDescriptor H5VLcopy_connector_info$descriptor() {
        return H5VLcopy_connector_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLcopy_connector_info(hid_t connector_id, void **dst_vol_info, void *src_vol_info)
     * }
     */
    public static MethodHandle H5VLcopy_connector_info$handle() {
        return H5VLcopy_connector_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLcopy_connector_info(hid_t connector_id, void **dst_vol_info, void *src_vol_info)
     * }
     */
    public static MemorySegment H5VLcopy_connector_info$address() {
        return H5VLcopy_connector_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLcopy_connector_info(hid_t connector_id, void **dst_vol_info, void *src_vol_info)
     * }
     */
    public static int H5VLcopy_connector_info(long connector_id, MemorySegment dst_vol_info, MemorySegment src_vol_info) {
        var mh$ = H5VLcopy_connector_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLcopy_connector_info", connector_id, dst_vol_info, src_vol_info);
            }
            return (int)mh$.invokeExact(connector_id, dst_vol_info, src_vol_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLcmp_connector_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLcmp_connector_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLcmp_connector_info(int *cmp, hid_t connector_id, const void *info1, const void *info2)
     * }
     */
    public static FunctionDescriptor H5VLcmp_connector_info$descriptor() {
        return H5VLcmp_connector_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLcmp_connector_info(int *cmp, hid_t connector_id, const void *info1, const void *info2)
     * }
     */
    public static MethodHandle H5VLcmp_connector_info$handle() {
        return H5VLcmp_connector_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLcmp_connector_info(int *cmp, hid_t connector_id, const void *info1, const void *info2)
     * }
     */
    public static MemorySegment H5VLcmp_connector_info$address() {
        return H5VLcmp_connector_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLcmp_connector_info(int *cmp, hid_t connector_id, const void *info1, const void *info2)
     * }
     */
    public static int H5VLcmp_connector_info(MemorySegment cmp, long connector_id, MemorySegment info1, MemorySegment info2) {
        var mh$ = H5VLcmp_connector_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLcmp_connector_info", cmp, connector_id, info1, info2);
            }
            return (int)mh$.invokeExact(cmp, connector_id, info1, info2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLfree_connector_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLfree_connector_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLfree_connector_info(hid_t connector_id, void *vol_info)
     * }
     */
    public static FunctionDescriptor H5VLfree_connector_info$descriptor() {
        return H5VLfree_connector_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLfree_connector_info(hid_t connector_id, void *vol_info)
     * }
     */
    public static MethodHandle H5VLfree_connector_info$handle() {
        return H5VLfree_connector_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLfree_connector_info(hid_t connector_id, void *vol_info)
     * }
     */
    public static MemorySegment H5VLfree_connector_info$address() {
        return H5VLfree_connector_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLfree_connector_info(hid_t connector_id, void *vol_info)
     * }
     */
    public static int H5VLfree_connector_info(long connector_id, MemorySegment vol_info) {
        var mh$ = H5VLfree_connector_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLfree_connector_info", connector_id, vol_info);
            }
            return (int)mh$.invokeExact(connector_id, vol_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLconnector_info_to_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLconnector_info_to_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLconnector_info_to_str(const void *info, hid_t connector_id, char **str)
     * }
     */
    public static FunctionDescriptor H5VLconnector_info_to_str$descriptor() {
        return H5VLconnector_info_to_str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLconnector_info_to_str(const void *info, hid_t connector_id, char **str)
     * }
     */
    public static MethodHandle H5VLconnector_info_to_str$handle() {
        return H5VLconnector_info_to_str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLconnector_info_to_str(const void *info, hid_t connector_id, char **str)
     * }
     */
    public static MemorySegment H5VLconnector_info_to_str$address() {
        return H5VLconnector_info_to_str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLconnector_info_to_str(const void *info, hid_t connector_id, char **str)
     * }
     */
    public static int H5VLconnector_info_to_str(MemorySegment info, long connector_id, MemorySegment str) {
        var mh$ = H5VLconnector_info_to_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLconnector_info_to_str", info, connector_id, str);
            }
            return (int)mh$.invokeExact(info, connector_id, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLconnector_str_to_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLconnector_str_to_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLconnector_str_to_info(const char *str, hid_t connector_id, void **info)
     * }
     */
    public static FunctionDescriptor H5VLconnector_str_to_info$descriptor() {
        return H5VLconnector_str_to_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLconnector_str_to_info(const char *str, hid_t connector_id, void **info)
     * }
     */
    public static MethodHandle H5VLconnector_str_to_info$handle() {
        return H5VLconnector_str_to_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLconnector_str_to_info(const char *str, hid_t connector_id, void **info)
     * }
     */
    public static MemorySegment H5VLconnector_str_to_info$address() {
        return H5VLconnector_str_to_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLconnector_str_to_info(const char *str, hid_t connector_id, void **info)
     * }
     */
    public static int H5VLconnector_str_to_info(MemorySegment str, long connector_id, MemorySegment info) {
        var mh$ = H5VLconnector_str_to_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLconnector_str_to_info", str, connector_id, info);
            }
            return (int)mh$.invokeExact(str, connector_id, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLattr_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLattr_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLattr_create(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id, hid_t aapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLattr_create$descriptor() {
        return H5VLattr_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLattr_create(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id, hid_t aapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLattr_create$handle() {
        return H5VLattr_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLattr_create(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id, hid_t aapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLattr_create$address() {
        return H5VLattr_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLattr_create(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id, hid_t aapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLattr_create(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment attr_name, long type_id, long space_id, long acpl_id, long aapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLattr_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLattr_create", obj, loc_params, connector_id, attr_name, type_id, space_id, acpl_id, aapl_id, dxpl_id, req);
            }
            return (MemorySegment)mh$.invokeExact(obj, loc_params, connector_id, attr_name, type_id, space_id, acpl_id, aapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLattr_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLattr_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLattr_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t aapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLattr_open$descriptor() {
        return H5VLattr_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLattr_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t aapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLattr_open$handle() {
        return H5VLattr_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLattr_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t aapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLattr_open$address() {
        return H5VLattr_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLattr_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t aapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLattr_open(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment name, long aapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLattr_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLattr_open", obj, loc_params, connector_id, name, aapl_id, dxpl_id, req);
            }
            return (MemorySegment)mh$.invokeExact(obj, loc_params, connector_id, name, aapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLattr_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLattr_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLattr_read(void *attr, hid_t connector_id, hid_t dtype_id, void *buf, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLattr_read$descriptor() {
        return H5VLattr_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLattr_read(void *attr, hid_t connector_id, hid_t dtype_id, void *buf, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLattr_read$handle() {
        return H5VLattr_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLattr_read(void *attr, hid_t connector_id, hid_t dtype_id, void *buf, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLattr_read$address() {
        return H5VLattr_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLattr_read(void *attr, hid_t connector_id, hid_t dtype_id, void *buf, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLattr_read(MemorySegment attr, long connector_id, long dtype_id, MemorySegment buf, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLattr_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLattr_read", attr, connector_id, dtype_id, buf, dxpl_id, req);
            }
            return (int)mh$.invokeExact(attr, connector_id, dtype_id, buf, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLattr_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLattr_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLattr_write(void *attr, hid_t connector_id, hid_t dtype_id, const void *buf, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLattr_write$descriptor() {
        return H5VLattr_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLattr_write(void *attr, hid_t connector_id, hid_t dtype_id, const void *buf, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLattr_write$handle() {
        return H5VLattr_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLattr_write(void *attr, hid_t connector_id, hid_t dtype_id, const void *buf, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLattr_write$address() {
        return H5VLattr_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLattr_write(void *attr, hid_t connector_id, hid_t dtype_id, const void *buf, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLattr_write(MemorySegment attr, long connector_id, long dtype_id, MemorySegment buf, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLattr_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLattr_write", attr, connector_id, dtype_id, buf, dxpl_id, req);
            }
            return (int)mh$.invokeExact(attr, connector_id, dtype_id, buf, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLattr_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLattr_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLattr_get(void *obj, hid_t connector_id, H5VL_attr_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLattr_get$descriptor() {
        return H5VLattr_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLattr_get(void *obj, hid_t connector_id, H5VL_attr_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLattr_get$handle() {
        return H5VLattr_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLattr_get(void *obj, hid_t connector_id, H5VL_attr_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLattr_get$address() {
        return H5VLattr_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLattr_get(void *obj, hid_t connector_id, H5VL_attr_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLattr_get(MemorySegment obj, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLattr_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLattr_get", obj, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLattr_specific {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLattr_specific");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLattr_specific(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_attr_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLattr_specific$descriptor() {
        return H5VLattr_specific.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLattr_specific(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_attr_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLattr_specific$handle() {
        return H5VLattr_specific.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLattr_specific(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_attr_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLattr_specific$address() {
        return H5VLattr_specific.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLattr_specific(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_attr_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLattr_specific(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLattr_specific.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLattr_specific", obj, loc_params, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, loc_params, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLattr_optional {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLattr_optional");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLattr_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLattr_optional$descriptor() {
        return H5VLattr_optional.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLattr_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLattr_optional$handle() {
        return H5VLattr_optional.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLattr_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLattr_optional$address() {
        return H5VLattr_optional.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLattr_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLattr_optional(MemorySegment obj, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLattr_optional.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLattr_optional", obj, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLattr_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLattr_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLattr_close(void *attr, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLattr_close$descriptor() {
        return H5VLattr_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLattr_close(void *attr, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLattr_close$handle() {
        return H5VLattr_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLattr_close(void *attr, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLattr_close$address() {
        return H5VLattr_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLattr_close(void *attr, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLattr_close(MemorySegment attr, long connector_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLattr_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLattr_close", attr, connector_id, dxpl_id, req);
            }
            return (int)mh$.invokeExact(attr, connector_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdataset_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdataset_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLdataset_create(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t lcpl_id, hid_t type_id, hid_t space_id, hid_t dcpl_id, hid_t dapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLdataset_create$descriptor() {
        return H5VLdataset_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLdataset_create(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t lcpl_id, hid_t type_id, hid_t space_id, hid_t dcpl_id, hid_t dapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLdataset_create$handle() {
        return H5VLdataset_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLdataset_create(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t lcpl_id, hid_t type_id, hid_t space_id, hid_t dcpl_id, hid_t dapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdataset_create$address() {
        return H5VLdataset_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLdataset_create(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t lcpl_id, hid_t type_id, hid_t space_id, hid_t dcpl_id, hid_t dapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdataset_create(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment name, long lcpl_id, long type_id, long space_id, long dcpl_id, long dapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLdataset_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdataset_create", obj, loc_params, connector_id, name, lcpl_id, type_id, space_id, dcpl_id, dapl_id, dxpl_id, req);
            }
            return (MemorySegment)mh$.invokeExact(obj, loc_params, connector_id, name, lcpl_id, type_id, space_id, dcpl_id, dapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdataset_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdataset_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLdataset_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t dapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLdataset_open$descriptor() {
        return H5VLdataset_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLdataset_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t dapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLdataset_open$handle() {
        return H5VLdataset_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLdataset_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t dapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdataset_open$address() {
        return H5VLdataset_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLdataset_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t dapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdataset_open(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment name, long dapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLdataset_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdataset_open", obj, loc_params, connector_id, name, dapl_id, dxpl_id, req);
            }
            return (MemorySegment)mh$.invokeExact(obj, loc_params, connector_id, name, dapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdataset_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdataset_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_read(size_t count, void *dset[], hid_t connector_id, hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t plist_id, void *buf[], void **req)
     * }
     */
    public static FunctionDescriptor H5VLdataset_read$descriptor() {
        return H5VLdataset_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_read(size_t count, void *dset[], hid_t connector_id, hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t plist_id, void *buf[], void **req)
     * }
     */
    public static MethodHandle H5VLdataset_read$handle() {
        return H5VLdataset_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_read(size_t count, void *dset[], hid_t connector_id, hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t plist_id, void *buf[], void **req)
     * }
     */
    public static MemorySegment H5VLdataset_read$address() {
        return H5VLdataset_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLdataset_read(size_t count, void *dset[], hid_t connector_id, hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t plist_id, void *buf[], void **req)
     * }
     */
    public static int H5VLdataset_read(long count, MemorySegment dset, long connector_id, MemorySegment mem_type_id, MemorySegment mem_space_id, MemorySegment file_space_id, long plist_id, MemorySegment buf, MemorySegment req) {
        var mh$ = H5VLdataset_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdataset_read", count, dset, connector_id, mem_type_id, mem_space_id, file_space_id, plist_id, buf, req);
            }
            return (int)mh$.invokeExact(count, dset, connector_id, mem_type_id, mem_space_id, file_space_id, plist_id, buf, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdataset_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdataset_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_write(size_t count, void *dset[], hid_t connector_id, hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t plist_id, const void *buf[], void **req)
     * }
     */
    public static FunctionDescriptor H5VLdataset_write$descriptor() {
        return H5VLdataset_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_write(size_t count, void *dset[], hid_t connector_id, hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t plist_id, const void *buf[], void **req)
     * }
     */
    public static MethodHandle H5VLdataset_write$handle() {
        return H5VLdataset_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_write(size_t count, void *dset[], hid_t connector_id, hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t plist_id, const void *buf[], void **req)
     * }
     */
    public static MemorySegment H5VLdataset_write$address() {
        return H5VLdataset_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLdataset_write(size_t count, void *dset[], hid_t connector_id, hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t plist_id, const void *buf[], void **req)
     * }
     */
    public static int H5VLdataset_write(long count, MemorySegment dset, long connector_id, MemorySegment mem_type_id, MemorySegment mem_space_id, MemorySegment file_space_id, long plist_id, MemorySegment buf, MemorySegment req) {
        var mh$ = H5VLdataset_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdataset_write", count, dset, connector_id, mem_type_id, mem_space_id, file_space_id, plist_id, buf, req);
            }
            return (int)mh$.invokeExact(count, dset, connector_id, mem_type_id, mem_space_id, file_space_id, plist_id, buf, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdataset_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdataset_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_get(void *dset, hid_t connector_id, H5VL_dataset_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLdataset_get$descriptor() {
        return H5VLdataset_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_get(void *dset, hid_t connector_id, H5VL_dataset_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLdataset_get$handle() {
        return H5VLdataset_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_get(void *dset, hid_t connector_id, H5VL_dataset_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdataset_get$address() {
        return H5VLdataset_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLdataset_get(void *dset, hid_t connector_id, H5VL_dataset_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLdataset_get(MemorySegment dset, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLdataset_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdataset_get", dset, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(dset, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdataset_specific {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdataset_specific");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_specific(void *obj, hid_t connector_id, H5VL_dataset_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLdataset_specific$descriptor() {
        return H5VLdataset_specific.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_specific(void *obj, hid_t connector_id, H5VL_dataset_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLdataset_specific$handle() {
        return H5VLdataset_specific.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_specific(void *obj, hid_t connector_id, H5VL_dataset_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdataset_specific$address() {
        return H5VLdataset_specific.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLdataset_specific(void *obj, hid_t connector_id, H5VL_dataset_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLdataset_specific(MemorySegment obj, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLdataset_specific.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdataset_specific", obj, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdataset_optional {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdataset_optional");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLdataset_optional$descriptor() {
        return H5VLdataset_optional.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLdataset_optional$handle() {
        return H5VLdataset_optional.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdataset_optional$address() {
        return H5VLdataset_optional.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLdataset_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLdataset_optional(MemorySegment obj, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLdataset_optional.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdataset_optional", obj, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdataset_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdataset_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_close(void *dset, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLdataset_close$descriptor() {
        return H5VLdataset_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_close(void *dset, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLdataset_close$handle() {
        return H5VLdataset_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_close(void *dset, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdataset_close$address() {
        return H5VLdataset_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLdataset_close(void *dset, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLdataset_close(MemorySegment dset, long connector_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLdataset_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdataset_close", dset, connector_id, dxpl_id, req);
            }
            return (int)mh$.invokeExact(dset, connector_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdatatype_commit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdatatype_commit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLdatatype_commit(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t tapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLdatatype_commit$descriptor() {
        return H5VLdatatype_commit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLdatatype_commit(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t tapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLdatatype_commit$handle() {
        return H5VLdatatype_commit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLdatatype_commit(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t tapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdatatype_commit$address() {
        return H5VLdatatype_commit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLdatatype_commit(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t tapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdatatype_commit(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment name, long type_id, long lcpl_id, long tcpl_id, long tapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLdatatype_commit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdatatype_commit", obj, loc_params, connector_id, name, type_id, lcpl_id, tcpl_id, tapl_id, dxpl_id, req);
            }
            return (MemorySegment)mh$.invokeExact(obj, loc_params, connector_id, name, type_id, lcpl_id, tcpl_id, tapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdatatype_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdatatype_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLdatatype_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t tapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLdatatype_open$descriptor() {
        return H5VLdatatype_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLdatatype_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t tapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLdatatype_open$handle() {
        return H5VLdatatype_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLdatatype_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t tapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdatatype_open$address() {
        return H5VLdatatype_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLdatatype_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t tapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdatatype_open(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment name, long tapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLdatatype_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdatatype_open", obj, loc_params, connector_id, name, tapl_id, dxpl_id, req);
            }
            return (MemorySegment)mh$.invokeExact(obj, loc_params, connector_id, name, tapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdatatype_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdatatype_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_get(void *dt, hid_t connector_id, H5VL_datatype_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLdatatype_get$descriptor() {
        return H5VLdatatype_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_get(void *dt, hid_t connector_id, H5VL_datatype_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLdatatype_get$handle() {
        return H5VLdatatype_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_get(void *dt, hid_t connector_id, H5VL_datatype_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdatatype_get$address() {
        return H5VLdatatype_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLdatatype_get(void *dt, hid_t connector_id, H5VL_datatype_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLdatatype_get(MemorySegment dt, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLdatatype_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdatatype_get", dt, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(dt, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdatatype_specific {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdatatype_specific");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_specific(void *obj, hid_t connector_id, H5VL_datatype_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLdatatype_specific$descriptor() {
        return H5VLdatatype_specific.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_specific(void *obj, hid_t connector_id, H5VL_datatype_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLdatatype_specific$handle() {
        return H5VLdatatype_specific.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_specific(void *obj, hid_t connector_id, H5VL_datatype_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdatatype_specific$address() {
        return H5VLdatatype_specific.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLdatatype_specific(void *obj, hid_t connector_id, H5VL_datatype_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLdatatype_specific(MemorySegment obj, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLdatatype_specific.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdatatype_specific", obj, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdatatype_optional {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdatatype_optional");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLdatatype_optional$descriptor() {
        return H5VLdatatype_optional.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLdatatype_optional$handle() {
        return H5VLdatatype_optional.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdatatype_optional$address() {
        return H5VLdatatype_optional.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLdatatype_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLdatatype_optional(MemorySegment obj, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLdatatype_optional.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdatatype_optional", obj, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdatatype_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdatatype_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_close(void *dt, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLdatatype_close$descriptor() {
        return H5VLdatatype_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_close(void *dt, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLdatatype_close$handle() {
        return H5VLdatatype_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_close(void *dt, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLdatatype_close$address() {
        return H5VLdatatype_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLdatatype_close(void *dt, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLdatatype_close(MemorySegment dt, long connector_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLdatatype_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdatatype_close", dt, connector_id, dxpl_id, req);
            }
            return (int)mh$.invokeExact(dt, connector_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLfile_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLfile_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLfile_create(const char *name, unsigned int flags, hid_t fcpl_id, hid_t fapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLfile_create$descriptor() {
        return H5VLfile_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLfile_create(const char *name, unsigned int flags, hid_t fcpl_id, hid_t fapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLfile_create$handle() {
        return H5VLfile_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLfile_create(const char *name, unsigned int flags, hid_t fcpl_id, hid_t fapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLfile_create$address() {
        return H5VLfile_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLfile_create(const char *name, unsigned int flags, hid_t fcpl_id, hid_t fapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLfile_create(MemorySegment name, int flags, long fcpl_id, long fapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLfile_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLfile_create", name, flags, fcpl_id, fapl_id, dxpl_id, req);
            }
            return (MemorySegment)mh$.invokeExact(name, flags, fcpl_id, fapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLfile_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLfile_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLfile_open(const char *name, unsigned int flags, hid_t fapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLfile_open$descriptor() {
        return H5VLfile_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLfile_open(const char *name, unsigned int flags, hid_t fapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLfile_open$handle() {
        return H5VLfile_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLfile_open(const char *name, unsigned int flags, hid_t fapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLfile_open$address() {
        return H5VLfile_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLfile_open(const char *name, unsigned int flags, hid_t fapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLfile_open(MemorySegment name, int flags, long fapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLfile_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLfile_open", name, flags, fapl_id, dxpl_id, req);
            }
            return (MemorySegment)mh$.invokeExact(name, flags, fapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLfile_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLfile_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLfile_get(void *file, hid_t connector_id, H5VL_file_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLfile_get$descriptor() {
        return H5VLfile_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLfile_get(void *file, hid_t connector_id, H5VL_file_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLfile_get$handle() {
        return H5VLfile_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLfile_get(void *file, hid_t connector_id, H5VL_file_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLfile_get$address() {
        return H5VLfile_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLfile_get(void *file, hid_t connector_id, H5VL_file_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLfile_get(MemorySegment file, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLfile_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLfile_get", file, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(file, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLfile_specific {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLfile_specific");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLfile_specific(void *obj, hid_t connector_id, H5VL_file_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLfile_specific$descriptor() {
        return H5VLfile_specific.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLfile_specific(void *obj, hid_t connector_id, H5VL_file_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLfile_specific$handle() {
        return H5VLfile_specific.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLfile_specific(void *obj, hid_t connector_id, H5VL_file_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLfile_specific$address() {
        return H5VLfile_specific.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLfile_specific(void *obj, hid_t connector_id, H5VL_file_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLfile_specific(MemorySegment obj, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLfile_specific.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLfile_specific", obj, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLfile_optional {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLfile_optional");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLfile_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLfile_optional$descriptor() {
        return H5VLfile_optional.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLfile_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLfile_optional$handle() {
        return H5VLfile_optional.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLfile_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLfile_optional$address() {
        return H5VLfile_optional.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLfile_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLfile_optional(MemorySegment obj, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLfile_optional.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLfile_optional", obj, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLfile_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLfile_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLfile_close(void *file, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLfile_close$descriptor() {
        return H5VLfile_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLfile_close(void *file, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLfile_close$handle() {
        return H5VLfile_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLfile_close(void *file, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLfile_close$address() {
        return H5VLfile_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLfile_close(void *file, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLfile_close(MemorySegment file, long connector_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLfile_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLfile_close", file, connector_id, dxpl_id, req);
            }
            return (int)mh$.invokeExact(file, connector_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLgroup_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLgroup_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLgroup_create(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLgroup_create$descriptor() {
        return H5VLgroup_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLgroup_create(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLgroup_create$handle() {
        return H5VLgroup_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLgroup_create(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLgroup_create$address() {
        return H5VLgroup_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLgroup_create(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLgroup_create(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment name, long lcpl_id, long gcpl_id, long gapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLgroup_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLgroup_create", obj, loc_params, connector_id, name, lcpl_id, gcpl_id, gapl_id, dxpl_id, req);
            }
            return (MemorySegment)mh$.invokeExact(obj, loc_params, connector_id, name, lcpl_id, gcpl_id, gapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLgroup_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLgroup_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLgroup_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t gapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLgroup_open$descriptor() {
        return H5VLgroup_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLgroup_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t gapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLgroup_open$handle() {
        return H5VLgroup_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLgroup_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t gapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLgroup_open$address() {
        return H5VLgroup_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLgroup_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, const char *name, hid_t gapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLgroup_open(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment name, long gapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLgroup_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLgroup_open", obj, loc_params, connector_id, name, gapl_id, dxpl_id, req);
            }
            return (MemorySegment)mh$.invokeExact(obj, loc_params, connector_id, name, gapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLgroup_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLgroup_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_get(void *obj, hid_t connector_id, H5VL_group_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLgroup_get$descriptor() {
        return H5VLgroup_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_get(void *obj, hid_t connector_id, H5VL_group_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLgroup_get$handle() {
        return H5VLgroup_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_get(void *obj, hid_t connector_id, H5VL_group_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLgroup_get$address() {
        return H5VLgroup_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLgroup_get(void *obj, hid_t connector_id, H5VL_group_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLgroup_get(MemorySegment obj, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLgroup_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLgroup_get", obj, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLgroup_specific {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLgroup_specific");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_specific(void *obj, hid_t connector_id, H5VL_group_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLgroup_specific$descriptor() {
        return H5VLgroup_specific.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_specific(void *obj, hid_t connector_id, H5VL_group_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLgroup_specific$handle() {
        return H5VLgroup_specific.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_specific(void *obj, hid_t connector_id, H5VL_group_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLgroup_specific$address() {
        return H5VLgroup_specific.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLgroup_specific(void *obj, hid_t connector_id, H5VL_group_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLgroup_specific(MemorySegment obj, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLgroup_specific.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLgroup_specific", obj, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLgroup_optional {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLgroup_optional");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLgroup_optional$descriptor() {
        return H5VLgroup_optional.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLgroup_optional$handle() {
        return H5VLgroup_optional.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLgroup_optional$address() {
        return H5VLgroup_optional.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLgroup_optional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLgroup_optional(MemorySegment obj, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLgroup_optional.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLgroup_optional", obj, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLgroup_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLgroup_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_close(void *grp, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLgroup_close$descriptor() {
        return H5VLgroup_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_close(void *grp, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLgroup_close$handle() {
        return H5VLgroup_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_close(void *grp, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLgroup_close$address() {
        return H5VLgroup_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLgroup_close(void *grp, hid_t connector_id, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLgroup_close(MemorySegment grp, long connector_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLgroup_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLgroup_close", grp, connector_id, dxpl_id, req);
            }
            return (int)mh$.invokeExact(grp, connector_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLlink_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLlink_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLlink_create(H5VL_link_create_args_t *args, void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, hid_t lcpl_id, hid_t lapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLlink_create$descriptor() {
        return H5VLlink_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLlink_create(H5VL_link_create_args_t *args, void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, hid_t lcpl_id, hid_t lapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLlink_create$handle() {
        return H5VLlink_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLlink_create(H5VL_link_create_args_t *args, void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, hid_t lcpl_id, hid_t lapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLlink_create$address() {
        return H5VLlink_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLlink_create(H5VL_link_create_args_t *args, void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, hid_t lcpl_id, hid_t lapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLlink_create(MemorySegment args, MemorySegment obj, MemorySegment loc_params, long connector_id, long lcpl_id, long lapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLlink_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLlink_create", args, obj, loc_params, connector_id, lcpl_id, lapl_id, dxpl_id, req);
            }
            return (int)mh$.invokeExact(args, obj, loc_params, connector_id, lcpl_id, lapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLlink_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLlink_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLlink_copy(void *src_obj, const H5VL_loc_params_t *loc_params1, void *dst_obj, const H5VL_loc_params_t *loc_params2, hid_t connector_id, hid_t lcpl_id, hid_t lapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLlink_copy$descriptor() {
        return H5VLlink_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLlink_copy(void *src_obj, const H5VL_loc_params_t *loc_params1, void *dst_obj, const H5VL_loc_params_t *loc_params2, hid_t connector_id, hid_t lcpl_id, hid_t lapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLlink_copy$handle() {
        return H5VLlink_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLlink_copy(void *src_obj, const H5VL_loc_params_t *loc_params1, void *dst_obj, const H5VL_loc_params_t *loc_params2, hid_t connector_id, hid_t lcpl_id, hid_t lapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLlink_copy$address() {
        return H5VLlink_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLlink_copy(void *src_obj, const H5VL_loc_params_t *loc_params1, void *dst_obj, const H5VL_loc_params_t *loc_params2, hid_t connector_id, hid_t lcpl_id, hid_t lapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLlink_copy(MemorySegment src_obj, MemorySegment loc_params1, MemorySegment dst_obj, MemorySegment loc_params2, long connector_id, long lcpl_id, long lapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLlink_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLlink_copy", src_obj, loc_params1, dst_obj, loc_params2, connector_id, lcpl_id, lapl_id, dxpl_id, req);
            }
            return (int)mh$.invokeExact(src_obj, loc_params1, dst_obj, loc_params2, connector_id, lcpl_id, lapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLlink_move {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLlink_move");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLlink_move(void *src_obj, const H5VL_loc_params_t *loc_params1, void *dst_obj, const H5VL_loc_params_t *loc_params2, hid_t connector_id, hid_t lcpl_id, hid_t lapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLlink_move$descriptor() {
        return H5VLlink_move.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLlink_move(void *src_obj, const H5VL_loc_params_t *loc_params1, void *dst_obj, const H5VL_loc_params_t *loc_params2, hid_t connector_id, hid_t lcpl_id, hid_t lapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLlink_move$handle() {
        return H5VLlink_move.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLlink_move(void *src_obj, const H5VL_loc_params_t *loc_params1, void *dst_obj, const H5VL_loc_params_t *loc_params2, hid_t connector_id, hid_t lcpl_id, hid_t lapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLlink_move$address() {
        return H5VLlink_move.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLlink_move(void *src_obj, const H5VL_loc_params_t *loc_params1, void *dst_obj, const H5VL_loc_params_t *loc_params2, hid_t connector_id, hid_t lcpl_id, hid_t lapl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLlink_move(MemorySegment src_obj, MemorySegment loc_params1, MemorySegment dst_obj, MemorySegment loc_params2, long connector_id, long lcpl_id, long lapl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLlink_move.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLlink_move", src_obj, loc_params1, dst_obj, loc_params2, connector_id, lcpl_id, lapl_id, dxpl_id, req);
            }
            return (int)mh$.invokeExact(src_obj, loc_params1, dst_obj, loc_params2, connector_id, lcpl_id, lapl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLlink_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLlink_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLlink_get(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_link_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLlink_get$descriptor() {
        return H5VLlink_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLlink_get(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_link_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLlink_get$handle() {
        return H5VLlink_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLlink_get(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_link_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLlink_get$address() {
        return H5VLlink_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLlink_get(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_link_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLlink_get(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLlink_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLlink_get", obj, loc_params, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, loc_params, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLlink_specific {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLlink_specific");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLlink_specific(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_link_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLlink_specific$descriptor() {
        return H5VLlink_specific.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLlink_specific(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_link_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLlink_specific$handle() {
        return H5VLlink_specific.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLlink_specific(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_link_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLlink_specific$address() {
        return H5VLlink_specific.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLlink_specific(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_link_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLlink_specific(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLlink_specific.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLlink_specific", obj, loc_params, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, loc_params, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLlink_optional {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLlink_optional");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLlink_optional(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLlink_optional$descriptor() {
        return H5VLlink_optional.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLlink_optional(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLlink_optional$handle() {
        return H5VLlink_optional.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLlink_optional(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLlink_optional$address() {
        return H5VLlink_optional.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLlink_optional(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLlink_optional(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLlink_optional.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLlink_optional", obj, loc_params, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, loc_params, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLobject_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLobject_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLobject_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5I_type_t *opened_type, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLobject_open$descriptor() {
        return H5VLobject_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLobject_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5I_type_t *opened_type, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLobject_open$handle() {
        return H5VLobject_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLobject_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5I_type_t *opened_type, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLobject_open$address() {
        return H5VLobject_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *H5VLobject_open(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5I_type_t *opened_type, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLobject_open(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment opened_type, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLobject_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLobject_open", obj, loc_params, connector_id, opened_type, dxpl_id, req);
            }
            return (MemorySegment)mh$.invokeExact(obj, loc_params, connector_id, opened_type, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLobject_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLobject_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLobject_copy(void *src_obj, const H5VL_loc_params_t *loc_params1, const char *src_name, void *dst_obj, const H5VL_loc_params_t *loc_params2, const char *dst_name, hid_t connector_id, hid_t ocpypl_id, hid_t lcpl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLobject_copy$descriptor() {
        return H5VLobject_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLobject_copy(void *src_obj, const H5VL_loc_params_t *loc_params1, const char *src_name, void *dst_obj, const H5VL_loc_params_t *loc_params2, const char *dst_name, hid_t connector_id, hid_t ocpypl_id, hid_t lcpl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLobject_copy$handle() {
        return H5VLobject_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLobject_copy(void *src_obj, const H5VL_loc_params_t *loc_params1, const char *src_name, void *dst_obj, const H5VL_loc_params_t *loc_params2, const char *dst_name, hid_t connector_id, hid_t ocpypl_id, hid_t lcpl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLobject_copy$address() {
        return H5VLobject_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLobject_copy(void *src_obj, const H5VL_loc_params_t *loc_params1, const char *src_name, void *dst_obj, const H5VL_loc_params_t *loc_params2, const char *dst_name, hid_t connector_id, hid_t ocpypl_id, hid_t lcpl_id, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLobject_copy(MemorySegment src_obj, MemorySegment loc_params1, MemorySegment src_name, MemorySegment dst_obj, MemorySegment loc_params2, MemorySegment dst_name, long connector_id, long ocpypl_id, long lcpl_id, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLobject_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLobject_copy", src_obj, loc_params1, src_name, dst_obj, loc_params2, dst_name, connector_id, ocpypl_id, lcpl_id, dxpl_id, req);
            }
            return (int)mh$.invokeExact(src_obj, loc_params1, src_name, dst_obj, loc_params2, dst_name, connector_id, ocpypl_id, lcpl_id, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLobject_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLobject_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLobject_get(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_object_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLobject_get$descriptor() {
        return H5VLobject_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLobject_get(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_object_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLobject_get$handle() {
        return H5VLobject_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLobject_get(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_object_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLobject_get$address() {
        return H5VLobject_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLobject_get(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_object_get_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLobject_get(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLobject_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLobject_get", obj, loc_params, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, loc_params, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLobject_specific {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLobject_specific");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLobject_specific(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_object_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLobject_specific$descriptor() {
        return H5VLobject_specific.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLobject_specific(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_object_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLobject_specific$handle() {
        return H5VLobject_specific.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLobject_specific(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_object_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLobject_specific$address() {
        return H5VLobject_specific.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLobject_specific(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_object_specific_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLobject_specific(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLobject_specific.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLobject_specific", obj, loc_params, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, loc_params, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLobject_optional {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLobject_optional");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLobject_optional(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLobject_optional$descriptor() {
        return H5VLobject_optional.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLobject_optional(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLobject_optional$handle() {
        return H5VLobject_optional.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLobject_optional(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLobject_optional$address() {
        return H5VLobject_optional.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLobject_optional(void *obj, const H5VL_loc_params_t *loc_params, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLobject_optional(MemorySegment obj, MemorySegment loc_params, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLobject_optional.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLobject_optional", obj, loc_params, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, loc_params, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLintrospect_get_conn_cls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLintrospect_get_conn_cls");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLintrospect_get_conn_cls(void *obj, hid_t connector_id, H5VL_get_conn_lvl_t lvl, const H5VL_class_t **conn_cls)
     * }
     */
    public static FunctionDescriptor H5VLintrospect_get_conn_cls$descriptor() {
        return H5VLintrospect_get_conn_cls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLintrospect_get_conn_cls(void *obj, hid_t connector_id, H5VL_get_conn_lvl_t lvl, const H5VL_class_t **conn_cls)
     * }
     */
    public static MethodHandle H5VLintrospect_get_conn_cls$handle() {
        return H5VLintrospect_get_conn_cls.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLintrospect_get_conn_cls(void *obj, hid_t connector_id, H5VL_get_conn_lvl_t lvl, const H5VL_class_t **conn_cls)
     * }
     */
    public static MemorySegment H5VLintrospect_get_conn_cls$address() {
        return H5VLintrospect_get_conn_cls.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLintrospect_get_conn_cls(void *obj, hid_t connector_id, H5VL_get_conn_lvl_t lvl, const H5VL_class_t **conn_cls)
     * }
     */
    public static int H5VLintrospect_get_conn_cls(MemorySegment obj, long connector_id, int lvl, MemorySegment conn_cls) {
        var mh$ = H5VLintrospect_get_conn_cls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLintrospect_get_conn_cls", obj, connector_id, lvl, conn_cls);
            }
            return (int)mh$.invokeExact(obj, connector_id, lvl, conn_cls);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLintrospect_get_cap_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLintrospect_get_cap_flags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLintrospect_get_cap_flags(const void *info, hid_t connector_id, uint64_t *cap_flags)
     * }
     */
    public static FunctionDescriptor H5VLintrospect_get_cap_flags$descriptor() {
        return H5VLintrospect_get_cap_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLintrospect_get_cap_flags(const void *info, hid_t connector_id, uint64_t *cap_flags)
     * }
     */
    public static MethodHandle H5VLintrospect_get_cap_flags$handle() {
        return H5VLintrospect_get_cap_flags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLintrospect_get_cap_flags(const void *info, hid_t connector_id, uint64_t *cap_flags)
     * }
     */
    public static MemorySegment H5VLintrospect_get_cap_flags$address() {
        return H5VLintrospect_get_cap_flags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLintrospect_get_cap_flags(const void *info, hid_t connector_id, uint64_t *cap_flags)
     * }
     */
    public static int H5VLintrospect_get_cap_flags(MemorySegment info, long connector_id, MemorySegment cap_flags) {
        var mh$ = H5VLintrospect_get_cap_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLintrospect_get_cap_flags", info, connector_id, cap_flags);
            }
            return (int)mh$.invokeExact(info, connector_id, cap_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLintrospect_opt_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_INT,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLintrospect_opt_query");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLintrospect_opt_query(void *obj, hid_t connector_id, H5VL_subclass_t subcls, int opt_type, uint64_t *flags)
     * }
     */
    public static FunctionDescriptor H5VLintrospect_opt_query$descriptor() {
        return H5VLintrospect_opt_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLintrospect_opt_query(void *obj, hid_t connector_id, H5VL_subclass_t subcls, int opt_type, uint64_t *flags)
     * }
     */
    public static MethodHandle H5VLintrospect_opt_query$handle() {
        return H5VLintrospect_opt_query.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLintrospect_opt_query(void *obj, hid_t connector_id, H5VL_subclass_t subcls, int opt_type, uint64_t *flags)
     * }
     */
    public static MemorySegment H5VLintrospect_opt_query$address() {
        return H5VLintrospect_opt_query.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLintrospect_opt_query(void *obj, hid_t connector_id, H5VL_subclass_t subcls, int opt_type, uint64_t *flags)
     * }
     */
    public static int H5VLintrospect_opt_query(MemorySegment obj, long connector_id, int subcls, int opt_type, MemorySegment flags) {
        var mh$ = H5VLintrospect_opt_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLintrospect_opt_query", obj, connector_id, subcls, opt_type, flags);
            }
            return (int)mh$.invokeExact(obj, connector_id, subcls, opt_type, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLrequest_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLrequest_wait");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_wait(void *req, hid_t connector_id, uint64_t timeout, H5VL_request_status_t *status)
     * }
     */
    public static FunctionDescriptor H5VLrequest_wait$descriptor() {
        return H5VLrequest_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_wait(void *req, hid_t connector_id, uint64_t timeout, H5VL_request_status_t *status)
     * }
     */
    public static MethodHandle H5VLrequest_wait$handle() {
        return H5VLrequest_wait.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_wait(void *req, hid_t connector_id, uint64_t timeout, H5VL_request_status_t *status)
     * }
     */
    public static MemorySegment H5VLrequest_wait$address() {
        return H5VLrequest_wait.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLrequest_wait(void *req, hid_t connector_id, uint64_t timeout, H5VL_request_status_t *status)
     * }
     */
    public static int H5VLrequest_wait(MemorySegment req, long connector_id, long timeout, MemorySegment status) {
        var mh$ = H5VLrequest_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLrequest_wait", req, connector_id, timeout, status);
            }
            return (int)mh$.invokeExact(req, connector_id, timeout, status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLrequest_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLrequest_notify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_notify(void *req, hid_t connector_id, H5VL_request_notify_t cb, void *ctx)
     * }
     */
    public static FunctionDescriptor H5VLrequest_notify$descriptor() {
        return H5VLrequest_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_notify(void *req, hid_t connector_id, H5VL_request_notify_t cb, void *ctx)
     * }
     */
    public static MethodHandle H5VLrequest_notify$handle() {
        return H5VLrequest_notify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_notify(void *req, hid_t connector_id, H5VL_request_notify_t cb, void *ctx)
     * }
     */
    public static MemorySegment H5VLrequest_notify$address() {
        return H5VLrequest_notify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLrequest_notify(void *req, hid_t connector_id, H5VL_request_notify_t cb, void *ctx)
     * }
     */
    public static int H5VLrequest_notify(MemorySegment req, long connector_id, MemorySegment cb, MemorySegment ctx) {
        var mh$ = H5VLrequest_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLrequest_notify", req, connector_id, cb, ctx);
            }
            return (int)mh$.invokeExact(req, connector_id, cb, ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLrequest_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLrequest_cancel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_cancel(void *req, hid_t connector_id, H5VL_request_status_t *status)
     * }
     */
    public static FunctionDescriptor H5VLrequest_cancel$descriptor() {
        return H5VLrequest_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_cancel(void *req, hid_t connector_id, H5VL_request_status_t *status)
     * }
     */
    public static MethodHandle H5VLrequest_cancel$handle() {
        return H5VLrequest_cancel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_cancel(void *req, hid_t connector_id, H5VL_request_status_t *status)
     * }
     */
    public static MemorySegment H5VLrequest_cancel$address() {
        return H5VLrequest_cancel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLrequest_cancel(void *req, hid_t connector_id, H5VL_request_status_t *status)
     * }
     */
    public static int H5VLrequest_cancel(MemorySegment req, long connector_id, MemorySegment status) {
        var mh$ = H5VLrequest_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLrequest_cancel", req, connector_id, status);
            }
            return (int)mh$.invokeExact(req, connector_id, status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLrequest_specific {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLrequest_specific");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_specific(void *req, hid_t connector_id, H5VL_request_specific_args_t *args)
     * }
     */
    public static FunctionDescriptor H5VLrequest_specific$descriptor() {
        return H5VLrequest_specific.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_specific(void *req, hid_t connector_id, H5VL_request_specific_args_t *args)
     * }
     */
    public static MethodHandle H5VLrequest_specific$handle() {
        return H5VLrequest_specific.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_specific(void *req, hid_t connector_id, H5VL_request_specific_args_t *args)
     * }
     */
    public static MemorySegment H5VLrequest_specific$address() {
        return H5VLrequest_specific.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLrequest_specific(void *req, hid_t connector_id, H5VL_request_specific_args_t *args)
     * }
     */
    public static int H5VLrequest_specific(MemorySegment req, long connector_id, MemorySegment args) {
        var mh$ = H5VLrequest_specific.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLrequest_specific", req, connector_id, args);
            }
            return (int)mh$.invokeExact(req, connector_id, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLrequest_optional {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLrequest_optional");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_optional(void *req, hid_t connector_id, H5VL_optional_args_t *args)
     * }
     */
    public static FunctionDescriptor H5VLrequest_optional$descriptor() {
        return H5VLrequest_optional.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_optional(void *req, hid_t connector_id, H5VL_optional_args_t *args)
     * }
     */
    public static MethodHandle H5VLrequest_optional$handle() {
        return H5VLrequest_optional.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_optional(void *req, hid_t connector_id, H5VL_optional_args_t *args)
     * }
     */
    public static MemorySegment H5VLrequest_optional$address() {
        return H5VLrequest_optional.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLrequest_optional(void *req, hid_t connector_id, H5VL_optional_args_t *args)
     * }
     */
    public static int H5VLrequest_optional(MemorySegment req, long connector_id, MemorySegment args) {
        var mh$ = H5VLrequest_optional.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLrequest_optional", req, connector_id, args);
            }
            return (int)mh$.invokeExact(req, connector_id, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLrequest_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLrequest_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_free(void *req, hid_t connector_id)
     * }
     */
    public static FunctionDescriptor H5VLrequest_free$descriptor() {
        return H5VLrequest_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_free(void *req, hid_t connector_id)
     * }
     */
    public static MethodHandle H5VLrequest_free$handle() {
        return H5VLrequest_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_free(void *req, hid_t connector_id)
     * }
     */
    public static MemorySegment H5VLrequest_free$address() {
        return H5VLrequest_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLrequest_free(void *req, hid_t connector_id)
     * }
     */
    public static int H5VLrequest_free(MemorySegment req, long connector_id) {
        var mh$ = H5VLrequest_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLrequest_free", req, connector_id);
            }
            return (int)mh$.invokeExact(req, connector_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLblob_put {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLblob_put");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLblob_put(void *obj, hid_t connector_id, const void *buf, size_t size, void *blob_id, void *ctx)
     * }
     */
    public static FunctionDescriptor H5VLblob_put$descriptor() {
        return H5VLblob_put.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLblob_put(void *obj, hid_t connector_id, const void *buf, size_t size, void *blob_id, void *ctx)
     * }
     */
    public static MethodHandle H5VLblob_put$handle() {
        return H5VLblob_put.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLblob_put(void *obj, hid_t connector_id, const void *buf, size_t size, void *blob_id, void *ctx)
     * }
     */
    public static MemorySegment H5VLblob_put$address() {
        return H5VLblob_put.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLblob_put(void *obj, hid_t connector_id, const void *buf, size_t size, void *blob_id, void *ctx)
     * }
     */
    public static int H5VLblob_put(MemorySegment obj, long connector_id, MemorySegment buf, long size, MemorySegment blob_id, MemorySegment ctx) {
        var mh$ = H5VLblob_put.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLblob_put", obj, connector_id, buf, size, blob_id, ctx);
            }
            return (int)mh$.invokeExact(obj, connector_id, buf, size, blob_id, ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLblob_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLblob_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLblob_get(void *obj, hid_t connector_id, const void *blob_id, void *buf, size_t size, void *ctx)
     * }
     */
    public static FunctionDescriptor H5VLblob_get$descriptor() {
        return H5VLblob_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLblob_get(void *obj, hid_t connector_id, const void *blob_id, void *buf, size_t size, void *ctx)
     * }
     */
    public static MethodHandle H5VLblob_get$handle() {
        return H5VLblob_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLblob_get(void *obj, hid_t connector_id, const void *blob_id, void *buf, size_t size, void *ctx)
     * }
     */
    public static MemorySegment H5VLblob_get$address() {
        return H5VLblob_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLblob_get(void *obj, hid_t connector_id, const void *blob_id, void *buf, size_t size, void *ctx)
     * }
     */
    public static int H5VLblob_get(MemorySegment obj, long connector_id, MemorySegment blob_id, MemorySegment buf, long size, MemorySegment ctx) {
        var mh$ = H5VLblob_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLblob_get", obj, connector_id, blob_id, buf, size, ctx);
            }
            return (int)mh$.invokeExact(obj, connector_id, blob_id, buf, size, ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLblob_specific {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLblob_specific");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLblob_specific(void *obj, hid_t connector_id, void *blob_id, H5VL_blob_specific_args_t *args)
     * }
     */
    public static FunctionDescriptor H5VLblob_specific$descriptor() {
        return H5VLblob_specific.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLblob_specific(void *obj, hid_t connector_id, void *blob_id, H5VL_blob_specific_args_t *args)
     * }
     */
    public static MethodHandle H5VLblob_specific$handle() {
        return H5VLblob_specific.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLblob_specific(void *obj, hid_t connector_id, void *blob_id, H5VL_blob_specific_args_t *args)
     * }
     */
    public static MemorySegment H5VLblob_specific$address() {
        return H5VLblob_specific.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLblob_specific(void *obj, hid_t connector_id, void *blob_id, H5VL_blob_specific_args_t *args)
     * }
     */
    public static int H5VLblob_specific(MemorySegment obj, long connector_id, MemorySegment blob_id, MemorySegment args) {
        var mh$ = H5VLblob_specific.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLblob_specific", obj, connector_id, blob_id, args);
            }
            return (int)mh$.invokeExact(obj, connector_id, blob_id, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLblob_optional {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLblob_optional");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLblob_optional(void *obj, hid_t connector_id, void *blob_id, H5VL_optional_args_t *args)
     * }
     */
    public static FunctionDescriptor H5VLblob_optional$descriptor() {
        return H5VLblob_optional.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLblob_optional(void *obj, hid_t connector_id, void *blob_id, H5VL_optional_args_t *args)
     * }
     */
    public static MethodHandle H5VLblob_optional$handle() {
        return H5VLblob_optional.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLblob_optional(void *obj, hid_t connector_id, void *blob_id, H5VL_optional_args_t *args)
     * }
     */
    public static MemorySegment H5VLblob_optional$address() {
        return H5VLblob_optional.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLblob_optional(void *obj, hid_t connector_id, void *blob_id, H5VL_optional_args_t *args)
     * }
     */
    public static int H5VLblob_optional(MemorySegment obj, long connector_id, MemorySegment blob_id, MemorySegment args) {
        var mh$ = H5VLblob_optional.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLblob_optional", obj, connector_id, blob_id, args);
            }
            return (int)mh$.invokeExact(obj, connector_id, blob_id, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLtoken_cmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLtoken_cmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLtoken_cmp(void *obj, hid_t connector_id, const H5O_token_t *token1, const H5O_token_t *token2, int *cmp_value)
     * }
     */
    public static FunctionDescriptor H5VLtoken_cmp$descriptor() {
        return H5VLtoken_cmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLtoken_cmp(void *obj, hid_t connector_id, const H5O_token_t *token1, const H5O_token_t *token2, int *cmp_value)
     * }
     */
    public static MethodHandle H5VLtoken_cmp$handle() {
        return H5VLtoken_cmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLtoken_cmp(void *obj, hid_t connector_id, const H5O_token_t *token1, const H5O_token_t *token2, int *cmp_value)
     * }
     */
    public static MemorySegment H5VLtoken_cmp$address() {
        return H5VLtoken_cmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLtoken_cmp(void *obj, hid_t connector_id, const H5O_token_t *token1, const H5O_token_t *token2, int *cmp_value)
     * }
     */
    public static int H5VLtoken_cmp(MemorySegment obj, long connector_id, MemorySegment token1, MemorySegment token2, MemorySegment cmp_value) {
        var mh$ = H5VLtoken_cmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLtoken_cmp", obj, connector_id, token1, token2, cmp_value);
            }
            return (int)mh$.invokeExact(obj, connector_id, token1, token2, cmp_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLtoken_to_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLtoken_to_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLtoken_to_str(void *obj, H5I_type_t obj_type, hid_t connector_id, const H5O_token_t *token, char **token_str)
     * }
     */
    public static FunctionDescriptor H5VLtoken_to_str$descriptor() {
        return H5VLtoken_to_str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLtoken_to_str(void *obj, H5I_type_t obj_type, hid_t connector_id, const H5O_token_t *token, char **token_str)
     * }
     */
    public static MethodHandle H5VLtoken_to_str$handle() {
        return H5VLtoken_to_str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLtoken_to_str(void *obj, H5I_type_t obj_type, hid_t connector_id, const H5O_token_t *token, char **token_str)
     * }
     */
    public static MemorySegment H5VLtoken_to_str$address() {
        return H5VLtoken_to_str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLtoken_to_str(void *obj, H5I_type_t obj_type, hid_t connector_id, const H5O_token_t *token, char **token_str)
     * }
     */
    public static int H5VLtoken_to_str(MemorySegment obj, int obj_type, long connector_id, MemorySegment token, MemorySegment token_str) {
        var mh$ = H5VLtoken_to_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLtoken_to_str", obj, obj_type, connector_id, token, token_str);
            }
            return (int)mh$.invokeExact(obj, obj_type, connector_id, token, token_str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLtoken_from_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLtoken_from_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLtoken_from_str(void *obj, H5I_type_t obj_type, hid_t connector_id, const char *token_str, H5O_token_t *token)
     * }
     */
    public static FunctionDescriptor H5VLtoken_from_str$descriptor() {
        return H5VLtoken_from_str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLtoken_from_str(void *obj, H5I_type_t obj_type, hid_t connector_id, const char *token_str, H5O_token_t *token)
     * }
     */
    public static MethodHandle H5VLtoken_from_str$handle() {
        return H5VLtoken_from_str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLtoken_from_str(void *obj, H5I_type_t obj_type, hid_t connector_id, const char *token_str, H5O_token_t *token)
     * }
     */
    public static MemorySegment H5VLtoken_from_str$address() {
        return H5VLtoken_from_str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLtoken_from_str(void *obj, H5I_type_t obj_type, hid_t connector_id, const char *token_str, H5O_token_t *token)
     * }
     */
    public static int H5VLtoken_from_str(MemorySegment obj, int obj_type, long connector_id, MemorySegment token_str, MemorySegment token) {
        var mh$ = H5VLtoken_from_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLtoken_from_str", obj, obj_type, connector_id, token_str, token);
            }
            return (int)mh$.invokeExact(obj, obj_type, connector_id, token_str, token);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLoptional {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLoptional");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLoptional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static FunctionDescriptor H5VLoptional$descriptor() {
        return H5VLoptional.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLoptional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MethodHandle H5VLoptional$handle() {
        return H5VLoptional.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLoptional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static MemorySegment H5VLoptional$address() {
        return H5VLoptional.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLoptional(void *obj, hid_t connector_id, H5VL_optional_args_t *args, hid_t dxpl_id, void **req)
     * }
     */
    public static int H5VLoptional(MemorySegment obj, long connector_id, MemorySegment args, long dxpl_id, MemorySegment req) {
        var mh$ = H5VLoptional.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLoptional", obj, connector_id, args, dxpl_id, req);
            }
            return (int)mh$.invokeExact(obj, connector_id, args, dxpl_id, req);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VL_NATIVE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5VL_NATIVE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5VL_NATIVE_g
     * }
     */
    public static OfLong H5VL_NATIVE_g$layout() {
        return H5VL_NATIVE_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5VL_NATIVE_g
     * }
     */
    public static MemorySegment H5VL_NATIVE_g$segment() {
        return H5VL_NATIVE_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5VL_NATIVE_g
     * }
     */
    public static long H5VL_NATIVE_g() {
        return H5VL_NATIVE_g$constants.SEGMENT.get(H5VL_NATIVE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5VL_NATIVE_g
     * }
     */
    public static void H5VL_NATIVE_g(long varValue) {
        H5VL_NATIVE_g$constants.SEGMENT.set(H5VL_NATIVE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5VLnative_addr_to_token {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLnative_addr_to_token");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLnative_addr_to_token(hid_t loc_id, haddr_t addr, H5O_token_t *token)
     * }
     */
    public static FunctionDescriptor H5VLnative_addr_to_token$descriptor() {
        return H5VLnative_addr_to_token.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLnative_addr_to_token(hid_t loc_id, haddr_t addr, H5O_token_t *token)
     * }
     */
    public static MethodHandle H5VLnative_addr_to_token$handle() {
        return H5VLnative_addr_to_token.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLnative_addr_to_token(hid_t loc_id, haddr_t addr, H5O_token_t *token)
     * }
     */
    public static MemorySegment H5VLnative_addr_to_token$address() {
        return H5VLnative_addr_to_token.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLnative_addr_to_token(hid_t loc_id, haddr_t addr, H5O_token_t *token)
     * }
     */
    public static int H5VLnative_addr_to_token(long loc_id, long addr, MemorySegment token) {
        var mh$ = H5VLnative_addr_to_token.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLnative_addr_to_token", loc_id, addr, token);
            }
            return (int)mh$.invokeExact(loc_id, addr, token);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLnative_token_to_addr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            H5O_token_t.layout(),
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLnative_token_to_addr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLnative_token_to_addr(hid_t loc_id, H5O_token_t token, haddr_t *addr)
     * }
     */
    public static FunctionDescriptor H5VLnative_token_to_addr$descriptor() {
        return H5VLnative_token_to_addr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLnative_token_to_addr(hid_t loc_id, H5O_token_t token, haddr_t *addr)
     * }
     */
    public static MethodHandle H5VLnative_token_to_addr$handle() {
        return H5VLnative_token_to_addr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLnative_token_to_addr(hid_t loc_id, H5O_token_t token, haddr_t *addr)
     * }
     */
    public static MemorySegment H5VLnative_token_to_addr$address() {
        return H5VLnative_token_to_addr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLnative_token_to_addr(hid_t loc_id, H5O_token_t token, haddr_t *addr)
     * }
     */
    public static int H5VLnative_token_to_addr(long loc_id, MemorySegment token, MemorySegment addr) {
        var mh$ = H5VLnative_token_to_addr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLnative_token_to_addr", loc_id, token, addr);
            }
            return (int)mh$.invokeExact(loc_id, token, addr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FD_core_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG    );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FD_core_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5FD_core_init()
     * }
     */
    public static FunctionDescriptor H5FD_core_init$descriptor() {
        return H5FD_core_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5FD_core_init()
     * }
     */
    public static MethodHandle H5FD_core_init$handle() {
        return H5FD_core_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5FD_core_init()
     * }
     */
    public static MemorySegment H5FD_core_init$address() {
        return H5FD_core_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5FD_core_init()
     * }
     */
    public static long H5FD_core_init() {
        var mh$ = H5FD_core_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FD_core_init");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fapl_core {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_BOOL
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fapl_core");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_core(hid_t fapl_id, size_t increment, hbool_t backing_store)
     * }
     */
    public static FunctionDescriptor H5Pset_fapl_core$descriptor() {
        return H5Pset_fapl_core.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_core(hid_t fapl_id, size_t increment, hbool_t backing_store)
     * }
     */
    public static MethodHandle H5Pset_fapl_core$handle() {
        return H5Pset_fapl_core.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_core(hid_t fapl_id, size_t increment, hbool_t backing_store)
     * }
     */
    public static MemorySegment H5Pset_fapl_core$address() {
        return H5Pset_fapl_core.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_core(hid_t fapl_id, size_t increment, hbool_t backing_store)
     * }
     */
    public static int H5Pset_fapl_core(long fapl_id, long increment, boolean backing_store) {
        var mh$ = H5Pset_fapl_core.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fapl_core", fapl_id, increment, backing_store);
            }
            return (int)mh$.invokeExact(fapl_id, increment, backing_store);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_fapl_core {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_fapl_core");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_core(hid_t fapl_id, size_t *increment, hbool_t *backing_store)
     * }
     */
    public static FunctionDescriptor H5Pget_fapl_core$descriptor() {
        return H5Pget_fapl_core.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_core(hid_t fapl_id, size_t *increment, hbool_t *backing_store)
     * }
     */
    public static MethodHandle H5Pget_fapl_core$handle() {
        return H5Pget_fapl_core.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_core(hid_t fapl_id, size_t *increment, hbool_t *backing_store)
     * }
     */
    public static MemorySegment H5Pget_fapl_core$address() {
        return H5Pget_fapl_core.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_core(hid_t fapl_id, size_t *increment, hbool_t *backing_store)
     * }
     */
    public static int H5Pget_fapl_core(long fapl_id, MemorySegment increment, MemorySegment backing_store) {
        var mh$ = H5Pget_fapl_core.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_fapl_core", fapl_id, increment, backing_store);
            }
            return (int)mh$.invokeExact(fapl_id, increment, backing_store);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FD_family_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG    );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FD_family_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5FD_family_init()
     * }
     */
    public static FunctionDescriptor H5FD_family_init$descriptor() {
        return H5FD_family_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5FD_family_init()
     * }
     */
    public static MethodHandle H5FD_family_init$handle() {
        return H5FD_family_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5FD_family_init()
     * }
     */
    public static MemorySegment H5FD_family_init$address() {
        return H5FD_family_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5FD_family_init()
     * }
     */
    public static long H5FD_family_init() {
        var mh$ = H5FD_family_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FD_family_init");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fapl_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fapl_family");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_family(hid_t fapl_id, hsize_t memb_size, hid_t memb_fapl_id)
     * }
     */
    public static FunctionDescriptor H5Pset_fapl_family$descriptor() {
        return H5Pset_fapl_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_family(hid_t fapl_id, hsize_t memb_size, hid_t memb_fapl_id)
     * }
     */
    public static MethodHandle H5Pset_fapl_family$handle() {
        return H5Pset_fapl_family.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_family(hid_t fapl_id, hsize_t memb_size, hid_t memb_fapl_id)
     * }
     */
    public static MemorySegment H5Pset_fapl_family$address() {
        return H5Pset_fapl_family.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_family(hid_t fapl_id, hsize_t memb_size, hid_t memb_fapl_id)
     * }
     */
    public static int H5Pset_fapl_family(long fapl_id, long memb_size, long memb_fapl_id) {
        var mh$ = H5Pset_fapl_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fapl_family", fapl_id, memb_size, memb_fapl_id);
            }
            return (int)mh$.invokeExact(fapl_id, memb_size, memb_fapl_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_fapl_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_fapl_family");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_family(hid_t fapl_id, hsize_t *memb_size, hid_t *memb_fapl_id)
     * }
     */
    public static FunctionDescriptor H5Pget_fapl_family$descriptor() {
        return H5Pget_fapl_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_family(hid_t fapl_id, hsize_t *memb_size, hid_t *memb_fapl_id)
     * }
     */
    public static MethodHandle H5Pget_fapl_family$handle() {
        return H5Pget_fapl_family.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_family(hid_t fapl_id, hsize_t *memb_size, hid_t *memb_fapl_id)
     * }
     */
    public static MemorySegment H5Pget_fapl_family$address() {
        return H5Pget_fapl_family.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_family(hid_t fapl_id, hsize_t *memb_size, hid_t *memb_fapl_id)
     * }
     */
    public static int H5Pget_fapl_family(long fapl_id, MemorySegment memb_size, MemorySegment memb_fapl_id) {
        var mh$ = H5Pget_fapl_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_fapl_family", fapl_id, memb_size, memb_fapl_id);
            }
            return (int)mh$.invokeExact(fapl_id, memb_size, memb_fapl_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FD_log_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG    );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FD_log_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5FD_log_init()
     * }
     */
    public static FunctionDescriptor H5FD_log_init$descriptor() {
        return H5FD_log_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5FD_log_init()
     * }
     */
    public static MethodHandle H5FD_log_init$handle() {
        return H5FD_log_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5FD_log_init()
     * }
     */
    public static MemorySegment H5FD_log_init$address() {
        return H5FD_log_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5FD_log_init()
     * }
     */
    public static long H5FD_log_init() {
        var mh$ = H5FD_log_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FD_log_init");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fapl_log {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG_LONG,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fapl_log");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_log(hid_t fapl_id, const char *logfile, unsigned long long flags, size_t buf_size)
     * }
     */
    public static FunctionDescriptor H5Pset_fapl_log$descriptor() {
        return H5Pset_fapl_log.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_log(hid_t fapl_id, const char *logfile, unsigned long long flags, size_t buf_size)
     * }
     */
    public static MethodHandle H5Pset_fapl_log$handle() {
        return H5Pset_fapl_log.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_log(hid_t fapl_id, const char *logfile, unsigned long long flags, size_t buf_size)
     * }
     */
    public static MemorySegment H5Pset_fapl_log$address() {
        return H5Pset_fapl_log.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_log(hid_t fapl_id, const char *logfile, unsigned long long flags, size_t buf_size)
     * }
     */
    public static int H5Pset_fapl_log(long fapl_id, MemorySegment logfile, long flags, long buf_size) {
        var mh$ = H5Pset_fapl_log.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fapl_log", fapl_id, logfile, flags, buf_size);
            }
            return (int)mh$.invokeExact(fapl_id, logfile, flags, buf_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5FD_MPIO_INDEPENDENT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5FD_mpio_xfer_t.H5FD_MPIO_INDEPENDENT = 0
     * }
     */
    public static int H5FD_MPIO_INDEPENDENT() {
        return H5FD_MPIO_INDEPENDENT;
    }
    private static final int H5FD_MPIO_COLLECTIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5FD_mpio_xfer_t.H5FD_MPIO_COLLECTIVE = 1
     * }
     */
    public static int H5FD_MPIO_COLLECTIVE() {
        return H5FD_MPIO_COLLECTIVE;
    }
    private static final int H5FD_MPIO_CHUNK_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5FD_mpio_chunk_opt_t.H5FD_MPIO_CHUNK_DEFAULT = 0
     * }
     */
    public static int H5FD_MPIO_CHUNK_DEFAULT() {
        return H5FD_MPIO_CHUNK_DEFAULT;
    }
    private static final int H5FD_MPIO_CHUNK_ONE_IO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5FD_mpio_chunk_opt_t.H5FD_MPIO_CHUNK_ONE_IO = 1
     * }
     */
    public static int H5FD_MPIO_CHUNK_ONE_IO() {
        return H5FD_MPIO_CHUNK_ONE_IO;
    }
    private static final int H5FD_MPIO_CHUNK_MULTI_IO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5FD_mpio_chunk_opt_t.H5FD_MPIO_CHUNK_MULTI_IO = 2
     * }
     */
    public static int H5FD_MPIO_CHUNK_MULTI_IO() {
        return H5FD_MPIO_CHUNK_MULTI_IO;
    }
    private static final int H5FD_MPIO_COLLECTIVE_IO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5FD_mpio_collective_opt_t.H5FD_MPIO_COLLECTIVE_IO = 0
     * }
     */
    public static int H5FD_MPIO_COLLECTIVE_IO() {
        return H5FD_MPIO_COLLECTIVE_IO;
    }
    private static final int H5FD_MPIO_INDIVIDUAL_IO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5FD_mpio_collective_opt_t.H5FD_MPIO_INDIVIDUAL_IO = 1
     * }
     */
    public static int H5FD_MPIO_INDIVIDUAL_IO() {
        return H5FD_MPIO_INDIVIDUAL_IO;
    }

    private static class H5FD_multi_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG    );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FD_multi_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5FD_multi_init()
     * }
     */
    public static FunctionDescriptor H5FD_multi_init$descriptor() {
        return H5FD_multi_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5FD_multi_init()
     * }
     */
    public static MethodHandle H5FD_multi_init$handle() {
        return H5FD_multi_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5FD_multi_init()
     * }
     */
    public static MemorySegment H5FD_multi_init$address() {
        return H5FD_multi_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5FD_multi_init()
     * }
     */
    public static long H5FD_multi_init() {
        var mh$ = H5FD_multi_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FD_multi_init");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fapl_multi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_BOOL
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fapl_multi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_multi(hid_t fapl_id, const H5FD_mem_t *memb_map, const hid_t *memb_fapl, const char *const *memb_name, const haddr_t *memb_addr, hbool_t relax)
     * }
     */
    public static FunctionDescriptor H5Pset_fapl_multi$descriptor() {
        return H5Pset_fapl_multi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_multi(hid_t fapl_id, const H5FD_mem_t *memb_map, const hid_t *memb_fapl, const char *const *memb_name, const haddr_t *memb_addr, hbool_t relax)
     * }
     */
    public static MethodHandle H5Pset_fapl_multi$handle() {
        return H5Pset_fapl_multi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_multi(hid_t fapl_id, const H5FD_mem_t *memb_map, const hid_t *memb_fapl, const char *const *memb_name, const haddr_t *memb_addr, hbool_t relax)
     * }
     */
    public static MemorySegment H5Pset_fapl_multi$address() {
        return H5Pset_fapl_multi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_multi(hid_t fapl_id, const H5FD_mem_t *memb_map, const hid_t *memb_fapl, const char *const *memb_name, const haddr_t *memb_addr, hbool_t relax)
     * }
     */
    public static int H5Pset_fapl_multi(long fapl_id, MemorySegment memb_map, MemorySegment memb_fapl, MemorySegment memb_name, MemorySegment memb_addr, boolean relax) {
        var mh$ = H5Pset_fapl_multi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fapl_multi", fapl_id, memb_map, memb_fapl, memb_name, memb_addr, relax);
            }
            return (int)mh$.invokeExact(fapl_id, memb_map, memb_fapl, memb_name, memb_addr, relax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_fapl_multi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_fapl_multi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_multi(hid_t fapl_id, H5FD_mem_t *memb_map, hid_t *memb_fapl, char **memb_name, haddr_t *memb_addr, hbool_t *relax)
     * }
     */
    public static FunctionDescriptor H5Pget_fapl_multi$descriptor() {
        return H5Pget_fapl_multi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_multi(hid_t fapl_id, H5FD_mem_t *memb_map, hid_t *memb_fapl, char **memb_name, haddr_t *memb_addr, hbool_t *relax)
     * }
     */
    public static MethodHandle H5Pget_fapl_multi$handle() {
        return H5Pget_fapl_multi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_multi(hid_t fapl_id, H5FD_mem_t *memb_map, hid_t *memb_fapl, char **memb_name, haddr_t *memb_addr, hbool_t *relax)
     * }
     */
    public static MemorySegment H5Pget_fapl_multi$address() {
        return H5Pget_fapl_multi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_multi(hid_t fapl_id, H5FD_mem_t *memb_map, hid_t *memb_fapl, char **memb_name, haddr_t *memb_addr, hbool_t *relax)
     * }
     */
    public static int H5Pget_fapl_multi(long fapl_id, MemorySegment memb_map, MemorySegment memb_fapl, MemorySegment memb_name, MemorySegment memb_addr, MemorySegment relax) {
        var mh$ = H5Pget_fapl_multi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_fapl_multi", fapl_id, memb_map, memb_fapl, memb_name, memb_addr, relax);
            }
            return (int)mh$.invokeExact(fapl_id, memb_map, memb_fapl, memb_name, memb_addr, relax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fapl_split {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fapl_split");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_split(hid_t fapl, const char *meta_ext, hid_t meta_plist_id, const char *raw_ext, hid_t raw_plist_id)
     * }
     */
    public static FunctionDescriptor H5Pset_fapl_split$descriptor() {
        return H5Pset_fapl_split.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_split(hid_t fapl, const char *meta_ext, hid_t meta_plist_id, const char *raw_ext, hid_t raw_plist_id)
     * }
     */
    public static MethodHandle H5Pset_fapl_split$handle() {
        return H5Pset_fapl_split.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_split(hid_t fapl, const char *meta_ext, hid_t meta_plist_id, const char *raw_ext, hid_t raw_plist_id)
     * }
     */
    public static MemorySegment H5Pset_fapl_split$address() {
        return H5Pset_fapl_split.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_split(hid_t fapl, const char *meta_ext, hid_t meta_plist_id, const char *raw_ext, hid_t raw_plist_id)
     * }
     */
    public static int H5Pset_fapl_split(long fapl, MemorySegment meta_ext, long meta_plist_id, MemorySegment raw_ext, long raw_plist_id) {
        var mh$ = H5Pset_fapl_split.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fapl_split", fapl, meta_ext, meta_plist_id, raw_ext, raw_plist_id);
            }
            return (int)mh$.invokeExact(fapl, meta_ext, meta_plist_id, raw_ext, raw_plist_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5FD_ONION_STORE_TARGET_ONION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5FD_onion_target_file_constant_t.H5FD_ONION_STORE_TARGET_ONION = 0
     * }
     */
    public static int H5FD_ONION_STORE_TARGET_ONION() {
        return H5FD_ONION_STORE_TARGET_ONION;
    }

    private static class H5FD_onion_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG    );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FD_onion_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5FD_onion_init()
     * }
     */
    public static FunctionDescriptor H5FD_onion_init$descriptor() {
        return H5FD_onion_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5FD_onion_init()
     * }
     */
    public static MethodHandle H5FD_onion_init$handle() {
        return H5FD_onion_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5FD_onion_init()
     * }
     */
    public static MemorySegment H5FD_onion_init$address() {
        return H5FD_onion_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5FD_onion_init()
     * }
     */
    public static long H5FD_onion_init() {
        var mh$ = H5FD_onion_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FD_onion_init");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_fapl_onion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_fapl_onion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_onion(hid_t fapl_id, H5FD_onion_fapl_info_t *fa_out)
     * }
     */
    public static FunctionDescriptor H5Pget_fapl_onion$descriptor() {
        return H5Pget_fapl_onion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_onion(hid_t fapl_id, H5FD_onion_fapl_info_t *fa_out)
     * }
     */
    public static MethodHandle H5Pget_fapl_onion$handle() {
        return H5Pget_fapl_onion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_onion(hid_t fapl_id, H5FD_onion_fapl_info_t *fa_out)
     * }
     */
    public static MemorySegment H5Pget_fapl_onion$address() {
        return H5Pget_fapl_onion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_onion(hid_t fapl_id, H5FD_onion_fapl_info_t *fa_out)
     * }
     */
    public static int H5Pget_fapl_onion(long fapl_id, MemorySegment fa_out) {
        var mh$ = H5Pget_fapl_onion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_fapl_onion", fapl_id, fa_out);
            }
            return (int)mh$.invokeExact(fapl_id, fa_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fapl_onion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fapl_onion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_onion(hid_t fapl_id, const H5FD_onion_fapl_info_t *fa)
     * }
     */
    public static FunctionDescriptor H5Pset_fapl_onion$descriptor() {
        return H5Pset_fapl_onion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_onion(hid_t fapl_id, const H5FD_onion_fapl_info_t *fa)
     * }
     */
    public static MethodHandle H5Pset_fapl_onion$handle() {
        return H5Pset_fapl_onion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_onion(hid_t fapl_id, const H5FD_onion_fapl_info_t *fa)
     * }
     */
    public static MemorySegment H5Pset_fapl_onion$address() {
        return H5Pset_fapl_onion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_onion(hid_t fapl_id, const H5FD_onion_fapl_info_t *fa)
     * }
     */
    public static int H5Pset_fapl_onion(long fapl_id, MemorySegment fa) {
        var mh$ = H5Pset_fapl_onion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fapl_onion", fapl_id, fa);
            }
            return (int)mh$.invokeExact(fapl_id, fa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FDonion_get_revision_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDonion_get_revision_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDonion_get_revision_count(const char *filename, hid_t fapl_id, uint64_t *revision_count)
     * }
     */
    public static FunctionDescriptor H5FDonion_get_revision_count$descriptor() {
        return H5FDonion_get_revision_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDonion_get_revision_count(const char *filename, hid_t fapl_id, uint64_t *revision_count)
     * }
     */
    public static MethodHandle H5FDonion_get_revision_count$handle() {
        return H5FDonion_get_revision_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDonion_get_revision_count(const char *filename, hid_t fapl_id, uint64_t *revision_count)
     * }
     */
    public static MemorySegment H5FDonion_get_revision_count$address() {
        return H5FDonion_get_revision_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5FDonion_get_revision_count(const char *filename, hid_t fapl_id, uint64_t *revision_count)
     * }
     */
    public static int H5FDonion_get_revision_count(MemorySegment filename, long fapl_id, MemorySegment revision_count) {
        var mh$ = H5FDonion_get_revision_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDonion_get_revision_count", filename, fapl_id, revision_count);
            }
            return (int)mh$.invokeExact(filename, fapl_id, revision_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FD_sec2_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG    );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FD_sec2_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5FD_sec2_init()
     * }
     */
    public static FunctionDescriptor H5FD_sec2_init$descriptor() {
        return H5FD_sec2_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5FD_sec2_init()
     * }
     */
    public static MethodHandle H5FD_sec2_init$handle() {
        return H5FD_sec2_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5FD_sec2_init()
     * }
     */
    public static MemorySegment H5FD_sec2_init$address() {
        return H5FD_sec2_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5FD_sec2_init()
     * }
     */
    public static long H5FD_sec2_init() {
        var mh$ = H5FD_sec2_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FD_sec2_init");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fapl_sec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fapl_sec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_sec2(hid_t fapl_id)
     * }
     */
    public static FunctionDescriptor H5Pset_fapl_sec2$descriptor() {
        return H5Pset_fapl_sec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_sec2(hid_t fapl_id)
     * }
     */
    public static MethodHandle H5Pset_fapl_sec2$handle() {
        return H5Pset_fapl_sec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_sec2(hid_t fapl_id)
     * }
     */
    public static MemorySegment H5Pset_fapl_sec2$address() {
        return H5Pset_fapl_sec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_sec2(hid_t fapl_id)
     * }
     */
    public static int H5Pset_fapl_sec2(long fapl_id) {
        var mh$ = H5Pset_fapl_sec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fapl_sec2", fapl_id);
            }
            return (int)mh$.invokeExact(fapl_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FD_splitter_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG    );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FD_splitter_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5FD_splitter_init()
     * }
     */
    public static FunctionDescriptor H5FD_splitter_init$descriptor() {
        return H5FD_splitter_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5FD_splitter_init()
     * }
     */
    public static MethodHandle H5FD_splitter_init$handle() {
        return H5FD_splitter_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5FD_splitter_init()
     * }
     */
    public static MemorySegment H5FD_splitter_init$address() {
        return H5FD_splitter_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5FD_splitter_init()
     * }
     */
    public static long H5FD_splitter_init() {
        var mh$ = H5FD_splitter_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FD_splitter_init");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fapl_splitter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fapl_splitter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_splitter(hid_t fapl_id, H5FD_splitter_vfd_config_t *config_ptr)
     * }
     */
    public static FunctionDescriptor H5Pset_fapl_splitter$descriptor() {
        return H5Pset_fapl_splitter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_splitter(hid_t fapl_id, H5FD_splitter_vfd_config_t *config_ptr)
     * }
     */
    public static MethodHandle H5Pset_fapl_splitter$handle() {
        return H5Pset_fapl_splitter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_splitter(hid_t fapl_id, H5FD_splitter_vfd_config_t *config_ptr)
     * }
     */
    public static MemorySegment H5Pset_fapl_splitter$address() {
        return H5Pset_fapl_splitter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_splitter(hid_t fapl_id, H5FD_splitter_vfd_config_t *config_ptr)
     * }
     */
    public static int H5Pset_fapl_splitter(long fapl_id, MemorySegment config_ptr) {
        var mh$ = H5Pset_fapl_splitter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fapl_splitter", fapl_id, config_ptr);
            }
            return (int)mh$.invokeExact(fapl_id, config_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pget_fapl_splitter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pget_fapl_splitter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_splitter(hid_t fapl_id, H5FD_splitter_vfd_config_t *config_ptr)
     * }
     */
    public static FunctionDescriptor H5Pget_fapl_splitter$descriptor() {
        return H5Pget_fapl_splitter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_splitter(hid_t fapl_id, H5FD_splitter_vfd_config_t *config_ptr)
     * }
     */
    public static MethodHandle H5Pget_fapl_splitter$handle() {
        return H5Pget_fapl_splitter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_splitter(hid_t fapl_id, H5FD_splitter_vfd_config_t *config_ptr)
     * }
     */
    public static MemorySegment H5Pget_fapl_splitter$address() {
        return H5Pget_fapl_splitter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pget_fapl_splitter(hid_t fapl_id, H5FD_splitter_vfd_config_t *config_ptr)
     * }
     */
    public static int H5Pget_fapl_splitter(long fapl_id, MemorySegment config_ptr) {
        var mh$ = H5Pget_fapl_splitter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pget_fapl_splitter", fapl_id, config_ptr);
            }
            return (int)mh$.invokeExact(fapl_id, config_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5FD_stdio_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG    );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FD_stdio_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5FD_stdio_init()
     * }
     */
    public static FunctionDescriptor H5FD_stdio_init$descriptor() {
        return H5FD_stdio_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5FD_stdio_init()
     * }
     */
    public static MethodHandle H5FD_stdio_init$handle() {
        return H5FD_stdio_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5FD_stdio_init()
     * }
     */
    public static MemorySegment H5FD_stdio_init$address() {
        return H5FD_stdio_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5FD_stdio_init()
     * }
     */
    public static long H5FD_stdio_init() {
        var mh$ = H5FD_stdio_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FD_stdio_init");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Pset_fapl_stdio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_LONG
        );

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Pset_fapl_stdio");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_stdio(hid_t fapl_id)
     * }
     */
    public static FunctionDescriptor H5Pset_fapl_stdio$descriptor() {
        return H5Pset_fapl_stdio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_stdio(hid_t fapl_id)
     * }
     */
    public static MethodHandle H5Pset_fapl_stdio$handle() {
        return H5Pset_fapl_stdio.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_stdio(hid_t fapl_id)
     * }
     */
    public static MemorySegment H5Pset_fapl_stdio$address() {
        return H5Pset_fapl_stdio.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Pset_fapl_stdio(hid_t fapl_id)
     * }
     */
    public static int H5Pset_fapl_stdio(long fapl_id) {
        var mh$ = H5Pset_fapl_stdio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Pset_fapl_stdio", fapl_id);
            }
            return (int)mh$.invokeExact(fapl_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VL_PASSTHRU_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT = hdf5_h.findOrThrow("H5VL_PASSTHRU_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5VL_PASSTHRU_g
     * }
     */
    public static OfLong H5VL_PASSTHRU_g$layout() {
        return H5VL_PASSTHRU_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5VL_PASSTHRU_g
     * }
     */
    public static MemorySegment H5VL_PASSTHRU_g$segment() {
        return H5VL_PASSTHRU_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5VL_PASSTHRU_g
     * }
     */
    public static long H5VL_PASSTHRU_g() {
        return H5VL_PASSTHRU_g$constants.SEGMENT.get(H5VL_PASSTHRU_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5VL_PASSTHRU_g
     * }
     */
    public static void H5VL_PASSTHRU_g(long varValue) {
        H5VL_PASSTHRU_g$constants.SEGMENT.set(H5VL_PASSTHRU_g$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * #define H5_DEFAULT_PLUGINDIR "/usr/local/hdf5/lib/plugin"
     * }
     */
    public static MemorySegment H5_DEFAULT_PLUGINDIR() {
        class Holder {
            static final MemorySegment H5_DEFAULT_PLUGINDIR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("/usr/local/hdf5/lib/plugin");
        }
        return Holder.H5_DEFAULT_PLUGINDIR;
    }
    /**
     * {@snippet lang=c :
     * #define H5_PACKAGE "hdf5"
     * }
     */
    public static MemorySegment H5_PACKAGE() {
        class Holder {
            static final MemorySegment H5_PACKAGE
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hdf5");
        }
        return Holder.H5_PACKAGE;
    }
    /**
     * {@snippet lang=c :
     * #define H5_PACKAGE_BUGREPORT "help@hdfgroup.org"
     * }
     */
    public static MemorySegment H5_PACKAGE_BUGREPORT() {
        class Holder {
            static final MemorySegment H5_PACKAGE_BUGREPORT
                = hdf5_h.LIBRARY_ARENA.allocateFrom("help@hdfgroup.org");
        }
        return Holder.H5_PACKAGE_BUGREPORT;
    }
    /**
     * {@snippet lang=c :
     * #define H5_PACKAGE_NAME "HDF5"
     * }
     */
    public static MemorySegment H5_PACKAGE_NAME() {
        class Holder {
            static final MemorySegment H5_PACKAGE_NAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("HDF5");
        }
        return Holder.H5_PACKAGE_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define H5_PACKAGE_STRING "HDF5 1.17.0"
     * }
     */
    public static MemorySegment H5_PACKAGE_STRING() {
        class Holder {
            static final MemorySegment H5_PACKAGE_STRING
                = hdf5_h.LIBRARY_ARENA.allocateFrom("HDF5 1.17.0");
        }
        return Holder.H5_PACKAGE_STRING;
    }
    /**
     * {@snippet lang=c :
     * #define H5_PACKAGE_TARNAME "hdf5"
     * }
     */
    public static MemorySegment H5_PACKAGE_TARNAME() {
        class Holder {
            static final MemorySegment H5_PACKAGE_TARNAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hdf5");
        }
        return Holder.H5_PACKAGE_TARNAME;
    }
    /**
     * {@snippet lang=c :
     * #define H5_PACKAGE_URL "http://www.hdfgroup.org"
     * }
     */
    public static MemorySegment H5_PACKAGE_URL() {
        class Holder {
            static final MemorySegment H5_PACKAGE_URL
                = hdf5_h.LIBRARY_ARENA.allocateFrom("http://www.hdfgroup.org");
        }
        return Holder.H5_PACKAGE_URL;
    }
    /**
     * {@snippet lang=c :
     * #define H5_PACKAGE_VERSION "1.17.0"
     * }
     */
    public static MemorySegment H5_PACKAGE_VERSION() {
        class Holder {
            static final MemorySegment H5_PACKAGE_VERSION
                = hdf5_h.LIBRARY_ARENA.allocateFrom("1.17.0");
        }
        return Holder.H5_PACKAGE_VERSION;
    }
    /**
     * {@snippet lang=c :
     * #define H5_VERSION "1.17.0"
     * }
     */
    public static MemorySegment H5_VERSION() {
        class Holder {
            static final MemorySegment H5_VERSION
                = hdf5_h.LIBRARY_ARENA.allocateFrom("1.17.0");
        }
        return Holder.H5_VERSION;
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int __WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    /**
     * {@snippet lang=c :
     * #define __PRI64_PREFIX "l"
     * }
     */
    public static MemorySegment __PRI64_PREFIX() {
        class Holder {
            static final MemorySegment __PRI64_PREFIX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("l");
        }
        return Holder.__PRI64_PREFIX;
    }
    /**
     * {@snippet lang=c :
     * #define __PRIPTR_PREFIX "l"
     * }
     */
    public static MemorySegment __PRIPTR_PREFIX() {
        class Holder {
            static final MemorySegment __PRIPTR_PREFIX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("l");
        }
        return Holder.__PRIPTR_PREFIX;
    }
    /**
     * {@snippet lang=c :
     * #define PRId8 "d"
     * }
     */
    public static MemorySegment PRId8() {
        class Holder {
            static final MemorySegment PRId8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRId8;
    }
    /**
     * {@snippet lang=c :
     * #define PRId16 "d"
     * }
     */
    public static MemorySegment PRId16() {
        class Holder {
            static final MemorySegment PRId16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRId16;
    }
    /**
     * {@snippet lang=c :
     * #define PRId32 "d"
     * }
     */
    public static MemorySegment PRId32() {
        class Holder {
            static final MemorySegment PRId32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRId32;
    }
    /**
     * {@snippet lang=c :
     * #define PRId64 "ld"
     * }
     */
    public static MemorySegment PRId64() {
        class Holder {
            static final MemorySegment PRId64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRId64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST8 "d"
     * }
     */
    public static MemorySegment PRIdLEAST8() {
        class Holder {
            static final MemorySegment PRIdLEAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST16 "d"
     * }
     */
    public static MemorySegment PRIdLEAST16() {
        class Holder {
            static final MemorySegment PRIdLEAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST32 "d"
     * }
     */
    public static MemorySegment PRIdLEAST32() {
        class Holder {
            static final MemorySegment PRIdLEAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST64 "ld"
     * }
     */
    public static MemorySegment PRIdLEAST64() {
        class Holder {
            static final MemorySegment PRIdLEAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST8 "d"
     * }
     */
    public static MemorySegment PRIdFAST8() {
        class Holder {
            static final MemorySegment PRIdFAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST16 "ld"
     * }
     */
    public static MemorySegment PRIdFAST16() {
        class Holder {
            static final MemorySegment PRIdFAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST32 "ld"
     * }
     */
    public static MemorySegment PRIdFAST32() {
        class Holder {
            static final MemorySegment PRIdFAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST64 "ld"
     * }
     */
    public static MemorySegment PRIdFAST64() {
        class Holder {
            static final MemorySegment PRIdFAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi8 "i"
     * }
     */
    public static MemorySegment PRIi8() {
        class Holder {
            static final MemorySegment PRIi8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIi8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi16 "i"
     * }
     */
    public static MemorySegment PRIi16() {
        class Holder {
            static final MemorySegment PRIi16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIi16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi32 "i"
     * }
     */
    public static MemorySegment PRIi32() {
        class Holder {
            static final MemorySegment PRIi32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIi32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi64 "li"
     * }
     */
    public static MemorySegment PRIi64() {
        class Holder {
            static final MemorySegment PRIi64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIi64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST8 "i"
     * }
     */
    public static MemorySegment PRIiLEAST8() {
        class Holder {
            static final MemorySegment PRIiLEAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST16 "i"
     * }
     */
    public static MemorySegment PRIiLEAST16() {
        class Holder {
            static final MemorySegment PRIiLEAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST32 "i"
     * }
     */
    public static MemorySegment PRIiLEAST32() {
        class Holder {
            static final MemorySegment PRIiLEAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST64 "li"
     * }
     */
    public static MemorySegment PRIiLEAST64() {
        class Holder {
            static final MemorySegment PRIiLEAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST8 "i"
     * }
     */
    public static MemorySegment PRIiFAST8() {
        class Holder {
            static final MemorySegment PRIiFAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST16 "li"
     * }
     */
    public static MemorySegment PRIiFAST16() {
        class Holder {
            static final MemorySegment PRIiFAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST32 "li"
     * }
     */
    public static MemorySegment PRIiFAST32() {
        class Holder {
            static final MemorySegment PRIiFAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST64 "li"
     * }
     */
    public static MemorySegment PRIiFAST64() {
        class Holder {
            static final MemorySegment PRIiFAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo8 "o"
     * }
     */
    public static MemorySegment PRIo8() {
        class Holder {
            static final MemorySegment PRIo8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIo8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo16 "o"
     * }
     */
    public static MemorySegment PRIo16() {
        class Holder {
            static final MemorySegment PRIo16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIo16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo32 "o"
     * }
     */
    public static MemorySegment PRIo32() {
        class Holder {
            static final MemorySegment PRIo32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIo32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo64 "lo"
     * }
     */
    public static MemorySegment PRIo64() {
        class Holder {
            static final MemorySegment PRIo64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIo64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST8 "o"
     * }
     */
    public static MemorySegment PRIoLEAST8() {
        class Holder {
            static final MemorySegment PRIoLEAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST16 "o"
     * }
     */
    public static MemorySegment PRIoLEAST16() {
        class Holder {
            static final MemorySegment PRIoLEAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST32 "o"
     * }
     */
    public static MemorySegment PRIoLEAST32() {
        class Holder {
            static final MemorySegment PRIoLEAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST64 "lo"
     * }
     */
    public static MemorySegment PRIoLEAST64() {
        class Holder {
            static final MemorySegment PRIoLEAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST8 "o"
     * }
     */
    public static MemorySegment PRIoFAST8() {
        class Holder {
            static final MemorySegment PRIoFAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST16 "lo"
     * }
     */
    public static MemorySegment PRIoFAST16() {
        class Holder {
            static final MemorySegment PRIoFAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST32 "lo"
     * }
     */
    public static MemorySegment PRIoFAST32() {
        class Holder {
            static final MemorySegment PRIoFAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST64 "lo"
     * }
     */
    public static MemorySegment PRIoFAST64() {
        class Holder {
            static final MemorySegment PRIoFAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu8 "u"
     * }
     */
    public static MemorySegment PRIu8() {
        class Holder {
            static final MemorySegment PRIu8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIu8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu16 "u"
     * }
     */
    public static MemorySegment PRIu16() {
        class Holder {
            static final MemorySegment PRIu16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIu16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu32 "u"
     * }
     */
    public static MemorySegment PRIu32() {
        class Holder {
            static final MemorySegment PRIu32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIu32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu64 "lu"
     * }
     */
    public static MemorySegment PRIu64() {
        class Holder {
            static final MemorySegment PRIu64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIu64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST8 "u"
     * }
     */
    public static MemorySegment PRIuLEAST8() {
        class Holder {
            static final MemorySegment PRIuLEAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST16 "u"
     * }
     */
    public static MemorySegment PRIuLEAST16() {
        class Holder {
            static final MemorySegment PRIuLEAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST32 "u"
     * }
     */
    public static MemorySegment PRIuLEAST32() {
        class Holder {
            static final MemorySegment PRIuLEAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST64 "lu"
     * }
     */
    public static MemorySegment PRIuLEAST64() {
        class Holder {
            static final MemorySegment PRIuLEAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST8 "u"
     * }
     */
    public static MemorySegment PRIuFAST8() {
        class Holder {
            static final MemorySegment PRIuFAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST16 "lu"
     * }
     */
    public static MemorySegment PRIuFAST16() {
        class Holder {
            static final MemorySegment PRIuFAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST32 "lu"
     * }
     */
    public static MemorySegment PRIuFAST32() {
        class Holder {
            static final MemorySegment PRIuFAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST64 "lu"
     * }
     */
    public static MemorySegment PRIuFAST64() {
        class Holder {
            static final MemorySegment PRIuFAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx8 "x"
     * }
     */
    public static MemorySegment PRIx8() {
        class Holder {
            static final MemorySegment PRIx8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIx8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx16 "x"
     * }
     */
    public static MemorySegment PRIx16() {
        class Holder {
            static final MemorySegment PRIx16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIx16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx32 "x"
     * }
     */
    public static MemorySegment PRIx32() {
        class Holder {
            static final MemorySegment PRIx32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIx32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx64 "lx"
     * }
     */
    public static MemorySegment PRIx64() {
        class Holder {
            static final MemorySegment PRIx64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIx64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST8 "x"
     * }
     */
    public static MemorySegment PRIxLEAST8() {
        class Holder {
            static final MemorySegment PRIxLEAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST16 "x"
     * }
     */
    public static MemorySegment PRIxLEAST16() {
        class Holder {
            static final MemorySegment PRIxLEAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST32 "x"
     * }
     */
    public static MemorySegment PRIxLEAST32() {
        class Holder {
            static final MemorySegment PRIxLEAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST64 "lx"
     * }
     */
    public static MemorySegment PRIxLEAST64() {
        class Holder {
            static final MemorySegment PRIxLEAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST8 "x"
     * }
     */
    public static MemorySegment PRIxFAST8() {
        class Holder {
            static final MemorySegment PRIxFAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST16 "lx"
     * }
     */
    public static MemorySegment PRIxFAST16() {
        class Holder {
            static final MemorySegment PRIxFAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST32 "lx"
     * }
     */
    public static MemorySegment PRIxFAST32() {
        class Holder {
            static final MemorySegment PRIxFAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST64 "lx"
     * }
     */
    public static MemorySegment PRIxFAST64() {
        class Holder {
            static final MemorySegment PRIxFAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX8 "X"
     * }
     */
    public static MemorySegment PRIX8() {
        class Holder {
            static final MemorySegment PRIX8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIX8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX16 "X"
     * }
     */
    public static MemorySegment PRIX16() {
        class Holder {
            static final MemorySegment PRIX16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIX16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX32 "X"
     * }
     */
    public static MemorySegment PRIX32() {
        class Holder {
            static final MemorySegment PRIX32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIX32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX64 "lX"
     * }
     */
    public static MemorySegment PRIX64() {
        class Holder {
            static final MemorySegment PRIX64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIX64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST8 "X"
     * }
     */
    public static MemorySegment PRIXLEAST8() {
        class Holder {
            static final MemorySegment PRIXLEAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST16 "X"
     * }
     */
    public static MemorySegment PRIXLEAST16() {
        class Holder {
            static final MemorySegment PRIXLEAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST32 "X"
     * }
     */
    public static MemorySegment PRIXLEAST32() {
        class Holder {
            static final MemorySegment PRIXLEAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST64 "lX"
     * }
     */
    public static MemorySegment PRIXLEAST64() {
        class Holder {
            static final MemorySegment PRIXLEAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST8 "X"
     * }
     */
    public static MemorySegment PRIXFAST8() {
        class Holder {
            static final MemorySegment PRIXFAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST16 "lX"
     * }
     */
    public static MemorySegment PRIXFAST16() {
        class Holder {
            static final MemorySegment PRIXFAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST32 "lX"
     * }
     */
    public static MemorySegment PRIXFAST32() {
        class Holder {
            static final MemorySegment PRIXFAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST64 "lX"
     * }
     */
    public static MemorySegment PRIXFAST64() {
        class Holder {
            static final MemorySegment PRIXFAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdMAX "ld"
     * }
     */
    public static MemorySegment PRIdMAX() {
        class Holder {
            static final MemorySegment PRIdMAX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiMAX "li"
     * }
     */
    public static MemorySegment PRIiMAX() {
        class Holder {
            static final MemorySegment PRIiMAX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoMAX "lo"
     * }
     */
    public static MemorySegment PRIoMAX() {
        class Holder {
            static final MemorySegment PRIoMAX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuMAX "lu"
     * }
     */
    public static MemorySegment PRIuMAX() {
        class Holder {
            static final MemorySegment PRIuMAX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxMAX "lx"
     * }
     */
    public static MemorySegment PRIxMAX() {
        class Holder {
            static final MemorySegment PRIxMAX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXMAX "lX"
     * }
     */
    public static MemorySegment PRIXMAX() {
        class Holder {
            static final MemorySegment PRIXMAX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdPTR "ld"
     * }
     */
    public static MemorySegment PRIdPTR() {
        class Holder {
            static final MemorySegment PRIdPTR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiPTR "li"
     * }
     */
    public static MemorySegment PRIiPTR() {
        class Holder {
            static final MemorySegment PRIiPTR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoPTR "lo"
     * }
     */
    public static MemorySegment PRIoPTR() {
        class Holder {
            static final MemorySegment PRIoPTR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuPTR "lu"
     * }
     */
    public static MemorySegment PRIuPTR() {
        class Holder {
            static final MemorySegment PRIuPTR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxPTR "lx"
     * }
     */
    public static MemorySegment PRIxPTR() {
        class Holder {
            static final MemorySegment PRIxPTR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXPTR "lX"
     * }
     */
    public static MemorySegment PRIXPTR() {
        class Holder {
            static final MemorySegment PRIXPTR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd8 "hhd"
     * }
     */
    public static MemorySegment SCNd8() {
        class Holder {
            static final MemorySegment SCNd8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNd8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd16 "hd"
     * }
     */
    public static MemorySegment SCNd16() {
        class Holder {
            static final MemorySegment SCNd16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.SCNd16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd32 "d"
     * }
     */
    public static MemorySegment SCNd32() {
        class Holder {
            static final MemorySegment SCNd32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNd32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd64 "ld"
     * }
     */
    public static MemorySegment SCNd64() {
        class Holder {
            static final MemorySegment SCNd64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNd64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdLEAST8() {
        class Holder {
            static final MemorySegment SCNdLEAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNdLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST16 "hd"
     * }
     */
    public static MemorySegment SCNdLEAST16() {
        class Holder {
            static final MemorySegment SCNdLEAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.SCNdLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST32 "d"
     * }
     */
    public static MemorySegment SCNdLEAST32() {
        class Holder {
            static final MemorySegment SCNdLEAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNdLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST64 "ld"
     * }
     */
    public static MemorySegment SCNdLEAST64() {
        class Holder {
            static final MemorySegment SCNdLEAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdFAST8() {
        class Holder {
            static final MemorySegment SCNdFAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNdFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST16 "ld"
     * }
     */
    public static MemorySegment SCNdFAST16() {
        class Holder {
            static final MemorySegment SCNdFAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST32 "ld"
     * }
     */
    public static MemorySegment SCNdFAST32() {
        class Holder {
            static final MemorySegment SCNdFAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST64 "ld"
     * }
     */
    public static MemorySegment SCNdFAST64() {
        class Holder {
            static final MemorySegment SCNdFAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi8 "hhi"
     * }
     */
    public static MemorySegment SCNi8() {
        class Holder {
            static final MemorySegment SCNi8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNi8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi16 "hi"
     * }
     */
    public static MemorySegment SCNi16() {
        class Holder {
            static final MemorySegment SCNi16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.SCNi16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi32 "i"
     * }
     */
    public static MemorySegment SCNi32() {
        class Holder {
            static final MemorySegment SCNi32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNi32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi64 "li"
     * }
     */
    public static MemorySegment SCNi64() {
        class Holder {
            static final MemorySegment SCNi64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNi64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiLEAST8() {
        class Holder {
            static final MemorySegment SCNiLEAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNiLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST16 "hi"
     * }
     */
    public static MemorySegment SCNiLEAST16() {
        class Holder {
            static final MemorySegment SCNiLEAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.SCNiLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST32 "i"
     * }
     */
    public static MemorySegment SCNiLEAST32() {
        class Holder {
            static final MemorySegment SCNiLEAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNiLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST64 "li"
     * }
     */
    public static MemorySegment SCNiLEAST64() {
        class Holder {
            static final MemorySegment SCNiLEAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiFAST8() {
        class Holder {
            static final MemorySegment SCNiFAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNiFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST16 "li"
     * }
     */
    public static MemorySegment SCNiFAST16() {
        class Holder {
            static final MemorySegment SCNiFAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST32 "li"
     * }
     */
    public static MemorySegment SCNiFAST32() {
        class Holder {
            static final MemorySegment SCNiFAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST64 "li"
     * }
     */
    public static MemorySegment SCNiFAST64() {
        class Holder {
            static final MemorySegment SCNiFAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu8 "hhu"
     * }
     */
    public static MemorySegment SCNu8() {
        class Holder {
            static final MemorySegment SCNu8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNu8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu16 "hu"
     * }
     */
    public static MemorySegment SCNu16() {
        class Holder {
            static final MemorySegment SCNu16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.SCNu16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu32 "u"
     * }
     */
    public static MemorySegment SCNu32() {
        class Holder {
            static final MemorySegment SCNu32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNu32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu64 "lu"
     * }
     */
    public static MemorySegment SCNu64() {
        class Holder {
            static final MemorySegment SCNu64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNu64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuLEAST8() {
        class Holder {
            static final MemorySegment SCNuLEAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNuLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST16 "hu"
     * }
     */
    public static MemorySegment SCNuLEAST16() {
        class Holder {
            static final MemorySegment SCNuLEAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.SCNuLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST32 "u"
     * }
     */
    public static MemorySegment SCNuLEAST32() {
        class Holder {
            static final MemorySegment SCNuLEAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNuLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST64 "lu"
     * }
     */
    public static MemorySegment SCNuLEAST64() {
        class Holder {
            static final MemorySegment SCNuLEAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuFAST8() {
        class Holder {
            static final MemorySegment SCNuFAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNuFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST16 "lu"
     * }
     */
    public static MemorySegment SCNuFAST16() {
        class Holder {
            static final MemorySegment SCNuFAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST32 "lu"
     * }
     */
    public static MemorySegment SCNuFAST32() {
        class Holder {
            static final MemorySegment SCNuFAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST64 "lu"
     * }
     */
    public static MemorySegment SCNuFAST64() {
        class Holder {
            static final MemorySegment SCNuFAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo8 "hho"
     * }
     */
    public static MemorySegment SCNo8() {
        class Holder {
            static final MemorySegment SCNo8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNo8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo16 "ho"
     * }
     */
    public static MemorySegment SCNo16() {
        class Holder {
            static final MemorySegment SCNo16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.SCNo16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo32 "o"
     * }
     */
    public static MemorySegment SCNo32() {
        class Holder {
            static final MemorySegment SCNo32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNo32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo64 "lo"
     * }
     */
    public static MemorySegment SCNo64() {
        class Holder {
            static final MemorySegment SCNo64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNo64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST8 "hho"
     * }
     */
    public static MemorySegment SCNoLEAST8() {
        class Holder {
            static final MemorySegment SCNoLEAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNoLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST16 "ho"
     * }
     */
    public static MemorySegment SCNoLEAST16() {
        class Holder {
            static final MemorySegment SCNoLEAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.SCNoLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST32 "o"
     * }
     */
    public static MemorySegment SCNoLEAST32() {
        class Holder {
            static final MemorySegment SCNoLEAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNoLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST64 "lo"
     * }
     */
    public static MemorySegment SCNoLEAST64() {
        class Holder {
            static final MemorySegment SCNoLEAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST8 "hho"
     * }
     */
    public static MemorySegment SCNoFAST8() {
        class Holder {
            static final MemorySegment SCNoFAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNoFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST16 "lo"
     * }
     */
    public static MemorySegment SCNoFAST16() {
        class Holder {
            static final MemorySegment SCNoFAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST32 "lo"
     * }
     */
    public static MemorySegment SCNoFAST32() {
        class Holder {
            static final MemorySegment SCNoFAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST64 "lo"
     * }
     */
    public static MemorySegment SCNoFAST64() {
        class Holder {
            static final MemorySegment SCNoFAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx8 "hhx"
     * }
     */
    public static MemorySegment SCNx8() {
        class Holder {
            static final MemorySegment SCNx8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNx8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx16 "hx"
     * }
     */
    public static MemorySegment SCNx16() {
        class Holder {
            static final MemorySegment SCNx16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.SCNx16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx32 "x"
     * }
     */
    public static MemorySegment SCNx32() {
        class Holder {
            static final MemorySegment SCNx32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNx32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx64 "lx"
     * }
     */
    public static MemorySegment SCNx64() {
        class Holder {
            static final MemorySegment SCNx64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNx64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxLEAST8() {
        class Holder {
            static final MemorySegment SCNxLEAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNxLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST16 "hx"
     * }
     */
    public static MemorySegment SCNxLEAST16() {
        class Holder {
            static final MemorySegment SCNxLEAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.SCNxLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST32 "x"
     * }
     */
    public static MemorySegment SCNxLEAST32() {
        class Holder {
            static final MemorySegment SCNxLEAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNxLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST64 "lx"
     * }
     */
    public static MemorySegment SCNxLEAST64() {
        class Holder {
            static final MemorySegment SCNxLEAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxFAST8() {
        class Holder {
            static final MemorySegment SCNxFAST8
                = hdf5_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNxFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST16 "lx"
     * }
     */
    public static MemorySegment SCNxFAST16() {
        class Holder {
            static final MemorySegment SCNxFAST16
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST32 "lx"
     * }
     */
    public static MemorySegment SCNxFAST32() {
        class Holder {
            static final MemorySegment SCNxFAST32
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST64 "lx"
     * }
     */
    public static MemorySegment SCNxFAST64() {
        class Holder {
            static final MemorySegment SCNxFAST64
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdMAX "ld"
     * }
     */
    public static MemorySegment SCNdMAX() {
        class Holder {
            static final MemorySegment SCNdMAX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiMAX "li"
     * }
     */
    public static MemorySegment SCNiMAX() {
        class Holder {
            static final MemorySegment SCNiMAX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoMAX "lo"
     * }
     */
    public static MemorySegment SCNoMAX() {
        class Holder {
            static final MemorySegment SCNoMAX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuMAX "lu"
     * }
     */
    public static MemorySegment SCNuMAX() {
        class Holder {
            static final MemorySegment SCNuMAX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxMAX "lx"
     * }
     */
    public static MemorySegment SCNxMAX() {
        class Holder {
            static final MemorySegment SCNxMAX
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdPTR "ld"
     * }
     */
    public static MemorySegment SCNdPTR() {
        class Holder {
            static final MemorySegment SCNdPTR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiPTR "li"
     * }
     */
    public static MemorySegment SCNiPTR() {
        class Holder {
            static final MemorySegment SCNiPTR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoPTR "lo"
     * }
     */
    public static MemorySegment SCNoPTR() {
        class Holder {
            static final MemorySegment SCNoPTR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuPTR "lu"
     * }
     */
    public static MemorySegment SCNuPTR() {
        class Holder {
            static final MemorySegment SCNuPTR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxPTR "lx"
     * }
     */
    public static MemorySegment SCNxPTR() {
        class Holder {
            static final MemorySegment SCNxPTR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxPTR;
    }
    private static final long LLONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return LLONG_MIN;
    }
    private static final long LLONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return LLONG_MAX;
    }
    private static final long ULLONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return ULLONG_MAX;
    }
    private static final int PTHREAD_DESTRUCTOR_ITERATIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define PTHREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return PTHREAD_DESTRUCTOR_ITERATIONS;
    }
    private static final int SEM_VALUE_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SEM_VALUE_MAX 2147483647
     * }
     */
    public static int SEM_VALUE_MAX() {
        return SEM_VALUE_MAX;
    }
    private static final long SSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define SSIZE_MAX 9223372036854775807
     * }
     */
    public static long SSIZE_MAX() {
        return SSIZE_MAX;
    }
    private static final int BC_BASE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define BC_BASE_MAX 99
     * }
     */
    public static int BC_BASE_MAX() {
        return BC_BASE_MAX;
    }
    private static final int BC_DIM_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define BC_DIM_MAX 2048
     * }
     */
    public static int BC_DIM_MAX() {
        return BC_DIM_MAX;
    }
    private static final int BC_SCALE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define BC_SCALE_MAX 99
     * }
     */
    public static int BC_SCALE_MAX() {
        return BC_SCALE_MAX;
    }
    private static final int BC_STRING_MAX = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define BC_STRING_MAX 1000
     * }
     */
    public static int BC_STRING_MAX() {
        return BC_STRING_MAX;
    }
    private static final int EXPR_NEST_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define EXPR_NEST_MAX 32
     * }
     */
    public static int EXPR_NEST_MAX() {
        return EXPR_NEST_MAX;
    }
    private static final int LINE_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define LINE_MAX 2048
     * }
     */
    public static int LINE_MAX() {
        return LINE_MAX;
    }
    private static final int RE_DUP_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define RE_DUP_MAX 32767
     * }
     */
    public static int RE_DUP_MAX() {
        return RE_DUP_MAX;
    }
    private static final int SCHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MAX 127
     * }
     */
    public static int SCHAR_MAX() {
        return SCHAR_MAX;
    }
    private static final int SHRT_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MAX 32767
     * }
     */
    public static int SHRT_MAX() {
        return SHRT_MAX;
    }
    private static final int INT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_MAX 2147483647
     * }
     */
    public static int INT_MAX() {
        return INT_MAX;
    }
    private static final long LONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_MAX() {
        return LONG_MAX;
    }
    private static final int SCHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return SCHAR_MIN;
    }
    private static final int SHRT_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return SHRT_MIN;
    }
    private static final int INT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return INT_MIN;
    }
    private static final long LONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_MIN() {
        return LONG_MIN;
    }
    private static final int UCHAR_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UCHAR_MAX 255
     * }
     */
    public static int UCHAR_MAX() {
        return UCHAR_MAX;
    }
    private static final int USHRT_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define USHRT_MAX 65535
     * }
     */
    public static int USHRT_MAX() {
        return USHRT_MAX;
    }
    private static final int UINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return UINT_MAX;
    }
    private static final long ULONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULONG_MAX -1
     * }
     */
    public static long ULONG_MAX() {
        return ULONG_MAX;
    }
    private static final int CHAR_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CHAR_BIT 8
     * }
     */
    public static int CHAR_BIT() {
        return CHAR_BIT;
    }
    private static final int CHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return CHAR_MIN;
    }
    private static final int CHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return CHAR_MAX;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int __BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return __BYTE_ORDER;
    }
    private static final int __FLOAT_WORD_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return __FLOAT_WORD_ORDER;
    }
    private static final int LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return LITTLE_ENDIAN;
    }
    private static final int BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return BIG_ENDIAN;
    }
    private static final int PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return PDP_ENDIAN;
    }
    private static final int BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return BYTE_ORDER;
    }
    private static final long _SIGSET_NWORDS = 16L;
    /**
     * {@snippet lang=c :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return _SIGSET_NWORDS;
    }
    private static final int __NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return __NFDBITS;
    }
    private static final int FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return NFDBITS;
    }
    private static final int __PTHREAD_RWLOCK_ELISION_EXTRA = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return __PTHREAD_RWLOCK_ELISION_EXTRA;
    }
    /**
     * {@snippet lang=c :
     * #define H5_VERS_SUBRELEASE ""
     * }
     */
    public static MemorySegment H5_VERS_SUBRELEASE() {
        class Holder {
            static final MemorySegment H5_VERS_SUBRELEASE
                = hdf5_h.LIBRARY_ARENA.allocateFrom("");
        }
        return Holder.H5_VERS_SUBRELEASE;
    }
    /**
     * {@snippet lang=c :
     * #define H5_VERS_STR "1.17.0"
     * }
     */
    public static MemorySegment H5_VERS_STR() {
        class Holder {
            static final MemorySegment H5_VERS_STR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("1.17.0");
        }
        return Holder.H5_VERS_STR;
    }
    /**
     * {@snippet lang=c :
     * #define H5_VERS_INFO "HDF5 library version: 1.17.0"
     * }
     */
    public static MemorySegment H5_VERS_INFO() {
        class Holder {
            static final MemorySegment H5_VERS_INFO
                = hdf5_h.LIBRARY_ARENA.allocateFrom("HDF5 library version: 1.17.0");
        }
        return Holder.H5_VERS_INFO;
    }
    /**
     * {@snippet lang=c :
     * #define HDF5_DRIVER "HDF5_DRIVER"
     * }
     */
    public static MemorySegment HDF5_DRIVER() {
        class Holder {
            static final MemorySegment HDF5_DRIVER
                = hdf5_h.LIBRARY_ARENA.allocateFrom("HDF5_DRIVER");
        }
        return Holder.HDF5_DRIVER;
    }
    /**
     * {@snippet lang=c :
     * #define HDF5_DRIVER_CONFIG "HDF5_DRIVER_CONFIG"
     * }
     */
    public static MemorySegment HDF5_DRIVER_CONFIG() {
        class Holder {
            static final MemorySegment HDF5_DRIVER_CONFIG
                = hdf5_h.LIBRARY_ARENA.allocateFrom("HDF5_DRIVER_CONFIG");
        }
        return Holder.HDF5_DRIVER_CONFIG;
    }
    /**
     * {@snippet lang=c :
     * #define HDF5_VOL_CONNECTOR "HDF5_VOL_CONNECTOR"
     * }
     */
    public static MemorySegment HDF5_VOL_CONNECTOR() {
        class Holder {
            static final MemorySegment HDF5_VOL_CONNECTOR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("HDF5_VOL_CONNECTOR");
        }
        return Holder.HDF5_VOL_CONNECTOR;
    }
    /**
     * {@snippet lang=c :
     * #define HDF5_PLUGIN_PATH "HDF5_PLUGIN_PATH"
     * }
     */
    public static MemorySegment HDF5_PLUGIN_PATH() {
        class Holder {
            static final MemorySegment HDF5_PLUGIN_PATH
                = hdf5_h.LIBRARY_ARENA.allocateFrom("HDF5_PLUGIN_PATH");
        }
        return Holder.HDF5_PLUGIN_PATH;
    }
    /**
     * {@snippet lang=c :
     * #define HDF5_PLUGIN_PRELOAD "HDF5_PLUGIN_PRELOAD"
     * }
     */
    public static MemorySegment HDF5_PLUGIN_PRELOAD() {
        class Holder {
            static final MemorySegment HDF5_PLUGIN_PRELOAD
                = hdf5_h.LIBRARY_ARENA.allocateFrom("HDF5_PLUGIN_PRELOAD");
        }
        return Holder.HDF5_PLUGIN_PRELOAD;
    }
    /**
     * {@snippet lang=c :
     * #define HDF5_USE_FILE_LOCKING "HDF5_USE_FILE_LOCKING"
     * }
     */
    public static MemorySegment HDF5_USE_FILE_LOCKING() {
        class Holder {
            static final MemorySegment HDF5_USE_FILE_LOCKING
                = hdf5_h.LIBRARY_ARENA.allocateFrom("HDF5_USE_FILE_LOCKING");
        }
        return Holder.HDF5_USE_FILE_LOCKING;
    }
    /**
     * {@snippet lang=c :
     * #define HDF5_NOCLEANUP "HDF5_NOCLEANUP"
     * }
     */
    public static MemorySegment HDF5_NOCLEANUP() {
        class Holder {
            static final MemorySegment HDF5_NOCLEANUP
                = hdf5_h.LIBRARY_ARENA.allocateFrom("HDF5_NOCLEANUP");
        }
        return Holder.HDF5_NOCLEANUP;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdHSIZE "ld"
     * }
     */
    public static MemorySegment PRIdHSIZE() {
        class Holder {
            static final MemorySegment PRIdHSIZE
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdHSIZE;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiHSIZE "li"
     * }
     */
    public static MemorySegment PRIiHSIZE() {
        class Holder {
            static final MemorySegment PRIiHSIZE
                = hdf5_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiHSIZE;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoHSIZE "lo"
     * }
     */
    public static MemorySegment PRIoHSIZE() {
        class Holder {
            static final MemorySegment PRIoHSIZE
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoHSIZE;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuHSIZE "lu"
     * }
     */
    public static MemorySegment PRIuHSIZE() {
        class Holder {
            static final MemorySegment PRIuHSIZE
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuHSIZE;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxHSIZE "lx"
     * }
     */
    public static MemorySegment PRIxHSIZE() {
        class Holder {
            static final MemorySegment PRIxHSIZE
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxHSIZE;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXHSIZE "lX"
     * }
     */
    public static MemorySegment PRIXHSIZE() {
        class Holder {
            static final MemorySegment PRIXHSIZE
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXHSIZE;
    }
    private static final long HSIZE_UNDEF = -1L;
    /**
     * {@snippet lang=c :
     * #define HSIZE_UNDEF -1
     * }
     */
    public static long HSIZE_UNDEF() {
        return HSIZE_UNDEF;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdHADDR "ld"
     * }
     */
    public static MemorySegment PRIdHADDR() {
        class Holder {
            static final MemorySegment PRIdHADDR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdHADDR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoHADDR "lo"
     * }
     */
    public static MemorySegment PRIoHADDR() {
        class Holder {
            static final MemorySegment PRIoHADDR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoHADDR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuHADDR "lu"
     * }
     */
    public static MemorySegment PRIuHADDR() {
        class Holder {
            static final MemorySegment PRIuHADDR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuHADDR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxHADDR "lx"
     * }
     */
    public static MemorySegment PRIxHADDR() {
        class Holder {
            static final MemorySegment PRIxHADDR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxHADDR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXHADDR "lX"
     * }
     */
    public static MemorySegment PRIXHADDR() {
        class Holder {
            static final MemorySegment PRIXHADDR
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXHADDR;
    }
    private static final long HADDR_UNDEF = -1L;
    /**
     * {@snippet lang=c :
     * #define HADDR_UNDEF -1
     * }
     */
    public static long HADDR_UNDEF() {
        return HADDR_UNDEF;
    }
    /**
     * {@snippet lang=c :
     * #define H5_PRINTF_HADDR_FMT "%lu"
     * }
     */
    public static MemorySegment H5_PRINTF_HADDR_FMT() {
        class Holder {
            static final MemorySegment H5_PRINTF_HADDR_FMT
                = hdf5_h.LIBRARY_ARENA.allocateFrom("%lu");
        }
        return Holder.H5_PRINTF_HADDR_FMT;
    }
    private static final long HADDR_MAX = -2L;
    /**
     * {@snippet lang=c :
     * #define HADDR_MAX -2
     * }
     */
    public static long HADDR_MAX() {
        return HADDR_MAX;
    }
    private static final int H5_ITER_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5_ITER_ERROR -1
     * }
     */
    public static int H5_ITER_ERROR() {
        return H5_ITER_ERROR;
    }
    private static final int H5_ITER_CONT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define H5_ITER_CONT 0
     * }
     */
    public static int H5_ITER_CONT() {
        return H5_ITER_CONT;
    }
    private static final int H5_ITER_STOP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5_ITER_STOP 1
     * }
     */
    public static int H5_ITER_STOP() {
        return H5_ITER_STOP;
    }
    private static final int H5O_MAX_TOKEN_SIZE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define H5O_MAX_TOKEN_SIZE 16
     * }
     */
    public static int H5O_MAX_TOKEN_SIZE() {
        return H5O_MAX_TOKEN_SIZE;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdHID "ld"
     * }
     */
    public static MemorySegment PRIdHID() {
        class Holder {
            static final MemorySegment PRIdHID
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdHID;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxHID "lx"
     * }
     */
    public static MemorySegment PRIxHID() {
        class Holder {
            static final MemorySegment PRIxHID
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxHID;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXHID "lX"
     * }
     */
    public static MemorySegment PRIXHID() {
        class Holder {
            static final MemorySegment PRIXHID
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXHID;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoHID "lo"
     * }
     */
    public static MemorySegment PRIoHID() {
        class Holder {
            static final MemorySegment PRIoHID
                = hdf5_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoHID;
    }
    private static final int H5_SIZEOF_HID_T = (int)8L;
    /**
     * {@snippet lang=c :
     * #define H5_SIZEOF_HID_T 8
     * }
     */
    public static int H5_SIZEOF_HID_T() {
        return H5_SIZEOF_HID_T;
    }
    private static final int H5I_INVALID_HID = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5I_INVALID_HID -1
     * }
     */
    public static int H5I_INVALID_HID() {
        return H5I_INVALID_HID;
    }
    private static final int H5O_COPY_SHALLOW_HIERARCHY_FLAG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5O_COPY_SHALLOW_HIERARCHY_FLAG 1
     * }
     */
    public static int H5O_COPY_SHALLOW_HIERARCHY_FLAG() {
        return H5O_COPY_SHALLOW_HIERARCHY_FLAG;
    }
    private static final int H5O_COPY_EXPAND_SOFT_LINK_FLAG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5O_COPY_EXPAND_SOFT_LINK_FLAG 2
     * }
     */
    public static int H5O_COPY_EXPAND_SOFT_LINK_FLAG() {
        return H5O_COPY_EXPAND_SOFT_LINK_FLAG;
    }
    private static final int H5O_COPY_EXPAND_EXT_LINK_FLAG = (int)4L;
    /**
     * {@snippet lang=c :
     * #define H5O_COPY_EXPAND_EXT_LINK_FLAG 4
     * }
     */
    public static int H5O_COPY_EXPAND_EXT_LINK_FLAG() {
        return H5O_COPY_EXPAND_EXT_LINK_FLAG;
    }
    private static final int H5O_COPY_EXPAND_REFERENCE_FLAG = (int)8L;
    /**
     * {@snippet lang=c :
     * #define H5O_COPY_EXPAND_REFERENCE_FLAG 8
     * }
     */
    public static int H5O_COPY_EXPAND_REFERENCE_FLAG() {
        return H5O_COPY_EXPAND_REFERENCE_FLAG;
    }
    private static final int H5O_COPY_WITHOUT_ATTR_FLAG = (int)16L;
    /**
     * {@snippet lang=c :
     * #define H5O_COPY_WITHOUT_ATTR_FLAG 16
     * }
     */
    public static int H5O_COPY_WITHOUT_ATTR_FLAG() {
        return H5O_COPY_WITHOUT_ATTR_FLAG;
    }
    private static final int H5O_COPY_PRESERVE_NULL_FLAG = (int)32L;
    /**
     * {@snippet lang=c :
     * #define H5O_COPY_PRESERVE_NULL_FLAG 32
     * }
     */
    public static int H5O_COPY_PRESERVE_NULL_FLAG() {
        return H5O_COPY_PRESERVE_NULL_FLAG;
    }
    private static final int H5O_COPY_MERGE_COMMITTED_DTYPE_FLAG = (int)64L;
    /**
     * {@snippet lang=c :
     * #define H5O_COPY_MERGE_COMMITTED_DTYPE_FLAG 64
     * }
     */
    public static int H5O_COPY_MERGE_COMMITTED_DTYPE_FLAG() {
        return H5O_COPY_MERGE_COMMITTED_DTYPE_FLAG;
    }
    private static final int H5O_COPY_ALL = (int)127L;
    /**
     * {@snippet lang=c :
     * #define H5O_COPY_ALL 127
     * }
     */
    public static int H5O_COPY_ALL() {
        return H5O_COPY_ALL;
    }
    private static final int H5O_SHMESG_SDSPACE_FLAG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5O_SHMESG_SDSPACE_FLAG 2
     * }
     */
    public static int H5O_SHMESG_SDSPACE_FLAG() {
        return H5O_SHMESG_SDSPACE_FLAG;
    }
    private static final int H5O_SHMESG_DTYPE_FLAG = (int)8L;
    /**
     * {@snippet lang=c :
     * #define H5O_SHMESG_DTYPE_FLAG 8
     * }
     */
    public static int H5O_SHMESG_DTYPE_FLAG() {
        return H5O_SHMESG_DTYPE_FLAG;
    }
    private static final int H5O_SHMESG_FILL_FLAG = (int)32L;
    /**
     * {@snippet lang=c :
     * #define H5O_SHMESG_FILL_FLAG 32
     * }
     */
    public static int H5O_SHMESG_FILL_FLAG() {
        return H5O_SHMESG_FILL_FLAG;
    }
    private static final int H5O_SHMESG_PLINE_FLAG = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define H5O_SHMESG_PLINE_FLAG 2048
     * }
     */
    public static int H5O_SHMESG_PLINE_FLAG() {
        return H5O_SHMESG_PLINE_FLAG;
    }
    private static final int H5O_SHMESG_ATTR_FLAG = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define H5O_SHMESG_ATTR_FLAG 4096
     * }
     */
    public static int H5O_SHMESG_ATTR_FLAG() {
        return H5O_SHMESG_ATTR_FLAG;
    }
    private static final int H5O_SHMESG_ALL_FLAG = (int)6186L;
    /**
     * {@snippet lang=c :
     * #define H5O_SHMESG_ALL_FLAG 6186
     * }
     */
    public static int H5O_SHMESG_ALL_FLAG() {
        return H5O_SHMESG_ALL_FLAG;
    }
    private static final int H5O_HDR_ALL_FLAGS = (int)63L;
    /**
     * {@snippet lang=c :
     * #define H5O_HDR_ALL_FLAGS 63
     * }
     */
    public static int H5O_HDR_ALL_FLAGS() {
        return H5O_HDR_ALL_FLAGS;
    }
    private static final int H5O_INFO_BASIC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5O_INFO_BASIC 1
     * }
     */
    public static int H5O_INFO_BASIC() {
        return H5O_INFO_BASIC;
    }
    private static final int H5O_INFO_TIME = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5O_INFO_TIME 2
     * }
     */
    public static int H5O_INFO_TIME() {
        return H5O_INFO_TIME;
    }
    private static final int H5O_INFO_NUM_ATTRS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define H5O_INFO_NUM_ATTRS 4
     * }
     */
    public static int H5O_INFO_NUM_ATTRS() {
        return H5O_INFO_NUM_ATTRS;
    }
    private static final int H5O_INFO_ALL = (int)31L;
    /**
     * {@snippet lang=c :
     * #define H5O_INFO_ALL 31
     * }
     */
    public static int H5O_INFO_ALL() {
        return H5O_INFO_ALL;
    }
    private static final int H5O_NATIVE_INFO_HDR = (int)8L;
    /**
     * {@snippet lang=c :
     * #define H5O_NATIVE_INFO_HDR 8
     * }
     */
    public static int H5O_NATIVE_INFO_HDR() {
        return H5O_NATIVE_INFO_HDR;
    }
    private static final int H5O_NATIVE_INFO_META_SIZE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define H5O_NATIVE_INFO_META_SIZE 16
     * }
     */
    public static int H5O_NATIVE_INFO_META_SIZE() {
        return H5O_NATIVE_INFO_META_SIZE;
    }
    private static final int H5O_NATIVE_INFO_ALL = (int)24L;
    /**
     * {@snippet lang=c :
     * #define H5O_NATIVE_INFO_ALL 24
     * }
     */
    public static int H5O_NATIVE_INFO_ALL() {
        return H5O_NATIVE_INFO_ALL;
    }
    private static final int H5O_INFO_HDR = (int)8L;
    /**
     * {@snippet lang=c :
     * #define H5O_INFO_HDR 8
     * }
     */
    public static int H5O_INFO_HDR() {
        return H5O_INFO_HDR;
    }
    private static final int H5O_INFO_META_SIZE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define H5O_INFO_META_SIZE 16
     * }
     */
    public static int H5O_INFO_META_SIZE() {
        return H5O_INFO_META_SIZE;
    }
    private static final int H5T_NCSET = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5T_NCSET 2
     * }
     */
    public static int H5T_NCSET() {
        return H5T_NCSET;
    }
    private static final int H5T_NSTR = (int)3L;
    /**
     * {@snippet lang=c :
     * #define H5T_NSTR 3
     * }
     */
    public static int H5T_NSTR() {
        return H5T_NSTR;
    }
    private static final long H5T_VARIABLE = -1L;
    /**
     * {@snippet lang=c :
     * #define H5T_VARIABLE -1
     * }
     */
    public static long H5T_VARIABLE() {
        return H5T_VARIABLE;
    }
    private static final int H5AC__CACHE_IMAGE__ENTRY_AGEOUT__NONE = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5AC__CACHE_IMAGE__ENTRY_AGEOUT__NONE -1
     * }
     */
    public static int H5AC__CACHE_IMAGE__ENTRY_AGEOUT__NONE() {
        return H5AC__CACHE_IMAGE__ENTRY_AGEOUT__NONE;
    }
    private static final long H5D_CHUNK_CACHE_NSLOTS_DEFAULT = -1L;
    /**
     * {@snippet lang=c :
     * #define H5D_CHUNK_CACHE_NSLOTS_DEFAULT -1
     * }
     */
    public static long H5D_CHUNK_CACHE_NSLOTS_DEFAULT() {
        return H5D_CHUNK_CACHE_NSLOTS_DEFAULT;
    }
    private static final long H5D_CHUNK_CACHE_NBYTES_DEFAULT = -1L;
    /**
     * {@snippet lang=c :
     * #define H5D_CHUNK_CACHE_NBYTES_DEFAULT -1
     * }
     */
    public static long H5D_CHUNK_CACHE_NBYTES_DEFAULT() {
        return H5D_CHUNK_CACHE_NBYTES_DEFAULT;
    }
    private static final double H5D_CHUNK_CACHE_W0_DEFAULT = -1.0d;
    /**
     * {@snippet lang=c :
     * #define H5D_CHUNK_CACHE_W0_DEFAULT -1.0
     * }
     */
    public static double H5D_CHUNK_CACHE_W0_DEFAULT() {
        return H5D_CHUNK_CACHE_W0_DEFAULT;
    }
    private static final int H5D_CHUNK_DONT_FILTER_PARTIAL_CHUNKS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5D_CHUNK_DONT_FILTER_PARTIAL_CHUNKS 2
     * }
     */
    public static int H5D_CHUNK_DONT_FILTER_PARTIAL_CHUNKS() {
        return H5D_CHUNK_DONT_FILTER_PARTIAL_CHUNKS;
    }
    private static final int H5D_CHUNK_BTREE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define H5D_CHUNK_BTREE 0
     * }
     */
    public static int H5D_CHUNK_BTREE() {
        return H5D_CHUNK_BTREE;
    }
    /**
     * {@snippet lang=c :
     * #define H5D_XFER_DIRECT_CHUNK_WRITE_FLAG_NAME "direct_chunk_flag"
     * }
     */
    public static MemorySegment H5D_XFER_DIRECT_CHUNK_WRITE_FLAG_NAME() {
        class Holder {
            static final MemorySegment H5D_XFER_DIRECT_CHUNK_WRITE_FLAG_NAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("direct_chunk_flag");
        }
        return Holder.H5D_XFER_DIRECT_CHUNK_WRITE_FLAG_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define H5D_XFER_DIRECT_CHUNK_WRITE_FILTERS_NAME "direct_chunk_filters"
     * }
     */
    public static MemorySegment H5D_XFER_DIRECT_CHUNK_WRITE_FILTERS_NAME() {
        class Holder {
            static final MemorySegment H5D_XFER_DIRECT_CHUNK_WRITE_FILTERS_NAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("direct_chunk_filters");
        }
        return Holder.H5D_XFER_DIRECT_CHUNK_WRITE_FILTERS_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define H5D_XFER_DIRECT_CHUNK_WRITE_OFFSET_NAME "direct_chunk_offset"
     * }
     */
    public static MemorySegment H5D_XFER_DIRECT_CHUNK_WRITE_OFFSET_NAME() {
        class Holder {
            static final MemorySegment H5D_XFER_DIRECT_CHUNK_WRITE_OFFSET_NAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("direct_chunk_offset");
        }
        return Holder.H5D_XFER_DIRECT_CHUNK_WRITE_OFFSET_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define H5D_XFER_DIRECT_CHUNK_WRITE_DATASIZE_NAME "direct_chunk_datasize"
     * }
     */
    public static MemorySegment H5D_XFER_DIRECT_CHUNK_WRITE_DATASIZE_NAME() {
        class Holder {
            static final MemorySegment H5D_XFER_DIRECT_CHUNK_WRITE_DATASIZE_NAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("direct_chunk_datasize");
        }
        return Holder.H5D_XFER_DIRECT_CHUNK_WRITE_DATASIZE_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define H5D_XFER_DIRECT_CHUNK_READ_FLAG_NAME "direct_chunk_read_flag"
     * }
     */
    public static MemorySegment H5D_XFER_DIRECT_CHUNK_READ_FLAG_NAME() {
        class Holder {
            static final MemorySegment H5D_XFER_DIRECT_CHUNK_READ_FLAG_NAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("direct_chunk_read_flag");
        }
        return Holder.H5D_XFER_DIRECT_CHUNK_READ_FLAG_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define H5D_XFER_DIRECT_CHUNK_READ_OFFSET_NAME "direct_chunk_read_offset"
     * }
     */
    public static MemorySegment H5D_XFER_DIRECT_CHUNK_READ_OFFSET_NAME() {
        class Holder {
            static final MemorySegment H5D_XFER_DIRECT_CHUNK_READ_OFFSET_NAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("direct_chunk_read_offset");
        }
        return Holder.H5D_XFER_DIRECT_CHUNK_READ_OFFSET_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define H5D_XFER_DIRECT_CHUNK_READ_FILTERS_NAME "direct_chunk_read_filters"
     * }
     */
    public static MemorySegment H5D_XFER_DIRECT_CHUNK_READ_FILTERS_NAME() {
        class Holder {
            static final MemorySegment H5D_XFER_DIRECT_CHUNK_READ_FILTERS_NAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("direct_chunk_read_filters");
        }
        return Holder.H5D_XFER_DIRECT_CHUNK_READ_FILTERS_NAME;
    }
    private static final int EOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return EOF;
    }
    /**
     * {@snippet lang=c :
     * #define P_tmpdir "/tmp"
     * }
     */
    public static MemorySegment P_tmpdir() {
        class Holder {
            static final MemorySegment P_tmpdir
                = hdf5_h.LIBRARY_ARENA.allocateFrom("/tmp");
        }
        return Holder.P_tmpdir;
    }
    private static final int __HAVE_DISTINCT_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return __HAVE_DISTINCT_FLOAT16;
    }
    private static final int __HAVE_DISTINCT_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return __HAVE_DISTINCT_FLOAT128X;
    }
    private static final int __HAVE_FLOAT128_UNLIKE_LDBL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return __HAVE_FLOAT128_UNLIKE_LDBL;
    }
    private static final long H5ES_WAIT_FOREVER = -1L;
    /**
     * {@snippet lang=c :
     * #define H5ES_WAIT_FOREVER -1
     * }
     */
    public static long H5ES_WAIT_FOREVER() {
        return H5ES_WAIT_FOREVER;
    }
    private static final int H5ES_WAIT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define H5ES_WAIT_NONE 0
     * }
     */
    public static int H5ES_WAIT_NONE() {
        return H5ES_WAIT_NONE;
    }
    private static final int H5F_ACC_RDONLY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define H5F_ACC_RDONLY 0
     * }
     */
    public static int H5F_ACC_RDONLY() {
        return H5F_ACC_RDONLY;
    }
    private static final int H5F_ACC_RDWR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5F_ACC_RDWR 1
     * }
     */
    public static int H5F_ACC_RDWR() {
        return H5F_ACC_RDWR;
    }
    private static final int H5F_ACC_TRUNC = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5F_ACC_TRUNC 2
     * }
     */
    public static int H5F_ACC_TRUNC() {
        return H5F_ACC_TRUNC;
    }
    private static final int H5F_ACC_EXCL = (int)4L;
    /**
     * {@snippet lang=c :
     * #define H5F_ACC_EXCL 4
     * }
     */
    public static int H5F_ACC_EXCL() {
        return H5F_ACC_EXCL;
    }
    private static final int H5F_ACC_CREAT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define H5F_ACC_CREAT 16
     * }
     */
    public static int H5F_ACC_CREAT() {
        return H5F_ACC_CREAT;
    }
    private static final int H5F_ACC_SWMR_WRITE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define H5F_ACC_SWMR_WRITE 32
     * }
     */
    public static int H5F_ACC_SWMR_WRITE() {
        return H5F_ACC_SWMR_WRITE;
    }
    private static final int H5F_ACC_SWMR_READ = (int)64L;
    /**
     * {@snippet lang=c :
     * #define H5F_ACC_SWMR_READ 64
     * }
     */
    public static int H5F_ACC_SWMR_READ() {
        return H5F_ACC_SWMR_READ;
    }
    private static final int H5F_ACC_DEFAULT = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define H5F_ACC_DEFAULT 65535
     * }
     */
    public static int H5F_ACC_DEFAULT() {
        return H5F_ACC_DEFAULT;
    }
    private static final int H5F_OBJ_FILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5F_OBJ_FILE 1
     * }
     */
    public static int H5F_OBJ_FILE() {
        return H5F_OBJ_FILE;
    }
    private static final int H5F_OBJ_DATASET = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5F_OBJ_DATASET 2
     * }
     */
    public static int H5F_OBJ_DATASET() {
        return H5F_OBJ_DATASET;
    }
    private static final int H5F_OBJ_GROUP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define H5F_OBJ_GROUP 4
     * }
     */
    public static int H5F_OBJ_GROUP() {
        return H5F_OBJ_GROUP;
    }
    private static final int H5F_OBJ_DATATYPE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define H5F_OBJ_DATATYPE 8
     * }
     */
    public static int H5F_OBJ_DATATYPE() {
        return H5F_OBJ_DATATYPE;
    }
    private static final int H5F_OBJ_ATTR = (int)16L;
    /**
     * {@snippet lang=c :
     * #define H5F_OBJ_ATTR 16
     * }
     */
    public static int H5F_OBJ_ATTR() {
        return H5F_OBJ_ATTR;
    }
    private static final int H5F_OBJ_ALL = (int)31L;
    /**
     * {@snippet lang=c :
     * #define H5F_OBJ_ALL 31
     * }
     */
    public static int H5F_OBJ_ALL() {
        return H5F_OBJ_ALL;
    }
    private static final int H5F_OBJ_LOCAL = (int)32L;
    /**
     * {@snippet lang=c :
     * #define H5F_OBJ_LOCAL 32
     * }
     */
    public static int H5F_OBJ_LOCAL() {
        return H5F_OBJ_LOCAL;
    }
    private static final long H5F_UNLIMITED = -1L;
    /**
     * {@snippet lang=c :
     * #define H5F_UNLIMITED -1
     * }
     */
    public static long H5F_UNLIMITED() {
        return H5F_UNLIMITED;
    }
    private static final int H5F_LIBVER_LATEST = (int)6L;
    /**
     * {@snippet lang=c :
     * #define H5F_LIBVER_LATEST 6
     * }
     */
    public static int H5F_LIBVER_LATEST() {
        return H5F_LIBVER_LATEST;
    }
    private static final int H5F_RFIC_UNUSUAL_NUM_UNUSED_NUMERIC_BITS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5F_RFIC_UNUSUAL_NUM_UNUSED_NUMERIC_BITS 1
     * }
     */
    public static int H5F_RFIC_UNUSUAL_NUM_UNUSED_NUMERIC_BITS() {
        return H5F_RFIC_UNUSUAL_NUM_UNUSED_NUMERIC_BITS;
    }
    private static final int H5F_RFIC_ALL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5F_RFIC_ALL 1
     * }
     */
    public static int H5F_RFIC_ALL() {
        return H5F_RFIC_ALL;
    }
    private static final int H5F_ACC_DEBUG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define H5F_ACC_DEBUG 0
     * }
     */
    public static int H5F_ACC_DEBUG() {
        return H5F_ACC_DEBUG;
    }
    private static final int H5_VFD_INVALID = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_INVALID -1
     * }
     */
    public static int H5_VFD_INVALID() {
        return H5_VFD_INVALID;
    }
    private static final int H5_VFD_SEC2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_SEC2 0
     * }
     */
    public static int H5_VFD_SEC2() {
        return H5_VFD_SEC2;
    }
    private static final int H5_VFD_CORE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_CORE 1
     * }
     */
    public static int H5_VFD_CORE() {
        return H5_VFD_CORE;
    }
    private static final int H5_VFD_LOG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_LOG 2
     * }
     */
    public static int H5_VFD_LOG() {
        return H5_VFD_LOG;
    }
    private static final int H5_VFD_FAMILY = (int)3L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_FAMILY 3
     * }
     */
    public static int H5_VFD_FAMILY() {
        return H5_VFD_FAMILY;
    }
    private static final int H5_VFD_MULTI = (int)4L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_MULTI 4
     * }
     */
    public static int H5_VFD_MULTI() {
        return H5_VFD_MULTI;
    }
    private static final int H5_VFD_STDIO = (int)5L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_STDIO 5
     * }
     */
    public static int H5_VFD_STDIO() {
        return H5_VFD_STDIO;
    }
    private static final int H5_VFD_SPLITTER = (int)6L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_SPLITTER 6
     * }
     */
    public static int H5_VFD_SPLITTER() {
        return H5_VFD_SPLITTER;
    }
    private static final int H5_VFD_MPIO = (int)7L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_MPIO 7
     * }
     */
    public static int H5_VFD_MPIO() {
        return H5_VFD_MPIO;
    }
    private static final int H5_VFD_DIRECT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_DIRECT 8
     * }
     */
    public static int H5_VFD_DIRECT() {
        return H5_VFD_DIRECT;
    }
    private static final int H5_VFD_MIRROR = (int)9L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_MIRROR 9
     * }
     */
    public static int H5_VFD_MIRROR() {
        return H5_VFD_MIRROR;
    }
    private static final int H5_VFD_HDFS = (int)10L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_HDFS 10
     * }
     */
    public static int H5_VFD_HDFS() {
        return H5_VFD_HDFS;
    }
    private static final int H5_VFD_ROS3 = (int)11L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_ROS3 11
     * }
     */
    public static int H5_VFD_ROS3() {
        return H5_VFD_ROS3;
    }
    private static final int H5_VFD_SUBFILING = (int)12L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_SUBFILING 12
     * }
     */
    public static int H5_VFD_SUBFILING() {
        return H5_VFD_SUBFILING;
    }
    private static final int H5_VFD_IOC = (int)13L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_IOC 13
     * }
     */
    public static int H5_VFD_IOC() {
        return H5_VFD_IOC;
    }
    private static final int H5_VFD_ONION = (int)14L;
    /**
     * {@snippet lang=c :
     * #define H5_VFD_ONION 14
     * }
     */
    public static int H5_VFD_ONION() {
        return H5_VFD_ONION;
    }
    private static final int H5FD_FEAT_ACCUMULATE_METADATA = (int)6L;
    /**
     * {@snippet lang=c :
     * #define H5FD_FEAT_ACCUMULATE_METADATA 6
     * }
     */
    public static int H5FD_FEAT_ACCUMULATE_METADATA() {
        return H5FD_FEAT_ACCUMULATE_METADATA;
    }
    private static final int H5FD_CTL_OPC_EXPER_MIN = (int)512L;
    /**
     * {@snippet lang=c :
     * #define H5FD_CTL_OPC_EXPER_MIN 512
     * }
     */
    public static int H5FD_CTL_OPC_EXPER_MIN() {
        return H5FD_CTL_OPC_EXPER_MIN;
    }
    private static final int H5FD_CTL_OPC_EXPER_MAX = (int)1023L;
    /**
     * {@snippet lang=c :
     * #define H5FD_CTL_OPC_EXPER_MAX 1023
     * }
     */
    public static int H5FD_CTL_OPC_EXPER_MAX() {
        return H5FD_CTL_OPC_EXPER_MAX;
    }
    private static final int H5L_MAX_LINK_NAME_LEN = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define H5L_MAX_LINK_NAME_LEN 4294967295
     * }
     */
    public static int H5L_MAX_LINK_NAME_LEN() {
        return H5L_MAX_LINK_NAME_LEN;
    }
    private static final int H5L_TYPE_BUILTIN_MAX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5L_TYPE_BUILTIN_MAX 1
     * }
     */
    public static int H5L_TYPE_BUILTIN_MAX() {
        return H5L_TYPE_BUILTIN_MAX;
    }
    private static final int H5L_TYPE_UD_MIN = (int)64L;
    /**
     * {@snippet lang=c :
     * #define H5L_TYPE_UD_MIN 64
     * }
     */
    public static int H5L_TYPE_UD_MIN() {
        return H5L_TYPE_UD_MIN;
    }
    private static final int H5L_TYPE_UD_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define H5L_TYPE_UD_MAX 255
     * }
     */
    public static int H5L_TYPE_UD_MAX() {
        return H5L_TYPE_UD_MAX;
    }
    private static final int H5G_SAME_LOC = (int)0L;
    /**
     * {@snippet lang=c :
     * #define H5G_SAME_LOC 0
     * }
     */
    public static int H5G_SAME_LOC() {
        return H5G_SAME_LOC;
    }
    private static final int H5G_LINK_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5G_LINK_ERROR -1
     * }
     */
    public static int H5G_LINK_ERROR() {
        return H5G_LINK_ERROR;
    }
    private static final int H5G_LINK_HARD = (int)0L;
    /**
     * {@snippet lang=c :
     * #define H5G_LINK_HARD 0
     * }
     */
    public static int H5G_LINK_HARD() {
        return H5G_LINK_HARD;
    }
    private static final int H5G_LINK_SOFT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5G_LINK_SOFT 1
     * }
     */
    public static int H5G_LINK_SOFT() {
        return H5G_LINK_SOFT;
    }
    private static final int H5G_NUSERTYPES = (int)248L;
    /**
     * {@snippet lang=c :
     * #define H5G_NUSERTYPES 248
     * }
     */
    public static int H5G_NUSERTYPES() {
        return H5G_NUSERTYPES;
    }
    private static final int H5_VOL_INVALID = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5_VOL_INVALID -1
     * }
     */
    public static int H5_VOL_INVALID() {
        return H5_VOL_INVALID;
    }
    private static final int H5VL_CAP_FLAG_SOFT_LINKS = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define H5VL_CAP_FLAG_SOFT_LINKS 2147483648
     * }
     */
    public static int H5VL_CAP_FLAG_SOFT_LINKS() {
        return H5VL_CAP_FLAG_SOFT_LINKS;
    }
    private static final long H5VL_CAP_FLAG_UD_LINKS = 4294967296L;
    /**
     * {@snippet lang=c :
     * #define H5VL_CAP_FLAG_UD_LINKS 4294967296
     * }
     */
    public static long H5VL_CAP_FLAG_UD_LINKS() {
        return H5VL_CAP_FLAG_UD_LINKS;
    }
    private static final long H5VL_CAP_FLAG_TRACK_TIMES = 8589934592L;
    /**
     * {@snippet lang=c :
     * #define H5VL_CAP_FLAG_TRACK_TIMES 8589934592
     * }
     */
    public static long H5VL_CAP_FLAG_TRACK_TIMES() {
        return H5VL_CAP_FLAG_TRACK_TIMES;
    }
    private static final long H5VL_CAP_FLAG_MOUNT = 17179869184L;
    /**
     * {@snippet lang=c :
     * #define H5VL_CAP_FLAG_MOUNT 17179869184
     * }
     */
    public static long H5VL_CAP_FLAG_MOUNT() {
        return H5VL_CAP_FLAG_MOUNT;
    }
    private static final long H5VL_CAP_FLAG_FILTERS = 34359738368L;
    /**
     * {@snippet lang=c :
     * #define H5VL_CAP_FLAG_FILTERS 34359738368
     * }
     */
    public static long H5VL_CAP_FLAG_FILTERS() {
        return H5VL_CAP_FLAG_FILTERS;
    }
    private static final long H5VL_CAP_FLAG_FILL_VALUES = 68719476736L;
    /**
     * {@snippet lang=c :
     * #define H5VL_CAP_FLAG_FILL_VALUES 68719476736
     * }
     */
    public static long H5VL_CAP_FLAG_FILL_VALUES() {
        return H5VL_CAP_FLAG_FILL_VALUES;
    }
    private static final long H5R_OBJ_REF_BUF_SIZE = 8L;
    /**
     * {@snippet lang=c :
     * #define H5R_OBJ_REF_BUF_SIZE 8
     * }
     */
    public static long H5R_OBJ_REF_BUF_SIZE() {
        return H5R_OBJ_REF_BUF_SIZE;
    }
    private static final long H5R_DSET_REG_REF_BUF_SIZE = 12L;
    /**
     * {@snippet lang=c :
     * #define H5R_DSET_REG_REF_BUF_SIZE 12
     * }
     */
    public static long H5R_DSET_REG_REF_BUF_SIZE() {
        return H5R_DSET_REG_REF_BUF_SIZE;
    }
    private static final int H5R_REF_BUF_SIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define H5R_REF_BUF_SIZE 64
     * }
     */
    public static int H5R_REF_BUF_SIZE() {
        return H5R_REF_BUF_SIZE;
    }
    private static final int H5R_OBJECT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define H5R_OBJECT 0
     * }
     */
    public static int H5R_OBJECT() {
        return H5R_OBJECT;
    }
    private static final int H5R_DATASET_REGION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5R_DATASET_REGION 1
     * }
     */
    public static int H5R_DATASET_REGION() {
        return H5R_DATASET_REGION;
    }
    private static final int H5VL_MAX_BLOB_ID_SIZE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define H5VL_MAX_BLOB_ID_SIZE 16
     * }
     */
    public static int H5VL_MAX_BLOB_ID_SIZE() {
        return H5VL_MAX_BLOB_ID_SIZE;
    }
    private static final long H5S_UNLIMITED = -1L;
    /**
     * {@snippet lang=c :
     * #define H5S_UNLIMITED -1
     * }
     */
    public static long H5S_UNLIMITED() {
        return H5S_UNLIMITED;
    }
    private static final int H5Z_FILTER_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5Z_FILTER_ERROR -1
     * }
     */
    public static int H5Z_FILTER_ERROR() {
        return H5Z_FILTER_ERROR;
    }
    private static final int H5Z_FILTER_CONFIG_ENCODE_ENABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5Z_FILTER_CONFIG_ENCODE_ENABLED 1
     * }
     */
    public static int H5Z_FILTER_CONFIG_ENCODE_ENABLED() {
        return H5Z_FILTER_CONFIG_ENCODE_ENABLED;
    }
    private static final int H5Z_FILTER_CONFIG_DECODE_ENABLED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5Z_FILTER_CONFIG_DECODE_ENABLED 2
     * }
     */
    public static int H5Z_FILTER_CONFIG_DECODE_ENABLED() {
        return H5Z_FILTER_CONFIG_DECODE_ENABLED;
    }
    private static final int H5D_SEL_IO_DISABLE_BY_API = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5D_SEL_IO_DISABLE_BY_API 1
     * }
     */
    public static int H5D_SEL_IO_DISABLE_BY_API() {
        return H5D_SEL_IO_DISABLE_BY_API;
    }
    private static final int H5D_SEL_IO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5D_SEL_IO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET 2
     * }
     */
    public static int H5D_SEL_IO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET() {
        return H5D_SEL_IO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET;
    }
    private static final int H5D_SEL_IO_CONTIGUOUS_SIEVE_BUFFER = (int)4L;
    /**
     * {@snippet lang=c :
     * #define H5D_SEL_IO_CONTIGUOUS_SIEVE_BUFFER 4
     * }
     */
    public static int H5D_SEL_IO_CONTIGUOUS_SIEVE_BUFFER() {
        return H5D_SEL_IO_CONTIGUOUS_SIEVE_BUFFER;
    }
    private static final int H5D_SEL_IO_NO_VECTOR_OR_SELECTION_IO_CB = (int)8L;
    /**
     * {@snippet lang=c :
     * #define H5D_SEL_IO_NO_VECTOR_OR_SELECTION_IO_CB 8
     * }
     */
    public static int H5D_SEL_IO_NO_VECTOR_OR_SELECTION_IO_CB() {
        return H5D_SEL_IO_NO_VECTOR_OR_SELECTION_IO_CB;
    }
    private static final int H5D_SEL_IO_PAGE_BUFFER = (int)16L;
    /**
     * {@snippet lang=c :
     * #define H5D_SEL_IO_PAGE_BUFFER 16
     * }
     */
    public static int H5D_SEL_IO_PAGE_BUFFER() {
        return H5D_SEL_IO_PAGE_BUFFER;
    }
    private static final int H5D_SEL_IO_DATASET_FILTER = (int)32L;
    /**
     * {@snippet lang=c :
     * #define H5D_SEL_IO_DATASET_FILTER 32
     * }
     */
    public static int H5D_SEL_IO_DATASET_FILTER() {
        return H5D_SEL_IO_DATASET_FILTER;
    }
    private static final int H5D_SEL_IO_CHUNK_CACHE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define H5D_SEL_IO_CHUNK_CACHE 64
     * }
     */
    public static int H5D_SEL_IO_CHUNK_CACHE() {
        return H5D_SEL_IO_CHUNK_CACHE;
    }
    private static final int H5D_SEL_IO_TCONV_BUF_TOO_SMALL = (int)128L;
    /**
     * {@snippet lang=c :
     * #define H5D_SEL_IO_TCONV_BUF_TOO_SMALL 128
     * }
     */
    public static int H5D_SEL_IO_TCONV_BUF_TOO_SMALL() {
        return H5D_SEL_IO_TCONV_BUF_TOO_SMALL;
    }
    private static final int H5D_SEL_IO_BKG_BUF_TOO_SMALL = (int)256L;
    /**
     * {@snippet lang=c :
     * #define H5D_SEL_IO_BKG_BUF_TOO_SMALL 256
     * }
     */
    public static int H5D_SEL_IO_BKG_BUF_TOO_SMALL() {
        return H5D_SEL_IO_BKG_BUF_TOO_SMALL;
    }
    private static final int H5D_SEL_IO_DEFAULT_OFF = (int)512L;
    /**
     * {@snippet lang=c :
     * #define H5D_SEL_IO_DEFAULT_OFF 512
     * }
     */
    public static int H5D_SEL_IO_DEFAULT_OFF() {
        return H5D_SEL_IO_DEFAULT_OFF;
    }
    private static final int H5D_MPIO_NO_SELECTION_IO_CAUSES = (int)481L;
    /**
     * {@snippet lang=c :
     * #define H5D_MPIO_NO_SELECTION_IO_CAUSES 481
     * }
     */
    public static int H5D_MPIO_NO_SELECTION_IO_CAUSES() {
        return H5D_MPIO_NO_SELECTION_IO_CAUSES;
    }
    private static final int H5D_SCALAR_IO = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5D_SCALAR_IO 1
     * }
     */
    public static int H5D_SCALAR_IO() {
        return H5D_SCALAR_IO;
    }
    private static final int H5D_VECTOR_IO = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5D_VECTOR_IO 2
     * }
     */
    public static int H5D_VECTOR_IO() {
        return H5D_VECTOR_IO;
    }
    private static final int H5D_SELECTION_IO = (int)4L;
    /**
     * {@snippet lang=c :
     * #define H5D_SELECTION_IO 4
     * }
     */
    public static int H5D_SELECTION_IO() {
        return H5D_SELECTION_IO;
    }
    /**
     * {@snippet lang=c :
     * #define H5PL_NO_PLUGIN "::"
     * }
     */
    public static MemorySegment H5PL_NO_PLUGIN() {
        class Holder {
            static final MemorySegment H5PL_NO_PLUGIN
                = hdf5_h.LIBRARY_ARENA.allocateFrom("::");
        }
        return Holder.H5PL_NO_PLUGIN;
    }
    private static final int H5FD_MEM_FHEAP_HDR = (int)6L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_FHEAP_HDR 6
     * }
     */
    public static int H5FD_MEM_FHEAP_HDR() {
        return H5FD_MEM_FHEAP_HDR;
    }
    private static final int H5FD_MEM_FHEAP_IBLOCK = (int)6L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_FHEAP_IBLOCK 6
     * }
     */
    public static int H5FD_MEM_FHEAP_IBLOCK() {
        return H5FD_MEM_FHEAP_IBLOCK;
    }
    private static final int H5FD_MEM_FHEAP_DBLOCK = (int)5L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_FHEAP_DBLOCK 5
     * }
     */
    public static int H5FD_MEM_FHEAP_DBLOCK() {
        return H5FD_MEM_FHEAP_DBLOCK;
    }
    private static final int H5FD_MEM_FHEAP_HUGE_OBJ = (int)3L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_FHEAP_HUGE_OBJ 3
     * }
     */
    public static int H5FD_MEM_FHEAP_HUGE_OBJ() {
        return H5FD_MEM_FHEAP_HUGE_OBJ;
    }
    private static final int H5FD_MEM_FSPACE_HDR = (int)6L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_FSPACE_HDR 6
     * }
     */
    public static int H5FD_MEM_FSPACE_HDR() {
        return H5FD_MEM_FSPACE_HDR;
    }
    private static final int H5FD_MEM_FSPACE_SINFO = (int)5L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_FSPACE_SINFO 5
     * }
     */
    public static int H5FD_MEM_FSPACE_SINFO() {
        return H5FD_MEM_FSPACE_SINFO;
    }
    private static final int H5FD_MEM_SOHM_TABLE = (int)6L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_SOHM_TABLE 6
     * }
     */
    public static int H5FD_MEM_SOHM_TABLE() {
        return H5FD_MEM_SOHM_TABLE;
    }
    private static final int H5FD_MEM_SOHM_INDEX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_SOHM_INDEX 2
     * }
     */
    public static int H5FD_MEM_SOHM_INDEX() {
        return H5FD_MEM_SOHM_INDEX;
    }
    private static final int H5FD_MEM_EARRAY_HDR = (int)6L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_EARRAY_HDR 6
     * }
     */
    public static int H5FD_MEM_EARRAY_HDR() {
        return H5FD_MEM_EARRAY_HDR;
    }
    private static final int H5FD_MEM_EARRAY_IBLOCK = (int)6L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_EARRAY_IBLOCK 6
     * }
     */
    public static int H5FD_MEM_EARRAY_IBLOCK() {
        return H5FD_MEM_EARRAY_IBLOCK;
    }
    private static final int H5FD_MEM_EARRAY_SBLOCK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_EARRAY_SBLOCK 2
     * }
     */
    public static int H5FD_MEM_EARRAY_SBLOCK() {
        return H5FD_MEM_EARRAY_SBLOCK;
    }
    private static final int H5FD_MEM_EARRAY_DBLOCK = (int)5L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_EARRAY_DBLOCK 5
     * }
     */
    public static int H5FD_MEM_EARRAY_DBLOCK() {
        return H5FD_MEM_EARRAY_DBLOCK;
    }
    private static final int H5FD_MEM_EARRAY_DBLK_PAGE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_EARRAY_DBLK_PAGE 5
     * }
     */
    public static int H5FD_MEM_EARRAY_DBLK_PAGE() {
        return H5FD_MEM_EARRAY_DBLK_PAGE;
    }
    private static final int H5FD_MEM_FARRAY_HDR = (int)6L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_FARRAY_HDR 6
     * }
     */
    public static int H5FD_MEM_FARRAY_HDR() {
        return H5FD_MEM_FARRAY_HDR;
    }
    private static final int H5FD_MEM_FARRAY_DBLOCK = (int)5L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_FARRAY_DBLOCK 5
     * }
     */
    public static int H5FD_MEM_FARRAY_DBLOCK() {
        return H5FD_MEM_FARRAY_DBLOCK;
    }
    private static final int H5FD_MEM_FARRAY_DBLK_PAGE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MEM_FARRAY_DBLK_PAGE 5
     * }
     */
    public static int H5FD_MEM_FARRAY_DBLK_PAGE() {
        return H5FD_MEM_FARRAY_DBLK_PAGE;
    }
    private static final int H5Z_CLASS_T_VERS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5Z_CLASS_T_VERS 1
     * }
     */
    public static int H5Z_CLASS_T_VERS() {
        return H5Z_CLASS_T_VERS;
    }
    /**
     * {@snippet lang=c :
     * #define H5VL_NATIVE_NAME "native"
     * }
     */
    public static MemorySegment H5VL_NATIVE_NAME() {
        class Holder {
            static final MemorySegment H5VL_NATIVE_NAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("native");
        }
        return Holder.H5VL_NATIVE_NAME;
    }
    private static final int H5VL_NATIVE_VALUE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define H5VL_NATIVE_VALUE 0
     * }
     */
    public static int H5VL_NATIVE_VALUE() {
        return H5VL_NATIVE_VALUE;
    }
    private static final int H5FD_CORE_VALUE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_CORE_VALUE 1
     * }
     */
    public static int H5FD_CORE_VALUE() {
        return H5FD_CORE_VALUE;
    }
    private static final int H5FD_DIRECT = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_DIRECT -1
     * }
     */
    public static int H5FD_DIRECT() {
        return H5FD_DIRECT;
    }
    private static final int H5FD_DIRECT_VALUE = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_DIRECT_VALUE -1
     * }
     */
    public static int H5FD_DIRECT_VALUE() {
        return H5FD_DIRECT_VALUE;
    }
    private static final int CBSIZE_DEF = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define CBSIZE_DEF 16777216
     * }
     */
    public static int CBSIZE_DEF() {
        return CBSIZE_DEF;
    }
    private static final int H5FD_FAMILY_VALUE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define H5FD_FAMILY_VALUE 3
     * }
     */
    public static int H5FD_FAMILY_VALUE() {
        return H5FD_FAMILY_VALUE;
    }
    private static final int H5FD_HDFS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_HDFS -1
     * }
     */
    public static int H5FD_HDFS() {
        return H5FD_HDFS;
    }
    private static final int H5FD_HDFS_VALUE = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_HDFS_VALUE -1
     * }
     */
    public static int H5FD_HDFS_VALUE() {
        return H5FD_HDFS_VALUE;
    }
    private static final int H5FD_LOG_VALUE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define H5FD_LOG_VALUE 2
     * }
     */
    public static int H5FD_LOG_VALUE() {
        return H5FD_LOG_VALUE;
    }
    private static final int H5FD_LOG_META_IO = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_LOG_META_IO 1
     * }
     */
    public static int H5FD_LOG_META_IO() {
        return H5FD_LOG_META_IO;
    }
    private static final int H5FD_LOG_LOC_IO = (int)14L;
    /**
     * {@snippet lang=c :
     * #define H5FD_LOG_LOC_IO 14
     * }
     */
    public static int H5FD_LOG_LOC_IO() {
        return H5FD_LOG_LOC_IO;
    }
    private static final int H5FD_LOG_FILE_IO = (int)48L;
    /**
     * {@snippet lang=c :
     * #define H5FD_LOG_FILE_IO 48
     * }
     */
    public static int H5FD_LOG_FILE_IO() {
        return H5FD_LOG_FILE_IO;
    }
    private static final int H5FD_LOG_NUM_IO = (int)1920L;
    /**
     * {@snippet lang=c :
     * #define H5FD_LOG_NUM_IO 1920
     * }
     */
    public static int H5FD_LOG_NUM_IO() {
        return H5FD_LOG_NUM_IO;
    }
    private static final int H5FD_LOG_TIME_IO = (int)260096L;
    /**
     * {@snippet lang=c :
     * #define H5FD_LOG_TIME_IO 260096
     * }
     */
    public static int H5FD_LOG_TIME_IO() {
        return H5FD_LOG_TIME_IO;
    }
    private static final int H5FD_LOG_ALL = (int)1048575L;
    /**
     * {@snippet lang=c :
     * #define H5FD_LOG_ALL 1048575
     * }
     */
    public static int H5FD_LOG_ALL() {
        return H5FD_LOG_ALL;
    }
    private static final int H5FD_MPIO = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_MPIO -1
     * }
     */
    public static int H5FD_MPIO() {
        return H5FD_MPIO;
    }
    private static final int H5FD_ONION_VALUE = (int)14L;
    /**
     * {@snippet lang=c :
     * #define H5FD_ONION_VALUE 14
     * }
     */
    public static int H5FD_ONION_VALUE() {
        return H5FD_ONION_VALUE;
    }
    private static final int H5FD_ONION_FAPL_INFO_CREATE_FLAG_ENABLE_PAGE_ALIGNMENT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_ONION_FAPL_INFO_CREATE_FLAG_ENABLE_PAGE_ALIGNMENT 1
     * }
     */
    public static int H5FD_ONION_FAPL_INFO_CREATE_FLAG_ENABLE_PAGE_ALIGNMENT() {
        return H5FD_ONION_FAPL_INFO_CREATE_FLAG_ENABLE_PAGE_ALIGNMENT;
    }
    private static final long H5FD_ONION_FAPL_INFO_REVISION_ID_LATEST = -1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_ONION_FAPL_INFO_REVISION_ID_LATEST -1
     * }
     */
    public static long H5FD_ONION_FAPL_INFO_REVISION_ID_LATEST() {
        return H5FD_ONION_FAPL_INFO_REVISION_ID_LATEST;
    }
    private static final int H5FD_ROS3 = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_ROS3 -1
     * }
     */
    public static int H5FD_ROS3() {
        return H5FD_ROS3;
    }
    private static final int H5FD_ROS3_VALUE = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_ROS3_VALUE -1
     * }
     */
    public static int H5FD_ROS3_VALUE() {
        return H5FD_ROS3_VALUE;
    }
    private static final int H5FD_SEC2_VALUE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define H5FD_SEC2_VALUE 0
     * }
     */
    public static int H5FD_SEC2_VALUE() {
        return H5FD_SEC2_VALUE;
    }
    private static final int H5FD_SPLITTER_VALUE = (int)6L;
    /**
     * {@snippet lang=c :
     * #define H5FD_SPLITTER_VALUE 6
     * }
     */
    public static int H5FD_SPLITTER_VALUE() {
        return H5FD_SPLITTER_VALUE;
    }
    private static final int H5FD_SUBFILING = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_SUBFILING -1
     * }
     */
    public static int H5FD_SUBFILING() {
        return H5FD_SUBFILING;
    }
    /**
     * {@snippet lang=c :
     * #define H5FD_SUBFILING_NAME "subfiling"
     * }
     */
    public static MemorySegment H5FD_SUBFILING_NAME() {
        class Holder {
            static final MemorySegment H5FD_SUBFILING_NAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("subfiling");
        }
        return Holder.H5FD_SUBFILING_NAME;
    }
    private static final int H5FD_IOC = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define H5FD_IOC -1
     * }
     */
    public static int H5FD_IOC() {
        return H5FD_IOC;
    }
    /**
     * {@snippet lang=c :
     * #define H5FD_IOC_NAME "ioc"
     * }
     */
    public static MemorySegment H5FD_IOC_NAME() {
        class Holder {
            static final MemorySegment H5FD_IOC_NAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("ioc");
        }
        return Holder.H5FD_IOC_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define H5VL_PASSTHRU_NAME "pass_through"
     * }
     */
    public static MemorySegment H5VL_PASSTHRU_NAME() {
        class Holder {
            static final MemorySegment H5VL_PASSTHRU_NAME
                = hdf5_h.LIBRARY_ARENA.allocateFrom("pass_through");
        }
        return Holder.H5VL_PASSTHRU_NAME;
    }
}

