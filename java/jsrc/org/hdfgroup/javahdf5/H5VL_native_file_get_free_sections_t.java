// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5VL_native_file_get_free_sections_t {
 *     H5F_mem_t type;
 *     H5F_sect_info_t *sect_info;
 *     size_t nsects;
 *     size_t *sect_count;
 * }
 * }
 */
public class H5VL_native_file_get_free_sections_t {

    H5VL_native_file_get_free_sections_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_INT.withName("type"),
        MemoryLayout.paddingLayout(4),
        hdf5_h.C_POINTER.withName("sect_info"),
        hdf5_h.C_LONG.withName("nsects"),
        hdf5_h.C_POINTER.withName("sect_count")
    ).withName("H5VL_native_file_get_free_sections_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5F_mem_t type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5F_mem_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5F_mem_t type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5F_mem_t type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final AddressLayout sect_info$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sect_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5F_sect_info_t *sect_info
     * }
     */
    public static final AddressLayout sect_info$layout() {
        return sect_info$LAYOUT;
    }

    private static final long sect_info$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5F_sect_info_t *sect_info
     * }
     */
    public static final long sect_info$offset() {
        return sect_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5F_sect_info_t *sect_info
     * }
     */
    public static MemorySegment sect_info(MemorySegment struct) {
        return struct.get(sect_info$LAYOUT, sect_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5F_sect_info_t *sect_info
     * }
     */
    public static void sect_info(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sect_info$LAYOUT, sect_info$OFFSET, fieldValue);
    }

    private static final OfLong nsects$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nsects"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t nsects
     * }
     */
    public static final OfLong nsects$layout() {
        return nsects$LAYOUT;
    }

    private static final long nsects$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t nsects
     * }
     */
    public static final long nsects$offset() {
        return nsects$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t nsects
     * }
     */
    public static long nsects(MemorySegment struct) {
        return struct.get(nsects$LAYOUT, nsects$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t nsects
     * }
     */
    public static void nsects(MemorySegment struct, long fieldValue) {
        struct.set(nsects$LAYOUT, nsects$OFFSET, fieldValue);
    }

    private static final AddressLayout sect_count$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sect_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t *sect_count
     * }
     */
    public static final AddressLayout sect_count$layout() {
        return sect_count$LAYOUT;
    }

    private static final long sect_count$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t *sect_count
     * }
     */
    public static final long sect_count$offset() {
        return sect_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t *sect_count
     * }
     */
    public static MemorySegment sect_count(MemorySegment struct) {
        return struct.get(sect_count$LAYOUT, sect_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t *sect_count
     * }
     */
    public static void sect_count(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sect_count$LAYOUT, sect_count$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

