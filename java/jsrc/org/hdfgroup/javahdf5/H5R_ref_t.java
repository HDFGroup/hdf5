// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct {
 *     union {
 *         uint8_t __data[64];
 *         int64_t align;
 *     } u;
 * }
 * }
 */
public class H5R_ref_t {

    H5R_ref_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout.structLayout(H5R_ref_t.u.layout().withName("u")).withName("$anon$97:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    /**
     * {@snippet lang=c :
     * union {
     *     uint8_t __data[64];
     *     int64_t align;
     * }
     * }
     */
    public static class u {

        u()
        {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT =
            MemoryLayout
                .unionLayout(MemoryLayout.sequenceLayout(64, hdf5_h.C_CHAR).withName("__data"),
                             hdf5_h.C_LONG.withName("align"))
                .withName("$anon$98:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() { return $LAYOUT; }

        private static final SequenceLayout __data$LAYOUT =
            (SequenceLayout)$LAYOUT.select(groupElement("__data"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t __data[64]
         * }
         */
        public static final SequenceLayout __data$layout() { return __data$LAYOUT; }

        private static final long __data$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t __data[64]
         * }
         */
        public static final long __data$offset() { return __data$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t __data[64]
         * }
         */
        public static MemorySegment __data(MemorySegment union)
        {
            return union.asSlice(__data$OFFSET, __data$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t __data[64]
         * }
         */
        public static void __data(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, __data$OFFSET, __data$LAYOUT.byteSize());
        }

        private static long[] __data$DIMS = {64};

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * uint8_t __data[64]
         * }
         */
        public static long[] __data$dimensions() { return __data$DIMS; }
        private static final VarHandle __data$ELEM_HANDLE = __data$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * uint8_t __data[64]
         * }
         */
        public static byte __data(MemorySegment union, long index0)
        {
            return (byte)__data$ELEM_HANDLE.get(union, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * uint8_t __data[64]
         * }
         */
        public static void __data(MemorySegment union, long index0, byte fieldValue)
        {
            __data$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
        }

        private static final OfLong align$LAYOUT = (OfLong)$LAYOUT.select(groupElement("align"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t align
         * }
         */
        public static final OfLong align$layout() { return align$LAYOUT; }

        private static final long align$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t align
         * }
         */
        public static final long align$offset() { return align$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t align
         * }
         */
        public static long align(MemorySegment union) { return union.get(align$LAYOUT, align$OFFSET); }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t align
         * }
         */
        public static void align(MemorySegment union, long fieldValue)
        {
            union.set(align$LAYOUT, align$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index)
        {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator)
        {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
        {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout u$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     uint8_t __data[64];
     *     int64_t align;
     * } u
     * }
     */
    public static final GroupLayout u$layout() { return u$LAYOUT; }

    private static final long u$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     uint8_t __data[64];
     *     int64_t align;
     * } u
     * }
     */
    public static final long u$offset() { return u$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     uint8_t __data[64];
     *     int64_t align;
     * } u
     * }
     */
    public static MemorySegment u(MemorySegment struct)
    {
        return struct.asSlice(u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     uint8_t __data[64];
     *     int64_t align;
     * } u
     * }
     */
    public static void u(MemorySegment struct, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, struct, u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
