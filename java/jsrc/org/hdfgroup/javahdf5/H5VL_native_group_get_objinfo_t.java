// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5VL_native_group_get_objinfo_t {
 *     H5VL_loc_params_t loc_params;
 *     hbool_t follow_link;
 *     H5G_stat_t *statbuf;
 * }
 * }
 */
public class H5VL_native_group_get_objinfo_t {

    H5VL_native_group_get_objinfo_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(H5VL_loc_params_t.layout().withName("loc_params"),
                          hdf5_h.C_BOOL.withName("follow_link"), MemoryLayout.paddingLayout(7),
                          hdf5_h.C_POINTER.withName("statbuf"))
            .withName("H5VL_native_group_get_objinfo_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final GroupLayout loc_params$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("loc_params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_loc_params_t loc_params
     * }
     */
    public static final GroupLayout loc_params$layout() { return loc_params$LAYOUT; }

    private static final long loc_params$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_loc_params_t loc_params
     * }
     */
    public static final long loc_params$offset() { return loc_params$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_loc_params_t loc_params
     * }
     */
    public static MemorySegment loc_params(MemorySegment struct)
    {
        return struct.asSlice(loc_params$OFFSET, loc_params$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_loc_params_t loc_params
     * }
     */
    public static void loc_params(MemorySegment struct, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, struct, loc_params$OFFSET, loc_params$LAYOUT.byteSize());
    }

    private static final OfBoolean follow_link$LAYOUT =
        (OfBoolean)$LAYOUT.select(groupElement("follow_link"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hbool_t follow_link
     * }
     */
    public static final OfBoolean follow_link$layout() { return follow_link$LAYOUT; }

    private static final long follow_link$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hbool_t follow_link
     * }
     */
    public static final long follow_link$offset() { return follow_link$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hbool_t follow_link
     * }
     */
    public static boolean follow_link(MemorySegment struct)
    {
        return struct.get(follow_link$LAYOUT, follow_link$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hbool_t follow_link
     * }
     */
    public static void follow_link(MemorySegment struct, boolean fieldValue)
    {
        struct.set(follow_link$LAYOUT, follow_link$OFFSET, fieldValue);
    }

    private static final AddressLayout statbuf$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("statbuf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5G_stat_t *statbuf
     * }
     */
    public static final AddressLayout statbuf$layout() { return statbuf$LAYOUT; }

    private static final long statbuf$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5G_stat_t *statbuf
     * }
     */
    public static final long statbuf$offset() { return statbuf$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5G_stat_t *statbuf
     * }
     */
    public static MemorySegment statbuf(MemorySegment struct)
    {
        return struct.get(statbuf$LAYOUT, statbuf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5G_stat_t *statbuf
     * }
     */
    public static void statbuf(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(statbuf$LAYOUT, statbuf$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
