// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5O_info2_t {
 *     unsigned long fileno;
 *     H5O_token_t token;
 *     H5O_type_t type;
 *     unsigned int rc;
 *     time_t atime;
 *     time_t mtime;
 *     time_t ctime;
 *     time_t btime;
 *     hsize_t num_attrs;
 * }
 * }
 */
public class H5O_info2_t {

    H5O_info2_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(hdf5_h.C_LONG.withName("fileno"), H5O_token_t.layout().withName("token"),
                          hdf5_h.C_INT.withName("type"), hdf5_h.C_INT.withName("rc"),
                          hdf5_h.C_LONG.withName("atime"), hdf5_h.C_LONG.withName("mtime"),
                          hdf5_h.C_LONG.withName("ctime"), hdf5_h.C_LONG.withName("btime"),
                          hdf5_h.C_LONG.withName("num_attrs"))
            .withName("H5O_info2_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfLong fileno$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fileno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long fileno
     * }
     */
    public static final OfLong fileno$layout() { return fileno$LAYOUT; }

    private static final long fileno$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long fileno
     * }
     */
    public static final long fileno$offset() { return fileno$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long fileno
     * }
     */
    public static long fileno(MemorySegment struct) { return struct.get(fileno$LAYOUT, fileno$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long fileno
     * }
     */
    public static void fileno(MemorySegment struct, long fieldValue)
    {
        struct.set(fileno$LAYOUT, fileno$OFFSET, fieldValue);
    }

    private static final GroupLayout token$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("token"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5O_token_t token
     * }
     */
    public static final GroupLayout token$layout() { return token$LAYOUT; }

    private static final long token$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5O_token_t token
     * }
     */
    public static final long token$offset() { return token$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5O_token_t token
     * }
     */
    public static MemorySegment token(MemorySegment struct)
    {
        return struct.asSlice(token$OFFSET, token$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5O_token_t token
     * }
     */
    public static void token(MemorySegment struct, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, struct, token$OFFSET, token$LAYOUT.byteSize());
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5O_type_t type
     * }
     */
    public static final OfInt type$layout() { return type$LAYOUT; }

    private static final long type$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5O_type_t type
     * }
     */
    public static final long type$offset() { return type$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5O_type_t type
     * }
     */
    public static int type(MemorySegment struct) { return struct.get(type$LAYOUT, type$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5O_type_t type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue)
    {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt rc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int rc
     * }
     */
    public static final OfInt rc$layout() { return rc$LAYOUT; }

    private static final long rc$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int rc
     * }
     */
    public static final long rc$offset() { return rc$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int rc
     * }
     */
    public static int rc(MemorySegment struct) { return struct.get(rc$LAYOUT, rc$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int rc
     * }
     */
    public static void rc(MemorySegment struct, int fieldValue)
    {
        struct.set(rc$LAYOUT, rc$OFFSET, fieldValue);
    }

    private static final OfLong atime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("atime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * time_t atime
     * }
     */
    public static final OfLong atime$layout() { return atime$LAYOUT; }

    private static final long atime$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * time_t atime
     * }
     */
    public static final long atime$offset() { return atime$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * time_t atime
     * }
     */
    public static long atime(MemorySegment struct) { return struct.get(atime$LAYOUT, atime$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * time_t atime
     * }
     */
    public static void atime(MemorySegment struct, long fieldValue)
    {
        struct.set(atime$LAYOUT, atime$OFFSET, fieldValue);
    }

    private static final OfLong mtime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mtime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * time_t mtime
     * }
     */
    public static final OfLong mtime$layout() { return mtime$LAYOUT; }

    private static final long mtime$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * time_t mtime
     * }
     */
    public static final long mtime$offset() { return mtime$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * time_t mtime
     * }
     */
    public static long mtime(MemorySegment struct) { return struct.get(mtime$LAYOUT, mtime$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * time_t mtime
     * }
     */
    public static void mtime(MemorySegment struct, long fieldValue)
    {
        struct.set(mtime$LAYOUT, mtime$OFFSET, fieldValue);
    }

    private static final OfLong ctime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ctime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * time_t ctime
     * }
     */
    public static final OfLong ctime$layout() { return ctime$LAYOUT; }

    private static final long ctime$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * time_t ctime
     * }
     */
    public static final long ctime$offset() { return ctime$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * time_t ctime
     * }
     */
    public static long ctime(MemorySegment struct) { return struct.get(ctime$LAYOUT, ctime$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * time_t ctime
     * }
     */
    public static void ctime(MemorySegment struct, long fieldValue)
    {
        struct.set(ctime$LAYOUT, ctime$OFFSET, fieldValue);
    }

    private static final OfLong btime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("btime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * time_t btime
     * }
     */
    public static final OfLong btime$layout() { return btime$LAYOUT; }

    private static final long btime$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * time_t btime
     * }
     */
    public static final long btime$offset() { return btime$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * time_t btime
     * }
     */
    public static long btime(MemorySegment struct) { return struct.get(btime$LAYOUT, btime$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * time_t btime
     * }
     */
    public static void btime(MemorySegment struct, long fieldValue)
    {
        struct.set(btime$LAYOUT, btime$OFFSET, fieldValue);
    }

    private static final OfLong num_attrs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("num_attrs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t num_attrs
     * }
     */
    public static final OfLong num_attrs$layout() { return num_attrs$LAYOUT; }

    private static final long num_attrs$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t num_attrs
     * }
     */
    public static final long num_attrs$offset() { return num_attrs$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t num_attrs
     * }
     */
    public static long num_attrs(MemorySegment struct)
    {
        return struct.get(num_attrs$LAYOUT, num_attrs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t num_attrs
     * }
     */
    public static void num_attrs(MemorySegment struct, long fieldValue)
    {
        struct.set(num_attrs$LAYOUT, num_attrs$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
