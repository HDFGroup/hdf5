// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

public class hdf5_h_1 extends hdf5_h_2 {

    hdf5_h_1()
    {
        // Should not be called directly
    }

    private static class H5T_NATIVE_USHORT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_USHORT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_USHORT_g
     * }
     */
    public static OfLong H5T_NATIVE_USHORT_g$layout() { return H5T_NATIVE_USHORT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_USHORT_g
     * }
     */
    public static MemorySegment H5T_NATIVE_USHORT_g$segment()
    {
        return H5T_NATIVE_USHORT_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_USHORT_g
     * }
     */
    public static long H5T_NATIVE_USHORT_g()
    {
        return H5T_NATIVE_USHORT_g$constants.SEGMENT.get(H5T_NATIVE_USHORT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_USHORT_g
     * }
     */
    public static void H5T_NATIVE_USHORT_g(long varValue)
    {
        H5T_NATIVE_USHORT_g$constants.SEGMENT.set(H5T_NATIVE_USHORT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_INT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_g
     * }
     */
    public static OfLong H5T_NATIVE_INT_g$layout() { return H5T_NATIVE_INT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT_g$segment() { return H5T_NATIVE_INT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_g
     * }
     */
    public static long H5T_NATIVE_INT_g()
    {
        return H5T_NATIVE_INT_g$constants.SEGMENT.get(H5T_NATIVE_INT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_g
     * }
     */
    public static void H5T_NATIVE_INT_g(long varValue)
    {
        H5T_NATIVE_INT_g$constants.SEGMENT.set(H5T_NATIVE_INT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_UINT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT_g$layout() { return H5T_NATIVE_UINT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT_g$segment() { return H5T_NATIVE_UINT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_g
     * }
     */
    public static long H5T_NATIVE_UINT_g()
    {
        return H5T_NATIVE_UINT_g$constants.SEGMENT.get(H5T_NATIVE_UINT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_g
     * }
     */
    public static void H5T_NATIVE_UINT_g(long varValue)
    {
        H5T_NATIVE_UINT_g$constants.SEGMENT.set(H5T_NATIVE_UINT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_LONG_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_LONG_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_LONG_g
     * }
     */
    public static OfLong H5T_NATIVE_LONG_g$layout() { return H5T_NATIVE_LONG_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_LONG_g
     * }
     */
    public static MemorySegment H5T_NATIVE_LONG_g$segment() { return H5T_NATIVE_LONG_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_LONG_g
     * }
     */
    public static long H5T_NATIVE_LONG_g()
    {
        return H5T_NATIVE_LONG_g$constants.SEGMENT.get(H5T_NATIVE_LONG_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_LONG_g
     * }
     */
    public static void H5T_NATIVE_LONG_g(long varValue)
    {
        H5T_NATIVE_LONG_g$constants.SEGMENT.set(H5T_NATIVE_LONG_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_ULONG_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_ULONG_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_ULONG_g
     * }
     */
    public static OfLong H5T_NATIVE_ULONG_g$layout() { return H5T_NATIVE_ULONG_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_ULONG_g
     * }
     */
    public static MemorySegment H5T_NATIVE_ULONG_g$segment() { return H5T_NATIVE_ULONG_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_ULONG_g
     * }
     */
    public static long H5T_NATIVE_ULONG_g()
    {
        return H5T_NATIVE_ULONG_g$constants.SEGMENT.get(H5T_NATIVE_ULONG_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_ULONG_g
     * }
     */
    public static void H5T_NATIVE_ULONG_g(long varValue)
    {
        H5T_NATIVE_ULONG_g$constants.SEGMENT.set(H5T_NATIVE_ULONG_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_LLONG_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_LLONG_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_LLONG_g
     * }
     */
    public static OfLong H5T_NATIVE_LLONG_g$layout() { return H5T_NATIVE_LLONG_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_LLONG_g
     * }
     */
    public static MemorySegment H5T_NATIVE_LLONG_g$segment() { return H5T_NATIVE_LLONG_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_LLONG_g
     * }
     */
    public static long H5T_NATIVE_LLONG_g()
    {
        return H5T_NATIVE_LLONG_g$constants.SEGMENT.get(H5T_NATIVE_LLONG_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_LLONG_g
     * }
     */
    public static void H5T_NATIVE_LLONG_g(long varValue)
    {
        H5T_NATIVE_LLONG_g$constants.SEGMENT.set(H5T_NATIVE_LLONG_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_ULLONG_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_ULLONG_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_ULLONG_g
     * }
     */
    public static OfLong H5T_NATIVE_ULLONG_g$layout() { return H5T_NATIVE_ULLONG_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_ULLONG_g
     * }
     */
    public static MemorySegment H5T_NATIVE_ULLONG_g$segment()
    {
        return H5T_NATIVE_ULLONG_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_ULLONG_g
     * }
     */
    public static long H5T_NATIVE_ULLONG_g()
    {
        return H5T_NATIVE_ULLONG_g$constants.SEGMENT.get(H5T_NATIVE_ULLONG_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_ULLONG_g
     * }
     */
    public static void H5T_NATIVE_ULLONG_g(long varValue)
    {
        H5T_NATIVE_ULLONG_g$constants.SEGMENT.set(H5T_NATIVE_ULLONG_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_FLOAT16_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_FLOAT16_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_FLOAT16_g
     * }
     */
    public static OfLong H5T_NATIVE_FLOAT16_g$layout() { return H5T_NATIVE_FLOAT16_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_FLOAT16_g
     * }
     */
    public static MemorySegment H5T_NATIVE_FLOAT16_g$segment()
    {
        return H5T_NATIVE_FLOAT16_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_FLOAT16_g
     * }
     */
    public static long H5T_NATIVE_FLOAT16_g()
    {
        return H5T_NATIVE_FLOAT16_g$constants.SEGMENT.get(H5T_NATIVE_FLOAT16_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_FLOAT16_g
     * }
     */
    public static void H5T_NATIVE_FLOAT16_g(long varValue)
    {
        H5T_NATIVE_FLOAT16_g$constants.SEGMENT.set(H5T_NATIVE_FLOAT16_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_FLOAT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_FLOAT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_FLOAT_g
     * }
     */
    public static OfLong H5T_NATIVE_FLOAT_g$layout() { return H5T_NATIVE_FLOAT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_FLOAT_g
     * }
     */
    public static MemorySegment H5T_NATIVE_FLOAT_g$segment() { return H5T_NATIVE_FLOAT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_FLOAT_g
     * }
     */
    public static long H5T_NATIVE_FLOAT_g()
    {
        return H5T_NATIVE_FLOAT_g$constants.SEGMENT.get(H5T_NATIVE_FLOAT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_FLOAT_g
     * }
     */
    public static void H5T_NATIVE_FLOAT_g(long varValue)
    {
        H5T_NATIVE_FLOAT_g$constants.SEGMENT.set(H5T_NATIVE_FLOAT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_DOUBLE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_DOUBLE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_DOUBLE_g
     * }
     */
    public static OfLong H5T_NATIVE_DOUBLE_g$layout() { return H5T_NATIVE_DOUBLE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_DOUBLE_g
     * }
     */
    public static MemorySegment H5T_NATIVE_DOUBLE_g$segment()
    {
        return H5T_NATIVE_DOUBLE_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_DOUBLE_g
     * }
     */
    public static long H5T_NATIVE_DOUBLE_g()
    {
        return H5T_NATIVE_DOUBLE_g$constants.SEGMENT.get(H5T_NATIVE_DOUBLE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_DOUBLE_g
     * }
     */
    public static void H5T_NATIVE_DOUBLE_g(long varValue)
    {
        H5T_NATIVE_DOUBLE_g$constants.SEGMENT.set(H5T_NATIVE_DOUBLE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_LDOUBLE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_LDOUBLE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_LDOUBLE_g
     * }
     */
    public static OfLong H5T_NATIVE_LDOUBLE_g$layout() { return H5T_NATIVE_LDOUBLE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_LDOUBLE_g
     * }
     */
    public static MemorySegment H5T_NATIVE_LDOUBLE_g$segment()
    {
        return H5T_NATIVE_LDOUBLE_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_LDOUBLE_g
     * }
     */
    public static long H5T_NATIVE_LDOUBLE_g()
    {
        return H5T_NATIVE_LDOUBLE_g$constants.SEGMENT.get(H5T_NATIVE_LDOUBLE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_LDOUBLE_g
     * }
     */
    public static void H5T_NATIVE_LDOUBLE_g(long varValue)
    {
        H5T_NATIVE_LDOUBLE_g$constants.SEGMENT.set(H5T_NATIVE_LDOUBLE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_B8_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_B8_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B8_g
     * }
     */
    public static OfLong H5T_NATIVE_B8_g$layout() { return H5T_NATIVE_B8_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B8_g
     * }
     */
    public static MemorySegment H5T_NATIVE_B8_g$segment() { return H5T_NATIVE_B8_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B8_g
     * }
     */
    public static long H5T_NATIVE_B8_g()
    {
        return H5T_NATIVE_B8_g$constants.SEGMENT.get(H5T_NATIVE_B8_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B8_g
     * }
     */
    public static void H5T_NATIVE_B8_g(long varValue)
    {
        H5T_NATIVE_B8_g$constants.SEGMENT.set(H5T_NATIVE_B8_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_B16_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_B16_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B16_g
     * }
     */
    public static OfLong H5T_NATIVE_B16_g$layout() { return H5T_NATIVE_B16_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B16_g
     * }
     */
    public static MemorySegment H5T_NATIVE_B16_g$segment() { return H5T_NATIVE_B16_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B16_g
     * }
     */
    public static long H5T_NATIVE_B16_g()
    {
        return H5T_NATIVE_B16_g$constants.SEGMENT.get(H5T_NATIVE_B16_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B16_g
     * }
     */
    public static void H5T_NATIVE_B16_g(long varValue)
    {
        H5T_NATIVE_B16_g$constants.SEGMENT.set(H5T_NATIVE_B16_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_B32_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_B32_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B32_g
     * }
     */
    public static OfLong H5T_NATIVE_B32_g$layout() { return H5T_NATIVE_B32_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B32_g
     * }
     */
    public static MemorySegment H5T_NATIVE_B32_g$segment() { return H5T_NATIVE_B32_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B32_g
     * }
     */
    public static long H5T_NATIVE_B32_g()
    {
        return H5T_NATIVE_B32_g$constants.SEGMENT.get(H5T_NATIVE_B32_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B32_g
     * }
     */
    public static void H5T_NATIVE_B32_g(long varValue)
    {
        H5T_NATIVE_B32_g$constants.SEGMENT.set(H5T_NATIVE_B32_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_B64_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_B64_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B64_g
     * }
     */
    public static OfLong H5T_NATIVE_B64_g$layout() { return H5T_NATIVE_B64_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B64_g
     * }
     */
    public static MemorySegment H5T_NATIVE_B64_g$segment() { return H5T_NATIVE_B64_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B64_g
     * }
     */
    public static long H5T_NATIVE_B64_g()
    {
        return H5T_NATIVE_B64_g$constants.SEGMENT.get(H5T_NATIVE_B64_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_B64_g
     * }
     */
    public static void H5T_NATIVE_B64_g(long varValue)
    {
        H5T_NATIVE_B64_g$constants.SEGMENT.set(H5T_NATIVE_B64_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_OPAQUE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_OPAQUE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_OPAQUE_g
     * }
     */
    public static OfLong H5T_NATIVE_OPAQUE_g$layout() { return H5T_NATIVE_OPAQUE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_OPAQUE_g
     * }
     */
    public static MemorySegment H5T_NATIVE_OPAQUE_g$segment()
    {
        return H5T_NATIVE_OPAQUE_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_OPAQUE_g
     * }
     */
    public static long H5T_NATIVE_OPAQUE_g()
    {
        return H5T_NATIVE_OPAQUE_g$constants.SEGMENT.get(H5T_NATIVE_OPAQUE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_OPAQUE_g
     * }
     */
    public static void H5T_NATIVE_OPAQUE_g(long varValue)
    {
        H5T_NATIVE_OPAQUE_g$constants.SEGMENT.set(H5T_NATIVE_OPAQUE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_HADDR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_HADDR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HADDR_g
     * }
     */
    public static OfLong H5T_NATIVE_HADDR_g$layout() { return H5T_NATIVE_HADDR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HADDR_g
     * }
     */
    public static MemorySegment H5T_NATIVE_HADDR_g$segment() { return H5T_NATIVE_HADDR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HADDR_g
     * }
     */
    public static long H5T_NATIVE_HADDR_g()
    {
        return H5T_NATIVE_HADDR_g$constants.SEGMENT.get(H5T_NATIVE_HADDR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HADDR_g
     * }
     */
    public static void H5T_NATIVE_HADDR_g(long varValue)
    {
        H5T_NATIVE_HADDR_g$constants.SEGMENT.set(H5T_NATIVE_HADDR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_HSIZE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_HSIZE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HSIZE_g
     * }
     */
    public static OfLong H5T_NATIVE_HSIZE_g$layout() { return H5T_NATIVE_HSIZE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HSIZE_g
     * }
     */
    public static MemorySegment H5T_NATIVE_HSIZE_g$segment() { return H5T_NATIVE_HSIZE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HSIZE_g
     * }
     */
    public static long H5T_NATIVE_HSIZE_g()
    {
        return H5T_NATIVE_HSIZE_g$constants.SEGMENT.get(H5T_NATIVE_HSIZE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HSIZE_g
     * }
     */
    public static void H5T_NATIVE_HSIZE_g(long varValue)
    {
        H5T_NATIVE_HSIZE_g$constants.SEGMENT.set(H5T_NATIVE_HSIZE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_HSSIZE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_HSSIZE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HSSIZE_g
     * }
     */
    public static OfLong H5T_NATIVE_HSSIZE_g$layout() { return H5T_NATIVE_HSSIZE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HSSIZE_g
     * }
     */
    public static MemorySegment H5T_NATIVE_HSSIZE_g$segment()
    {
        return H5T_NATIVE_HSSIZE_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HSSIZE_g
     * }
     */
    public static long H5T_NATIVE_HSSIZE_g()
    {
        return H5T_NATIVE_HSSIZE_g$constants.SEGMENT.get(H5T_NATIVE_HSSIZE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HSSIZE_g
     * }
     */
    public static void H5T_NATIVE_HSSIZE_g(long varValue)
    {
        H5T_NATIVE_HSSIZE_g$constants.SEGMENT.set(H5T_NATIVE_HSSIZE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_HERR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_HERR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HERR_g
     * }
     */
    public static OfLong H5T_NATIVE_HERR_g$layout() { return H5T_NATIVE_HERR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HERR_g
     * }
     */
    public static MemorySegment H5T_NATIVE_HERR_g$segment() { return H5T_NATIVE_HERR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HERR_g
     * }
     */
    public static long H5T_NATIVE_HERR_g()
    {
        return H5T_NATIVE_HERR_g$constants.SEGMENT.get(H5T_NATIVE_HERR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HERR_g
     * }
     */
    public static void H5T_NATIVE_HERR_g(long varValue)
    {
        H5T_NATIVE_HERR_g$constants.SEGMENT.set(H5T_NATIVE_HERR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_HBOOL_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_HBOOL_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HBOOL_g
     * }
     */
    public static OfLong H5T_NATIVE_HBOOL_g$layout() { return H5T_NATIVE_HBOOL_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HBOOL_g
     * }
     */
    public static MemorySegment H5T_NATIVE_HBOOL_g$segment() { return H5T_NATIVE_HBOOL_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HBOOL_g
     * }
     */
    public static long H5T_NATIVE_HBOOL_g()
    {
        return H5T_NATIVE_HBOOL_g$constants.SEGMENT.get(H5T_NATIVE_HBOOL_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_HBOOL_g
     * }
     */
    public static void H5T_NATIVE_HBOOL_g(long varValue)
    {
        H5T_NATIVE_HBOOL_g$constants.SEGMENT.set(H5T_NATIVE_HBOOL_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_INT8_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT8_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT8_g
     * }
     */
    public static OfLong H5T_NATIVE_INT8_g$layout() { return H5T_NATIVE_INT8_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT8_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT8_g$segment() { return H5T_NATIVE_INT8_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT8_g
     * }
     */
    public static long H5T_NATIVE_INT8_g()
    {
        return H5T_NATIVE_INT8_g$constants.SEGMENT.get(H5T_NATIVE_INT8_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT8_g
     * }
     */
    public static void H5T_NATIVE_INT8_g(long varValue)
    {
        H5T_NATIVE_INT8_g$constants.SEGMENT.set(H5T_NATIVE_INT8_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_UINT8_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT8_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT8_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT8_g$layout() { return H5T_NATIVE_UINT8_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT8_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT8_g$segment() { return H5T_NATIVE_UINT8_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT8_g
     * }
     */
    public static long H5T_NATIVE_UINT8_g()
    {
        return H5T_NATIVE_UINT8_g$constants.SEGMENT.get(H5T_NATIVE_UINT8_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT8_g
     * }
     */
    public static void H5T_NATIVE_UINT8_g(long varValue)
    {
        H5T_NATIVE_UINT8_g$constants.SEGMENT.set(H5T_NATIVE_UINT8_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_INT_LEAST8_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT_LEAST8_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST8_g
     * }
     */
    public static OfLong H5T_NATIVE_INT_LEAST8_g$layout() { return H5T_NATIVE_INT_LEAST8_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST8_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT_LEAST8_g$segment()
    {
        return H5T_NATIVE_INT_LEAST8_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST8_g
     * }
     */
    public static long H5T_NATIVE_INT_LEAST8_g()
    {
        return H5T_NATIVE_INT_LEAST8_g$constants.SEGMENT.get(H5T_NATIVE_INT_LEAST8_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST8_g
     * }
     */
    public static void H5T_NATIVE_INT_LEAST8_g(long varValue)
    {
        H5T_NATIVE_INT_LEAST8_g$constants.SEGMENT.set(H5T_NATIVE_INT_LEAST8_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_UINT_LEAST8_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT_LEAST8_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST8_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT_LEAST8_g$layout()
    {
        return H5T_NATIVE_UINT_LEAST8_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST8_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT_LEAST8_g$segment()
    {
        return H5T_NATIVE_UINT_LEAST8_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST8_g
     * }
     */
    public static long H5T_NATIVE_UINT_LEAST8_g()
    {
        return H5T_NATIVE_UINT_LEAST8_g$constants.SEGMENT.get(H5T_NATIVE_UINT_LEAST8_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST8_g
     * }
     */
    public static void H5T_NATIVE_UINT_LEAST8_g(long varValue)
    {
        H5T_NATIVE_UINT_LEAST8_g$constants.SEGMENT.set(H5T_NATIVE_UINT_LEAST8_g$constants.LAYOUT, 0L,
                                                       varValue);
    }

    private static class H5T_NATIVE_INT_FAST8_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT_FAST8_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST8_g
     * }
     */
    public static OfLong H5T_NATIVE_INT_FAST8_g$layout() { return H5T_NATIVE_INT_FAST8_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST8_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT_FAST8_g$segment()
    {
        return H5T_NATIVE_INT_FAST8_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST8_g
     * }
     */
    public static long H5T_NATIVE_INT_FAST8_g()
    {
        return H5T_NATIVE_INT_FAST8_g$constants.SEGMENT.get(H5T_NATIVE_INT_FAST8_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST8_g
     * }
     */
    public static void H5T_NATIVE_INT_FAST8_g(long varValue)
    {
        H5T_NATIVE_INT_FAST8_g$constants.SEGMENT.set(H5T_NATIVE_INT_FAST8_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_UINT_FAST8_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT_FAST8_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST8_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT_FAST8_g$layout() { return H5T_NATIVE_UINT_FAST8_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST8_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT_FAST8_g$segment()
    {
        return H5T_NATIVE_UINT_FAST8_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST8_g
     * }
     */
    public static long H5T_NATIVE_UINT_FAST8_g()
    {
        return H5T_NATIVE_UINT_FAST8_g$constants.SEGMENT.get(H5T_NATIVE_UINT_FAST8_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST8_g
     * }
     */
    public static void H5T_NATIVE_UINT_FAST8_g(long varValue)
    {
        H5T_NATIVE_UINT_FAST8_g$constants.SEGMENT.set(H5T_NATIVE_UINT_FAST8_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_INT16_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT16_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT16_g
     * }
     */
    public static OfLong H5T_NATIVE_INT16_g$layout() { return H5T_NATIVE_INT16_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT16_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT16_g$segment() { return H5T_NATIVE_INT16_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT16_g
     * }
     */
    public static long H5T_NATIVE_INT16_g()
    {
        return H5T_NATIVE_INT16_g$constants.SEGMENT.get(H5T_NATIVE_INT16_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT16_g
     * }
     */
    public static void H5T_NATIVE_INT16_g(long varValue)
    {
        H5T_NATIVE_INT16_g$constants.SEGMENT.set(H5T_NATIVE_INT16_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_UINT16_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT16_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT16_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT16_g$layout() { return H5T_NATIVE_UINT16_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT16_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT16_g$segment()
    {
        return H5T_NATIVE_UINT16_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT16_g
     * }
     */
    public static long H5T_NATIVE_UINT16_g()
    {
        return H5T_NATIVE_UINT16_g$constants.SEGMENT.get(H5T_NATIVE_UINT16_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT16_g
     * }
     */
    public static void H5T_NATIVE_UINT16_g(long varValue)
    {
        H5T_NATIVE_UINT16_g$constants.SEGMENT.set(H5T_NATIVE_UINT16_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_INT_LEAST16_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT_LEAST16_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST16_g
     * }
     */
    public static OfLong H5T_NATIVE_INT_LEAST16_g$layout()
    {
        return H5T_NATIVE_INT_LEAST16_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST16_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT_LEAST16_g$segment()
    {
        return H5T_NATIVE_INT_LEAST16_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST16_g
     * }
     */
    public static long H5T_NATIVE_INT_LEAST16_g()
    {
        return H5T_NATIVE_INT_LEAST16_g$constants.SEGMENT.get(H5T_NATIVE_INT_LEAST16_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST16_g
     * }
     */
    public static void H5T_NATIVE_INT_LEAST16_g(long varValue)
    {
        H5T_NATIVE_INT_LEAST16_g$constants.SEGMENT.set(H5T_NATIVE_INT_LEAST16_g$constants.LAYOUT, 0L,
                                                       varValue);
    }

    private static class H5T_NATIVE_UINT_LEAST16_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT_LEAST16_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST16_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT_LEAST16_g$layout()
    {
        return H5T_NATIVE_UINT_LEAST16_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST16_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT_LEAST16_g$segment()
    {
        return H5T_NATIVE_UINT_LEAST16_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST16_g
     * }
     */
    public static long H5T_NATIVE_UINT_LEAST16_g()
    {
        return H5T_NATIVE_UINT_LEAST16_g$constants.SEGMENT.get(H5T_NATIVE_UINT_LEAST16_g$constants.LAYOUT,
                                                               0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST16_g
     * }
     */
    public static void H5T_NATIVE_UINT_LEAST16_g(long varValue)
    {
        H5T_NATIVE_UINT_LEAST16_g$constants.SEGMENT.set(H5T_NATIVE_UINT_LEAST16_g$constants.LAYOUT, 0L,
                                                        varValue);
    }

    private static class H5T_NATIVE_INT_FAST16_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT_FAST16_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST16_g
     * }
     */
    public static OfLong H5T_NATIVE_INT_FAST16_g$layout() { return H5T_NATIVE_INT_FAST16_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST16_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT_FAST16_g$segment()
    {
        return H5T_NATIVE_INT_FAST16_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST16_g
     * }
     */
    public static long H5T_NATIVE_INT_FAST16_g()
    {
        return H5T_NATIVE_INT_FAST16_g$constants.SEGMENT.get(H5T_NATIVE_INT_FAST16_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST16_g
     * }
     */
    public static void H5T_NATIVE_INT_FAST16_g(long varValue)
    {
        H5T_NATIVE_INT_FAST16_g$constants.SEGMENT.set(H5T_NATIVE_INT_FAST16_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_UINT_FAST16_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT_FAST16_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST16_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT_FAST16_g$layout()
    {
        return H5T_NATIVE_UINT_FAST16_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST16_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT_FAST16_g$segment()
    {
        return H5T_NATIVE_UINT_FAST16_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST16_g
     * }
     */
    public static long H5T_NATIVE_UINT_FAST16_g()
    {
        return H5T_NATIVE_UINT_FAST16_g$constants.SEGMENT.get(H5T_NATIVE_UINT_FAST16_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST16_g
     * }
     */
    public static void H5T_NATIVE_UINT_FAST16_g(long varValue)
    {
        H5T_NATIVE_UINT_FAST16_g$constants.SEGMENT.set(H5T_NATIVE_UINT_FAST16_g$constants.LAYOUT, 0L,
                                                       varValue);
    }

    private static class H5T_NATIVE_INT32_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT32_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT32_g
     * }
     */
    public static OfLong H5T_NATIVE_INT32_g$layout() { return H5T_NATIVE_INT32_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT32_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT32_g$segment() { return H5T_NATIVE_INT32_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT32_g
     * }
     */
    public static long H5T_NATIVE_INT32_g()
    {
        return H5T_NATIVE_INT32_g$constants.SEGMENT.get(H5T_NATIVE_INT32_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT32_g
     * }
     */
    public static void H5T_NATIVE_INT32_g(long varValue)
    {
        H5T_NATIVE_INT32_g$constants.SEGMENT.set(H5T_NATIVE_INT32_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_UINT32_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT32_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT32_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT32_g$layout() { return H5T_NATIVE_UINT32_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT32_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT32_g$segment()
    {
        return H5T_NATIVE_UINT32_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT32_g
     * }
     */
    public static long H5T_NATIVE_UINT32_g()
    {
        return H5T_NATIVE_UINT32_g$constants.SEGMENT.get(H5T_NATIVE_UINT32_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT32_g
     * }
     */
    public static void H5T_NATIVE_UINT32_g(long varValue)
    {
        H5T_NATIVE_UINT32_g$constants.SEGMENT.set(H5T_NATIVE_UINT32_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_INT_LEAST32_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT_LEAST32_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST32_g
     * }
     */
    public static OfLong H5T_NATIVE_INT_LEAST32_g$layout()
    {
        return H5T_NATIVE_INT_LEAST32_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST32_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT_LEAST32_g$segment()
    {
        return H5T_NATIVE_INT_LEAST32_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST32_g
     * }
     */
    public static long H5T_NATIVE_INT_LEAST32_g()
    {
        return H5T_NATIVE_INT_LEAST32_g$constants.SEGMENT.get(H5T_NATIVE_INT_LEAST32_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST32_g
     * }
     */
    public static void H5T_NATIVE_INT_LEAST32_g(long varValue)
    {
        H5T_NATIVE_INT_LEAST32_g$constants.SEGMENT.set(H5T_NATIVE_INT_LEAST32_g$constants.LAYOUT, 0L,
                                                       varValue);
    }

    private static class H5T_NATIVE_UINT_LEAST32_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT_LEAST32_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST32_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT_LEAST32_g$layout()
    {
        return H5T_NATIVE_UINT_LEAST32_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST32_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT_LEAST32_g$segment()
    {
        return H5T_NATIVE_UINT_LEAST32_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST32_g
     * }
     */
    public static long H5T_NATIVE_UINT_LEAST32_g()
    {
        return H5T_NATIVE_UINT_LEAST32_g$constants.SEGMENT.get(H5T_NATIVE_UINT_LEAST32_g$constants.LAYOUT,
                                                               0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST32_g
     * }
     */
    public static void H5T_NATIVE_UINT_LEAST32_g(long varValue)
    {
        H5T_NATIVE_UINT_LEAST32_g$constants.SEGMENT.set(H5T_NATIVE_UINT_LEAST32_g$constants.LAYOUT, 0L,
                                                        varValue);
    }

    private static class H5T_NATIVE_INT_FAST32_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT_FAST32_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST32_g
     * }
     */
    public static OfLong H5T_NATIVE_INT_FAST32_g$layout() { return H5T_NATIVE_INT_FAST32_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST32_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT_FAST32_g$segment()
    {
        return H5T_NATIVE_INT_FAST32_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST32_g
     * }
     */
    public static long H5T_NATIVE_INT_FAST32_g()
    {
        return H5T_NATIVE_INT_FAST32_g$constants.SEGMENT.get(H5T_NATIVE_INT_FAST32_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST32_g
     * }
     */
    public static void H5T_NATIVE_INT_FAST32_g(long varValue)
    {
        H5T_NATIVE_INT_FAST32_g$constants.SEGMENT.set(H5T_NATIVE_INT_FAST32_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_UINT_FAST32_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT_FAST32_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST32_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT_FAST32_g$layout()
    {
        return H5T_NATIVE_UINT_FAST32_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST32_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT_FAST32_g$segment()
    {
        return H5T_NATIVE_UINT_FAST32_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST32_g
     * }
     */
    public static long H5T_NATIVE_UINT_FAST32_g()
    {
        return H5T_NATIVE_UINT_FAST32_g$constants.SEGMENT.get(H5T_NATIVE_UINT_FAST32_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST32_g
     * }
     */
    public static void H5T_NATIVE_UINT_FAST32_g(long varValue)
    {
        H5T_NATIVE_UINT_FAST32_g$constants.SEGMENT.set(H5T_NATIVE_UINT_FAST32_g$constants.LAYOUT, 0L,
                                                       varValue);
    }

    private static class H5T_NATIVE_INT64_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT64_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT64_g
     * }
     */
    public static OfLong H5T_NATIVE_INT64_g$layout() { return H5T_NATIVE_INT64_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT64_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT64_g$segment() { return H5T_NATIVE_INT64_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT64_g
     * }
     */
    public static long H5T_NATIVE_INT64_g()
    {
        return H5T_NATIVE_INT64_g$constants.SEGMENT.get(H5T_NATIVE_INT64_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT64_g
     * }
     */
    public static void H5T_NATIVE_INT64_g(long varValue)
    {
        H5T_NATIVE_INT64_g$constants.SEGMENT.set(H5T_NATIVE_INT64_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_UINT64_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT64_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT64_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT64_g$layout() { return H5T_NATIVE_UINT64_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT64_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT64_g$segment()
    {
        return H5T_NATIVE_UINT64_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT64_g
     * }
     */
    public static long H5T_NATIVE_UINT64_g()
    {
        return H5T_NATIVE_UINT64_g$constants.SEGMENT.get(H5T_NATIVE_UINT64_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT64_g
     * }
     */
    public static void H5T_NATIVE_UINT64_g(long varValue)
    {
        H5T_NATIVE_UINT64_g$constants.SEGMENT.set(H5T_NATIVE_UINT64_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_INT_LEAST64_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT_LEAST64_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST64_g
     * }
     */
    public static OfLong H5T_NATIVE_INT_LEAST64_g$layout()
    {
        return H5T_NATIVE_INT_LEAST64_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST64_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT_LEAST64_g$segment()
    {
        return H5T_NATIVE_INT_LEAST64_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST64_g
     * }
     */
    public static long H5T_NATIVE_INT_LEAST64_g()
    {
        return H5T_NATIVE_INT_LEAST64_g$constants.SEGMENT.get(H5T_NATIVE_INT_LEAST64_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_LEAST64_g
     * }
     */
    public static void H5T_NATIVE_INT_LEAST64_g(long varValue)
    {
        H5T_NATIVE_INT_LEAST64_g$constants.SEGMENT.set(H5T_NATIVE_INT_LEAST64_g$constants.LAYOUT, 0L,
                                                       varValue);
    }

    private static class H5T_NATIVE_UINT_LEAST64_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT_LEAST64_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST64_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT_LEAST64_g$layout()
    {
        return H5T_NATIVE_UINT_LEAST64_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST64_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT_LEAST64_g$segment()
    {
        return H5T_NATIVE_UINT_LEAST64_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST64_g
     * }
     */
    public static long H5T_NATIVE_UINT_LEAST64_g()
    {
        return H5T_NATIVE_UINT_LEAST64_g$constants.SEGMENT.get(H5T_NATIVE_UINT_LEAST64_g$constants.LAYOUT,
                                                               0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_LEAST64_g
     * }
     */
    public static void H5T_NATIVE_UINT_LEAST64_g(long varValue)
    {
        H5T_NATIVE_UINT_LEAST64_g$constants.SEGMENT.set(H5T_NATIVE_UINT_LEAST64_g$constants.LAYOUT, 0L,
                                                        varValue);
    }

    private static class H5T_NATIVE_INT_FAST64_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_INT_FAST64_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST64_g
     * }
     */
    public static OfLong H5T_NATIVE_INT_FAST64_g$layout() { return H5T_NATIVE_INT_FAST64_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST64_g
     * }
     */
    public static MemorySegment H5T_NATIVE_INT_FAST64_g$segment()
    {
        return H5T_NATIVE_INT_FAST64_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST64_g
     * }
     */
    public static long H5T_NATIVE_INT_FAST64_g()
    {
        return H5T_NATIVE_INT_FAST64_g$constants.SEGMENT.get(H5T_NATIVE_INT_FAST64_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_INT_FAST64_g
     * }
     */
    public static void H5T_NATIVE_INT_FAST64_g(long varValue)
    {
        H5T_NATIVE_INT_FAST64_g$constants.SEGMENT.set(H5T_NATIVE_INT_FAST64_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5T_NATIVE_UINT_FAST64_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5T_NATIVE_UINT_FAST64_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST64_g
     * }
     */
    public static OfLong H5T_NATIVE_UINT_FAST64_g$layout()
    {
        return H5T_NATIVE_UINT_FAST64_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST64_g
     * }
     */
    public static MemorySegment H5T_NATIVE_UINT_FAST64_g$segment()
    {
        return H5T_NATIVE_UINT_FAST64_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST64_g
     * }
     */
    public static long H5T_NATIVE_UINT_FAST64_g()
    {
        return H5T_NATIVE_UINT_FAST64_g$constants.SEGMENT.get(H5T_NATIVE_UINT_FAST64_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5T_NATIVE_UINT_FAST64_g
     * }
     */
    public static void H5T_NATIVE_UINT_FAST64_g(long varValue)
    {
        H5T_NATIVE_UINT_FAST64_g$constants.SEGMENT.set(H5T_NATIVE_UINT_FAST64_g$constants.LAYOUT, 0L,
                                                       varValue);
    }

    private static class H5Tcreate {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tcreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Tcreate(H5T_class_t type, size_t size)
     * }
     */
    public static FunctionDescriptor H5Tcreate$descriptor() { return H5Tcreate.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Tcreate(H5T_class_t type, size_t size)
     * }
     */
    public static MethodHandle H5Tcreate$handle() { return H5Tcreate.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Tcreate(H5T_class_t type, size_t size)
     * }
     */
    public static MemorySegment H5Tcreate$address() { return H5Tcreate.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Tcreate(H5T_class_t type, size_t size)
     * }
     */
    public static long H5Tcreate(int type, long size)
    {
        var mh$ = H5Tcreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tcreate", type, size);
            }
            return (long)mh$.invokeExact(type, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tcopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tcopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Tcopy(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tcopy$descriptor() { return H5Tcopy.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Tcopy(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tcopy$handle() { return H5Tcopy.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Tcopy(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tcopy$address() { return H5Tcopy.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Tcopy(hid_t type_id)
     * }
     */
    public static long H5Tcopy(long type_id)
    {
        var mh$ = H5Tcopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tcopy", type_id);
            }
            return (long)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tclose(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tclose$descriptor() { return H5Tclose.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tclose(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tclose$handle() { return H5Tclose.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tclose(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tclose$address() { return H5Tclose.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tclose(hid_t type_id)
     * }
     */
    public static int H5Tclose(long type_id)
    {
        var mh$ = H5Tclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tclose", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tclose_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tclose_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t type_id,
     * hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Tclose_async$descriptor() { return H5Tclose_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t type_id,
     * hid_t es_id)
     * }
     */
    public static MethodHandle H5Tclose_async$handle() { return H5Tclose_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t type_id,
     * hid_t es_id)
     * }
     */
    public static MemorySegment H5Tclose_async$address() { return H5Tclose_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t type_id,
     * hid_t es_id)
     * }
     */
    public static int H5Tclose_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     long type_id, long es_id)
    {
        var mh$ = H5Tclose_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tclose_async", app_file, app_func, app_line, type_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, type_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tequal {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tequal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Tequal(hid_t type1_id, hid_t type2_id)
     * }
     */
    public static FunctionDescriptor H5Tequal$descriptor() { return H5Tequal.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Tequal(hid_t type1_id, hid_t type2_id)
     * }
     */
    public static MethodHandle H5Tequal$handle() { return H5Tequal.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Tequal(hid_t type1_id, hid_t type2_id)
     * }
     */
    public static MemorySegment H5Tequal$address() { return H5Tequal.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Tequal(hid_t type1_id, hid_t type2_id)
     * }
     */
    public static int H5Tequal(long type1_id, long type2_id)
    {
        var mh$ = H5Tequal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tequal", type1_id, type2_id);
            }
            return (int)mh$.invokeExact(type1_id, type2_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tlock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tlock(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tlock$descriptor() { return H5Tlock.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tlock(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tlock$handle() { return H5Tlock.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tlock(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tlock$address() { return H5Tlock.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tlock(hid_t type_id)
     * }
     */
    public static int H5Tlock(long type_id)
    {
        var mh$ = H5Tlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tlock", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tcommit2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG,
                                  hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tcommit2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tcommit2(hid_t loc_id, const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t
     * tapl_id)
     * }
     */
    public static FunctionDescriptor H5Tcommit2$descriptor() { return H5Tcommit2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tcommit2(hid_t loc_id, const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t
     * tapl_id)
     * }
     */
    public static MethodHandle H5Tcommit2$handle() { return H5Tcommit2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tcommit2(hid_t loc_id, const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t
     * tapl_id)
     * }
     */
    public static MemorySegment H5Tcommit2$address() { return H5Tcommit2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tcommit2(hid_t loc_id, const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t
     * tapl_id)
     * }
     */
    public static int H5Tcommit2(long loc_id, MemorySegment name, long type_id, long lcpl_id, long tcpl_id,
                                 long tapl_id)
    {
        var mh$ = H5Tcommit2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tcommit2", loc_id, name, type_id, lcpl_id, tcpl_id, tapl_id);
            }
            return (int)mh$.invokeExact(loc_id, name, type_id, lcpl_id, tcpl_id, tapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tcommit_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tcommit_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tcommit_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t tapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Tcommit_async$descriptor() { return H5Tcommit_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tcommit_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t tapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Tcommit_async$handle() { return H5Tcommit_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tcommit_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t tapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Tcommit_async$address() { return H5Tcommit_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tcommit_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t tapl_id, hid_t es_id)
     * }
     */
    public static int H5Tcommit_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                      long loc_id, MemorySegment name, long type_id, long lcpl_id,
                                      long tcpl_id, long tapl_id, long es_id)
    {
        var mh$ = H5Tcommit_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tcommit_async", app_file, app_func, app_line, loc_id, name, type_id, lcpl_id,
                              tcpl_id, tapl_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, loc_id, name, type_id, lcpl_id, tcpl_id,
                                        tapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Topen2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Topen2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Topen2(hid_t loc_id, const char *name, hid_t tapl_id)
     * }
     */
    public static FunctionDescriptor H5Topen2$descriptor() { return H5Topen2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Topen2(hid_t loc_id, const char *name, hid_t tapl_id)
     * }
     */
    public static MethodHandle H5Topen2$handle() { return H5Topen2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Topen2(hid_t loc_id, const char *name, hid_t tapl_id)
     * }
     */
    public static MemorySegment H5Topen2$address() { return H5Topen2.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Topen2(hid_t loc_id, const char *name, hid_t tapl_id)
     * }
     */
    public static long H5Topen2(long loc_id, MemorySegment name, long tapl_id)
    {
        var mh$ = H5Topen2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Topen2", loc_id, name, tapl_id);
            }
            return (long)mh$.invokeExact(loc_id, name, tapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Topen_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Topen_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Topen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t tapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Topen_async$descriptor() { return H5Topen_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Topen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t tapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Topen_async$handle() { return H5Topen_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Topen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t tapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Topen_async$address() { return H5Topen_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Topen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t tapl_id, hid_t es_id)
     * }
     */
    public static long H5Topen_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     long loc_id, MemorySegment name, long tapl_id, long es_id)
    {
        var mh$ = H5Topen_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Topen_async", app_file, app_func, app_line, loc_id, name, tapl_id, es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, loc_id, name, tapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tcommit_anon {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tcommit_anon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tcommit_anon(hid_t loc_id, hid_t type_id, hid_t tcpl_id, hid_t tapl_id)
     * }
     */
    public static FunctionDescriptor H5Tcommit_anon$descriptor() { return H5Tcommit_anon.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tcommit_anon(hid_t loc_id, hid_t type_id, hid_t tcpl_id, hid_t tapl_id)
     * }
     */
    public static MethodHandle H5Tcommit_anon$handle() { return H5Tcommit_anon.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tcommit_anon(hid_t loc_id, hid_t type_id, hid_t tcpl_id, hid_t tapl_id)
     * }
     */
    public static MemorySegment H5Tcommit_anon$address() { return H5Tcommit_anon.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tcommit_anon(hid_t loc_id, hid_t type_id, hid_t tcpl_id, hid_t tapl_id)
     * }
     */
    public static int H5Tcommit_anon(long loc_id, long type_id, long tcpl_id, long tapl_id)
    {
        var mh$ = H5Tcommit_anon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tcommit_anon", loc_id, type_id, tcpl_id, tapl_id);
            }
            return (int)mh$.invokeExact(loc_id, type_id, tcpl_id, tapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_create_plist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_create_plist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Tget_create_plist(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_create_plist$descriptor() { return H5Tget_create_plist.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Tget_create_plist(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_create_plist$handle() { return H5Tget_create_plist.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Tget_create_plist(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_create_plist$address() { return H5Tget_create_plist.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Tget_create_plist(hid_t type_id)
     * }
     */
    public static long H5Tget_create_plist(long type_id)
    {
        var mh$ = H5Tget_create_plist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_create_plist", type_id);
            }
            return (long)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tcommitted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tcommitted");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Tcommitted(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tcommitted$descriptor() { return H5Tcommitted.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Tcommitted(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tcommitted$handle() { return H5Tcommitted.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Tcommitted(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tcommitted$address() { return H5Tcommitted.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Tcommitted(hid_t type_id)
     * }
     */
    public static int H5Tcommitted(long type_id)
    {
        var mh$ = H5Tcommitted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tcommitted", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tencode {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tencode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tencode(hid_t obj_id, void *buf, size_t *nalloc)
     * }
     */
    public static FunctionDescriptor H5Tencode$descriptor() { return H5Tencode.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tencode(hid_t obj_id, void *buf, size_t *nalloc)
     * }
     */
    public static MethodHandle H5Tencode$handle() { return H5Tencode.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tencode(hid_t obj_id, void *buf, size_t *nalloc)
     * }
     */
    public static MemorySegment H5Tencode$address() { return H5Tencode.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tencode(hid_t obj_id, void *buf, size_t *nalloc)
     * }
     */
    public static int H5Tencode(long obj_id, MemorySegment buf, MemorySegment nalloc)
    {
        var mh$ = H5Tencode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tencode", obj_id, buf, nalloc);
            }
            return (int)mh$.invokeExact(obj_id, buf, nalloc);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tdecode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tdecode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Tdecode(const void *buf)
     * }
     */
    public static FunctionDescriptor H5Tdecode$descriptor() { return H5Tdecode.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Tdecode(const void *buf)
     * }
     */
    public static MethodHandle H5Tdecode$handle() { return H5Tdecode.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Tdecode(const void *buf)
     * }
     */
    public static MemorySegment H5Tdecode$address() { return H5Tdecode.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Tdecode(const void *buf)
     * }
     */
    public static long H5Tdecode(MemorySegment buf)
    {
        var mh$ = H5Tdecode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tdecode", buf);
            }
            return (long)mh$.invokeExact(buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tflush(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tflush$descriptor() { return H5Tflush.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tflush(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tflush$handle() { return H5Tflush.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tflush(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tflush$address() { return H5Tflush.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tflush(hid_t type_id)
     * }
     */
    public static int H5Tflush(long type_id)
    {
        var mh$ = H5Tflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tflush", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Trefresh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Trefresh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Trefresh(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Trefresh$descriptor() { return H5Trefresh.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Trefresh(hid_t type_id)
     * }
     */
    public static MethodHandle H5Trefresh$handle() { return H5Trefresh.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Trefresh(hid_t type_id)
     * }
     */
    public static MemorySegment H5Trefresh$address() { return H5Trefresh.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Trefresh(hid_t type_id)
     * }
     */
    public static int H5Trefresh(long type_id)
    {
        var mh$ = H5Trefresh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Trefresh", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tinsert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tinsert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tinsert(hid_t parent_id, const char *name, size_t offset, hid_t member_id)
     * }
     */
    public static FunctionDescriptor H5Tinsert$descriptor() { return H5Tinsert.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tinsert(hid_t parent_id, const char *name, size_t offset, hid_t member_id)
     * }
     */
    public static MethodHandle H5Tinsert$handle() { return H5Tinsert.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tinsert(hid_t parent_id, const char *name, size_t offset, hid_t member_id)
     * }
     */
    public static MemorySegment H5Tinsert$address() { return H5Tinsert.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tinsert(hid_t parent_id, const char *name, size_t offset, hid_t member_id)
     * }
     */
    public static int H5Tinsert(long parent_id, MemorySegment name, long offset, long member_id)
    {
        var mh$ = H5Tinsert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tinsert", parent_id, name, offset, member_id);
            }
            return (int)mh$.invokeExact(parent_id, name, offset, member_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tpack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tpack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tpack(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tpack$descriptor() { return H5Tpack.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tpack(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tpack$handle() { return H5Tpack.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tpack(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tpack$address() { return H5Tpack.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tpack(hid_t type_id)
     * }
     */
    public static int H5Tpack(long type_id)
    {
        var mh$ = H5Tpack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tpack", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tenum_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tenum_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Tenum_create(hid_t base_id)
     * }
     */
    public static FunctionDescriptor H5Tenum_create$descriptor() { return H5Tenum_create.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Tenum_create(hid_t base_id)
     * }
     */
    public static MethodHandle H5Tenum_create$handle() { return H5Tenum_create.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Tenum_create(hid_t base_id)
     * }
     */
    public static MemorySegment H5Tenum_create$address() { return H5Tenum_create.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Tenum_create(hid_t base_id)
     * }
     */
    public static long H5Tenum_create(long base_id)
    {
        var mh$ = H5Tenum_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tenum_create", base_id);
            }
            return (long)mh$.invokeExact(base_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tenum_insert {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tenum_insert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tenum_insert(hid_t type, const char *name, const void *value)
     * }
     */
    public static FunctionDescriptor H5Tenum_insert$descriptor() { return H5Tenum_insert.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tenum_insert(hid_t type, const char *name, const void *value)
     * }
     */
    public static MethodHandle H5Tenum_insert$handle() { return H5Tenum_insert.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tenum_insert(hid_t type, const char *name, const void *value)
     * }
     */
    public static MemorySegment H5Tenum_insert$address() { return H5Tenum_insert.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tenum_insert(hid_t type, const char *name, const void *value)
     * }
     */
    public static int H5Tenum_insert(long type, MemorySegment name, MemorySegment value)
    {
        var mh$ = H5Tenum_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tenum_insert", type, name, value);
            }
            return (int)mh$.invokeExact(type, name, value);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tenum_nameof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tenum_nameof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tenum_nameof(hid_t type, const void *value, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor H5Tenum_nameof$descriptor() { return H5Tenum_nameof.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tenum_nameof(hid_t type, const void *value, char *name, size_t size)
     * }
     */
    public static MethodHandle H5Tenum_nameof$handle() { return H5Tenum_nameof.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tenum_nameof(hid_t type, const void *value, char *name, size_t size)
     * }
     */
    public static MemorySegment H5Tenum_nameof$address() { return H5Tenum_nameof.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tenum_nameof(hid_t type, const void *value, char *name, size_t size)
     * }
     */
    public static int H5Tenum_nameof(long type, MemorySegment value, MemorySegment name, long size)
    {
        var mh$ = H5Tenum_nameof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tenum_nameof", type, value, name, size);
            }
            return (int)mh$.invokeExact(type, value, name, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tenum_valueof {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tenum_valueof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tenum_valueof(hid_t type, const char *name, void *value)
     * }
     */
    public static FunctionDescriptor H5Tenum_valueof$descriptor() { return H5Tenum_valueof.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tenum_valueof(hid_t type, const char *name, void *value)
     * }
     */
    public static MethodHandle H5Tenum_valueof$handle() { return H5Tenum_valueof.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tenum_valueof(hid_t type, const char *name, void *value)
     * }
     */
    public static MemorySegment H5Tenum_valueof$address() { return H5Tenum_valueof.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tenum_valueof(hid_t type, const char *name, void *value)
     * }
     */
    public static int H5Tenum_valueof(long type, MemorySegment name, MemorySegment value)
    {
        var mh$ = H5Tenum_valueof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tenum_valueof", type, name, value);
            }
            return (int)mh$.invokeExact(type, name, value);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tvlen_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tvlen_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Tvlen_create(hid_t base_id)
     * }
     */
    public static FunctionDescriptor H5Tvlen_create$descriptor() { return H5Tvlen_create.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Tvlen_create(hid_t base_id)
     * }
     */
    public static MethodHandle H5Tvlen_create$handle() { return H5Tvlen_create.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Tvlen_create(hid_t base_id)
     * }
     */
    public static MemorySegment H5Tvlen_create$address() { return H5Tvlen_create.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Tvlen_create(hid_t base_id)
     * }
     */
    public static long H5Tvlen_create(long base_id)
    {
        var mh$ = H5Tvlen_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tvlen_create", base_id);
            }
            return (long)mh$.invokeExact(base_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tarray_create2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tarray_create2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Tarray_create2(hid_t base_id, unsigned int ndims, const hsize_t dim[])
     * }
     */
    public static FunctionDescriptor H5Tarray_create2$descriptor() { return H5Tarray_create2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Tarray_create2(hid_t base_id, unsigned int ndims, const hsize_t dim[])
     * }
     */
    public static MethodHandle H5Tarray_create2$handle() { return H5Tarray_create2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Tarray_create2(hid_t base_id, unsigned int ndims, const hsize_t dim[])
     * }
     */
    public static MemorySegment H5Tarray_create2$address() { return H5Tarray_create2.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Tarray_create2(hid_t base_id, unsigned int ndims, const hsize_t dim[])
     * }
     */
    public static long H5Tarray_create2(long base_id, int ndims, MemorySegment dim)
    {
        var mh$ = H5Tarray_create2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tarray_create2", base_id, ndims, dim);
            }
            return (long)mh$.invokeExact(base_id, ndims, dim);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_array_ndims {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_array_ndims");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Tget_array_ndims(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_array_ndims$descriptor() { return H5Tget_array_ndims.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Tget_array_ndims(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_array_ndims$handle() { return H5Tget_array_ndims.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Tget_array_ndims(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_array_ndims$address() { return H5Tget_array_ndims.ADDR; }

    /**
     * {@snippet lang=c :
     * int H5Tget_array_ndims(hid_t type_id)
     * }
     */
    public static int H5Tget_array_ndims(long type_id)
    {
        var mh$ = H5Tget_array_ndims.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_array_ndims", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_array_dims2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_array_dims2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Tget_array_dims2(hid_t type_id, hsize_t dims[])
     * }
     */
    public static FunctionDescriptor H5Tget_array_dims2$descriptor() { return H5Tget_array_dims2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Tget_array_dims2(hid_t type_id, hsize_t dims[])
     * }
     */
    public static MethodHandle H5Tget_array_dims2$handle() { return H5Tget_array_dims2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Tget_array_dims2(hid_t type_id, hsize_t dims[])
     * }
     */
    public static MemorySegment H5Tget_array_dims2$address() { return H5Tget_array_dims2.ADDR; }

    /**
     * {@snippet lang=c :
     * int H5Tget_array_dims2(hid_t type_id, hsize_t dims[])
     * }
     */
    public static int H5Tget_array_dims2(long type_id, MemorySegment dims)
    {
        var mh$ = H5Tget_array_dims2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_array_dims2", type_id, dims);
            }
            return (int)mh$.invokeExact(type_id, dims);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_tag {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_tag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_tag(hid_t type, const char *tag)
     * }
     */
    public static FunctionDescriptor H5Tset_tag$descriptor() { return H5Tset_tag.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_tag(hid_t type, const char *tag)
     * }
     */
    public static MethodHandle H5Tset_tag$handle() { return H5Tset_tag.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_tag(hid_t type, const char *tag)
     * }
     */
    public static MemorySegment H5Tset_tag$address() { return H5Tset_tag.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_tag(hid_t type, const char *tag)
     * }
     */
    public static int H5Tset_tag(long type, MemorySegment tag)
    {
        var mh$ = H5Tset_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_tag", type, tag);
            }
            return (int)mh$.invokeExact(type, tag);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_tag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *H5Tget_tag(hid_t type)
     * }
     */
    public static FunctionDescriptor H5Tget_tag$descriptor() { return H5Tget_tag.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *H5Tget_tag(hid_t type)
     * }
     */
    public static MethodHandle H5Tget_tag$handle() { return H5Tget_tag.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *H5Tget_tag(hid_t type)
     * }
     */
    public static MemorySegment H5Tget_tag$address() { return H5Tget_tag.ADDR; }

    /**
     * {@snippet lang=c :
     * char *H5Tget_tag(hid_t type)
     * }
     */
    public static MemorySegment H5Tget_tag(long type)
    {
        var mh$ = H5Tget_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_tag", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_super {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_super");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Tget_super(hid_t type)
     * }
     */
    public static FunctionDescriptor H5Tget_super$descriptor() { return H5Tget_super.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Tget_super(hid_t type)
     * }
     */
    public static MethodHandle H5Tget_super$handle() { return H5Tget_super.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Tget_super(hid_t type)
     * }
     */
    public static MemorySegment H5Tget_super$address() { return H5Tget_super.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Tget_super(hid_t type)
     * }
     */
    public static long H5Tget_super(long type)
    {
        var mh$ = H5Tget_super.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_super", type);
            }
            return (long)mh$.invokeExact(type);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5T_class_t H5Tget_class(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_class$descriptor() { return H5Tget_class.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5T_class_t H5Tget_class(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_class$handle() { return H5Tget_class.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5T_class_t H5Tget_class(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_class$address() { return H5Tget_class.ADDR; }

    /**
     * {@snippet lang=c :
     * H5T_class_t H5Tget_class(hid_t type_id)
     * }
     */
    public static int H5Tget_class(long type_id)
    {
        var mh$ = H5Tget_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_class", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tdetect_class {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tdetect_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Tdetect_class(hid_t type_id, H5T_class_t cls)
     * }
     */
    public static FunctionDescriptor H5Tdetect_class$descriptor() { return H5Tdetect_class.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Tdetect_class(hid_t type_id, H5T_class_t cls)
     * }
     */
    public static MethodHandle H5Tdetect_class$handle() { return H5Tdetect_class.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Tdetect_class(hid_t type_id, H5T_class_t cls)
     * }
     */
    public static MemorySegment H5Tdetect_class$address() { return H5Tdetect_class.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Tdetect_class(hid_t type_id, H5T_class_t cls)
     * }
     */
    public static int H5Tdetect_class(long type_id, int cls)
    {
        var mh$ = H5Tdetect_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tdetect_class", type_id, cls);
            }
            return (int)mh$.invokeExact(type_id, cls);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t H5Tget_size(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_size$descriptor() { return H5Tget_size.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t H5Tget_size(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_size$handle() { return H5Tget_size.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t H5Tget_size(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_size$address() { return H5Tget_size.ADDR; }

    /**
     * {@snippet lang=c :
     * size_t H5Tget_size(hid_t type_id)
     * }
     */
    public static long H5Tget_size(long type_id)
    {
        var mh$ = H5Tget_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_size", type_id);
            }
            return (long)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_order");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5T_order_t H5Tget_order(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_order$descriptor() { return H5Tget_order.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5T_order_t H5Tget_order(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_order$handle() { return H5Tget_order.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5T_order_t H5Tget_order(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_order$address() { return H5Tget_order.ADDR; }

    /**
     * {@snippet lang=c :
     * H5T_order_t H5Tget_order(hid_t type_id)
     * }
     */
    public static int H5Tget_order(long type_id)
    {
        var mh$ = H5Tget_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_order", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_precision {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_precision");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t H5Tget_precision(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_precision$descriptor() { return H5Tget_precision.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t H5Tget_precision(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_precision$handle() { return H5Tget_precision.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t H5Tget_precision(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_precision$address() { return H5Tget_precision.ADDR; }

    /**
     * {@snippet lang=c :
     * size_t H5Tget_precision(hid_t type_id)
     * }
     */
    public static long H5Tget_precision(long type_id)
    {
        var mh$ = H5Tget_precision.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_precision", type_id);
            }
            return (long)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Tget_offset(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_offset$descriptor() { return H5Tget_offset.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Tget_offset(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_offset$handle() { return H5Tget_offset.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Tget_offset(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_offset$address() { return H5Tget_offset.ADDR; }

    /**
     * {@snippet lang=c :
     * int H5Tget_offset(hid_t type_id)
     * }
     */
    public static int H5Tget_offset(long type_id)
    {
        var mh$ = H5Tget_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_offset", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_pad {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_pad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tget_pad(hid_t type_id, H5T_pad_t *lsb, H5T_pad_t *msb)
     * }
     */
    public static FunctionDescriptor H5Tget_pad$descriptor() { return H5Tget_pad.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tget_pad(hid_t type_id, H5T_pad_t *lsb, H5T_pad_t *msb)
     * }
     */
    public static MethodHandle H5Tget_pad$handle() { return H5Tget_pad.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tget_pad(hid_t type_id, H5T_pad_t *lsb, H5T_pad_t *msb)
     * }
     */
    public static MemorySegment H5Tget_pad$address() { return H5Tget_pad.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tget_pad(hid_t type_id, H5T_pad_t *lsb, H5T_pad_t *msb)
     * }
     */
    public static int H5Tget_pad(long type_id, MemorySegment lsb, MemorySegment msb)
    {
        var mh$ = H5Tget_pad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_pad", type_id, lsb, msb);
            }
            return (int)mh$.invokeExact(type_id, lsb, msb);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_sign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_sign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5T_sign_t H5Tget_sign(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_sign$descriptor() { return H5Tget_sign.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5T_sign_t H5Tget_sign(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_sign$handle() { return H5Tget_sign.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5T_sign_t H5Tget_sign(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_sign$address() { return H5Tget_sign.ADDR; }

    /**
     * {@snippet lang=c :
     * H5T_sign_t H5Tget_sign(hid_t type_id)
     * }
     */
    public static int H5Tget_sign(long type_id)
    {
        var mh$ = H5Tget_sign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_sign", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_fields {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_fields");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tget_fields(hid_t type_id, size_t *spos, size_t *epos, size_t *esize, size_t *mpos, size_t
     * *msize)
     * }
     */
    public static FunctionDescriptor H5Tget_fields$descriptor() { return H5Tget_fields.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tget_fields(hid_t type_id, size_t *spos, size_t *epos, size_t *esize, size_t *mpos, size_t
     * *msize)
     * }
     */
    public static MethodHandle H5Tget_fields$handle() { return H5Tget_fields.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tget_fields(hid_t type_id, size_t *spos, size_t *epos, size_t *esize, size_t *mpos, size_t
     * *msize)
     * }
     */
    public static MemorySegment H5Tget_fields$address() { return H5Tget_fields.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tget_fields(hid_t type_id, size_t *spos, size_t *epos, size_t *esize, size_t *mpos, size_t
     * *msize)
     * }
     */
    public static int H5Tget_fields(long type_id, MemorySegment spos, MemorySegment epos, MemorySegment esize,
                                    MemorySegment mpos, MemorySegment msize)
    {
        var mh$ = H5Tget_fields.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_fields", type_id, spos, epos, esize, mpos, msize);
            }
            return (int)mh$.invokeExact(type_id, spos, epos, esize, mpos, msize);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_ebias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_ebias");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t H5Tget_ebias(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_ebias$descriptor() { return H5Tget_ebias.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t H5Tget_ebias(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_ebias$handle() { return H5Tget_ebias.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t H5Tget_ebias(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_ebias$address() { return H5Tget_ebias.ADDR; }

    /**
     * {@snippet lang=c :
     * size_t H5Tget_ebias(hid_t type_id)
     * }
     */
    public static long H5Tget_ebias(long type_id)
    {
        var mh$ = H5Tget_ebias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_ebias", type_id);
            }
            return (long)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_norm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_norm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5T_norm_t H5Tget_norm(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_norm$descriptor() { return H5Tget_norm.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5T_norm_t H5Tget_norm(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_norm$handle() { return H5Tget_norm.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5T_norm_t H5Tget_norm(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_norm$address() { return H5Tget_norm.ADDR; }

    /**
     * {@snippet lang=c :
     * H5T_norm_t H5Tget_norm(hid_t type_id)
     * }
     */
    public static int H5Tget_norm(long type_id)
    {
        var mh$ = H5Tget_norm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_norm", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_inpad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_inpad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5T_pad_t H5Tget_inpad(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_inpad$descriptor() { return H5Tget_inpad.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5T_pad_t H5Tget_inpad(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_inpad$handle() { return H5Tget_inpad.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5T_pad_t H5Tget_inpad(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_inpad$address() { return H5Tget_inpad.ADDR; }

    /**
     * {@snippet lang=c :
     * H5T_pad_t H5Tget_inpad(hid_t type_id)
     * }
     */
    public static int H5Tget_inpad(long type_id)
    {
        var mh$ = H5Tget_inpad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_inpad", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_strpad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_strpad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5T_str_t H5Tget_strpad(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_strpad$descriptor() { return H5Tget_strpad.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5T_str_t H5Tget_strpad(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_strpad$handle() { return H5Tget_strpad.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5T_str_t H5Tget_strpad(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_strpad$address() { return H5Tget_strpad.ADDR; }

    /**
     * {@snippet lang=c :
     * H5T_str_t H5Tget_strpad(hid_t type_id)
     * }
     */
    public static int H5Tget_strpad(long type_id)
    {
        var mh$ = H5Tget_strpad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_strpad", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_nmembers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_nmembers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Tget_nmembers(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_nmembers$descriptor() { return H5Tget_nmembers.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Tget_nmembers(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_nmembers$handle() { return H5Tget_nmembers.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Tget_nmembers(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_nmembers$address() { return H5Tget_nmembers.ADDR; }

    /**
     * {@snippet lang=c :
     * int H5Tget_nmembers(hid_t type_id)
     * }
     */
    public static int H5Tget_nmembers(long type_id)
    {
        var mh$ = H5Tget_nmembers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_nmembers", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_member_name {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_member_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *H5Tget_member_name(hid_t type_id, unsigned int membno)
     * }
     */
    public static FunctionDescriptor H5Tget_member_name$descriptor() { return H5Tget_member_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *H5Tget_member_name(hid_t type_id, unsigned int membno)
     * }
     */
    public static MethodHandle H5Tget_member_name$handle() { return H5Tget_member_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *H5Tget_member_name(hid_t type_id, unsigned int membno)
     * }
     */
    public static MemorySegment H5Tget_member_name$address() { return H5Tget_member_name.ADDR; }

    /**
     * {@snippet lang=c :
     * char *H5Tget_member_name(hid_t type_id, unsigned int membno)
     * }
     */
    public static MemorySegment H5Tget_member_name(long type_id, int membno)
    {
        var mh$ = H5Tget_member_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_member_name", type_id, membno);
            }
            return (MemorySegment)mh$.invokeExact(type_id, membno);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_member_index {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_member_index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Tget_member_index(hid_t type_id, const char *name)
     * }
     */
    public static FunctionDescriptor H5Tget_member_index$descriptor() { return H5Tget_member_index.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Tget_member_index(hid_t type_id, const char *name)
     * }
     */
    public static MethodHandle H5Tget_member_index$handle() { return H5Tget_member_index.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Tget_member_index(hid_t type_id, const char *name)
     * }
     */
    public static MemorySegment H5Tget_member_index$address() { return H5Tget_member_index.ADDR; }

    /**
     * {@snippet lang=c :
     * int H5Tget_member_index(hid_t type_id, const char *name)
     * }
     */
    public static int H5Tget_member_index(long type_id, MemorySegment name)
    {
        var mh$ = H5Tget_member_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_member_index", type_id, name);
            }
            return (int)mh$.invokeExact(type_id, name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_member_offset {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_member_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t H5Tget_member_offset(hid_t type_id, unsigned int membno)
     * }
     */
    public static FunctionDescriptor H5Tget_member_offset$descriptor() { return H5Tget_member_offset.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t H5Tget_member_offset(hid_t type_id, unsigned int membno)
     * }
     */
    public static MethodHandle H5Tget_member_offset$handle() { return H5Tget_member_offset.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t H5Tget_member_offset(hid_t type_id, unsigned int membno)
     * }
     */
    public static MemorySegment H5Tget_member_offset$address() { return H5Tget_member_offset.ADDR; }

    /**
     * {@snippet lang=c :
     * size_t H5Tget_member_offset(hid_t type_id, unsigned int membno)
     * }
     */
    public static long H5Tget_member_offset(long type_id, int membno)
    {
        var mh$ = H5Tget_member_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_member_offset", type_id, membno);
            }
            return (long)mh$.invokeExact(type_id, membno);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_member_class {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_member_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5T_class_t H5Tget_member_class(hid_t type_id, unsigned int membno)
     * }
     */
    public static FunctionDescriptor H5Tget_member_class$descriptor() { return H5Tget_member_class.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5T_class_t H5Tget_member_class(hid_t type_id, unsigned int membno)
     * }
     */
    public static MethodHandle H5Tget_member_class$handle() { return H5Tget_member_class.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5T_class_t H5Tget_member_class(hid_t type_id, unsigned int membno)
     * }
     */
    public static MemorySegment H5Tget_member_class$address() { return H5Tget_member_class.ADDR; }

    /**
     * {@snippet lang=c :
     * H5T_class_t H5Tget_member_class(hid_t type_id, unsigned int membno)
     * }
     */
    public static int H5Tget_member_class(long type_id, int membno)
    {
        var mh$ = H5Tget_member_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_member_class", type_id, membno);
            }
            return (int)mh$.invokeExact(type_id, membno);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_member_type {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_member_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Tget_member_type(hid_t type_id, unsigned int membno)
     * }
     */
    public static FunctionDescriptor H5Tget_member_type$descriptor() { return H5Tget_member_type.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Tget_member_type(hid_t type_id, unsigned int membno)
     * }
     */
    public static MethodHandle H5Tget_member_type$handle() { return H5Tget_member_type.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Tget_member_type(hid_t type_id, unsigned int membno)
     * }
     */
    public static MemorySegment H5Tget_member_type$address() { return H5Tget_member_type.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Tget_member_type(hid_t type_id, unsigned int membno)
     * }
     */
    public static long H5Tget_member_type(long type_id, int membno)
    {
        var mh$ = H5Tget_member_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_member_type", type_id, membno);
            }
            return (long)mh$.invokeExact(type_id, membno);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_member_value {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_member_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tget_member_value(hid_t type_id, unsigned int membno, void *value)
     * }
     */
    public static FunctionDescriptor H5Tget_member_value$descriptor() { return H5Tget_member_value.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tget_member_value(hid_t type_id, unsigned int membno, void *value)
     * }
     */
    public static MethodHandle H5Tget_member_value$handle() { return H5Tget_member_value.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tget_member_value(hid_t type_id, unsigned int membno, void *value)
     * }
     */
    public static MemorySegment H5Tget_member_value$address() { return H5Tget_member_value.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tget_member_value(hid_t type_id, unsigned int membno, void *value)
     * }
     */
    public static int H5Tget_member_value(long type_id, int membno, MemorySegment value)
    {
        var mh$ = H5Tget_member_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_member_value", type_id, membno, value);
            }
            return (int)mh$.invokeExact(type_id, membno, value);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_cset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_cset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5T_cset_t H5Tget_cset(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tget_cset$descriptor() { return H5Tget_cset.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5T_cset_t H5Tget_cset(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tget_cset$handle() { return H5Tget_cset.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5T_cset_t H5Tget_cset(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tget_cset$address() { return H5Tget_cset.ADDR; }

    /**
     * {@snippet lang=c :
     * H5T_cset_t H5Tget_cset(hid_t type_id)
     * }
     */
    public static int H5Tget_cset(long type_id)
    {
        var mh$ = H5Tget_cset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_cset", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tis_variable_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tis_variable_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Tis_variable_str(hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tis_variable_str$descriptor() { return H5Tis_variable_str.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Tis_variable_str(hid_t type_id)
     * }
     */
    public static MethodHandle H5Tis_variable_str$handle() { return H5Tis_variable_str.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Tis_variable_str(hid_t type_id)
     * }
     */
    public static MemorySegment H5Tis_variable_str$address() { return H5Tis_variable_str.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Tis_variable_str(hid_t type_id)
     * }
     */
    public static int H5Tis_variable_str(long type_id)
    {
        var mh$ = H5Tis_variable_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tis_variable_str", type_id);
            }
            return (int)mh$.invokeExact(type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_native_type {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_native_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Tget_native_type(hid_t type_id, H5T_direction_t direction)
     * }
     */
    public static FunctionDescriptor H5Tget_native_type$descriptor() { return H5Tget_native_type.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Tget_native_type(hid_t type_id, H5T_direction_t direction)
     * }
     */
    public static MethodHandle H5Tget_native_type$handle() { return H5Tget_native_type.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Tget_native_type(hid_t type_id, H5T_direction_t direction)
     * }
     */
    public static MemorySegment H5Tget_native_type$address() { return H5Tget_native_type.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Tget_native_type(hid_t type_id, H5T_direction_t direction)
     * }
     */
    public static long H5Tget_native_type(long type_id, int direction)
    {
        var mh$ = H5Tget_native_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_native_type", type_id, direction);
            }
            return (long)mh$.invokeExact(type_id, direction);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_size {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_size(hid_t type_id, size_t size)
     * }
     */
    public static FunctionDescriptor H5Tset_size$descriptor() { return H5Tset_size.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_size(hid_t type_id, size_t size)
     * }
     */
    public static MethodHandle H5Tset_size$handle() { return H5Tset_size.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_size(hid_t type_id, size_t size)
     * }
     */
    public static MemorySegment H5Tset_size$address() { return H5Tset_size.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_size(hid_t type_id, size_t size)
     * }
     */
    public static int H5Tset_size(long type_id, long size)
    {
        var mh$ = H5Tset_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_size", type_id, size);
            }
            return (int)mh$.invokeExact(type_id, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_order {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_order");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_order(hid_t type_id, H5T_order_t order)
     * }
     */
    public static FunctionDescriptor H5Tset_order$descriptor() { return H5Tset_order.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_order(hid_t type_id, H5T_order_t order)
     * }
     */
    public static MethodHandle H5Tset_order$handle() { return H5Tset_order.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_order(hid_t type_id, H5T_order_t order)
     * }
     */
    public static MemorySegment H5Tset_order$address() { return H5Tset_order.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_order(hid_t type_id, H5T_order_t order)
     * }
     */
    public static int H5Tset_order(long type_id, int order)
    {
        var mh$ = H5Tset_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_order", type_id, order);
            }
            return (int)mh$.invokeExact(type_id, order);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_precision {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_precision");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_precision(hid_t type_id, size_t prec)
     * }
     */
    public static FunctionDescriptor H5Tset_precision$descriptor() { return H5Tset_precision.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_precision(hid_t type_id, size_t prec)
     * }
     */
    public static MethodHandle H5Tset_precision$handle() { return H5Tset_precision.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_precision(hid_t type_id, size_t prec)
     * }
     */
    public static MemorySegment H5Tset_precision$address() { return H5Tset_precision.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_precision(hid_t type_id, size_t prec)
     * }
     */
    public static int H5Tset_precision(long type_id, long prec)
    {
        var mh$ = H5Tset_precision.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_precision", type_id, prec);
            }
            return (int)mh$.invokeExact(type_id, prec);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_offset {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_offset(hid_t type_id, size_t offset)
     * }
     */
    public static FunctionDescriptor H5Tset_offset$descriptor() { return H5Tset_offset.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_offset(hid_t type_id, size_t offset)
     * }
     */
    public static MethodHandle H5Tset_offset$handle() { return H5Tset_offset.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_offset(hid_t type_id, size_t offset)
     * }
     */
    public static MemorySegment H5Tset_offset$address() { return H5Tset_offset.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_offset(hid_t type_id, size_t offset)
     * }
     */
    public static int H5Tset_offset(long type_id, long offset)
    {
        var mh$ = H5Tset_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_offset", type_id, offset);
            }
            return (int)mh$.invokeExact(type_id, offset);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_pad {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_pad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_pad(hid_t type_id, H5T_pad_t lsb, H5T_pad_t msb)
     * }
     */
    public static FunctionDescriptor H5Tset_pad$descriptor() { return H5Tset_pad.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_pad(hid_t type_id, H5T_pad_t lsb, H5T_pad_t msb)
     * }
     */
    public static MethodHandle H5Tset_pad$handle() { return H5Tset_pad.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_pad(hid_t type_id, H5T_pad_t lsb, H5T_pad_t msb)
     * }
     */
    public static MemorySegment H5Tset_pad$address() { return H5Tset_pad.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_pad(hid_t type_id, H5T_pad_t lsb, H5T_pad_t msb)
     * }
     */
    public static int H5Tset_pad(long type_id, int lsb, int msb)
    {
        var mh$ = H5Tset_pad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_pad", type_id, lsb, msb);
            }
            return (int)mh$.invokeExact(type_id, lsb, msb);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_sign {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_sign");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_sign(hid_t type_id, H5T_sign_t sign)
     * }
     */
    public static FunctionDescriptor H5Tset_sign$descriptor() { return H5Tset_sign.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_sign(hid_t type_id, H5T_sign_t sign)
     * }
     */
    public static MethodHandle H5Tset_sign$handle() { return H5Tset_sign.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_sign(hid_t type_id, H5T_sign_t sign)
     * }
     */
    public static MemorySegment H5Tset_sign$address() { return H5Tset_sign.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_sign(hid_t type_id, H5T_sign_t sign)
     * }
     */
    public static int H5Tset_sign(long type_id, int sign)
    {
        var mh$ = H5Tset_sign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_sign", type_id, sign);
            }
            return (int)mh$.invokeExact(type_id, sign);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_fields {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG,
                                  hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_fields");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_fields(hid_t type_id, size_t spos, size_t epos, size_t esize, size_t mpos, size_t msize)
     * }
     */
    public static FunctionDescriptor H5Tset_fields$descriptor() { return H5Tset_fields.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_fields(hid_t type_id, size_t spos, size_t epos, size_t esize, size_t mpos, size_t msize)
     * }
     */
    public static MethodHandle H5Tset_fields$handle() { return H5Tset_fields.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_fields(hid_t type_id, size_t spos, size_t epos, size_t esize, size_t mpos, size_t msize)
     * }
     */
    public static MemorySegment H5Tset_fields$address() { return H5Tset_fields.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_fields(hid_t type_id, size_t spos, size_t epos, size_t esize, size_t mpos, size_t msize)
     * }
     */
    public static int H5Tset_fields(long type_id, long spos, long epos, long esize, long mpos, long msize)
    {
        var mh$ = H5Tset_fields.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_fields", type_id, spos, epos, esize, mpos, msize);
            }
            return (int)mh$.invokeExact(type_id, spos, epos, esize, mpos, msize);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_ebias {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_ebias");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_ebias(hid_t type_id, size_t ebias)
     * }
     */
    public static FunctionDescriptor H5Tset_ebias$descriptor() { return H5Tset_ebias.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_ebias(hid_t type_id, size_t ebias)
     * }
     */
    public static MethodHandle H5Tset_ebias$handle() { return H5Tset_ebias.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_ebias(hid_t type_id, size_t ebias)
     * }
     */
    public static MemorySegment H5Tset_ebias$address() { return H5Tset_ebias.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_ebias(hid_t type_id, size_t ebias)
     * }
     */
    public static int H5Tset_ebias(long type_id, long ebias)
    {
        var mh$ = H5Tset_ebias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_ebias", type_id, ebias);
            }
            return (int)mh$.invokeExact(type_id, ebias);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_norm {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_norm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_norm(hid_t type_id, H5T_norm_t norm)
     * }
     */
    public static FunctionDescriptor H5Tset_norm$descriptor() { return H5Tset_norm.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_norm(hid_t type_id, H5T_norm_t norm)
     * }
     */
    public static MethodHandle H5Tset_norm$handle() { return H5Tset_norm.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_norm(hid_t type_id, H5T_norm_t norm)
     * }
     */
    public static MemorySegment H5Tset_norm$address() { return H5Tset_norm.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_norm(hid_t type_id, H5T_norm_t norm)
     * }
     */
    public static int H5Tset_norm(long type_id, int norm)
    {
        var mh$ = H5Tset_norm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_norm", type_id, norm);
            }
            return (int)mh$.invokeExact(type_id, norm);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_inpad {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_inpad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_inpad(hid_t type_id, H5T_pad_t pad)
     * }
     */
    public static FunctionDescriptor H5Tset_inpad$descriptor() { return H5Tset_inpad.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_inpad(hid_t type_id, H5T_pad_t pad)
     * }
     */
    public static MethodHandle H5Tset_inpad$handle() { return H5Tset_inpad.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_inpad(hid_t type_id, H5T_pad_t pad)
     * }
     */
    public static MemorySegment H5Tset_inpad$address() { return H5Tset_inpad.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_inpad(hid_t type_id, H5T_pad_t pad)
     * }
     */
    public static int H5Tset_inpad(long type_id, int pad)
    {
        var mh$ = H5Tset_inpad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_inpad", type_id, pad);
            }
            return (int)mh$.invokeExact(type_id, pad);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_cset {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_cset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_cset(hid_t type_id, H5T_cset_t cset)
     * }
     */
    public static FunctionDescriptor H5Tset_cset$descriptor() { return H5Tset_cset.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_cset(hid_t type_id, H5T_cset_t cset)
     * }
     */
    public static MethodHandle H5Tset_cset$handle() { return H5Tset_cset.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_cset(hid_t type_id, H5T_cset_t cset)
     * }
     */
    public static MemorySegment H5Tset_cset$address() { return H5Tset_cset.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_cset(hid_t type_id, H5T_cset_t cset)
     * }
     */
    public static int H5Tset_cset(long type_id, int cset)
    {
        var mh$ = H5Tset_cset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_cset", type_id, cset);
            }
            return (int)mh$.invokeExact(type_id, cset);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tset_strpad {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tset_strpad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tset_strpad(hid_t type_id, H5T_str_t strpad)
     * }
     */
    public static FunctionDescriptor H5Tset_strpad$descriptor() { return H5Tset_strpad.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tset_strpad(hid_t type_id, H5T_str_t strpad)
     * }
     */
    public static MethodHandle H5Tset_strpad$handle() { return H5Tset_strpad.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tset_strpad(hid_t type_id, H5T_str_t strpad)
     * }
     */
    public static MemorySegment H5Tset_strpad$address() { return H5Tset_strpad.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tset_strpad(hid_t type_id, H5T_str_t strpad)
     * }
     */
    public static int H5Tset_strpad(long type_id, int strpad)
    {
        var mh$ = H5Tset_strpad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tset_strpad", type_id, strpad);
            }
            return (int)mh$.invokeExact(type_id, strpad);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tconvert {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tconvert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tconvert(hid_t src_id, hid_t dst_id, size_t nelmts, void *buf, void *background, hid_t
     * plist_id)
     * }
     */
    public static FunctionDescriptor H5Tconvert$descriptor() { return H5Tconvert.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tconvert(hid_t src_id, hid_t dst_id, size_t nelmts, void *buf, void *background, hid_t
     * plist_id)
     * }
     */
    public static MethodHandle H5Tconvert$handle() { return H5Tconvert.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tconvert(hid_t src_id, hid_t dst_id, size_t nelmts, void *buf, void *background, hid_t
     * plist_id)
     * }
     */
    public static MemorySegment H5Tconvert$address() { return H5Tconvert.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tconvert(hid_t src_id, hid_t dst_id, size_t nelmts, void *buf, void *background, hid_t
     * plist_id)
     * }
     */
    public static int H5Tconvert(long src_id, long dst_id, long nelmts, MemorySegment buf,
                                 MemorySegment background, long plist_id)
    {
        var mh$ = H5Tconvert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tconvert", src_id, dst_id, nelmts, buf, background, plist_id);
            }
            return (int)mh$.invokeExact(src_id, dst_id, nelmts, buf, background, plist_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Treclaim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Treclaim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Treclaim(hid_t type_id, hid_t space_id, hid_t plist_id, void *buf)
     * }
     */
    public static FunctionDescriptor H5Treclaim$descriptor() { return H5Treclaim.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Treclaim(hid_t type_id, hid_t space_id, hid_t plist_id, void *buf)
     * }
     */
    public static MethodHandle H5Treclaim$handle() { return H5Treclaim.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Treclaim(hid_t type_id, hid_t space_id, hid_t plist_id, void *buf)
     * }
     */
    public static MemorySegment H5Treclaim$address() { return H5Treclaim.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Treclaim(hid_t type_id, hid_t space_id, hid_t plist_id, void *buf)
     * }
     */
    public static int H5Treclaim(long type_id, long space_id, long plist_id, MemorySegment buf)
    {
        var mh$ = H5Treclaim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Treclaim", type_id, space_id, plist_id, buf);
            }
            return (int)mh$.invokeExact(type_id, space_id, plist_id, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tcommit1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tcommit1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Tcommit1(hid_t loc_id, const char *name, hid_t type_id)
     * }
     */
    public static FunctionDescriptor H5Tcommit1$descriptor() { return H5Tcommit1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Tcommit1(hid_t loc_id, const char *name, hid_t type_id)
     * }
     */
    public static MethodHandle H5Tcommit1$handle() { return H5Tcommit1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Tcommit1(hid_t loc_id, const char *name, hid_t type_id)
     * }
     */
    public static MemorySegment H5Tcommit1$address() { return H5Tcommit1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Tcommit1(hid_t loc_id, const char *name, hid_t type_id)
     * }
     */
    public static int H5Tcommit1(long loc_id, MemorySegment name, long type_id)
    {
        var mh$ = H5Tcommit1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tcommit1", loc_id, name, type_id);
            }
            return (int)mh$.invokeExact(loc_id, name, type_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Topen1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Topen1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Topen1(hid_t loc_id, const char *name)
     * }
     */
    public static FunctionDescriptor H5Topen1$descriptor() { return H5Topen1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Topen1(hid_t loc_id, const char *name)
     * }
     */
    public static MethodHandle H5Topen1$handle() { return H5Topen1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Topen1(hid_t loc_id, const char *name)
     * }
     */
    public static MemorySegment H5Topen1$address() { return H5Topen1.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Topen1(hid_t loc_id, const char *name)
     * }
     */
    public static long H5Topen1(long loc_id, MemorySegment name)
    {
        var mh$ = H5Topen1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Topen1", loc_id, name);
            }
            return (long)mh$.invokeExact(loc_id, name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tarray_create1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tarray_create1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Tarray_create1(hid_t base_id, int ndims, const hsize_t dim[], const int perm[])
     * }
     */
    public static FunctionDescriptor H5Tarray_create1$descriptor() { return H5Tarray_create1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Tarray_create1(hid_t base_id, int ndims, const hsize_t dim[], const int perm[])
     * }
     */
    public static MethodHandle H5Tarray_create1$handle() { return H5Tarray_create1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Tarray_create1(hid_t base_id, int ndims, const hsize_t dim[], const int perm[])
     * }
     */
    public static MemorySegment H5Tarray_create1$address() { return H5Tarray_create1.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Tarray_create1(hid_t base_id, int ndims, const hsize_t dim[], const int perm[])
     * }
     */
    public static long H5Tarray_create1(long base_id, int ndims, MemorySegment dim, MemorySegment perm)
    {
        var mh$ = H5Tarray_create1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tarray_create1", base_id, ndims, dim, perm);
            }
            return (long)mh$.invokeExact(base_id, ndims, dim, perm);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Tget_array_dims1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Tget_array_dims1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Tget_array_dims1(hid_t type_id, hsize_t dims[], int perm[])
     * }
     */
    public static FunctionDescriptor H5Tget_array_dims1$descriptor() { return H5Tget_array_dims1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Tget_array_dims1(hid_t type_id, hsize_t dims[], int perm[])
     * }
     */
    public static MethodHandle H5Tget_array_dims1$handle() { return H5Tget_array_dims1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Tget_array_dims1(hid_t type_id, hsize_t dims[], int perm[])
     * }
     */
    public static MemorySegment H5Tget_array_dims1$address() { return H5Tget_array_dims1.ADDR; }

    /**
     * {@snippet lang=c :
     * int H5Tget_array_dims1(hid_t type_id, hsize_t dims[], int perm[])
     * }
     */
    public static int H5Tget_array_dims1(long type_id, MemorySegment dims, MemorySegment perm)
    {
        var mh$ = H5Tget_array_dims1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Tget_array_dims1", type_id, dims, perm);
            }
            return (int)mh$.invokeExact(type_id, dims, perm);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Aclose(hid_t attr_id)
     * }
     */
    public static FunctionDescriptor H5Aclose$descriptor() { return H5Aclose.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Aclose(hid_t attr_id)
     * }
     */
    public static MethodHandle H5Aclose$handle() { return H5Aclose.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Aclose(hid_t attr_id)
     * }
     */
    public static MemorySegment H5Aclose$address() { return H5Aclose.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Aclose(hid_t attr_id)
     * }
     */
    public static int H5Aclose(long attr_id)
    {
        var mh$ = H5Aclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aclose", attr_id);
            }
            return (int)mh$.invokeExact(attr_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aclose_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aclose_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Aclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t attr_id,
     * hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Aclose_async$descriptor() { return H5Aclose_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Aclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t attr_id,
     * hid_t es_id)
     * }
     */
    public static MethodHandle H5Aclose_async$handle() { return H5Aclose_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Aclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t attr_id,
     * hid_t es_id)
     * }
     */
    public static MemorySegment H5Aclose_async$address() { return H5Aclose_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Aclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t attr_id,
     * hid_t es_id)
     * }
     */
    public static int H5Aclose_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     long attr_id, long es_id)
    {
        var mh$ = H5Aclose_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aclose_async", app_file, app_func, app_line, attr_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, attr_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Acreate2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG,
                                  hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Acreate2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Acreate2(hid_t loc_id, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id,
     * hid_t aapl_id)
     * }
     */
    public static FunctionDescriptor H5Acreate2$descriptor() { return H5Acreate2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Acreate2(hid_t loc_id, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id,
     * hid_t aapl_id)
     * }
     */
    public static MethodHandle H5Acreate2$handle() { return H5Acreate2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Acreate2(hid_t loc_id, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id,
     * hid_t aapl_id)
     * }
     */
    public static MemorySegment H5Acreate2$address() { return H5Acreate2.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Acreate2(hid_t loc_id, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id,
     * hid_t aapl_id)
     * }
     */
    public static long H5Acreate2(long loc_id, MemorySegment attr_name, long type_id, long space_id,
                                  long acpl_id, long aapl_id)
    {
        var mh$ = H5Acreate2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Acreate2", loc_id, attr_name, type_id, space_id, acpl_id, aapl_id);
            }
            return (long)mh$.invokeExact(loc_id, attr_name, type_id, space_id, acpl_id, aapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Acreate_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Acreate_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Acreate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id, hid_t aapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Acreate_async$descriptor() { return H5Acreate_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Acreate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id, hid_t aapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Acreate_async$handle() { return H5Acreate_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Acreate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id, hid_t aapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Acreate_async$address() { return H5Acreate_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Acreate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id, hid_t aapl_id, hid_t es_id)
     * }
     */
    public static long H5Acreate_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                       long loc_id, MemorySegment attr_name, long type_id, long space_id,
                                       long acpl_id, long aapl_id, long es_id)
    {
        var mh$ = H5Acreate_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Acreate_async", app_file, app_func, app_line, loc_id, attr_name, type_id,
                              space_id, acpl_id, aapl_id, es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, loc_id, attr_name, type_id, space_id,
                                         acpl_id, aapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Acreate_by_name {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER,
                                  hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Acreate_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Acreate_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t type_id, hid_t
     * space_id, hid_t acpl_id, hid_t aapl_id, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Acreate_by_name$descriptor() { return H5Acreate_by_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Acreate_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t type_id, hid_t
     * space_id, hid_t acpl_id, hid_t aapl_id, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Acreate_by_name$handle() { return H5Acreate_by_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Acreate_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t type_id, hid_t
     * space_id, hid_t acpl_id, hid_t aapl_id, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Acreate_by_name$address() { return H5Acreate_by_name.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Acreate_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t type_id, hid_t
     * space_id, hid_t acpl_id, hid_t aapl_id, hid_t lapl_id)
     * }
     */
    public static long H5Acreate_by_name(long loc_id, MemorySegment obj_name, MemorySegment attr_name,
                                         long type_id, long space_id, long acpl_id, long aapl_id,
                                         long lapl_id)
    {
        var mh$ = H5Acreate_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Acreate_by_name", loc_id, obj_name, attr_name, type_id, space_id, acpl_id,
                              aapl_id, lapl_id);
            }
            return (long)mh$.invokeExact(loc_id, obj_name, attr_name, type_id, space_id, acpl_id, aapl_id,
                                         lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Acreate_by_name_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG,
                                  hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Acreate_by_name_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Acreate_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id,
     * hid_t aapl_id, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Acreate_by_name_async$descriptor()
    {
        return H5Acreate_by_name_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Acreate_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id,
     * hid_t aapl_id, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Acreate_by_name_async$handle() { return H5Acreate_by_name_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Acreate_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id,
     * hid_t aapl_id, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Acreate_by_name_async$address() { return H5Acreate_by_name_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Acreate_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id,
     * hid_t aapl_id, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static long H5Acreate_by_name_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                               long loc_id, MemorySegment obj_name, MemorySegment attr_name,
                                               long type_id, long space_id, long acpl_id, long aapl_id,
                                               long lapl_id, long es_id)
    {
        var mh$ = H5Acreate_by_name_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Acreate_by_name_async", app_file, app_func, app_line, loc_id, obj_name,
                              attr_name, type_id, space_id, acpl_id, aapl_id, lapl_id, es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, loc_id, obj_name, attr_name, type_id,
                                         space_id, acpl_id, aapl_id, lapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Adelete {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Adelete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Adelete(hid_t loc_id, const char *attr_name)
     * }
     */
    public static FunctionDescriptor H5Adelete$descriptor() { return H5Adelete.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Adelete(hid_t loc_id, const char *attr_name)
     * }
     */
    public static MethodHandle H5Adelete$handle() { return H5Adelete.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Adelete(hid_t loc_id, const char *attr_name)
     * }
     */
    public static MemorySegment H5Adelete$address() { return H5Adelete.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Adelete(hid_t loc_id, const char *attr_name)
     * }
     */
    public static int H5Adelete(long loc_id, MemorySegment attr_name)
    {
        var mh$ = H5Adelete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Adelete", loc_id, attr_name);
            }
            return (int)mh$.invokeExact(loc_id, attr_name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Adelete_by_idx {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Adelete_by_idx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Adelete_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order,
     * hsize_t n, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Adelete_by_idx$descriptor() { return H5Adelete_by_idx.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Adelete_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order,
     * hsize_t n, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Adelete_by_idx$handle() { return H5Adelete_by_idx.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Adelete_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order,
     * hsize_t n, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Adelete_by_idx$address() { return H5Adelete_by_idx.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Adelete_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order,
     * hsize_t n, hid_t lapl_id)
     * }
     */
    public static int H5Adelete_by_idx(long loc_id, MemorySegment obj_name, int idx_type, int order, long n,
                                       long lapl_id)
    {
        var mh$ = H5Adelete_by_idx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Adelete_by_idx", loc_id, obj_name, idx_type, order, n, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, obj_name, idx_type, order, n, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Adelete_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Adelete_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Adelete_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Adelete_by_name$descriptor() { return H5Adelete_by_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Adelete_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Adelete_by_name$handle() { return H5Adelete_by_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Adelete_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Adelete_by_name$address() { return H5Adelete_by_name.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Adelete_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t lapl_id)
     * }
     */
    public static int H5Adelete_by_name(long loc_id, MemorySegment obj_name, MemorySegment attr_name,
                                        long lapl_id)
    {
        var mh$ = H5Adelete_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Adelete_by_name", loc_id, obj_name, attr_name, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, obj_name, attr_name, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aexists {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aexists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Aexists(hid_t obj_id, const char *attr_name)
     * }
     */
    public static FunctionDescriptor H5Aexists$descriptor() { return H5Aexists.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Aexists(hid_t obj_id, const char *attr_name)
     * }
     */
    public static MethodHandle H5Aexists$handle() { return H5Aexists.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Aexists(hid_t obj_id, const char *attr_name)
     * }
     */
    public static MemorySegment H5Aexists$address() { return H5Aexists.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Aexists(hid_t obj_id, const char *attr_name)
     * }
     */
    public static int H5Aexists(long obj_id, MemorySegment attr_name)
    {
        var mh$ = H5Aexists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aexists", obj_id, attr_name);
            }
            return (int)mh$.invokeExact(obj_id, attr_name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aexists_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aexists_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Aexists_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t obj_id,
     * const char *attr_name, hbool_t *exists, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Aexists_async$descriptor() { return H5Aexists_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Aexists_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t obj_id,
     * const char *attr_name, hbool_t *exists, hid_t es_id)
     * }
     */
    public static MethodHandle H5Aexists_async$handle() { return H5Aexists_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Aexists_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t obj_id,
     * const char *attr_name, hbool_t *exists, hid_t es_id)
     * }
     */
    public static MemorySegment H5Aexists_async$address() { return H5Aexists_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Aexists_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t obj_id,
     * const char *attr_name, hbool_t *exists, hid_t es_id)
     * }
     */
    public static int H5Aexists_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                      long obj_id, MemorySegment attr_name, MemorySegment exists, long es_id)
    {
        var mh$ = H5Aexists_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aexists_async", app_file, app_func, app_line, obj_id, attr_name, exists,
                              es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, obj_id, attr_name, exists, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aexists_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aexists_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Aexists_by_name(hid_t obj_id, const char *obj_name, const char *attr_name, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Aexists_by_name$descriptor() { return H5Aexists_by_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Aexists_by_name(hid_t obj_id, const char *obj_name, const char *attr_name, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Aexists_by_name$handle() { return H5Aexists_by_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Aexists_by_name(hid_t obj_id, const char *obj_name, const char *attr_name, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Aexists_by_name$address() { return H5Aexists_by_name.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Aexists_by_name(hid_t obj_id, const char *obj_name, const char *attr_name, hid_t lapl_id)
     * }
     */
    public static int H5Aexists_by_name(long obj_id, MemorySegment obj_name, MemorySegment attr_name,
                                        long lapl_id)
    {
        var mh$ = H5Aexists_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aexists_by_name", obj_id, obj_name, attr_name, lapl_id);
            }
            return (int)mh$.invokeExact(obj_id, obj_name, attr_name, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aexists_by_name_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aexists_by_name_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Aexists_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *attr_name, hbool_t *exists, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Aexists_by_name_async$descriptor()
    {
        return H5Aexists_by_name_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Aexists_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *attr_name, hbool_t *exists, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Aexists_by_name_async$handle() { return H5Aexists_by_name_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Aexists_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *attr_name, hbool_t *exists, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Aexists_by_name_async$address() { return H5Aexists_by_name_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Aexists_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *attr_name, hbool_t *exists, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static int H5Aexists_by_name_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                              long loc_id, MemorySegment obj_name, MemorySegment attr_name,
                                              MemorySegment exists, long lapl_id, long es_id)
    {
        var mh$ = H5Aexists_by_name_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aexists_by_name_async", app_file, app_func, app_line, loc_id, obj_name,
                              attr_name, exists, lapl_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, loc_id, obj_name, attr_name, exists,
                                        lapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aget_create_plist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aget_create_plist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Aget_create_plist(hid_t attr_id)
     * }
     */
    public static FunctionDescriptor H5Aget_create_plist$descriptor() { return H5Aget_create_plist.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Aget_create_plist(hid_t attr_id)
     * }
     */
    public static MethodHandle H5Aget_create_plist$handle() { return H5Aget_create_plist.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Aget_create_plist(hid_t attr_id)
     * }
     */
    public static MemorySegment H5Aget_create_plist$address() { return H5Aget_create_plist.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Aget_create_plist(hid_t attr_id)
     * }
     */
    public static long H5Aget_create_plist(long attr_id)
    {
        var mh$ = H5Aget_create_plist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aget_create_plist", attr_id);
            }
            return (long)mh$.invokeExact(attr_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aget_info {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aget_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Aget_info(hid_t attr_id, H5A_info_t *ainfo)
     * }
     */
    public static FunctionDescriptor H5Aget_info$descriptor() { return H5Aget_info.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Aget_info(hid_t attr_id, H5A_info_t *ainfo)
     * }
     */
    public static MethodHandle H5Aget_info$handle() { return H5Aget_info.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Aget_info(hid_t attr_id, H5A_info_t *ainfo)
     * }
     */
    public static MemorySegment H5Aget_info$address() { return H5Aget_info.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Aget_info(hid_t attr_id, H5A_info_t *ainfo)
     * }
     */
    public static int H5Aget_info(long attr_id, MemorySegment ainfo)
    {
        var mh$ = H5Aget_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aget_info", attr_id, ainfo);
            }
            return (int)mh$.invokeExact(attr_id, ainfo);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aget_info_by_idx {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aget_info_by_idx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Aget_info_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5A_info_t *ainfo, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Aget_info_by_idx$descriptor() { return H5Aget_info_by_idx.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Aget_info_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5A_info_t *ainfo, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Aget_info_by_idx$handle() { return H5Aget_info_by_idx.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Aget_info_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5A_info_t *ainfo, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Aget_info_by_idx$address() { return H5Aget_info_by_idx.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Aget_info_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5A_info_t *ainfo, hid_t lapl_id)
     * }
     */
    public static int H5Aget_info_by_idx(long loc_id, MemorySegment obj_name, int idx_type, int order, long n,
                                         MemorySegment ainfo, long lapl_id)
    {
        var mh$ = H5Aget_info_by_idx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aget_info_by_idx", loc_id, obj_name, idx_type, order, n, ainfo, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, obj_name, idx_type, order, n, ainfo, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aget_info_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aget_info_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Aget_info_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, H5A_info_t
     * *ainfo, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Aget_info_by_name$descriptor() { return H5Aget_info_by_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Aget_info_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, H5A_info_t
     * *ainfo, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Aget_info_by_name$handle() { return H5Aget_info_by_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Aget_info_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, H5A_info_t
     * *ainfo, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Aget_info_by_name$address() { return H5Aget_info_by_name.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Aget_info_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, H5A_info_t
     * *ainfo, hid_t lapl_id)
     * }
     */
    public static int H5Aget_info_by_name(long loc_id, MemorySegment obj_name, MemorySegment attr_name,
                                          MemorySegment ainfo, long lapl_id)
    {
        var mh$ = H5Aget_info_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aget_info_by_name", loc_id, obj_name, attr_name, ainfo, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, obj_name, attr_name, ainfo, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aget_name {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aget_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Aget_name(hid_t attr_id, size_t buf_size, char *buf)
     * }
     */
    public static FunctionDescriptor H5Aget_name$descriptor() { return H5Aget_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Aget_name(hid_t attr_id, size_t buf_size, char *buf)
     * }
     */
    public static MethodHandle H5Aget_name$handle() { return H5Aget_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Aget_name(hid_t attr_id, size_t buf_size, char *buf)
     * }
     */
    public static MemorySegment H5Aget_name$address() { return H5Aget_name.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Aget_name(hid_t attr_id, size_t buf_size, char *buf)
     * }
     */
    public static long H5Aget_name(long attr_id, long buf_size, MemorySegment buf)
    {
        var mh$ = H5Aget_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aget_name", attr_id, buf_size, buf);
            }
            return (long)mh$.invokeExact(attr_id, buf_size, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aget_name_by_idx {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aget_name_by_idx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Aget_name_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, char *name, size_t size, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Aget_name_by_idx$descriptor() { return H5Aget_name_by_idx.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Aget_name_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, char *name, size_t size, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Aget_name_by_idx$handle() { return H5Aget_name_by_idx.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Aget_name_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, char *name, size_t size, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Aget_name_by_idx$address() { return H5Aget_name_by_idx.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Aget_name_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, char *name, size_t size, hid_t lapl_id)
     * }
     */
    public static long H5Aget_name_by_idx(long loc_id, MemorySegment obj_name, int idx_type, int order,
                                          long n, MemorySegment name, long size, long lapl_id)
    {
        var mh$ = H5Aget_name_by_idx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aget_name_by_idx", loc_id, obj_name, idx_type, order, n, name, size,
                              lapl_id);
            }
            return (long)mh$.invokeExact(loc_id, obj_name, idx_type, order, n, name, size, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aget_space {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aget_space");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Aget_space(hid_t attr_id)
     * }
     */
    public static FunctionDescriptor H5Aget_space$descriptor() { return H5Aget_space.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Aget_space(hid_t attr_id)
     * }
     */
    public static MethodHandle H5Aget_space$handle() { return H5Aget_space.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Aget_space(hid_t attr_id)
     * }
     */
    public static MemorySegment H5Aget_space$address() { return H5Aget_space.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Aget_space(hid_t attr_id)
     * }
     */
    public static long H5Aget_space(long attr_id)
    {
        var mh$ = H5Aget_space.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aget_space", attr_id);
            }
            return (long)mh$.invokeExact(attr_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aget_storage_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aget_storage_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hsize_t H5Aget_storage_size(hid_t attr_id)
     * }
     */
    public static FunctionDescriptor H5Aget_storage_size$descriptor() { return H5Aget_storage_size.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hsize_t H5Aget_storage_size(hid_t attr_id)
     * }
     */
    public static MethodHandle H5Aget_storage_size$handle() { return H5Aget_storage_size.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hsize_t H5Aget_storage_size(hid_t attr_id)
     * }
     */
    public static MemorySegment H5Aget_storage_size$address() { return H5Aget_storage_size.ADDR; }

    /**
     * {@snippet lang=c :
     * hsize_t H5Aget_storage_size(hid_t attr_id)
     * }
     */
    public static long H5Aget_storage_size(long attr_id)
    {
        var mh$ = H5Aget_storage_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aget_storage_size", attr_id);
            }
            return (long)mh$.invokeExact(attr_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aget_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aget_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Aget_type(hid_t attr_id)
     * }
     */
    public static FunctionDescriptor H5Aget_type$descriptor() { return H5Aget_type.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Aget_type(hid_t attr_id)
     * }
     */
    public static MethodHandle H5Aget_type$handle() { return H5Aget_type.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Aget_type(hid_t attr_id)
     * }
     */
    public static MemorySegment H5Aget_type$address() { return H5Aget_type.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Aget_type(hid_t attr_id)
     * }
     */
    public static long H5Aget_type(long attr_id)
    {
        var mh$ = H5Aget_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aget_type", attr_id);
            }
            return (long)mh$.invokeExact(attr_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aiterate2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aiterate2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Aiterate2(hid_t loc_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx,
     * H5A_operator2_t op, void *op_data)
     * }
     */
    public static FunctionDescriptor H5Aiterate2$descriptor() { return H5Aiterate2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Aiterate2(hid_t loc_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx,
     * H5A_operator2_t op, void *op_data)
     * }
     */
    public static MethodHandle H5Aiterate2$handle() { return H5Aiterate2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Aiterate2(hid_t loc_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx,
     * H5A_operator2_t op, void *op_data)
     * }
     */
    public static MemorySegment H5Aiterate2$address() { return H5Aiterate2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Aiterate2(hid_t loc_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx,
     * H5A_operator2_t op, void *op_data)
     * }
     */
    public static int H5Aiterate2(long loc_id, int idx_type, int order, MemorySegment idx, MemorySegment op,
                                  MemorySegment op_data)
    {
        var mh$ = H5Aiterate2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aiterate2", loc_id, idx_type, order, idx, op, op_data);
            }
            return (int)mh$.invokeExact(loc_id, idx_type, order, idx, op, op_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aiterate_by_name {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aiterate_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Aiterate_by_name(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t *idx, H5A_operator2_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Aiterate_by_name$descriptor() { return H5Aiterate_by_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Aiterate_by_name(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t *idx, H5A_operator2_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Aiterate_by_name$handle() { return H5Aiterate_by_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Aiterate_by_name(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t *idx, H5A_operator2_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Aiterate_by_name$address() { return H5Aiterate_by_name.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Aiterate_by_name(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t *idx, H5A_operator2_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static int H5Aiterate_by_name(long loc_id, MemorySegment obj_name, int idx_type, int order,
                                         MemorySegment idx, MemorySegment op, MemorySegment op_data,
                                         long lapl_id)
    {
        var mh$ = H5Aiterate_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aiterate_by_name", loc_id, obj_name, idx_type, order, idx, op, op_data,
                              lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, obj_name, idx_type, order, idx, op, op_data, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aopen {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Aopen(hid_t obj_id, const char *attr_name, hid_t aapl_id)
     * }
     */
    public static FunctionDescriptor H5Aopen$descriptor() { return H5Aopen.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Aopen(hid_t obj_id, const char *attr_name, hid_t aapl_id)
     * }
     */
    public static MethodHandle H5Aopen$handle() { return H5Aopen.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Aopen(hid_t obj_id, const char *attr_name, hid_t aapl_id)
     * }
     */
    public static MemorySegment H5Aopen$address() { return H5Aopen.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Aopen(hid_t obj_id, const char *attr_name, hid_t aapl_id)
     * }
     */
    public static long H5Aopen(long obj_id, MemorySegment attr_name, long aapl_id)
    {
        var mh$ = H5Aopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aopen", obj_id, attr_name, aapl_id);
            }
            return (long)mh$.invokeExact(obj_id, attr_name, aapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aopen_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aopen_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Aopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t obj_id,
     * const char *attr_name, hid_t aapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Aopen_async$descriptor() { return H5Aopen_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Aopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t obj_id,
     * const char *attr_name, hid_t aapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Aopen_async$handle() { return H5Aopen_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Aopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t obj_id,
     * const char *attr_name, hid_t aapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Aopen_async$address() { return H5Aopen_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Aopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t obj_id,
     * const char *attr_name, hid_t aapl_id, hid_t es_id)
     * }
     */
    public static long H5Aopen_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     long obj_id, MemorySegment attr_name, long aapl_id, long es_id)
    {
        var mh$ = H5Aopen_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aopen_async", app_file, app_func, app_line, obj_id, attr_name, aapl_id,
                              es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, obj_id, attr_name, aapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aopen_by_idx {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aopen_by_idx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Aopen_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order,
     * hsize_t n, hid_t aapl_id, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Aopen_by_idx$descriptor() { return H5Aopen_by_idx.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Aopen_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order,
     * hsize_t n, hid_t aapl_id, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Aopen_by_idx$handle() { return H5Aopen_by_idx.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Aopen_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order,
     * hsize_t n, hid_t aapl_id, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Aopen_by_idx$address() { return H5Aopen_by_idx.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Aopen_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order,
     * hsize_t n, hid_t aapl_id, hid_t lapl_id)
     * }
     */
    public static long H5Aopen_by_idx(long loc_id, MemorySegment obj_name, int idx_type, int order, long n,
                                      long aapl_id, long lapl_id)
    {
        var mh$ = H5Aopen_by_idx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aopen_by_idx", loc_id, obj_name, idx_type, order, n, aapl_id, lapl_id);
            }
            return (long)mh$.invokeExact(loc_id, obj_name, idx_type, order, n, aapl_id, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aopen_by_idx_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aopen_by_idx_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Aopen_by_idx_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, hid_t aapl_id,
     * hid_t lapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Aopen_by_idx_async$descriptor() { return H5Aopen_by_idx_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Aopen_by_idx_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, hid_t aapl_id,
     * hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Aopen_by_idx_async$handle() { return H5Aopen_by_idx_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Aopen_by_idx_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, hid_t aapl_id,
     * hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Aopen_by_idx_async$address() { return H5Aopen_by_idx_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Aopen_by_idx_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, hid_t aapl_id,
     * hid_t lapl_id, hid_t es_id)
     * }
     */
    public static long H5Aopen_by_idx_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                            long loc_id, MemorySegment obj_name, int idx_type, int order,
                                            long n, long aapl_id, long lapl_id, long es_id)
    {
        var mh$ = H5Aopen_by_idx_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aopen_by_idx_async", app_file, app_func, app_line, loc_id, obj_name,
                              idx_type, order, n, aapl_id, lapl_id, es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, loc_id, obj_name, idx_type, order, n,
                                         aapl_id, lapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aopen_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aopen_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Aopen_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t aapl_id, hid_t
     * lapl_id)
     * }
     */
    public static FunctionDescriptor H5Aopen_by_name$descriptor() { return H5Aopen_by_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Aopen_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t aapl_id, hid_t
     * lapl_id)
     * }
     */
    public static MethodHandle H5Aopen_by_name$handle() { return H5Aopen_by_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Aopen_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t aapl_id, hid_t
     * lapl_id)
     * }
     */
    public static MemorySegment H5Aopen_by_name$address() { return H5Aopen_by_name.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Aopen_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t aapl_id, hid_t
     * lapl_id)
     * }
     */
    public static long H5Aopen_by_name(long loc_id, MemorySegment obj_name, MemorySegment attr_name,
                                       long aapl_id, long lapl_id)
    {
        var mh$ = H5Aopen_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aopen_by_name", loc_id, obj_name, attr_name, aapl_id, lapl_id);
            }
            return (long)mh$.invokeExact(loc_id, obj_name, attr_name, aapl_id, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aopen_by_name_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aopen_by_name_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Aopen_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *attr_name, hid_t aapl_id, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Aopen_by_name_async$descriptor() { return H5Aopen_by_name_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Aopen_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *attr_name, hid_t aapl_id, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Aopen_by_name_async$handle() { return H5Aopen_by_name_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Aopen_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *attr_name, hid_t aapl_id, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Aopen_by_name_async$address() { return H5Aopen_by_name_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Aopen_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *attr_name, hid_t aapl_id, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static long H5Aopen_by_name_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                             long loc_id, MemorySegment obj_name, MemorySegment attr_name,
                                             long aapl_id, long lapl_id, long es_id)
    {
        var mh$ = H5Aopen_by_name_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aopen_by_name_async", app_file, app_func, app_line, loc_id, obj_name,
                              attr_name, aapl_id, lapl_id, es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, loc_id, obj_name, attr_name, aapl_id,
                                         lapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aread {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Aread(hid_t attr_id, hid_t type_id, void *buf)
     * }
     */
    public static FunctionDescriptor H5Aread$descriptor() { return H5Aread.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Aread(hid_t attr_id, hid_t type_id, void *buf)
     * }
     */
    public static MethodHandle H5Aread$handle() { return H5Aread.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Aread(hid_t attr_id, hid_t type_id, void *buf)
     * }
     */
    public static MemorySegment H5Aread$address() { return H5Aread.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Aread(hid_t attr_id, hid_t type_id, void *buf)
     * }
     */
    public static int H5Aread(long attr_id, long type_id, MemorySegment buf)
    {
        var mh$ = H5Aread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aread", attr_id, type_id, buf);
            }
            return (int)mh$.invokeExact(attr_id, type_id, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aread_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aread_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Aread_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t attr_id,
     * hid_t dtype_id, void *buf, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Aread_async$descriptor() { return H5Aread_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Aread_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t attr_id,
     * hid_t dtype_id, void *buf, hid_t es_id)
     * }
     */
    public static MethodHandle H5Aread_async$handle() { return H5Aread_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Aread_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t attr_id,
     * hid_t dtype_id, void *buf, hid_t es_id)
     * }
     */
    public static MemorySegment H5Aread_async$address() { return H5Aread_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Aread_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t attr_id,
     * hid_t dtype_id, void *buf, hid_t es_id)
     * }
     */
    public static int H5Aread_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                    long attr_id, long dtype_id, MemorySegment buf, long es_id)
    {
        var mh$ = H5Aread_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aread_async", app_file, app_func, app_line, attr_id, dtype_id, buf, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, attr_id, dtype_id, buf, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Arename {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Arename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Arename(hid_t loc_id, const char *old_name, const char *new_name)
     * }
     */
    public static FunctionDescriptor H5Arename$descriptor() { return H5Arename.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Arename(hid_t loc_id, const char *old_name, const char *new_name)
     * }
     */
    public static MethodHandle H5Arename$handle() { return H5Arename.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Arename(hid_t loc_id, const char *old_name, const char *new_name)
     * }
     */
    public static MemorySegment H5Arename$address() { return H5Arename.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Arename(hid_t loc_id, const char *old_name, const char *new_name)
     * }
     */
    public static int H5Arename(long loc_id, MemorySegment old_name, MemorySegment new_name)
    {
        var mh$ = H5Arename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Arename", loc_id, old_name, new_name);
            }
            return (int)mh$.invokeExact(loc_id, old_name, new_name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Arename_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Arename_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Arename_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *old_name, const char *new_name, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Arename_async$descriptor() { return H5Arename_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Arename_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *old_name, const char *new_name, hid_t es_id)
     * }
     */
    public static MethodHandle H5Arename_async$handle() { return H5Arename_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Arename_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *old_name, const char *new_name, hid_t es_id)
     * }
     */
    public static MemorySegment H5Arename_async$address() { return H5Arename_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Arename_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *old_name, const char *new_name, hid_t es_id)
     * }
     */
    public static int H5Arename_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                      long loc_id, MemorySegment old_name, MemorySegment new_name, long es_id)
    {
        var mh$ = H5Arename_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Arename_async", app_file, app_func, app_line, loc_id, old_name, new_name,
                              es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, loc_id, old_name, new_name, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Arename_by_name_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Arename_by_name_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Arename_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *old_attr_name, const char *new_attr_name, hid_t lapl_id,
     * hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Arename_by_name_async$descriptor()
    {
        return H5Arename_by_name_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Arename_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *old_attr_name, const char *new_attr_name, hid_t lapl_id,
     * hid_t es_id)
     * }
     */
    public static MethodHandle H5Arename_by_name_async$handle() { return H5Arename_by_name_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Arename_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *old_attr_name, const char *new_attr_name, hid_t lapl_id,
     * hid_t es_id)
     * }
     */
    public static MemorySegment H5Arename_by_name_async$address() { return H5Arename_by_name_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Arename_by_name_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *obj_name, const char *old_attr_name, const char *new_attr_name, hid_t lapl_id,
     * hid_t es_id)
     * }
     */
    public static int H5Arename_by_name_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                              long loc_id, MemorySegment obj_name,
                                              MemorySegment old_attr_name, MemorySegment new_attr_name,
                                              long lapl_id, long es_id)
    {
        var mh$ = H5Arename_by_name_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Arename_by_name_async", app_file, app_func, app_line, loc_id, obj_name,
                              old_attr_name, new_attr_name, lapl_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, loc_id, obj_name, old_attr_name,
                                        new_attr_name, lapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Awrite {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Awrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Awrite(hid_t attr_id, hid_t type_id, const void *buf)
     * }
     */
    public static FunctionDescriptor H5Awrite$descriptor() { return H5Awrite.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Awrite(hid_t attr_id, hid_t type_id, const void *buf)
     * }
     */
    public static MethodHandle H5Awrite$handle() { return H5Awrite.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Awrite(hid_t attr_id, hid_t type_id, const void *buf)
     * }
     */
    public static MemorySegment H5Awrite$address() { return H5Awrite.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Awrite(hid_t attr_id, hid_t type_id, const void *buf)
     * }
     */
    public static int H5Awrite(long attr_id, long type_id, MemorySegment buf)
    {
        var mh$ = H5Awrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Awrite", attr_id, type_id, buf);
            }
            return (int)mh$.invokeExact(attr_id, type_id, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Awrite_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Awrite_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Awrite_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t attr_id,
     * hid_t type_id, const void *buf, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Awrite_async$descriptor() { return H5Awrite_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Awrite_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t attr_id,
     * hid_t type_id, const void *buf, hid_t es_id)
     * }
     */
    public static MethodHandle H5Awrite_async$handle() { return H5Awrite_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Awrite_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t attr_id,
     * hid_t type_id, const void *buf, hid_t es_id)
     * }
     */
    public static MemorySegment H5Awrite_async$address() { return H5Awrite_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Awrite_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t attr_id,
     * hid_t type_id, const void *buf, hid_t es_id)
     * }
     */
    public static int H5Awrite_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     long attr_id, long type_id, MemorySegment buf, long es_id)
    {
        var mh$ = H5Awrite_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Awrite_async", app_file, app_func, app_line, attr_id, type_id, buf, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, attr_id, type_id, buf, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Arename_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Arename_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Arename_by_name(hid_t loc_id, const char *obj_name, const char *old_attr_name, const char
     * *new_attr_name, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Arename_by_name$descriptor() { return H5Arename_by_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Arename_by_name(hid_t loc_id, const char *obj_name, const char *old_attr_name, const char
     * *new_attr_name, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Arename_by_name$handle() { return H5Arename_by_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Arename_by_name(hid_t loc_id, const char *obj_name, const char *old_attr_name, const char
     * *new_attr_name, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Arename_by_name$address() { return H5Arename_by_name.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Arename_by_name(hid_t loc_id, const char *obj_name, const char *old_attr_name, const char
     * *new_attr_name, hid_t lapl_id)
     * }
     */
    public static int H5Arename_by_name(long loc_id, MemorySegment obj_name, MemorySegment old_attr_name,
                                        MemorySegment new_attr_name, long lapl_id)
    {
        var mh$ = H5Arename_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Arename_by_name", loc_id, obj_name, old_attr_name, new_attr_name, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, obj_name, old_attr_name, new_attr_name, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Acreate1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Acreate1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Acreate1(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t acpl_id)
     * }
     */
    public static FunctionDescriptor H5Acreate1$descriptor() { return H5Acreate1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Acreate1(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t acpl_id)
     * }
     */
    public static MethodHandle H5Acreate1$handle() { return H5Acreate1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Acreate1(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t acpl_id)
     * }
     */
    public static MemorySegment H5Acreate1$address() { return H5Acreate1.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Acreate1(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t acpl_id)
     * }
     */
    public static long H5Acreate1(long loc_id, MemorySegment name, long type_id, long space_id, long acpl_id)
    {
        var mh$ = H5Acreate1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Acreate1", loc_id, name, type_id, space_id, acpl_id);
            }
            return (long)mh$.invokeExact(loc_id, name, type_id, space_id, acpl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aget_num_attrs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aget_num_attrs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Aget_num_attrs(hid_t loc_id)
     * }
     */
    public static FunctionDescriptor H5Aget_num_attrs$descriptor() { return H5Aget_num_attrs.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Aget_num_attrs(hid_t loc_id)
     * }
     */
    public static MethodHandle H5Aget_num_attrs$handle() { return H5Aget_num_attrs.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Aget_num_attrs(hid_t loc_id)
     * }
     */
    public static MemorySegment H5Aget_num_attrs$address() { return H5Aget_num_attrs.ADDR; }

    /**
     * {@snippet lang=c :
     * int H5Aget_num_attrs(hid_t loc_id)
     * }
     */
    public static int H5Aget_num_attrs(long loc_id)
    {
        var mh$ = H5Aget_num_attrs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aget_num_attrs", loc_id);
            }
            return (int)mh$.invokeExact(loc_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aiterate1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aiterate1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Aiterate1(hid_t loc_id, unsigned int *idx, H5A_operator1_t op, void *op_data)
     * }
     */
    public static FunctionDescriptor H5Aiterate1$descriptor() { return H5Aiterate1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Aiterate1(hid_t loc_id, unsigned int *idx, H5A_operator1_t op, void *op_data)
     * }
     */
    public static MethodHandle H5Aiterate1$handle() { return H5Aiterate1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Aiterate1(hid_t loc_id, unsigned int *idx, H5A_operator1_t op, void *op_data)
     * }
     */
    public static MemorySegment H5Aiterate1$address() { return H5Aiterate1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Aiterate1(hid_t loc_id, unsigned int *idx, H5A_operator1_t op, void *op_data)
     * }
     */
    public static int H5Aiterate1(long loc_id, MemorySegment idx, MemorySegment op, MemorySegment op_data)
    {
        var mh$ = H5Aiterate1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aiterate1", loc_id, idx, op, op_data);
            }
            return (int)mh$.invokeExact(loc_id, idx, op, op_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aopen_idx {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aopen_idx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Aopen_idx(hid_t loc_id, unsigned int idx)
     * }
     */
    public static FunctionDescriptor H5Aopen_idx$descriptor() { return H5Aopen_idx.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Aopen_idx(hid_t loc_id, unsigned int idx)
     * }
     */
    public static MethodHandle H5Aopen_idx$handle() { return H5Aopen_idx.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Aopen_idx(hid_t loc_id, unsigned int idx)
     * }
     */
    public static MemorySegment H5Aopen_idx$address() { return H5Aopen_idx.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Aopen_idx(hid_t loc_id, unsigned int idx)
     * }
     */
    public static long H5Aopen_idx(long loc_id, int idx)
    {
        var mh$ = H5Aopen_idx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aopen_idx", loc_id, idx);
            }
            return (long)mh$.invokeExact(loc_id, idx);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Aopen_name {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Aopen_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Aopen_name(hid_t loc_id, const char *name)
     * }
     */
    public static FunctionDescriptor H5Aopen_name$descriptor() { return H5Aopen_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Aopen_name(hid_t loc_id, const char *name)
     * }
     */
    public static MethodHandle H5Aopen_name$handle() { return H5Aopen_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Aopen_name(hid_t loc_id, const char *name)
     * }
     */
    public static MemorySegment H5Aopen_name$address() { return H5Aopen_name.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Aopen_name(hid_t loc_id, const char *name)
     * }
     */
    public static long H5Aopen_name(long loc_id, MemorySegment name)
    {
        var mh$ = H5Aopen_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Aopen_name", loc_id, name);
            }
            return (long)mh$.invokeExact(loc_id, name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5C_incr__off = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5C_cache_incr_mode.H5C_incr__off = 0
     * }
     */
    public static int H5C_incr__off() { return H5C_incr__off; }
    private static final int H5C_incr__threshold = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5C_cache_incr_mode.H5C_incr__threshold = 1
     * }
     */
    public static int H5C_incr__threshold() { return H5C_incr__threshold; }
    private static final int H5C_flash_incr__off = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5C_cache_flash_incr_mode.H5C_flash_incr__off = 0
     * }
     */
    public static int H5C_flash_incr__off() { return H5C_flash_incr__off; }
    private static final int H5C_flash_incr__add_space = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5C_cache_flash_incr_mode.H5C_flash_incr__add_space = 1
     * }
     */
    public static int H5C_flash_incr__add_space() { return H5C_flash_incr__add_space; }
    private static final int H5C_decr__off = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5C_cache_decr_mode.H5C_decr__off = 0
     * }
     */
    public static int H5C_decr__off() { return H5C_decr__off; }
    private static final int H5C_decr__threshold = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5C_cache_decr_mode.H5C_decr__threshold = 1
     * }
     */
    public static int H5C_decr__threshold() { return H5C_decr__threshold; }
    private static final int H5C_decr__age_out = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5C_cache_decr_mode.H5C_decr__age_out = 2
     * }
     */
    public static int H5C_decr__age_out() { return H5C_decr__age_out; }
    private static final int H5C_decr__age_out_with_threshold = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5C_cache_decr_mode.H5C_decr__age_out_with_threshold = 3
     * }
     */
    public static int H5C_decr__age_out_with_threshold() { return H5C_decr__age_out_with_threshold; }
    private static final int H5D_LAYOUT_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5D_layout_t.H5D_LAYOUT_ERROR = -1
     * }
     */
    public static int H5D_LAYOUT_ERROR() { return H5D_LAYOUT_ERROR; }
    private static final int H5D_COMPACT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5D_layout_t.H5D_COMPACT = 0
     * }
     */
    public static int H5D_COMPACT() { return H5D_COMPACT; }
    private static final int H5D_CONTIGUOUS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5D_layout_t.H5D_CONTIGUOUS = 1
     * }
     */
    public static int H5D_CONTIGUOUS() { return H5D_CONTIGUOUS; }
    private static final int H5D_CHUNKED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5D_layout_t.H5D_CHUNKED = 2
     * }
     */
    public static int H5D_CHUNKED() { return H5D_CHUNKED; }
    private static final int H5D_VIRTUAL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5D_layout_t.H5D_VIRTUAL = 3
     * }
     */
    public static int H5D_VIRTUAL() { return H5D_VIRTUAL; }
    private static final int H5D_NLAYOUTS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5D_layout_t.H5D_NLAYOUTS = 4
     * }
     */
    public static int H5D_NLAYOUTS() { return H5D_NLAYOUTS; }
    private static final int H5D_CHUNK_IDX_BTREE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5D_chunk_index_t.H5D_CHUNK_IDX_BTREE = 0
     * }
     */
    public static int H5D_CHUNK_IDX_BTREE() { return H5D_CHUNK_IDX_BTREE; }
    private static final int H5D_CHUNK_IDX_SINGLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5D_chunk_index_t.H5D_CHUNK_IDX_SINGLE = 1
     * }
     */
    public static int H5D_CHUNK_IDX_SINGLE() { return H5D_CHUNK_IDX_SINGLE; }
    private static final int H5D_CHUNK_IDX_NONE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5D_chunk_index_t.H5D_CHUNK_IDX_NONE = 2
     * }
     */
    public static int H5D_CHUNK_IDX_NONE() { return H5D_CHUNK_IDX_NONE; }
    private static final int H5D_CHUNK_IDX_FARRAY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5D_chunk_index_t.H5D_CHUNK_IDX_FARRAY = 3
     * }
     */
    public static int H5D_CHUNK_IDX_FARRAY() { return H5D_CHUNK_IDX_FARRAY; }
    private static final int H5D_CHUNK_IDX_EARRAY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5D_chunk_index_t.H5D_CHUNK_IDX_EARRAY = 4
     * }
     */
    public static int H5D_CHUNK_IDX_EARRAY() { return H5D_CHUNK_IDX_EARRAY; }
    private static final int H5D_CHUNK_IDX_BT2 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum H5D_chunk_index_t.H5D_CHUNK_IDX_BT2 = 5
     * }
     */
    public static int H5D_CHUNK_IDX_BT2() { return H5D_CHUNK_IDX_BT2; }
    private static final int H5D_CHUNK_IDX_NTYPES = (int)6L;
    /**
     * {@snippet lang=c :
     * enum H5D_chunk_index_t.H5D_CHUNK_IDX_NTYPES = 6
     * }
     */
    public static int H5D_CHUNK_IDX_NTYPES() { return H5D_CHUNK_IDX_NTYPES; }
    private static final int H5D_ALLOC_TIME_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5D_alloc_time_t.H5D_ALLOC_TIME_ERROR = -1
     * }
     */
    public static int H5D_ALLOC_TIME_ERROR() { return H5D_ALLOC_TIME_ERROR; }
    private static final int H5D_ALLOC_TIME_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5D_alloc_time_t.H5D_ALLOC_TIME_DEFAULT = 0
     * }
     */
    public static int H5D_ALLOC_TIME_DEFAULT() { return H5D_ALLOC_TIME_DEFAULT; }
    private static final int H5D_ALLOC_TIME_EARLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5D_alloc_time_t.H5D_ALLOC_TIME_EARLY = 1
     * }
     */
    public static int H5D_ALLOC_TIME_EARLY() { return H5D_ALLOC_TIME_EARLY; }
    private static final int H5D_ALLOC_TIME_LATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5D_alloc_time_t.H5D_ALLOC_TIME_LATE = 2
     * }
     */
    public static int H5D_ALLOC_TIME_LATE() { return H5D_ALLOC_TIME_LATE; }
    private static final int H5D_ALLOC_TIME_INCR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5D_alloc_time_t.H5D_ALLOC_TIME_INCR = 3
     * }
     */
    public static int H5D_ALLOC_TIME_INCR() { return H5D_ALLOC_TIME_INCR; }
    private static final int H5D_SPACE_STATUS_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5D_space_status_t.H5D_SPACE_STATUS_ERROR = -1
     * }
     */
    public static int H5D_SPACE_STATUS_ERROR() { return H5D_SPACE_STATUS_ERROR; }
    private static final int H5D_SPACE_STATUS_NOT_ALLOCATED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5D_space_status_t.H5D_SPACE_STATUS_NOT_ALLOCATED = 0
     * }
     */
    public static int H5D_SPACE_STATUS_NOT_ALLOCATED() { return H5D_SPACE_STATUS_NOT_ALLOCATED; }
    private static final int H5D_SPACE_STATUS_PART_ALLOCATED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5D_space_status_t.H5D_SPACE_STATUS_PART_ALLOCATED = 1
     * }
     */
    public static int H5D_SPACE_STATUS_PART_ALLOCATED() { return H5D_SPACE_STATUS_PART_ALLOCATED; }
    private static final int H5D_SPACE_STATUS_ALLOCATED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5D_space_status_t.H5D_SPACE_STATUS_ALLOCATED = 2
     * }
     */
    public static int H5D_SPACE_STATUS_ALLOCATED() { return H5D_SPACE_STATUS_ALLOCATED; }
    private static final int H5D_FILL_TIME_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5D_fill_time_t.H5D_FILL_TIME_ERROR = -1
     * }
     */
    public static int H5D_FILL_TIME_ERROR() { return H5D_FILL_TIME_ERROR; }
    private static final int H5D_FILL_TIME_ALLOC = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5D_fill_time_t.H5D_FILL_TIME_ALLOC = 0
     * }
     */
    public static int H5D_FILL_TIME_ALLOC() { return H5D_FILL_TIME_ALLOC; }
    private static final int H5D_FILL_TIME_NEVER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5D_fill_time_t.H5D_FILL_TIME_NEVER = 1
     * }
     */
    public static int H5D_FILL_TIME_NEVER() { return H5D_FILL_TIME_NEVER; }
    private static final int H5D_FILL_TIME_IFSET = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5D_fill_time_t.H5D_FILL_TIME_IFSET = 2
     * }
     */
    public static int H5D_FILL_TIME_IFSET() { return H5D_FILL_TIME_IFSET; }
    private static final int H5D_FILL_VALUE_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5D_fill_value_t.H5D_FILL_VALUE_ERROR = -1
     * }
     */
    public static int H5D_FILL_VALUE_ERROR() { return H5D_FILL_VALUE_ERROR; }
    private static final int H5D_FILL_VALUE_UNDEFINED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5D_fill_value_t.H5D_FILL_VALUE_UNDEFINED = 0
     * }
     */
    public static int H5D_FILL_VALUE_UNDEFINED() { return H5D_FILL_VALUE_UNDEFINED; }
    private static final int H5D_FILL_VALUE_DEFAULT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5D_fill_value_t.H5D_FILL_VALUE_DEFAULT = 1
     * }
     */
    public static int H5D_FILL_VALUE_DEFAULT() { return H5D_FILL_VALUE_DEFAULT; }
    private static final int H5D_FILL_VALUE_USER_DEFINED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5D_fill_value_t.H5D_FILL_VALUE_USER_DEFINED = 2
     * }
     */
    public static int H5D_FILL_VALUE_USER_DEFINED() { return H5D_FILL_VALUE_USER_DEFINED; }
    private static final int H5D_VDS_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5D_vds_view_t.H5D_VDS_ERROR = -1
     * }
     */
    public static int H5D_VDS_ERROR() { return H5D_VDS_ERROR; }
    private static final int H5D_VDS_FIRST_MISSING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5D_vds_view_t.H5D_VDS_FIRST_MISSING = 0
     * }
     */
    public static int H5D_VDS_FIRST_MISSING() { return H5D_VDS_FIRST_MISSING; }
    private static final int H5D_VDS_LAST_AVAILABLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5D_vds_view_t.H5D_VDS_LAST_AVAILABLE = 1
     * }
     */
    public static int H5D_VDS_LAST_AVAILABLE() { return H5D_VDS_LAST_AVAILABLE; }

    private static class H5Dcreate2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG,
                                  hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dcreate2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Dcreate2(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t lcpl_id, hid_t
     * dcpl_id, hid_t dapl_id)
     * }
     */
    public static FunctionDescriptor H5Dcreate2$descriptor() { return H5Dcreate2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Dcreate2(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t lcpl_id, hid_t
     * dcpl_id, hid_t dapl_id)
     * }
     */
    public static MethodHandle H5Dcreate2$handle() { return H5Dcreate2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Dcreate2(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t lcpl_id, hid_t
     * dcpl_id, hid_t dapl_id)
     * }
     */
    public static MemorySegment H5Dcreate2$address() { return H5Dcreate2.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Dcreate2(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t lcpl_id, hid_t
     * dcpl_id, hid_t dapl_id)
     * }
     */
    public static long H5Dcreate2(long loc_id, MemorySegment name, long type_id, long space_id, long lcpl_id,
                                  long dcpl_id, long dapl_id)
    {
        var mh$ = H5Dcreate2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dcreate2", loc_id, name, type_id, space_id, lcpl_id, dcpl_id, dapl_id);
            }
            return (long)mh$.invokeExact(loc_id, name, type_id, space_id, lcpl_id, dcpl_id, dapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dcreate_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dcreate_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Dcreate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t type_id, hid_t space_id, hid_t lcpl_id, hid_t dcpl_id, hid_t dapl_id, hid_t
     * es_id)
     * }
     */
    public static FunctionDescriptor H5Dcreate_async$descriptor() { return H5Dcreate_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Dcreate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t type_id, hid_t space_id, hid_t lcpl_id, hid_t dcpl_id, hid_t dapl_id, hid_t
     * es_id)
     * }
     */
    public static MethodHandle H5Dcreate_async$handle() { return H5Dcreate_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Dcreate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t type_id, hid_t space_id, hid_t lcpl_id, hid_t dcpl_id, hid_t dapl_id, hid_t
     * es_id)
     * }
     */
    public static MemorySegment H5Dcreate_async$address() { return H5Dcreate_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Dcreate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t type_id, hid_t space_id, hid_t lcpl_id, hid_t dcpl_id, hid_t dapl_id, hid_t
     * es_id)
     * }
     */
    public static long H5Dcreate_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                       long loc_id, MemorySegment name, long type_id, long space_id,
                                       long lcpl_id, long dcpl_id, long dapl_id, long es_id)
    {
        var mh$ = H5Dcreate_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dcreate_async", app_file, app_func, app_line, loc_id, name, type_id,
                              space_id, lcpl_id, dcpl_id, dapl_id, es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, loc_id, name, type_id, space_id,
                                         lcpl_id, dcpl_id, dapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dcreate_anon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dcreate_anon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Dcreate_anon(hid_t loc_id, hid_t type_id, hid_t space_id, hid_t dcpl_id, hid_t dapl_id)
     * }
     */
    public static FunctionDescriptor H5Dcreate_anon$descriptor() { return H5Dcreate_anon.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Dcreate_anon(hid_t loc_id, hid_t type_id, hid_t space_id, hid_t dcpl_id, hid_t dapl_id)
     * }
     */
    public static MethodHandle H5Dcreate_anon$handle() { return H5Dcreate_anon.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Dcreate_anon(hid_t loc_id, hid_t type_id, hid_t space_id, hid_t dcpl_id, hid_t dapl_id)
     * }
     */
    public static MemorySegment H5Dcreate_anon$address() { return H5Dcreate_anon.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Dcreate_anon(hid_t loc_id, hid_t type_id, hid_t space_id, hid_t dcpl_id, hid_t dapl_id)
     * }
     */
    public static long H5Dcreate_anon(long loc_id, long type_id, long space_id, long dcpl_id, long dapl_id)
    {
        var mh$ = H5Dcreate_anon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dcreate_anon", loc_id, type_id, space_id, dcpl_id, dapl_id);
            }
            return (long)mh$.invokeExact(loc_id, type_id, space_id, dcpl_id, dapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dopen2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dopen2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Dopen2(hid_t loc_id, const char *name, hid_t dapl_id)
     * }
     */
    public static FunctionDescriptor H5Dopen2$descriptor() { return H5Dopen2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Dopen2(hid_t loc_id, const char *name, hid_t dapl_id)
     * }
     */
    public static MethodHandle H5Dopen2$handle() { return H5Dopen2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Dopen2(hid_t loc_id, const char *name, hid_t dapl_id)
     * }
     */
    public static MemorySegment H5Dopen2$address() { return H5Dopen2.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Dopen2(hid_t loc_id, const char *name, hid_t dapl_id)
     * }
     */
    public static long H5Dopen2(long loc_id, MemorySegment name, long dapl_id)
    {
        var mh$ = H5Dopen2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dopen2", loc_id, name, dapl_id);
            }
            return (long)mh$.invokeExact(loc_id, name, dapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dopen_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dopen_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Dopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t dapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Dopen_async$descriptor() { return H5Dopen_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Dopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t dapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Dopen_async$handle() { return H5Dopen_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Dopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t dapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Dopen_async$address() { return H5Dopen_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Dopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t dapl_id, hid_t es_id)
     * }
     */
    public static long H5Dopen_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     long loc_id, MemorySegment name, long dapl_id, long es_id)
    {
        var mh$ = H5Dopen_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dopen_async", app_file, app_func, app_line, loc_id, name, dapl_id, es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, loc_id, name, dapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_space {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_space");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Dget_space(hid_t dset_id)
     * }
     */
    public static FunctionDescriptor H5Dget_space$descriptor() { return H5Dget_space.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Dget_space(hid_t dset_id)
     * }
     */
    public static MethodHandle H5Dget_space$handle() { return H5Dget_space.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Dget_space(hid_t dset_id)
     * }
     */
    public static MemorySegment H5Dget_space$address() { return H5Dget_space.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Dget_space(hid_t dset_id)
     * }
     */
    public static long H5Dget_space(long dset_id)
    {
        var mh$ = H5Dget_space.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_space", dset_id);
            }
            return (long)mh$.invokeExact(dset_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_space_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_space_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Dget_space_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * dset_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Dget_space_async$descriptor() { return H5Dget_space_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Dget_space_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * dset_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Dget_space_async$handle() { return H5Dget_space_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Dget_space_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * dset_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Dget_space_async$address() { return H5Dget_space_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Dget_space_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * dset_id, hid_t es_id)
     * }
     */
    public static long H5Dget_space_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                          long dset_id, long es_id)
    {
        var mh$ = H5Dget_space_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_space_async", app_file, app_func, app_line, dset_id, es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, dset_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_space_status {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_space_status");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dget_space_status(hid_t dset_id, H5D_space_status_t *allocation)
     * }
     */
    public static FunctionDescriptor H5Dget_space_status$descriptor() { return H5Dget_space_status.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dget_space_status(hid_t dset_id, H5D_space_status_t *allocation)
     * }
     */
    public static MethodHandle H5Dget_space_status$handle() { return H5Dget_space_status.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dget_space_status(hid_t dset_id, H5D_space_status_t *allocation)
     * }
     */
    public static MemorySegment H5Dget_space_status$address() { return H5Dget_space_status.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dget_space_status(hid_t dset_id, H5D_space_status_t *allocation)
     * }
     */
    public static int H5Dget_space_status(long dset_id, MemorySegment allocation)
    {
        var mh$ = H5Dget_space_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_space_status", dset_id, allocation);
            }
            return (int)mh$.invokeExact(dset_id, allocation);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Dget_type(hid_t dset_id)
     * }
     */
    public static FunctionDescriptor H5Dget_type$descriptor() { return H5Dget_type.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Dget_type(hid_t dset_id)
     * }
     */
    public static MethodHandle H5Dget_type$handle() { return H5Dget_type.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Dget_type(hid_t dset_id)
     * }
     */
    public static MemorySegment H5Dget_type$address() { return H5Dget_type.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Dget_type(hid_t dset_id)
     * }
     */
    public static long H5Dget_type(long dset_id)
    {
        var mh$ = H5Dget_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_type", dset_id);
            }
            return (long)mh$.invokeExact(dset_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_create_plist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_create_plist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Dget_create_plist(hid_t dset_id)
     * }
     */
    public static FunctionDescriptor H5Dget_create_plist$descriptor() { return H5Dget_create_plist.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Dget_create_plist(hid_t dset_id)
     * }
     */
    public static MethodHandle H5Dget_create_plist$handle() { return H5Dget_create_plist.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Dget_create_plist(hid_t dset_id)
     * }
     */
    public static MemorySegment H5Dget_create_plist$address() { return H5Dget_create_plist.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Dget_create_plist(hid_t dset_id)
     * }
     */
    public static long H5Dget_create_plist(long dset_id)
    {
        var mh$ = H5Dget_create_plist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_create_plist", dset_id);
            }
            return (long)mh$.invokeExact(dset_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_access_plist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_access_plist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Dget_access_plist(hid_t dset_id)
     * }
     */
    public static FunctionDescriptor H5Dget_access_plist$descriptor() { return H5Dget_access_plist.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Dget_access_plist(hid_t dset_id)
     * }
     */
    public static MethodHandle H5Dget_access_plist$handle() { return H5Dget_access_plist.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Dget_access_plist(hid_t dset_id)
     * }
     */
    public static MemorySegment H5Dget_access_plist$address() { return H5Dget_access_plist.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Dget_access_plist(hid_t dset_id)
     * }
     */
    public static long H5Dget_access_plist(long dset_id)
    {
        var mh$ = H5Dget_access_plist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_access_plist", dset_id);
            }
            return (long)mh$.invokeExact(dset_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_storage_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_storage_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hsize_t H5Dget_storage_size(hid_t dset_id)
     * }
     */
    public static FunctionDescriptor H5Dget_storage_size$descriptor() { return H5Dget_storage_size.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hsize_t H5Dget_storage_size(hid_t dset_id)
     * }
     */
    public static MethodHandle H5Dget_storage_size$handle() { return H5Dget_storage_size.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hsize_t H5Dget_storage_size(hid_t dset_id)
     * }
     */
    public static MemorySegment H5Dget_storage_size$address() { return H5Dget_storage_size.ADDR; }

    /**
     * {@snippet lang=c :
     * hsize_t H5Dget_storage_size(hid_t dset_id)
     * }
     */
    public static long H5Dget_storage_size(long dset_id)
    {
        var mh$ = H5Dget_storage_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_storage_size", dset_id);
            }
            return (long)mh$.invokeExact(dset_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_chunk_storage_size {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_chunk_storage_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_storage_size(hid_t dset_id, const hsize_t *offset, hsize_t *chunk_bytes)
     * }
     */
    public static FunctionDescriptor H5Dget_chunk_storage_size$descriptor()
    {
        return H5Dget_chunk_storage_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_storage_size(hid_t dset_id, const hsize_t *offset, hsize_t *chunk_bytes)
     * }
     */
    public static MethodHandle H5Dget_chunk_storage_size$handle() { return H5Dget_chunk_storage_size.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_storage_size(hid_t dset_id, const hsize_t *offset, hsize_t *chunk_bytes)
     * }
     */
    public static MemorySegment H5Dget_chunk_storage_size$address() { return H5Dget_chunk_storage_size.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_storage_size(hid_t dset_id, const hsize_t *offset, hsize_t *chunk_bytes)
     * }
     */
    public static int H5Dget_chunk_storage_size(long dset_id, MemorySegment offset, MemorySegment chunk_bytes)
    {
        var mh$ = H5Dget_chunk_storage_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_chunk_storage_size", dset_id, offset, chunk_bytes);
            }
            return (int)mh$.invokeExact(dset_id, offset, chunk_bytes);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_num_chunks {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_num_chunks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dget_num_chunks(hid_t dset_id, hid_t fspace_id, hsize_t *nchunks)
     * }
     */
    public static FunctionDescriptor H5Dget_num_chunks$descriptor() { return H5Dget_num_chunks.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dget_num_chunks(hid_t dset_id, hid_t fspace_id, hsize_t *nchunks)
     * }
     */
    public static MethodHandle H5Dget_num_chunks$handle() { return H5Dget_num_chunks.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dget_num_chunks(hid_t dset_id, hid_t fspace_id, hsize_t *nchunks)
     * }
     */
    public static MemorySegment H5Dget_num_chunks$address() { return H5Dget_num_chunks.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dget_num_chunks(hid_t dset_id, hid_t fspace_id, hsize_t *nchunks)
     * }
     */
    public static int H5Dget_num_chunks(long dset_id, long fspace_id, MemorySegment nchunks)
    {
        var mh$ = H5Dget_num_chunks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_num_chunks", dset_id, fspace_id, nchunks);
            }
            return (int)mh$.invokeExact(dset_id, fspace_id, nchunks);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_chunk_info_by_coord {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_chunk_info_by_coord");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_info_by_coord(hid_t dset_id, const hsize_t *offset, unsigned int *filter_mask,
     * haddr_t *addr, hsize_t *size)
     * }
     */
    public static FunctionDescriptor H5Dget_chunk_info_by_coord$descriptor()
    {
        return H5Dget_chunk_info_by_coord.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_info_by_coord(hid_t dset_id, const hsize_t *offset, unsigned int *filter_mask,
     * haddr_t *addr, hsize_t *size)
     * }
     */
    public static MethodHandle H5Dget_chunk_info_by_coord$handle()
    {
        return H5Dget_chunk_info_by_coord.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_info_by_coord(hid_t dset_id, const hsize_t *offset, unsigned int *filter_mask,
     * haddr_t *addr, hsize_t *size)
     * }
     */
    public static MemorySegment H5Dget_chunk_info_by_coord$address()
    {
        return H5Dget_chunk_info_by_coord.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_info_by_coord(hid_t dset_id, const hsize_t *offset, unsigned int *filter_mask,
     * haddr_t *addr, hsize_t *size)
     * }
     */
    public static int H5Dget_chunk_info_by_coord(long dset_id, MemorySegment offset,
                                                 MemorySegment filter_mask, MemorySegment addr,
                                                 MemorySegment size)
    {
        var mh$ = H5Dget_chunk_info_by_coord.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_chunk_info_by_coord", dset_id, offset, filter_mask, addr, size);
            }
            return (int)mh$.invokeExact(dset_id, offset, filter_mask, addr, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dchunk_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dchunk_iter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dchunk_iter(hid_t dset_id, hid_t dxpl_id, H5D_chunk_iter_op_t cb, void *op_data)
     * }
     */
    public static FunctionDescriptor H5Dchunk_iter$descriptor() { return H5Dchunk_iter.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dchunk_iter(hid_t dset_id, hid_t dxpl_id, H5D_chunk_iter_op_t cb, void *op_data)
     * }
     */
    public static MethodHandle H5Dchunk_iter$handle() { return H5Dchunk_iter.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dchunk_iter(hid_t dset_id, hid_t dxpl_id, H5D_chunk_iter_op_t cb, void *op_data)
     * }
     */
    public static MemorySegment H5Dchunk_iter$address() { return H5Dchunk_iter.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dchunk_iter(hid_t dset_id, hid_t dxpl_id, H5D_chunk_iter_op_t cb, void *op_data)
     * }
     */
    public static int H5Dchunk_iter(long dset_id, long dxpl_id, MemorySegment cb, MemorySegment op_data)
    {
        var mh$ = H5Dchunk_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dchunk_iter", dset_id, dxpl_id, cb, op_data);
            }
            return (int)mh$.invokeExact(dset_id, dxpl_id, cb, op_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_chunk_info {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_chunk_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_info(hid_t dset_id, hid_t fspace_id, hsize_t chk_idx, hsize_t *offset, unsigned int
     * *filter_mask, haddr_t *addr, hsize_t *size)
     * }
     */
    public static FunctionDescriptor H5Dget_chunk_info$descriptor() { return H5Dget_chunk_info.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_info(hid_t dset_id, hid_t fspace_id, hsize_t chk_idx, hsize_t *offset, unsigned int
     * *filter_mask, haddr_t *addr, hsize_t *size)
     * }
     */
    public static MethodHandle H5Dget_chunk_info$handle() { return H5Dget_chunk_info.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_info(hid_t dset_id, hid_t fspace_id, hsize_t chk_idx, hsize_t *offset, unsigned int
     * *filter_mask, haddr_t *addr, hsize_t *size)
     * }
     */
    public static MemorySegment H5Dget_chunk_info$address() { return H5Dget_chunk_info.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_info(hid_t dset_id, hid_t fspace_id, hsize_t chk_idx, hsize_t *offset, unsigned int
     * *filter_mask, haddr_t *addr, hsize_t *size)
     * }
     */
    public static int H5Dget_chunk_info(long dset_id, long fspace_id, long chk_idx, MemorySegment offset,
                                        MemorySegment filter_mask, MemorySegment addr, MemorySegment size)
    {
        var mh$ = H5Dget_chunk_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_chunk_info", dset_id, fspace_id, chk_idx, offset, filter_mask, addr,
                              size);
            }
            return (int)mh$.invokeExact(dset_id, fspace_id, chk_idx, offset, filter_mask, addr, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * haddr_t H5Dget_offset(hid_t dset_id)
     * }
     */
    public static FunctionDescriptor H5Dget_offset$descriptor() { return H5Dget_offset.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * haddr_t H5Dget_offset(hid_t dset_id)
     * }
     */
    public static MethodHandle H5Dget_offset$handle() { return H5Dget_offset.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * haddr_t H5Dget_offset(hid_t dset_id)
     * }
     */
    public static MemorySegment H5Dget_offset$address() { return H5Dget_offset.ADDR; }

    /**
     * {@snippet lang=c :
     * haddr_t H5Dget_offset(hid_t dset_id)
     * }
     */
    public static long H5Dget_offset(long dset_id)
    {
        var mh$ = H5Dget_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_offset", dset_id);
            }
            return (long)mh$.invokeExact(dset_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dread {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dread(hid_t dset_id, hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t
     * dxpl_id, void *buf)
     * }
     */
    public static FunctionDescriptor H5Dread$descriptor() { return H5Dread.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dread(hid_t dset_id, hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t
     * dxpl_id, void *buf)
     * }
     */
    public static MethodHandle H5Dread$handle() { return H5Dread.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dread(hid_t dset_id, hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t
     * dxpl_id, void *buf)
     * }
     */
    public static MemorySegment H5Dread$address() { return H5Dread.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dread(hid_t dset_id, hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t
     * dxpl_id, void *buf)
     * }
     */
    public static int H5Dread(long dset_id, long mem_type_id, long mem_space_id, long file_space_id,
                              long dxpl_id, MemorySegment buf)
    {
        var mh$ = H5Dread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dread", dset_id, mem_type_id, mem_space_id, file_space_id, dxpl_id, buf);
            }
            return (int)mh$.invokeExact(dset_id, mem_type_id, mem_space_id, file_space_id, dxpl_id, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dread_multi {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dread_multi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dread_multi(size_t count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t
     * file_space_id[], hid_t dxpl_id, void *buf[])
     * }
     */
    public static FunctionDescriptor H5Dread_multi$descriptor() { return H5Dread_multi.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dread_multi(size_t count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t
     * file_space_id[], hid_t dxpl_id, void *buf[])
     * }
     */
    public static MethodHandle H5Dread_multi$handle() { return H5Dread_multi.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dread_multi(size_t count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t
     * file_space_id[], hid_t dxpl_id, void *buf[])
     * }
     */
    public static MemorySegment H5Dread_multi$address() { return H5Dread_multi.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dread_multi(size_t count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t
     * file_space_id[], hid_t dxpl_id, void *buf[])
     * }
     */
    public static int H5Dread_multi(long count, MemorySegment dset_id, MemorySegment mem_type_id,
                                    MemorySegment mem_space_id, MemorySegment file_space_id, long dxpl_id,
                                    MemorySegment buf)
    {
        var mh$ = H5Dread_multi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dread_multi", count, dset_id, mem_type_id, mem_space_id, file_space_id,
                              dxpl_id, buf);
            }
            return (int)mh$.invokeExact(count, dset_id, mem_type_id, mem_space_id, file_space_id, dxpl_id,
                                        buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dread_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG,
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dread_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dread_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t dset_id,
     * hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t dxpl_id, void *buf, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Dread_async$descriptor() { return H5Dread_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dread_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t dset_id,
     * hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t dxpl_id, void *buf, hid_t es_id)
     * }
     */
    public static MethodHandle H5Dread_async$handle() { return H5Dread_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dread_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t dset_id,
     * hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t dxpl_id, void *buf, hid_t es_id)
     * }
     */
    public static MemorySegment H5Dread_async$address() { return H5Dread_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dread_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t dset_id,
     * hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t dxpl_id, void *buf, hid_t es_id)
     * }
     */
    public static int H5Dread_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                    long dset_id, long mem_type_id, long mem_space_id, long file_space_id,
                                    long dxpl_id, MemorySegment buf, long es_id)
    {
        var mh$ = H5Dread_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dread_async", app_file, app_func, app_line, dset_id, mem_type_id,
                              mem_space_id, file_space_id, dxpl_id, buf, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, dset_id, mem_type_id, mem_space_id,
                                        file_space_id, dxpl_id, buf, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dread_multi_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dread_multi_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dread_multi_async(const char *app_file, const char *app_func, unsigned int app_line, size_t
     * count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t
     * dxpl_id, void *buf[], hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Dread_multi_async$descriptor() { return H5Dread_multi_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dread_multi_async(const char *app_file, const char *app_func, unsigned int app_line, size_t
     * count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t
     * dxpl_id, void *buf[], hid_t es_id)
     * }
     */
    public static MethodHandle H5Dread_multi_async$handle() { return H5Dread_multi_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dread_multi_async(const char *app_file, const char *app_func, unsigned int app_line, size_t
     * count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t
     * dxpl_id, void *buf[], hid_t es_id)
     * }
     */
    public static MemorySegment H5Dread_multi_async$address() { return H5Dread_multi_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dread_multi_async(const char *app_file, const char *app_func, unsigned int app_line, size_t
     * count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t
     * dxpl_id, void *buf[], hid_t es_id)
     * }
     */
    public static int H5Dread_multi_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                          long count, MemorySegment dset_id, MemorySegment mem_type_id,
                                          MemorySegment mem_space_id, MemorySegment file_space_id,
                                          long dxpl_id, MemorySegment buf, long es_id)
    {
        var mh$ = H5Dread_multi_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dread_multi_async", app_file, app_func, app_line, count, dset_id,
                              mem_type_id, mem_space_id, file_space_id, dxpl_id, buf, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, count, dset_id, mem_type_id,
                                        mem_space_id, file_space_id, dxpl_id, buf, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dwrite {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dwrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dwrite(hid_t dset_id, hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t
     * dxpl_id, const void *buf)
     * }
     */
    public static FunctionDescriptor H5Dwrite$descriptor() { return H5Dwrite.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dwrite(hid_t dset_id, hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t
     * dxpl_id, const void *buf)
     * }
     */
    public static MethodHandle H5Dwrite$handle() { return H5Dwrite.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dwrite(hid_t dset_id, hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t
     * dxpl_id, const void *buf)
     * }
     */
    public static MemorySegment H5Dwrite$address() { return H5Dwrite.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dwrite(hid_t dset_id, hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t
     * dxpl_id, const void *buf)
     * }
     */
    public static int H5Dwrite(long dset_id, long mem_type_id, long mem_space_id, long file_space_id,
                               long dxpl_id, MemorySegment buf)
    {
        var mh$ = H5Dwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dwrite", dset_id, mem_type_id, mem_space_id, file_space_id, dxpl_id, buf);
            }
            return (int)mh$.invokeExact(dset_id, mem_type_id, mem_space_id, file_space_id, dxpl_id, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dwrite_multi {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dwrite_multi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dwrite_multi(size_t count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t
     * file_space_id[], hid_t dxpl_id, const void *buf[])
     * }
     */
    public static FunctionDescriptor H5Dwrite_multi$descriptor() { return H5Dwrite_multi.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dwrite_multi(size_t count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t
     * file_space_id[], hid_t dxpl_id, const void *buf[])
     * }
     */
    public static MethodHandle H5Dwrite_multi$handle() { return H5Dwrite_multi.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dwrite_multi(size_t count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t
     * file_space_id[], hid_t dxpl_id, const void *buf[])
     * }
     */
    public static MemorySegment H5Dwrite_multi$address() { return H5Dwrite_multi.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dwrite_multi(size_t count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t
     * file_space_id[], hid_t dxpl_id, const void *buf[])
     * }
     */
    public static int H5Dwrite_multi(long count, MemorySegment dset_id, MemorySegment mem_type_id,
                                     MemorySegment mem_space_id, MemorySegment file_space_id, long dxpl_id,
                                     MemorySegment buf)
    {
        var mh$ = H5Dwrite_multi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dwrite_multi", count, dset_id, mem_type_id, mem_space_id, file_space_id,
                              dxpl_id, buf);
            }
            return (int)mh$.invokeExact(count, dset_id, mem_type_id, mem_space_id, file_space_id, dxpl_id,
                                        buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dwrite_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG,
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dwrite_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dwrite_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t dset_id,
     * hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t dxpl_id, const void *buf, hid_t
     * es_id)
     * }
     */
    public static FunctionDescriptor H5Dwrite_async$descriptor() { return H5Dwrite_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dwrite_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t dset_id,
     * hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t dxpl_id, const void *buf, hid_t
     * es_id)
     * }
     */
    public static MethodHandle H5Dwrite_async$handle() { return H5Dwrite_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dwrite_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t dset_id,
     * hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t dxpl_id, const void *buf, hid_t
     * es_id)
     * }
     */
    public static MemorySegment H5Dwrite_async$address() { return H5Dwrite_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dwrite_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t dset_id,
     * hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t dxpl_id, const void *buf, hid_t
     * es_id)
     * }
     */
    public static int H5Dwrite_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     long dset_id, long mem_type_id, long mem_space_id, long file_space_id,
                                     long dxpl_id, MemorySegment buf, long es_id)
    {
        var mh$ = H5Dwrite_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dwrite_async", app_file, app_func, app_line, dset_id, mem_type_id,
                              mem_space_id, file_space_id, dxpl_id, buf, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, dset_id, mem_type_id, mem_space_id,
                                        file_space_id, dxpl_id, buf, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dwrite_multi_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dwrite_multi_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dwrite_multi_async(const char *app_file, const char *app_func, unsigned int app_line, size_t
     * count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t
     * dxpl_id, const void *buf[], hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Dwrite_multi_async$descriptor() { return H5Dwrite_multi_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dwrite_multi_async(const char *app_file, const char *app_func, unsigned int app_line, size_t
     * count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t
     * dxpl_id, const void *buf[], hid_t es_id)
     * }
     */
    public static MethodHandle H5Dwrite_multi_async$handle() { return H5Dwrite_multi_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dwrite_multi_async(const char *app_file, const char *app_func, unsigned int app_line, size_t
     * count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t
     * dxpl_id, const void *buf[], hid_t es_id)
     * }
     */
    public static MemorySegment H5Dwrite_multi_async$address() { return H5Dwrite_multi_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dwrite_multi_async(const char *app_file, const char *app_func, unsigned int app_line, size_t
     * count, hid_t dset_id[], hid_t mem_type_id[], hid_t mem_space_id[], hid_t file_space_id[], hid_t
     * dxpl_id, const void *buf[], hid_t es_id)
     * }
     */
    public static int H5Dwrite_multi_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                           long count, MemorySegment dset_id, MemorySegment mem_type_id,
                                           MemorySegment mem_space_id, MemorySegment file_space_id,
                                           long dxpl_id, MemorySegment buf, long es_id)
    {
        var mh$ = H5Dwrite_multi_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dwrite_multi_async", app_file, app_func, app_line, count, dset_id,
                              mem_type_id, mem_space_id, file_space_id, dxpl_id, buf, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, count, dset_id, mem_type_id,
                                        mem_space_id, file_space_id, dxpl_id, buf, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dwrite_chunk {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dwrite_chunk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dwrite_chunk(hid_t dset_id, hid_t dxpl_id, uint32_t filters, const hsize_t *offset, size_t
     * data_size, const void *buf)
     * }
     */
    public static FunctionDescriptor H5Dwrite_chunk$descriptor() { return H5Dwrite_chunk.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dwrite_chunk(hid_t dset_id, hid_t dxpl_id, uint32_t filters, const hsize_t *offset, size_t
     * data_size, const void *buf)
     * }
     */
    public static MethodHandle H5Dwrite_chunk$handle() { return H5Dwrite_chunk.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dwrite_chunk(hid_t dset_id, hid_t dxpl_id, uint32_t filters, const hsize_t *offset, size_t
     * data_size, const void *buf)
     * }
     */
    public static MemorySegment H5Dwrite_chunk$address() { return H5Dwrite_chunk.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dwrite_chunk(hid_t dset_id, hid_t dxpl_id, uint32_t filters, const hsize_t *offset, size_t
     * data_size, const void *buf)
     * }
     */
    public static int H5Dwrite_chunk(long dset_id, long dxpl_id, int filters, MemorySegment offset,
                                     long data_size, MemorySegment buf)
    {
        var mh$ = H5Dwrite_chunk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dwrite_chunk", dset_id, dxpl_id, filters, offset, data_size, buf);
            }
            return (int)mh$.invokeExact(dset_id, dxpl_id, filters, offset, data_size, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dread_chunk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dread_chunk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dread_chunk(hid_t dset_id, hid_t dxpl_id, const hsize_t *offset, uint32_t *filters, void *buf)
     * }
     */
    public static FunctionDescriptor H5Dread_chunk$descriptor() { return H5Dread_chunk.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dread_chunk(hid_t dset_id, hid_t dxpl_id, const hsize_t *offset, uint32_t *filters, void *buf)
     * }
     */
    public static MethodHandle H5Dread_chunk$handle() { return H5Dread_chunk.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dread_chunk(hid_t dset_id, hid_t dxpl_id, const hsize_t *offset, uint32_t *filters, void *buf)
     * }
     */
    public static MemorySegment H5Dread_chunk$address() { return H5Dread_chunk.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dread_chunk(hid_t dset_id, hid_t dxpl_id, const hsize_t *offset, uint32_t *filters, void *buf)
     * }
     */
    public static int H5Dread_chunk(long dset_id, long dxpl_id, MemorySegment offset, MemorySegment filters,
                                    MemorySegment buf)
    {
        var mh$ = H5Dread_chunk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dread_chunk", dset_id, dxpl_id, offset, filters, buf);
            }
            return (int)mh$.invokeExact(dset_id, dxpl_id, offset, filters, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Diterate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Diterate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Diterate(void *buf, hid_t type_id, hid_t space_id, H5D_operator_t op, void *operator_data)
     * }
     */
    public static FunctionDescriptor H5Diterate$descriptor() { return H5Diterate.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Diterate(void *buf, hid_t type_id, hid_t space_id, H5D_operator_t op, void *operator_data)
     * }
     */
    public static MethodHandle H5Diterate$handle() { return H5Diterate.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Diterate(void *buf, hid_t type_id, hid_t space_id, H5D_operator_t op, void *operator_data)
     * }
     */
    public static MemorySegment H5Diterate$address() { return H5Diterate.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Diterate(void *buf, hid_t type_id, hid_t space_id, H5D_operator_t op, void *operator_data)
     * }
     */
    public static int H5Diterate(MemorySegment buf, long type_id, long space_id, MemorySegment op,
                                 MemorySegment operator_data)
    {
        var mh$ = H5Diterate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Diterate", buf, type_id, space_id, op, operator_data);
            }
            return (int)mh$.invokeExact(buf, type_id, space_id, op, operator_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dvlen_get_buf_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dvlen_get_buf_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dvlen_get_buf_size(hid_t dset_id, hid_t type_id, hid_t space_id, hsize_t *size)
     * }
     */
    public static FunctionDescriptor H5Dvlen_get_buf_size$descriptor() { return H5Dvlen_get_buf_size.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dvlen_get_buf_size(hid_t dset_id, hid_t type_id, hid_t space_id, hsize_t *size)
     * }
     */
    public static MethodHandle H5Dvlen_get_buf_size$handle() { return H5Dvlen_get_buf_size.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dvlen_get_buf_size(hid_t dset_id, hid_t type_id, hid_t space_id, hsize_t *size)
     * }
     */
    public static MemorySegment H5Dvlen_get_buf_size$address() { return H5Dvlen_get_buf_size.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dvlen_get_buf_size(hid_t dset_id, hid_t type_id, hid_t space_id, hsize_t *size)
     * }
     */
    public static int H5Dvlen_get_buf_size(long dset_id, long type_id, long space_id, MemorySegment size)
    {
        var mh$ = H5Dvlen_get_buf_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dvlen_get_buf_size", dset_id, type_id, space_id, size);
            }
            return (int)mh$.invokeExact(dset_id, type_id, space_id, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dfill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dfill");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dfill(const void *fill, hid_t fill_type_id, void *buf, hid_t buf_type_id, hid_t space_id)
     * }
     */
    public static FunctionDescriptor H5Dfill$descriptor() { return H5Dfill.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dfill(const void *fill, hid_t fill_type_id, void *buf, hid_t buf_type_id, hid_t space_id)
     * }
     */
    public static MethodHandle H5Dfill$handle() { return H5Dfill.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dfill(const void *fill, hid_t fill_type_id, void *buf, hid_t buf_type_id, hid_t space_id)
     * }
     */
    public static MemorySegment H5Dfill$address() { return H5Dfill.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dfill(const void *fill, hid_t fill_type_id, void *buf, hid_t buf_type_id, hid_t space_id)
     * }
     */
    public static int H5Dfill(MemorySegment fill, long fill_type_id, MemorySegment buf, long buf_type_id,
                              long space_id)
    {
        var mh$ = H5Dfill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dfill", fill, fill_type_id, buf, buf_type_id, space_id);
            }
            return (int)mh$.invokeExact(fill, fill_type_id, buf, buf_type_id, space_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dset_extent {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dset_extent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dset_extent(hid_t dset_id, const hsize_t size[])
     * }
     */
    public static FunctionDescriptor H5Dset_extent$descriptor() { return H5Dset_extent.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dset_extent(hid_t dset_id, const hsize_t size[])
     * }
     */
    public static MethodHandle H5Dset_extent$handle() { return H5Dset_extent.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dset_extent(hid_t dset_id, const hsize_t size[])
     * }
     */
    public static MemorySegment H5Dset_extent$address() { return H5Dset_extent.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dset_extent(hid_t dset_id, const hsize_t size[])
     * }
     */
    public static int H5Dset_extent(long dset_id, MemorySegment size)
    {
        var mh$ = H5Dset_extent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dset_extent", dset_id, size);
            }
            return (int)mh$.invokeExact(dset_id, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dset_extent_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dset_extent_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dset_extent_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * dset_id, const hsize_t size[], hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Dset_extent_async$descriptor() { return H5Dset_extent_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dset_extent_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * dset_id, const hsize_t size[], hid_t es_id)
     * }
     */
    public static MethodHandle H5Dset_extent_async$handle() { return H5Dset_extent_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dset_extent_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * dset_id, const hsize_t size[], hid_t es_id)
     * }
     */
    public static MemorySegment H5Dset_extent_async$address() { return H5Dset_extent_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dset_extent_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * dset_id, const hsize_t size[], hid_t es_id)
     * }
     */
    public static int H5Dset_extent_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                          long dset_id, MemorySegment size, long es_id)
    {
        var mh$ = H5Dset_extent_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dset_extent_async", app_file, app_func, app_line, dset_id, size, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, dset_id, size, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dflush(hid_t dset_id)
     * }
     */
    public static FunctionDescriptor H5Dflush$descriptor() { return H5Dflush.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dflush(hid_t dset_id)
     * }
     */
    public static MethodHandle H5Dflush$handle() { return H5Dflush.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dflush(hid_t dset_id)
     * }
     */
    public static MemorySegment H5Dflush$address() { return H5Dflush.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dflush(hid_t dset_id)
     * }
     */
    public static int H5Dflush(long dset_id)
    {
        var mh$ = H5Dflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dflush", dset_id);
            }
            return (int)mh$.invokeExact(dset_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Drefresh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Drefresh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Drefresh(hid_t dset_id)
     * }
     */
    public static FunctionDescriptor H5Drefresh$descriptor() { return H5Drefresh.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Drefresh(hid_t dset_id)
     * }
     */
    public static MethodHandle H5Drefresh$handle() { return H5Drefresh.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Drefresh(hid_t dset_id)
     * }
     */
    public static MemorySegment H5Drefresh$address() { return H5Drefresh.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Drefresh(hid_t dset_id)
     * }
     */
    public static int H5Drefresh(long dset_id)
    {
        var mh$ = H5Drefresh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Drefresh", dset_id);
            }
            return (int)mh$.invokeExact(dset_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dscatter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dscatter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dscatter(H5D_scatter_func_t op, void *op_data, hid_t type_id, hid_t dst_space_id, void
     * *dst_buf)
     * }
     */
    public static FunctionDescriptor H5Dscatter$descriptor() { return H5Dscatter.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dscatter(H5D_scatter_func_t op, void *op_data, hid_t type_id, hid_t dst_space_id, void
     * *dst_buf)
     * }
     */
    public static MethodHandle H5Dscatter$handle() { return H5Dscatter.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dscatter(H5D_scatter_func_t op, void *op_data, hid_t type_id, hid_t dst_space_id, void
     * *dst_buf)
     * }
     */
    public static MemorySegment H5Dscatter$address() { return H5Dscatter.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dscatter(H5D_scatter_func_t op, void *op_data, hid_t type_id, hid_t dst_space_id, void
     * *dst_buf)
     * }
     */
    public static int H5Dscatter(MemorySegment op, MemorySegment op_data, long type_id, long dst_space_id,
                                 MemorySegment dst_buf)
    {
        var mh$ = H5Dscatter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dscatter", op, op_data, type_id, dst_space_id, dst_buf);
            }
            return (int)mh$.invokeExact(op, op_data, type_id, dst_space_id, dst_buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dgather {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dgather");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dgather(hid_t src_space_id, const void *src_buf, hid_t type_id, size_t dst_buf_size, void
     * *dst_buf, H5D_gather_func_t op, void *op_data)
     * }
     */
    public static FunctionDescriptor H5Dgather$descriptor() { return H5Dgather.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dgather(hid_t src_space_id, const void *src_buf, hid_t type_id, size_t dst_buf_size, void
     * *dst_buf, H5D_gather_func_t op, void *op_data)
     * }
     */
    public static MethodHandle H5Dgather$handle() { return H5Dgather.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dgather(hid_t src_space_id, const void *src_buf, hid_t type_id, size_t dst_buf_size, void
     * *dst_buf, H5D_gather_func_t op, void *op_data)
     * }
     */
    public static MemorySegment H5Dgather$address() { return H5Dgather.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dgather(hid_t src_space_id, const void *src_buf, hid_t type_id, size_t dst_buf_size, void
     * *dst_buf, H5D_gather_func_t op, void *op_data)
     * }
     */
    public static int H5Dgather(long src_space_id, MemorySegment src_buf, long type_id, long dst_buf_size,
                                MemorySegment dst_buf, MemorySegment op, MemorySegment op_data)
    {
        var mh$ = H5Dgather.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dgather", src_space_id, src_buf, type_id, dst_buf_size, dst_buf, op,
                              op_data);
            }
            return (int)mh$.invokeExact(src_space_id, src_buf, type_id, dst_buf_size, dst_buf, op, op_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dclose(hid_t dset_id)
     * }
     */
    public static FunctionDescriptor H5Dclose$descriptor() { return H5Dclose.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dclose(hid_t dset_id)
     * }
     */
    public static MethodHandle H5Dclose$handle() { return H5Dclose.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dclose(hid_t dset_id)
     * }
     */
    public static MemorySegment H5Dclose$address() { return H5Dclose.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dclose(hid_t dset_id)
     * }
     */
    public static int H5Dclose(long dset_id)
    {
        var mh$ = H5Dclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dclose", dset_id);
            }
            return (int)mh$.invokeExact(dset_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dclose_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dclose_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t dset_id,
     * hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Dclose_async$descriptor() { return H5Dclose_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t dset_id,
     * hid_t es_id)
     * }
     */
    public static MethodHandle H5Dclose_async$handle() { return H5Dclose_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t dset_id,
     * hid_t es_id)
     * }
     */
    public static MemorySegment H5Dclose_async$address() { return H5Dclose_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t dset_id,
     * hid_t es_id)
     * }
     */
    public static int H5Dclose_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     long dset_id, long es_id)
    {
        var mh$ = H5Dclose_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dclose_async", app_file, app_func, app_line, dset_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, dset_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ddebug {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ddebug");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Ddebug(hid_t dset_id)
     * }
     */
    public static FunctionDescriptor H5Ddebug$descriptor() { return H5Ddebug.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Ddebug(hid_t dset_id)
     * }
     */
    public static MethodHandle H5Ddebug$handle() { return H5Ddebug.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Ddebug(hid_t dset_id)
     * }
     */
    public static MemorySegment H5Ddebug$address() { return H5Ddebug.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Ddebug(hid_t dset_id)
     * }
     */
    public static int H5Ddebug(long dset_id)
    {
        var mh$ = H5Ddebug.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ddebug", dset_id);
            }
            return (int)mh$.invokeExact(dset_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dformat_convert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dformat_convert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dformat_convert(hid_t dset_id)
     * }
     */
    public static FunctionDescriptor H5Dformat_convert$descriptor() { return H5Dformat_convert.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dformat_convert(hid_t dset_id)
     * }
     */
    public static MethodHandle H5Dformat_convert$handle() { return H5Dformat_convert.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dformat_convert(hid_t dset_id)
     * }
     */
    public static MemorySegment H5Dformat_convert$address() { return H5Dformat_convert.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dformat_convert(hid_t dset_id)
     * }
     */
    public static int H5Dformat_convert(long dset_id)
    {
        var mh$ = H5Dformat_convert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dformat_convert", dset_id);
            }
            return (int)mh$.invokeExact(dset_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dget_chunk_index_type {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dget_chunk_index_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_index_type(hid_t did, H5D_chunk_index_t *idx_type)
     * }
     */
    public static FunctionDescriptor H5Dget_chunk_index_type$descriptor()
    {
        return H5Dget_chunk_index_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_index_type(hid_t did, H5D_chunk_index_t *idx_type)
     * }
     */
    public static MethodHandle H5Dget_chunk_index_type$handle() { return H5Dget_chunk_index_type.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_index_type(hid_t did, H5D_chunk_index_t *idx_type)
     * }
     */
    public static MemorySegment H5Dget_chunk_index_type$address() { return H5Dget_chunk_index_type.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dget_chunk_index_type(hid_t did, H5D_chunk_index_t *idx_type)
     * }
     */
    public static int H5Dget_chunk_index_type(long did, MemorySegment idx_type)
    {
        var mh$ = H5Dget_chunk_index_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dget_chunk_index_type", did, idx_type);
            }
            return (int)mh$.invokeExact(did, idx_type);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dcreate1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dcreate1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Dcreate1(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t dcpl_id)
     * }
     */
    public static FunctionDescriptor H5Dcreate1$descriptor() { return H5Dcreate1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Dcreate1(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t dcpl_id)
     * }
     */
    public static MethodHandle H5Dcreate1$handle() { return H5Dcreate1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Dcreate1(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t dcpl_id)
     * }
     */
    public static MemorySegment H5Dcreate1$address() { return H5Dcreate1.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Dcreate1(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t dcpl_id)
     * }
     */
    public static long H5Dcreate1(long loc_id, MemorySegment name, long type_id, long space_id, long dcpl_id)
    {
        var mh$ = H5Dcreate1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dcreate1", loc_id, name, type_id, space_id, dcpl_id);
            }
            return (long)mh$.invokeExact(loc_id, name, type_id, space_id, dcpl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dopen1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dopen1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Dopen1(hid_t loc_id, const char *name)
     * }
     */
    public static FunctionDescriptor H5Dopen1$descriptor() { return H5Dopen1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Dopen1(hid_t loc_id, const char *name)
     * }
     */
    public static MethodHandle H5Dopen1$handle() { return H5Dopen1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Dopen1(hid_t loc_id, const char *name)
     * }
     */
    public static MemorySegment H5Dopen1$address() { return H5Dopen1.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Dopen1(hid_t loc_id, const char *name)
     * }
     */
    public static long H5Dopen1(long loc_id, MemorySegment name)
    {
        var mh$ = H5Dopen1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dopen1", loc_id, name);
            }
            return (long)mh$.invokeExact(loc_id, name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dextend {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dextend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dextend(hid_t dset_id, const hsize_t size[])
     * }
     */
    public static FunctionDescriptor H5Dextend$descriptor() { return H5Dextend.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dextend(hid_t dset_id, const hsize_t size[])
     * }
     */
    public static MethodHandle H5Dextend$handle() { return H5Dextend.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dextend(hid_t dset_id, const hsize_t size[])
     * }
     */
    public static MemorySegment H5Dextend$address() { return H5Dextend.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dextend(hid_t dset_id, const hsize_t size[])
     * }
     */
    public static int H5Dextend(long dset_id, MemorySegment size)
    {
        var mh$ = H5Dextend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dextend", dset_id, size);
            }
            return (int)mh$.invokeExact(dset_id, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Dvlen_reclaim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Dvlen_reclaim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Dvlen_reclaim(hid_t type_id, hid_t space_id, hid_t dxpl_id, void *buf)
     * }
     */
    public static FunctionDescriptor H5Dvlen_reclaim$descriptor() { return H5Dvlen_reclaim.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Dvlen_reclaim(hid_t type_id, hid_t space_id, hid_t dxpl_id, void *buf)
     * }
     */
    public static MethodHandle H5Dvlen_reclaim$handle() { return H5Dvlen_reclaim.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Dvlen_reclaim(hid_t type_id, hid_t space_id, hid_t dxpl_id, void *buf)
     * }
     */
    public static MemorySegment H5Dvlen_reclaim$address() { return H5Dvlen_reclaim.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Dvlen_reclaim(hid_t type_id, hid_t space_id, hid_t dxpl_id, void *buf)
     * }
     */
    public static int H5Dvlen_reclaim(long type_id, long space_id, long dxpl_id, MemorySegment buf)
    {
        var mh$ = H5Dvlen_reclaim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Dvlen_reclaim", type_id, space_id, dxpl_id, buf);
            }
            return (int)mh$.invokeExact(type_id, space_id, dxpl_id, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class stdin$constants {
        public static final AddressLayout LAYOUT = hdf5_h.C_POINTER;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("stdin").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static AddressLayout stdin$layout() { return stdin$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static MemorySegment stdin$segment() { return stdin$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static MemorySegment stdin() { return stdin$constants.SEGMENT.get(stdin$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static void stdin(MemorySegment varValue)
    {
        stdin$constants.SEGMENT.set(stdin$constants.LAYOUT, 0L, varValue);
    }

    private static class stdout$constants {
        public static final AddressLayout LAYOUT = hdf5_h.C_POINTER;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("stdout").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static AddressLayout stdout$layout() { return stdout$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static MemorySegment stdout$segment() { return stdout$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static MemorySegment stdout() { return stdout$constants.SEGMENT.get(stdout$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static void stdout(MemorySegment varValue)
    {
        stdout$constants.SEGMENT.set(stdout$constants.LAYOUT, 0L, varValue);
    }

    private static class stderr$constants {
        public static final AddressLayout LAYOUT = hdf5_h.C_POINTER;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("stderr").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static AddressLayout stderr$layout() { return stderr$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static MemorySegment stderr$segment() { return stderr$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static MemorySegment stderr() { return stderr$constants.SEGMENT.get(stderr$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static void stderr(MemorySegment varValue)
    {
        stderr$constants.SEGMENT.set(stderr$constants.LAYOUT, 0L, varValue);
    }

    private static class remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("remove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static FunctionDescriptor remove$descriptor() { return remove.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static MethodHandle remove$handle() { return remove.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static MemorySegment remove$address() { return remove.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static int remove(MemorySegment __filename)
    {
        var mh$ = remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remove", __filename);
            }
            return (int)mh$.invokeExact(__filename);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rename {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("rename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static FunctionDescriptor rename$descriptor() { return rename.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static MethodHandle rename$handle() { return rename.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static MemorySegment rename$address() { return rename.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new)
    {
        var mh$ = rename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rename", __old, __new);
            }
            return (int)mh$.invokeExact(__old, __new);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class renameat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("renameat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static FunctionDescriptor renameat$descriptor() { return renameat.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static MethodHandle renameat$handle() { return renameat.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static MemorySegment renameat$address() { return renameat.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static int renameat(int __oldfd, MemorySegment __old, int __newfd, MemorySegment __new)
    {
        var mh$ = renameat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renameat", __oldfd, __old, __newfd, __new);
            }
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fclose$descriptor() { return fclose.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static MethodHandle fclose$handle() { return fclose.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static MemorySegment fclose$address() { return fclose.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static int fclose(MemorySegment __stream)
    {
        var mh$ = fclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fclose", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("tmpfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static FunctionDescriptor tmpfile$descriptor() { return tmpfile.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static MethodHandle tmpfile$handle() { return tmpfile.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile$address() { return tmpfile.ADDR; }

    /**
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile()
    {
        var mh$ = tmpfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpfile");
            }
            return (MemorySegment)mh$.invokeExact();
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("tmpnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static FunctionDescriptor tmpnam$descriptor() { return tmpnam.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static MethodHandle tmpnam$handle() { return tmpnam.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static MemorySegment tmpnam$address() { return tmpnam.ADDR; }

    /**
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0)
    {
        var mh$ = tmpnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam_r {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("tmpnam_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static FunctionDescriptor tmpnam_r$descriptor() { return tmpnam_r.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static MethodHandle tmpnam_r$handle() { return tmpnam_r.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static MemorySegment tmpnam_r$address() { return tmpnam_r.ADDR; }

    /**
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static MemorySegment tmpnam_r(MemorySegment __s)
    {
        var mh$ = tmpnam_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam_r", __s);
            }
            return (MemorySegment)mh$.invokeExact(__s);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tempnam {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("tempnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static FunctionDescriptor tempnam$descriptor() { return tempnam.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static MethodHandle tempnam$handle() { return tempnam.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static MemorySegment tempnam$address() { return tempnam.ADDR; }

    /**
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __pfx)
    {
        var mh$ = tempnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tempnam", __dir, __pfx);
            }
            return (MemorySegment)mh$.invokeExact(__dir, __pfx);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fflush$descriptor() { return fflush.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static MethodHandle fflush$handle() { return fflush.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static MemorySegment fflush$address() { return fflush.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static int fflush(MemorySegment __stream)
    {
        var mh$ = fflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fflush", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fflush_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fflush_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fflush_unlocked$descriptor() { return fflush_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle fflush_unlocked$handle() { return fflush_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment fflush_unlocked$address() { return fflush_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static int fflush_unlocked(MemorySegment __stream)
    {
        var mh$ = fflush_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fflush_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fopen {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static FunctionDescriptor fopen$descriptor() { return fopen.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static MethodHandle fopen$handle() { return fopen.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static MemorySegment fopen$address() { return fopen.ADDR; }

    /**
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __modes)
    {
        var mh$ = fopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fopen", __filename, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__filename, __modes);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class freopen {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("freopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict
     * __stream)
     * }
     */
    public static FunctionDescriptor freopen$descriptor() { return freopen.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict
     * __stream)
     * }
     */
    public static MethodHandle freopen$handle() { return freopen.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict
     * __stream)
     * }
     */
    public static MemorySegment freopen$address() { return freopen.ADDR; }

    /**
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict
     * __stream)
     * }
     */
    public static MemorySegment freopen(MemorySegment __filename, MemorySegment __modes,
                                        MemorySegment __stream)
    {
        var mh$ = freopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("freopen", __filename, __modes, __stream);
            }
            return (MemorySegment)mh$.invokeExact(__filename, __modes, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdopen {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fdopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static FunctionDescriptor fdopen$descriptor() { return fdopen.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static MethodHandle fdopen$handle() { return fdopen.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static MemorySegment fdopen$address() { return fdopen.ADDR; }

    /**
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static MemorySegment fdopen(int __fd, MemorySegment __modes)
    {
        var mh$ = fdopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdopen", __fd, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__fd, __modes);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fopencookie {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER, _IO_cookie_io_functions_t.layout());

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fopencookie");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fopencookie(void *restrict __magic_cookie, const char *restrict __modes,
     * cookie_io_functions_t __io_funcs)
     * }
     */
    public static FunctionDescriptor fopencookie$descriptor() { return fopencookie.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fopencookie(void *restrict __magic_cookie, const char *restrict __modes,
     * cookie_io_functions_t __io_funcs)
     * }
     */
    public static MethodHandle fopencookie$handle() { return fopencookie.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *fopencookie(void *restrict __magic_cookie, const char *restrict __modes,
     * cookie_io_functions_t __io_funcs)
     * }
     */
    public static MemorySegment fopencookie$address() { return fopencookie.ADDR; }

    /**
     * {@snippet lang=c :
     * extern FILE *fopencookie(void *restrict __magic_cookie, const char *restrict __modes,
     * cookie_io_functions_t __io_funcs)
     * }
     */
    public static MemorySegment fopencookie(MemorySegment __magic_cookie, MemorySegment __modes,
                                            MemorySegment __io_funcs)
    {
        var mh$ = fopencookie.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fopencookie", __magic_cookie, __modes, __io_funcs);
            }
            return (MemorySegment)mh$.invokeExact(__magic_cookie, __modes, __io_funcs);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmemopen {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fmemopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static FunctionDescriptor fmemopen$descriptor() { return fmemopen.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static MethodHandle fmemopen$handle() { return fmemopen.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static MemorySegment fmemopen$address() { return fmemopen.ADDR; }

    /**
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __s, long __len, MemorySegment __modes)
    {
        var mh$ = fmemopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmemopen", __s, __len, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__s, __len, __modes);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class open_memstream {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("open_memstream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static FunctionDescriptor open_memstream$descriptor() { return open_memstream.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static MethodHandle open_memstream$handle() { return open_memstream.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static MemorySegment open_memstream$address() { return open_memstream.ADDR; }

    /**
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufloc, MemorySegment __sizeloc)
    {
        var mh$ = open_memstream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("open_memstream", __bufloc, __sizeloc);
            }
            return (MemorySegment)mh$.invokeExact(__bufloc, __sizeloc);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setbuf {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.ofVoid(hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("setbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static FunctionDescriptor setbuf$descriptor() { return setbuf.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static MethodHandle setbuf$handle() { return setbuf.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static MemorySegment setbuf$address() { return setbuf.ADDR; }

    /**
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static void setbuf(MemorySegment __stream, MemorySegment __buf)
    {
        var mh$ = setbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuf", __stream, __buf);
            }
            mh$.invokeExact(__stream, __buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setvbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("setvbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static FunctionDescriptor setvbuf$descriptor() { return setvbuf.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static MethodHandle setvbuf$handle() { return setvbuf.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static MemorySegment setvbuf$address() { return setvbuf.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static int setvbuf(MemorySegment __stream, MemorySegment __buf, int __modes, long __n)
    {
        var mh$ = setvbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setvbuf", __stream, __buf, __modes, __n);
            }
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setbuffer {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.ofVoid(hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("setbuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static FunctionDescriptor setbuffer$descriptor() { return setbuffer.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static MethodHandle setbuffer$handle() { return setbuffer.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static MemorySegment setbuffer$address() { return setbuffer.ADDR; }

    /**
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static void setbuffer(MemorySegment __stream, MemorySegment __buf, long __size)
    {
        var mh$ = setbuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuffer", __stream, __buf, __size);
            }
            mh$.invokeExact(__stream, __buf, __size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setlinebuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("setlinebuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static FunctionDescriptor setlinebuf$descriptor() { return setlinebuf.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static MethodHandle setlinebuf$handle() { return setlinebuf.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static MemorySegment setlinebuf$address() { return setlinebuf.ADDR; }

    /**
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static void setlinebuf(MemorySegment __stream)
    {
        var mh$ = setlinebuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setlinebuf", __stream);
            }
            mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int fprintf(FILE *restrict __stream, const char *restrict __format, ...)
     * }
     */
    public static class fprintf {
        private static final FunctionDescriptor BASE_DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);
        private static final MemorySegment ADDR = hdf5_h.findOrThrow("fprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader)
        {
            this.handle     = handle;
            this.descriptor = descriptor;
            this.spreader   = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int fprintf(FILE *restrict __stream, const char *restrict __format, ...)
         * }
         */
        public static fprintf makeInvoker(MemoryLayout... layouts)
        {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$       = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$                  = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$            = mh$.asSpreader(Object[].class, layouts.length);
            return new fprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() { return ADDR; }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() { return handle; }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() { return descriptor; }

        public int apply(MemorySegment __stream, MemorySegment __format, Object... x2)
        {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fprintf", __stream, __format, x2);
                }
                return (int)spreader.invokeExact(__stream, __format, x2);
            }
            catch (IllegalArgumentException | ClassCastException ex$) {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            }
            catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int printf(const char *restrict __format, ...)
     * }
     */
    public static class printf {
        private static final FunctionDescriptor BASE_DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);
        private static final MemorySegment ADDR = hdf5_h.findOrThrow("printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader)
        {
            this.handle     = handle;
            this.descriptor = descriptor;
            this.spreader   = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int printf(const char *restrict __format, ...)
         * }
         */
        public static printf makeInvoker(MemoryLayout... layouts)
        {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$       = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$                  = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$            = mh$.asSpreader(Object[].class, layouts.length);
            return new printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() { return ADDR; }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() { return handle; }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() { return descriptor; }

        public int apply(MemorySegment __format, Object... x1)
        {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("printf", __format, x1);
                }
                return (int)spreader.invokeExact(__format, x1);
            }
            catch (IllegalArgumentException | ClassCastException ex$) {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            }
            catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int sprintf(char *restrict __s, const char *restrict __format, ...)
     * }
     */
    public static class sprintf {
        private static final FunctionDescriptor BASE_DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);
        private static final MemorySegment ADDR = hdf5_h.findOrThrow("sprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader)
        {
            this.handle     = handle;
            this.descriptor = descriptor;
            this.spreader   = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int sprintf(char *restrict __s, const char *restrict __format, ...)
         * }
         */
        public static sprintf makeInvoker(MemoryLayout... layouts)
        {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$       = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$                  = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$            = mh$.asSpreader(Object[].class, layouts.length);
            return new sprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() { return ADDR; }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() { return handle; }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() { return descriptor; }

        public int apply(MemorySegment __s, MemorySegment __format, Object... x2)
        {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sprintf", __s, __format, x2);
                }
                return (int)spreader.invokeExact(__s, __format, x2);
            }
            catch (IllegalArgumentException | ClassCastException ex$) {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            }
            catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vfprintf {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("vfprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vfprintf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vfprintf$descriptor() { return vfprintf.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vfprintf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vfprintf$handle() { return vfprintf.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vfprintf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vfprintf$address() { return vfprintf.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int vfprintf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vfprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg)
    {
        var mh$ = vfprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vfprintf", __s, __format, __arg);
            }
            return (int)mh$.invokeExact(__s, __format, __arg);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vprintf {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("vprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vprintf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vprintf$descriptor() { return vprintf.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vprintf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vprintf$handle() { return vprintf.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vprintf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vprintf$address() { return vprintf.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int vprintf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vprintf(MemorySegment __format, MemorySegment __arg)
    {
        var mh$ = vprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vprintf", __format, __arg);
            }
            return (int)mh$.invokeExact(__format, __arg);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsprintf {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("vsprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vsprintf(char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vsprintf$descriptor() { return vsprintf.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vsprintf(char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vsprintf$handle() { return vsprintf.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vsprintf(char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vsprintf$address() { return vsprintf.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int vsprintf(char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vsprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg)
    {
        var mh$ = vsprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsprintf", __s, __format, __arg);
            }
            return (int)mh$.invokeExact(__s, __format, __arg);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int snprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, ...)
     * }
     */
    public static class snprintf {
        private static final FunctionDescriptor BASE_DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER);
        private static final MemorySegment ADDR = hdf5_h.findOrThrow("snprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private snprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader)
        {
            this.handle     = handle;
            this.descriptor = descriptor;
            this.spreader   = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int snprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, ...)
         * }
         */
        public static snprintf makeInvoker(MemoryLayout... layouts)
        {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$       = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$                  = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$            = mh$.asSpreader(Object[].class, layouts.length);
            return new snprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() { return ADDR; }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() { return handle; }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() { return descriptor; }

        public int apply(MemorySegment __s, long __maxlen, MemorySegment __format, Object... x3)
        {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("snprintf", __s, __maxlen, __format, x3);
                }
                return (int)spreader.invokeExact(__s, __maxlen, __format, x3);
            }
            catch (IllegalArgumentException | ClassCastException ex$) {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            }
            catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vsnprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("vsnprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vsnprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, __gnuc_va_list
     * __arg)
     * }
     */
    public static FunctionDescriptor vsnprintf$descriptor() { return vsnprintf.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vsnprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, __gnuc_va_list
     * __arg)
     * }
     */
    public static MethodHandle vsnprintf$handle() { return vsnprintf.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vsnprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, __gnuc_va_list
     * __arg)
     * }
     */
    public static MemorySegment vsnprintf$address() { return vsnprintf.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int vsnprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, __gnuc_va_list
     * __arg)
     * }
     */
    public static int vsnprintf(MemorySegment __s, long __maxlen, MemorySegment __format, MemorySegment __arg)
    {
        var mh$ = vsnprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsnprintf", __s, __maxlen, __format, __arg);
            }
            return (int)mh$.invokeExact(__s, __maxlen, __format, __arg);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vasprintf {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("vasprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vasprintf(char **restrict __ptr, const char *restrict __f, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vasprintf$descriptor() { return vasprintf.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vasprintf(char **restrict __ptr, const char *restrict __f, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vasprintf$handle() { return vasprintf.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vasprintf(char **restrict __ptr, const char *restrict __f, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vasprintf$address() { return vasprintf.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int vasprintf(char **restrict __ptr, const char *restrict __f, __gnuc_va_list __arg)
     * }
     */
    public static int vasprintf(MemorySegment __ptr, MemorySegment __f, MemorySegment __arg)
    {
        var mh$ = vasprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vasprintf", __ptr, __f, __arg);
            }
            return (int)mh$.invokeExact(__ptr, __f, __arg);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int __asprintf(char **restrict __ptr, const char *restrict __fmt, ...)
     * }
     */
    public static class __asprintf {
        private static final FunctionDescriptor BASE_DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);
        private static final MemorySegment ADDR = hdf5_h.findOrThrow("__asprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private __asprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader)
        {
            this.handle     = handle;
            this.descriptor = descriptor;
            this.spreader   = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int __asprintf(char **restrict __ptr, const char *restrict __fmt, ...)
         * }
         */
        public static __asprintf makeInvoker(MemoryLayout... layouts)
        {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$       = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$                  = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$            = mh$.asSpreader(Object[].class, layouts.length);
            return new __asprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() { return ADDR; }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() { return handle; }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() { return descriptor; }

        public int apply(MemorySegment __ptr, MemorySegment __fmt, Object... x2)
        {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("__asprintf", __ptr, __fmt, x2);
                }
                return (int)spreader.invokeExact(__ptr, __fmt, x2);
            }
            catch (IllegalArgumentException | ClassCastException ex$) {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            }
            catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int asprintf(char **restrict __ptr, const char *restrict __fmt, ...)
     * }
     */
    public static class asprintf {
        private static final FunctionDescriptor BASE_DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);
        private static final MemorySegment ADDR = hdf5_h.findOrThrow("asprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private asprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader)
        {
            this.handle     = handle;
            this.descriptor = descriptor;
            this.spreader   = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int asprintf(char **restrict __ptr, const char *restrict __fmt, ...)
         * }
         */
        public static asprintf makeInvoker(MemoryLayout... layouts)
        {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$       = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$                  = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$            = mh$.asSpreader(Object[].class, layouts.length);
            return new asprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() { return ADDR; }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() { return handle; }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() { return descriptor; }

        public int apply(MemorySegment __ptr, MemorySegment __fmt, Object... x2)
        {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("asprintf", __ptr, __fmt, x2);
                }
                return (int)spreader.invokeExact(__ptr, __fmt, x2);
            }
            catch (IllegalArgumentException | ClassCastException ex$) {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            }
            catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vdprintf {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("vdprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vdprintf(int __fd, const char *restrict __fmt, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vdprintf$descriptor() { return vdprintf.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vdprintf(int __fd, const char *restrict __fmt, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vdprintf$handle() { return vdprintf.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vdprintf(int __fd, const char *restrict __fmt, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vdprintf$address() { return vdprintf.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int vdprintf(int __fd, const char *restrict __fmt, __gnuc_va_list __arg)
     * }
     */
    public static int vdprintf(int __fd, MemorySegment __fmt, MemorySegment __arg)
    {
        var mh$ = vdprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vdprintf", __fd, __fmt, __arg);
            }
            return (int)mh$.invokeExact(__fd, __fmt, __arg);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int dprintf(int __fd, const char *restrict __fmt, ...)
     * }
     */
    public static class dprintf {
        private static final FunctionDescriptor BASE_DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER);
        private static final MemorySegment ADDR = hdf5_h.findOrThrow("dprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private dprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader)
        {
            this.handle     = handle;
            this.descriptor = descriptor;
            this.spreader   = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int dprintf(int __fd, const char *restrict __fmt, ...)
         * }
         */
        public static dprintf makeInvoker(MemoryLayout... layouts)
        {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$       = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$                  = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$            = mh$.asSpreader(Object[].class, layouts.length);
            return new dprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() { return ADDR; }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() { return handle; }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() { return descriptor; }

        public int apply(int __fd, MemorySegment __fmt, Object... x2)
        {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("dprintf", __fd, __fmt, x2);
                }
                return (int)spreader.invokeExact(__fd, __fmt, x2);
            }
            catch (IllegalArgumentException | ClassCastException ex$) {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            }
            catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int fscanf(FILE *restrict __stream, const char *restrict __format, ...)
     * }
     */
    public static class fscanf {
        private static final FunctionDescriptor BASE_DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);
        private static final MemorySegment ADDR = hdf5_h.findOrThrow("fscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader)
        {
            this.handle     = handle;
            this.descriptor = descriptor;
            this.spreader   = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int fscanf(FILE *restrict __stream, const char *restrict __format, ...)
         * }
         */
        public static fscanf makeInvoker(MemoryLayout... layouts)
        {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$       = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$                  = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$            = mh$.asSpreader(Object[].class, layouts.length);
            return new fscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() { return ADDR; }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() { return handle; }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() { return descriptor; }

        public int apply(MemorySegment __stream, MemorySegment __format, Object... x2)
        {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fscanf", __stream, __format, x2);
                }
                return (int)spreader.invokeExact(__stream, __format, x2);
            }
            catch (IllegalArgumentException | ClassCastException ex$) {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            }
            catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int scanf(const char *restrict __format, ...)
     * }
     */
    public static class scanf {
        private static final FunctionDescriptor BASE_DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);
        private static final MemorySegment ADDR = hdf5_h.findOrThrow("scanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private scanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader)
        {
            this.handle     = handle;
            this.descriptor = descriptor;
            this.spreader   = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int scanf(const char *restrict __format, ...)
         * }
         */
        public static scanf makeInvoker(MemoryLayout... layouts)
        {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$       = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$                  = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$            = mh$.asSpreader(Object[].class, layouts.length);
            return new scanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() { return ADDR; }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() { return handle; }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() { return descriptor; }

        public int apply(MemorySegment __format, Object... x1)
        {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("scanf", __format, x1);
                }
                return (int)spreader.invokeExact(__format, x1);
            }
            catch (IllegalArgumentException | ClassCastException ex$) {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            }
            catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int sscanf(const char *restrict __s, const char *restrict __format, ...)
     * }
     */
    public static class sscanf {
        private static final FunctionDescriptor BASE_DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);
        private static final MemorySegment ADDR = hdf5_h.findOrThrow("sscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader)
        {
            this.handle     = handle;
            this.descriptor = descriptor;
            this.spreader   = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int sscanf(const char *restrict __s, const char *restrict __format, ...)
         * }
         */
        public static sscanf makeInvoker(MemoryLayout... layouts)
        {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$       = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$                  = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$            = mh$.asSpreader(Object[].class, layouts.length);
            return new sscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() { return ADDR; }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() { return handle; }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() { return descriptor; }

        public int apply(MemorySegment __s, MemorySegment __format, Object... x2)
        {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sscanf", __s, __format, x2);
                }
                return (int)spreader.invokeExact(__s, __format, x2);
            }
            catch (IllegalArgumentException | ClassCastException ex$) {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            }
            catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    /**
     * {@snippet lang=c :
     * typedef float _Float32
     * }
     */
    public static final OfFloat _Float32 = hdf5_h.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef double _Float64
     * }
     */
    public static final OfDouble _Float64 = hdf5_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef double _Float32x
     * }
     */
    public static final OfDouble _Float32x = hdf5_h.C_DOUBLE;

    private static class vfscanf {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("vfscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vfscanf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vfscanf$descriptor() { return vfscanf.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vfscanf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vfscanf$handle() { return vfscanf.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vfscanf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vfscanf$address() { return vfscanf.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int vfscanf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vfscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg)
    {
        var mh$ = vfscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vfscanf", __s, __format, __arg);
            }
            return (int)mh$.invokeExact(__s, __format, __arg);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vscanf {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("vscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vscanf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vscanf$descriptor() { return vscanf.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vscanf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vscanf$handle() { return vscanf.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vscanf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vscanf$address() { return vscanf.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int vscanf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment __arg)
    {
        var mh$ = vscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vscanf", __format, __arg);
            }
            return (int)mh$.invokeExact(__format, __arg);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsscanf {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("vsscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vsscanf(const char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vsscanf$descriptor() { return vsscanf.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vsscanf(const char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vsscanf$handle() { return vsscanf.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vsscanf(const char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vsscanf$address() { return vsscanf.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int vsscanf(const char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vsscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg)
    {
        var mh$ = vsscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsscanf", __s, __format, __arg);
            }
            return (int)mh$.invokeExact(__s, __format, __arg);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fgetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fgetc$descriptor() { return fgetc.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static MethodHandle fgetc$handle() { return fgetc.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static MemorySegment fgetc$address() { return fgetc.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static int fgetc(MemorySegment __stream)
    {
        var mh$ = fgetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetc", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("getc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static FunctionDescriptor getc$descriptor() { return getc.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static MethodHandle getc$handle() { return getc.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static MemorySegment getc$address() { return getc.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static int getc(MemorySegment __stream)
    {
        var mh$ = getc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("getchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static FunctionDescriptor getchar$descriptor() { return getchar.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static MethodHandle getchar$handle() { return getchar.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static MemorySegment getchar$address() { return getchar.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static int getchar()
    {
        var mh$ = getchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar");
            }
            return (int)mh$.invokeExact();
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("getc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor getc_unlocked$descriptor() { return getc_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle getc_unlocked$handle() { return getc_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment getc_unlocked$address() { return getc_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static int getc_unlocked(MemorySegment __stream)
    {
        var mh$ = getc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("getchar_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static FunctionDescriptor getchar_unlocked$descriptor() { return getchar_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static MethodHandle getchar_unlocked$handle() { return getchar_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static MemorySegment getchar_unlocked$address() { return getchar_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static int getchar_unlocked()
    {
        var mh$ = getchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar_unlocked");
            }
            return (int)mh$.invokeExact();
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fgetc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fgetc_unlocked$descriptor() { return fgetc_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle fgetc_unlocked$handle() { return fgetc_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment fgetc_unlocked$address() { return fgetc_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static int fgetc_unlocked(MemorySegment __stream)
    {
        var mh$ = fgetc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetc_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputc {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fputc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor fputc$descriptor() { return fputc.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle fputc$handle() { return fputc.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment fputc$address() { return fputc.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static int fputc(int __c, MemorySegment __stream)
    {
        var mh$ = fputc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputc", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("putc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor putc$descriptor() { return putc.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle putc$handle() { return putc.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment putc$address() { return putc.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static int putc(int __c, MemorySegment __stream)
    {
        var mh$ = putc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("putchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static FunctionDescriptor putchar$descriptor() { return putchar.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static MethodHandle putchar$handle() { return putchar.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static MemorySegment putchar$address() { return putchar.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static int putchar(int __c)
    {
        var mh$ = putchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar", __c);
            }
            return (int)mh$.invokeExact(__c);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputc_unlocked {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fputc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor fputc_unlocked$descriptor() { return fputc_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle fputc_unlocked$handle() { return fputc_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment fputc_unlocked$address() { return fputc_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static int fputc_unlocked(int __c, MemorySegment __stream)
    {
        var mh$ = fputc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputc_unlocked", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc_unlocked {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("putc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor putc_unlocked$descriptor() { return putc_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle putc_unlocked$handle() { return putc_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment putc_unlocked$address() { return putc_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static int putc_unlocked(int __c, MemorySegment __stream)
    {
        var mh$ = putc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc_unlocked", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("putchar_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static FunctionDescriptor putchar_unlocked$descriptor() { return putchar_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static MethodHandle putchar_unlocked$handle() { return putchar_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static MemorySegment putchar_unlocked$address() { return putchar_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static int putchar_unlocked(int __c)
    {
        var mh$ = putchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar_unlocked", __c);
            }
            return (int)mh$.invokeExact(__c);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("getw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static FunctionDescriptor getw$descriptor() { return getw.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static MethodHandle getw$handle() { return getw.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static MemorySegment getw$address() { return getw.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static int getw(MemorySegment __stream)
    {
        var mh$ = getw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getw", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putw {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("putw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static FunctionDescriptor putw$descriptor() { return putw.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static MethodHandle putw$handle() { return putw.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static MemorySegment putw$address() { return putw.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static int putw(int __w, MemorySegment __stream)
    {
        var mh$ = putw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putw", __w, __stream);
            }
            return (int)mh$.invokeExact(__w, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgets {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fgets");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fgets$descriptor() { return fgets.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fgets$handle() { return fgets.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fgets$address() { return fgets.ADDR; }

    /**
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fgets(MemorySegment __s, int __n, MemorySegment __stream)
    {
        var mh$ = fgets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgets", __s, __n, __stream);
            }
            return (MemorySegment)mh$.invokeExact(__s, __n, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __getdelim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("__getdelim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE
     * *restrict __stream)
     * }
     */
    public static FunctionDescriptor __getdelim$descriptor() { return __getdelim.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE
     * *restrict __stream)
     * }
     */
    public static MethodHandle __getdelim$handle() { return __getdelim.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE
     * *restrict __stream)
     * }
     */
    public static MemorySegment __getdelim$address() { return __getdelim.ADDR; }

    /**
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE
     * *restrict __stream)
     * }
     */
    public static long __getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter,
                                  MemorySegment __stream)
    {
        var mh$ = __getdelim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__getdelim", __lineptr, __n, __delimiter, __stream);
            }
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getdelim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("getdelim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE
     * *restrict __stream)
     * }
     */
    public static FunctionDescriptor getdelim$descriptor() { return getdelim.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE
     * *restrict __stream)
     * }
     */
    public static MethodHandle getdelim$handle() { return getdelim.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE
     * *restrict __stream)
     * }
     */
    public static MemorySegment getdelim$address() { return getdelim.ADDR; }

    /**
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE
     * *restrict __stream)
     * }
     */
    public static long getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter,
                                MemorySegment __stream)
    {
        var mh$ = getdelim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getdelim", __lineptr, __n, __delimiter, __stream);
            }
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getline {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("getline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getline$descriptor() { return getline.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getline$handle() { return getline.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment getline$address() { return getline.ADDR; }

    /**
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static long getline(MemorySegment __lineptr, MemorySegment __n, MemorySegment __stream)
    {
        var mh$ = getline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getline", __lineptr, __n, __stream);
            }
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputs {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fputs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fputs$descriptor() { return fputs.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fputs$handle() { return fputs.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fputs$address() { return fputs.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static int fputs(MemorySegment __s, MemorySegment __stream)
    {
        var mh$ = fputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputs", __s, __stream);
            }
            return (int)mh$.invokeExact(__s, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class puts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("puts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static FunctionDescriptor puts$descriptor() { return puts.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static MethodHandle puts$handle() { return puts.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static MemorySegment puts$address() { return puts.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static int puts(MemorySegment __s)
    {
        var mh$ = puts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("puts", __s);
            }
            return (int)mh$.invokeExact(__s);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ungetc {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("ungetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor ungetc$descriptor() { return ungetc.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle ungetc$handle() { return ungetc.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment ungetc$address() { return ungetc.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static int ungetc(int __c, MemorySegment __stream)
    {
        var mh$ = ungetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ungetc", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fread$descriptor() { return fread.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fread$handle() { return fread.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fread$address() { return fread.ADDR; }

    /**
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __n, MemorySegment __stream)
    {
        var mh$ = fread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread", __ptr, __size, __n, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fwrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static FunctionDescriptor fwrite$descriptor() { return fwrite.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static MethodHandle fwrite$handle() { return fwrite.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static MemorySegment fwrite$address() { return fwrite.ADDR; }

    /**
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __n, MemorySegment __s)
    {
        var mh$ = fwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fwrite", __ptr, __size, __n, __s);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fread_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fread_unlocked$descriptor() { return fread_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fread_unlocked$handle() { return fread_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fread_unlocked$address() { return fread_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static long fread_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream)
    {
        var mh$ = fread_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread_unlocked", __ptr, __size, __n, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fwrite_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fwrite_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict
     * __stream)
     * }
     */
    public static FunctionDescriptor fwrite_unlocked$descriptor() { return fwrite_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict
     * __stream)
     * }
     */
    public static MethodHandle fwrite_unlocked$handle() { return fwrite_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict
     * __stream)
     * }
     */
    public static MemorySegment fwrite_unlocked$address() { return fwrite_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict
     * __stream)
     * }
     */
    public static long fwrite_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream)
    {
        var mh$ = fwrite_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fwrite_unlocked", __ptr, __size, __n, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fseek {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fseek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static FunctionDescriptor fseek$descriptor() { return fseek.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static MethodHandle fseek$handle() { return fseek.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static MemorySegment fseek$address() { return fseek.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static int fseek(MemorySegment __stream, long __off, int __whence)
    {
        var mh$ = fseek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseek", __stream, __off, __whence);
            }
            return (int)mh$.invokeExact(__stream, __off, __whence);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("ftell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftell$descriptor() { return ftell.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static MethodHandle ftell$handle() { return ftell.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static MemorySegment ftell$address() { return ftell.ADDR; }

    /**
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static long ftell(MemorySegment __stream)
    {
        var mh$ = ftell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftell", __stream);
            }
            return (long)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("rewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static FunctionDescriptor rewind$descriptor() { return rewind.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static MethodHandle rewind$handle() { return rewind.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static MemorySegment rewind$address() { return rewind.ADDR; }

    /**
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static void rewind(MemorySegment __stream)
    {
        var mh$ = rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rewind", __stream);
            }
            mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fseeko {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fseeko");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static FunctionDescriptor fseeko$descriptor() { return fseeko.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static MethodHandle fseeko$handle() { return fseeko.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static MemorySegment fseeko$address() { return fseeko.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static int fseeko(MemorySegment __stream, long __off, int __whence)
    {
        var mh$ = fseeko.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseeko", __stream, __off, __whence);
            }
            return (int)mh$.invokeExact(__stream, __off, __whence);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftello {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("ftello");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftello$descriptor() { return ftello.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static MethodHandle ftello$handle() { return ftello.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static MemorySegment ftello$address() { return ftello.ADDR; }

    /**
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static long ftello(MemorySegment __stream)
    {
        var mh$ = ftello.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftello", __stream);
            }
            return (long)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetpos {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fgetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static FunctionDescriptor fgetpos$descriptor() { return fgetpos.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static MethodHandle fgetpos$handle() { return fgetpos.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static MemorySegment fgetpos$address() { return fgetpos.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static int fgetpos(MemorySegment __stream, MemorySegment __pos)
    {
        var mh$ = fgetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetpos", __stream, __pos);
            }
            return (int)mh$.invokeExact(__stream, __pos);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fsetpos {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fsetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static FunctionDescriptor fsetpos$descriptor() { return fsetpos.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static MethodHandle fsetpos$handle() { return fsetpos.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static MemorySegment fsetpos$address() { return fsetpos.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static int fsetpos(MemorySegment __stream, MemorySegment __pos)
    {
        var mh$ = fsetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fsetpos", __stream, __pos);
            }
            return (int)mh$.invokeExact(__stream, __pos);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class clearerr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("clearerr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static FunctionDescriptor clearerr$descriptor() { return clearerr.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static MethodHandle clearerr$handle() { return clearerr.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static MemorySegment clearerr$address() { return clearerr.ADDR; }

    /**
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static void clearerr(MemorySegment __stream)
    {
        var mh$ = clearerr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr", __stream);
            }
            mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class feof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("feof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static FunctionDescriptor feof$descriptor() { return feof.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static MethodHandle feof$handle() { return feof.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static MemorySegment feof$address() { return feof.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static int feof(MemorySegment __stream)
    {
        var mh$ = feof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("feof", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ferror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("ferror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ferror$descriptor() { return ferror.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static MethodHandle ferror$handle() { return ferror.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static MemorySegment ferror$address() { return ferror.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static int ferror(MemorySegment __stream)
    {
        var mh$ = ferror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ferror", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class clearerr_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("clearerr_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor clearerr_unlocked$descriptor() { return clearerr_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle clearerr_unlocked$handle() { return clearerr_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment clearerr_unlocked$address() { return clearerr_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static void clearerr_unlocked(MemorySegment __stream)
    {
        var mh$ = clearerr_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr_unlocked", __stream);
            }
            mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class feof_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("feof_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor feof_unlocked$descriptor() { return feof_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle feof_unlocked$handle() { return feof_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment feof_unlocked$address() { return feof_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static int feof_unlocked(MemorySegment __stream)
    {
        var mh$ = feof_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("feof_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ferror_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("ferror_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ferror_unlocked$descriptor() { return ferror_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle ferror_unlocked$handle() { return ferror_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment ferror_unlocked$address() { return ferror_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static int ferror_unlocked(MemorySegment __stream)
    {
        var mh$ = ferror_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ferror_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class perror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("perror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static FunctionDescriptor perror$descriptor() { return perror.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static MethodHandle perror$handle() { return perror.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static MemorySegment perror$address() { return perror.ADDR; }

    /**
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static void perror(MemorySegment __s)
    {
        var mh$ = perror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("perror", __s);
            }
            mh$.invokeExact(__s);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fileno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fileno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fileno$descriptor() { return fileno.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static MethodHandle fileno$handle() { return fileno.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static MemorySegment fileno$address() { return fileno.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static int fileno(MemorySegment __stream)
    {
        var mh$ = fileno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fileno", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fileno_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("fileno_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fileno_unlocked$descriptor() { return fileno_unlocked.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle fileno_unlocked$handle() { return fileno_unlocked.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment fileno_unlocked$address() { return fileno_unlocked.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static int fileno_unlocked(MemorySegment __stream)
    {
        var mh$ = fileno_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fileno_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("pclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static FunctionDescriptor pclose$descriptor() { return pclose.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static MethodHandle pclose$handle() { return pclose.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static MemorySegment pclose$address() { return pclose.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static int pclose(MemorySegment __stream)
    {
        var mh$ = pclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pclose", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class popen {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("popen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static FunctionDescriptor popen$descriptor() { return popen.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static MethodHandle popen$handle() { return popen.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static MemorySegment popen$address() { return popen.ADDR; }

    /**
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static MemorySegment popen(MemorySegment __command, MemorySegment __modes)
    {
        var mh$ = popen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("popen", __command, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__command, __modes);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ctermid {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("ctermid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static FunctionDescriptor ctermid$descriptor() { return ctermid.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static MethodHandle ctermid$handle() { return ctermid.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static MemorySegment ctermid$address() { return ctermid.ADDR; }

    /**
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static MemorySegment ctermid(MemorySegment __s)
    {
        var mh$ = ctermid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ctermid", __s);
            }
            return (MemorySegment)mh$.invokeExact(__s);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class flockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("flockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static FunctionDescriptor flockfile$descriptor() { return flockfile.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static MethodHandle flockfile$handle() { return flockfile.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static MemorySegment flockfile$address() { return flockfile.ADDR; }

    /**
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static void flockfile(MemorySegment __stream)
    {
        var mh$ = flockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("flockfile", __stream);
            }
            mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftrylockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("ftrylockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftrylockfile$descriptor() { return ftrylockfile.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static MethodHandle ftrylockfile$handle() { return ftrylockfile.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static MemorySegment ftrylockfile$address() { return ftrylockfile.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static int ftrylockfile(MemorySegment __stream)
    {
        var mh$ = ftrylockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftrylockfile", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class funlockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("funlockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static FunctionDescriptor funlockfile$descriptor() { return funlockfile.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static MethodHandle funlockfile$handle() { return funlockfile.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static MemorySegment funlockfile$address() { return funlockfile.ADDR; }

    /**
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static void funlockfile(MemorySegment __stream)
    {
        var mh$ = funlockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("funlockfile", __stream);
            }
            mh$.invokeExact(__stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __uflow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("__uflow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static FunctionDescriptor __uflow$descriptor() { return __uflow.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static MethodHandle __uflow$handle() { return __uflow.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static MemorySegment __uflow$address() { return __uflow.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static int __uflow(MemorySegment x0)
    {
        var mh$ = __uflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__uflow", x0);
            }
            return (int)mh$.invokeExact(x0);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __overflow {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("__overflow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static FunctionDescriptor __overflow$descriptor() { return __overflow.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static MethodHandle __overflow$handle() { return __overflow.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static MemorySegment __overflow$address() { return __overflow.ADDR; }

    /**
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static int __overflow(MemorySegment x0, int x1)
    {
        var mh$ = __overflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__overflow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5E_MAJOR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5E_type_t.H5E_MAJOR = 0
     * }
     */
    public static int H5E_MAJOR() { return H5E_MAJOR; }
    private static final int H5E_MINOR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5E_type_t.H5E_MINOR = 1
     * }
     */
    public static int H5E_MINOR() { return H5E_MINOR; }

    private static class H5E_ERR_CLS_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_ERR_CLS_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ERR_CLS_g
     * }
     */
    public static OfLong H5E_ERR_CLS_g$layout() { return H5E_ERR_CLS_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ERR_CLS_g
     * }
     */
    public static MemorySegment H5E_ERR_CLS_g$segment() { return H5E_ERR_CLS_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ERR_CLS_g
     * }
     */
    public static long H5E_ERR_CLS_g()
    {
        return H5E_ERR_CLS_g$constants.SEGMENT.get(H5E_ERR_CLS_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ERR_CLS_g
     * }
     */
    public static void H5E_ERR_CLS_g(long varValue)
    {
        H5E_ERR_CLS_g$constants.SEGMENT.set(H5E_ERR_CLS_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_ARGS_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_ARGS_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ARGS_g
     * }
     */
    public static OfLong H5E_ARGS_g$layout() { return H5E_ARGS_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ARGS_g
     * }
     */
    public static MemorySegment H5E_ARGS_g$segment() { return H5E_ARGS_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ARGS_g
     * }
     */
    public static long H5E_ARGS_g()
    {
        return H5E_ARGS_g$constants.SEGMENT.get(H5E_ARGS_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ARGS_g
     * }
     */
    public static void H5E_ARGS_g(long varValue)
    {
        H5E_ARGS_g$constants.SEGMENT.set(H5E_ARGS_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_ATTR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_ATTR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ATTR_g
     * }
     */
    public static OfLong H5E_ATTR_g$layout() { return H5E_ATTR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ATTR_g
     * }
     */
    public static MemorySegment H5E_ATTR_g$segment() { return H5E_ATTR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ATTR_g
     * }
     */
    public static long H5E_ATTR_g()
    {
        return H5E_ATTR_g$constants.SEGMENT.get(H5E_ATTR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ATTR_g
     * }
     */
    public static void H5E_ATTR_g(long varValue)
    {
        H5E_ATTR_g$constants.SEGMENT.set(H5E_ATTR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_BTREE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_BTREE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BTREE_g
     * }
     */
    public static OfLong H5E_BTREE_g$layout() { return H5E_BTREE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BTREE_g
     * }
     */
    public static MemorySegment H5E_BTREE_g$segment() { return H5E_BTREE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BTREE_g
     * }
     */
    public static long H5E_BTREE_g()
    {
        return H5E_BTREE_g$constants.SEGMENT.get(H5E_BTREE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BTREE_g
     * }
     */
    public static void H5E_BTREE_g(long varValue)
    {
        H5E_BTREE_g$constants.SEGMENT.set(H5E_BTREE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CACHE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CACHE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CACHE_g
     * }
     */
    public static OfLong H5E_CACHE_g$layout() { return H5E_CACHE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CACHE_g
     * }
     */
    public static MemorySegment H5E_CACHE_g$segment() { return H5E_CACHE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CACHE_g
     * }
     */
    public static long H5E_CACHE_g()
    {
        return H5E_CACHE_g$constants.SEGMENT.get(H5E_CACHE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CACHE_g
     * }
     */
    public static void H5E_CACHE_g(long varValue)
    {
        H5E_CACHE_g$constants.SEGMENT.set(H5E_CACHE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CONTEXT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CONTEXT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CONTEXT_g
     * }
     */
    public static OfLong H5E_CONTEXT_g$layout() { return H5E_CONTEXT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CONTEXT_g
     * }
     */
    public static MemorySegment H5E_CONTEXT_g$segment() { return H5E_CONTEXT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CONTEXT_g
     * }
     */
    public static long H5E_CONTEXT_g()
    {
        return H5E_CONTEXT_g$constants.SEGMENT.get(H5E_CONTEXT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CONTEXT_g
     * }
     */
    public static void H5E_CONTEXT_g(long varValue)
    {
        H5E_CONTEXT_g$constants.SEGMENT.set(H5E_CONTEXT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_DATASET_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_DATASET_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DATASET_g
     * }
     */
    public static OfLong H5E_DATASET_g$layout() { return H5E_DATASET_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DATASET_g
     * }
     */
    public static MemorySegment H5E_DATASET_g$segment() { return H5E_DATASET_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DATASET_g
     * }
     */
    public static long H5E_DATASET_g()
    {
        return H5E_DATASET_g$constants.SEGMENT.get(H5E_DATASET_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DATASET_g
     * }
     */
    public static void H5E_DATASET_g(long varValue)
    {
        H5E_DATASET_g$constants.SEGMENT.set(H5E_DATASET_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_DATASPACE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_DATASPACE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DATASPACE_g
     * }
     */
    public static OfLong H5E_DATASPACE_g$layout() { return H5E_DATASPACE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DATASPACE_g
     * }
     */
    public static MemorySegment H5E_DATASPACE_g$segment() { return H5E_DATASPACE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DATASPACE_g
     * }
     */
    public static long H5E_DATASPACE_g()
    {
        return H5E_DATASPACE_g$constants.SEGMENT.get(H5E_DATASPACE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DATASPACE_g
     * }
     */
    public static void H5E_DATASPACE_g(long varValue)
    {
        H5E_DATASPACE_g$constants.SEGMENT.set(H5E_DATASPACE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_DATATYPE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_DATATYPE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DATATYPE_g
     * }
     */
    public static OfLong H5E_DATATYPE_g$layout() { return H5E_DATATYPE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DATATYPE_g
     * }
     */
    public static MemorySegment H5E_DATATYPE_g$segment() { return H5E_DATATYPE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DATATYPE_g
     * }
     */
    public static long H5E_DATATYPE_g()
    {
        return H5E_DATATYPE_g$constants.SEGMENT.get(H5E_DATATYPE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DATATYPE_g
     * }
     */
    public static void H5E_DATATYPE_g(long varValue)
    {
        H5E_DATATYPE_g$constants.SEGMENT.set(H5E_DATATYPE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_EARRAY_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_EARRAY_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EARRAY_g
     * }
     */
    public static OfLong H5E_EARRAY_g$layout() { return H5E_EARRAY_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EARRAY_g
     * }
     */
    public static MemorySegment H5E_EARRAY_g$segment() { return H5E_EARRAY_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EARRAY_g
     * }
     */
    public static long H5E_EARRAY_g()
    {
        return H5E_EARRAY_g$constants.SEGMENT.get(H5E_EARRAY_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EARRAY_g
     * }
     */
    public static void H5E_EARRAY_g(long varValue)
    {
        H5E_EARRAY_g$constants.SEGMENT.set(H5E_EARRAY_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_EFL_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_EFL_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EFL_g
     * }
     */
    public static OfLong H5E_EFL_g$layout() { return H5E_EFL_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EFL_g
     * }
     */
    public static MemorySegment H5E_EFL_g$segment() { return H5E_EFL_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EFL_g
     * }
     */
    public static long H5E_EFL_g() { return H5E_EFL_g$constants.SEGMENT.get(H5E_EFL_g$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EFL_g
     * }
     */
    public static void H5E_EFL_g(long varValue)
    {
        H5E_EFL_g$constants.SEGMENT.set(H5E_EFL_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_ERROR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_ERROR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ERROR_g
     * }
     */
    public static OfLong H5E_ERROR_g$layout() { return H5E_ERROR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ERROR_g
     * }
     */
    public static MemorySegment H5E_ERROR_g$segment() { return H5E_ERROR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ERROR_g
     * }
     */
    public static long H5E_ERROR_g()
    {
        return H5E_ERROR_g$constants.SEGMENT.get(H5E_ERROR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ERROR_g
     * }
     */
    public static void H5E_ERROR_g(long varValue)
    {
        H5E_ERROR_g$constants.SEGMENT.set(H5E_ERROR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_EVENTSET_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_EVENTSET_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EVENTSET_g
     * }
     */
    public static OfLong H5E_EVENTSET_g$layout() { return H5E_EVENTSET_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EVENTSET_g
     * }
     */
    public static MemorySegment H5E_EVENTSET_g$segment() { return H5E_EVENTSET_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EVENTSET_g
     * }
     */
    public static long H5E_EVENTSET_g()
    {
        return H5E_EVENTSET_g$constants.SEGMENT.get(H5E_EVENTSET_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EVENTSET_g
     * }
     */
    public static void H5E_EVENTSET_g(long varValue)
    {
        H5E_EVENTSET_g$constants.SEGMENT.set(H5E_EVENTSET_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_FARRAY_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_FARRAY_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FARRAY_g
     * }
     */
    public static OfLong H5E_FARRAY_g$layout() { return H5E_FARRAY_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FARRAY_g
     * }
     */
    public static MemorySegment H5E_FARRAY_g$segment() { return H5E_FARRAY_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FARRAY_g
     * }
     */
    public static long H5E_FARRAY_g()
    {
        return H5E_FARRAY_g$constants.SEGMENT.get(H5E_FARRAY_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FARRAY_g
     * }
     */
    public static void H5E_FARRAY_g(long varValue)
    {
        H5E_FARRAY_g$constants.SEGMENT.set(H5E_FARRAY_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_FILE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_FILE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FILE_g
     * }
     */
    public static OfLong H5E_FILE_g$layout() { return H5E_FILE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FILE_g
     * }
     */
    public static MemorySegment H5E_FILE_g$segment() { return H5E_FILE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FILE_g
     * }
     */
    public static long H5E_FILE_g()
    {
        return H5E_FILE_g$constants.SEGMENT.get(H5E_FILE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FILE_g
     * }
     */
    public static void H5E_FILE_g(long varValue)
    {
        H5E_FILE_g$constants.SEGMENT.set(H5E_FILE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_FSPACE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_FSPACE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FSPACE_g
     * }
     */
    public static OfLong H5E_FSPACE_g$layout() { return H5E_FSPACE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FSPACE_g
     * }
     */
    public static MemorySegment H5E_FSPACE_g$segment() { return H5E_FSPACE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FSPACE_g
     * }
     */
    public static long H5E_FSPACE_g()
    {
        return H5E_FSPACE_g$constants.SEGMENT.get(H5E_FSPACE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FSPACE_g
     * }
     */
    public static void H5E_FSPACE_g(long varValue)
    {
        H5E_FSPACE_g$constants.SEGMENT.set(H5E_FSPACE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_FUNC_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_FUNC_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FUNC_g
     * }
     */
    public static OfLong H5E_FUNC_g$layout() { return H5E_FUNC_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FUNC_g
     * }
     */
    public static MemorySegment H5E_FUNC_g$segment() { return H5E_FUNC_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FUNC_g
     * }
     */
    public static long H5E_FUNC_g()
    {
        return H5E_FUNC_g$constants.SEGMENT.get(H5E_FUNC_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FUNC_g
     * }
     */
    public static void H5E_FUNC_g(long varValue)
    {
        H5E_FUNC_g$constants.SEGMENT.set(H5E_FUNC_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_HEAP_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_HEAP_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_HEAP_g
     * }
     */
    public static OfLong H5E_HEAP_g$layout() { return H5E_HEAP_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_HEAP_g
     * }
     */
    public static MemorySegment H5E_HEAP_g$segment() { return H5E_HEAP_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_HEAP_g
     * }
     */
    public static long H5E_HEAP_g()
    {
        return H5E_HEAP_g$constants.SEGMENT.get(H5E_HEAP_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_HEAP_g
     * }
     */
    public static void H5E_HEAP_g(long varValue)
    {
        H5E_HEAP_g$constants.SEGMENT.set(H5E_HEAP_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_ID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_ID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ID_g
     * }
     */
    public static OfLong H5E_ID_g$layout() { return H5E_ID_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ID_g
     * }
     */
    public static MemorySegment H5E_ID_g$segment() { return H5E_ID_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ID_g
     * }
     */
    public static long H5E_ID_g() { return H5E_ID_g$constants.SEGMENT.get(H5E_ID_g$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ID_g
     * }
     */
    public static void H5E_ID_g(long varValue)
    {
        H5E_ID_g$constants.SEGMENT.set(H5E_ID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_INTERNAL_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_INTERNAL_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_INTERNAL_g
     * }
     */
    public static OfLong H5E_INTERNAL_g$layout() { return H5E_INTERNAL_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_INTERNAL_g
     * }
     */
    public static MemorySegment H5E_INTERNAL_g$segment() { return H5E_INTERNAL_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_INTERNAL_g
     * }
     */
    public static long H5E_INTERNAL_g()
    {
        return H5E_INTERNAL_g$constants.SEGMENT.get(H5E_INTERNAL_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_INTERNAL_g
     * }
     */
    public static void H5E_INTERNAL_g(long varValue)
    {
        H5E_INTERNAL_g$constants.SEGMENT.set(H5E_INTERNAL_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_IO_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_IO_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_IO_g
     * }
     */
    public static OfLong H5E_IO_g$layout() { return H5E_IO_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_IO_g
     * }
     */
    public static MemorySegment H5E_IO_g$segment() { return H5E_IO_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_IO_g
     * }
     */
    public static long H5E_IO_g() { return H5E_IO_g$constants.SEGMENT.get(H5E_IO_g$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_IO_g
     * }
     */
    public static void H5E_IO_g(long varValue)
    {
        H5E_IO_g$constants.SEGMENT.set(H5E_IO_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_LIB_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_LIB_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LIB_g
     * }
     */
    public static OfLong H5E_LIB_g$layout() { return H5E_LIB_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LIB_g
     * }
     */
    public static MemorySegment H5E_LIB_g$segment() { return H5E_LIB_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LIB_g
     * }
     */
    public static long H5E_LIB_g() { return H5E_LIB_g$constants.SEGMENT.get(H5E_LIB_g$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LIB_g
     * }
     */
    public static void H5E_LIB_g(long varValue)
    {
        H5E_LIB_g$constants.SEGMENT.set(H5E_LIB_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_LINK_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_LINK_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LINK_g
     * }
     */
    public static OfLong H5E_LINK_g$layout() { return H5E_LINK_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LINK_g
     * }
     */
    public static MemorySegment H5E_LINK_g$segment() { return H5E_LINK_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LINK_g
     * }
     */
    public static long H5E_LINK_g()
    {
        return H5E_LINK_g$constants.SEGMENT.get(H5E_LINK_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LINK_g
     * }
     */
    public static void H5E_LINK_g(long varValue)
    {
        H5E_LINK_g$constants.SEGMENT.set(H5E_LINK_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_MAP_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_MAP_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MAP_g
     * }
     */
    public static OfLong H5E_MAP_g$layout() { return H5E_MAP_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MAP_g
     * }
     */
    public static MemorySegment H5E_MAP_g$segment() { return H5E_MAP_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MAP_g
     * }
     */
    public static long H5E_MAP_g() { return H5E_MAP_g$constants.SEGMENT.get(H5E_MAP_g$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MAP_g
     * }
     */
    public static void H5E_MAP_g(long varValue)
    {
        H5E_MAP_g$constants.SEGMENT.set(H5E_MAP_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_NONE_MAJOR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_NONE_MAJOR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NONE_MAJOR_g
     * }
     */
    public static OfLong H5E_NONE_MAJOR_g$layout() { return H5E_NONE_MAJOR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NONE_MAJOR_g
     * }
     */
    public static MemorySegment H5E_NONE_MAJOR_g$segment() { return H5E_NONE_MAJOR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NONE_MAJOR_g
     * }
     */
    public static long H5E_NONE_MAJOR_g()
    {
        return H5E_NONE_MAJOR_g$constants.SEGMENT.get(H5E_NONE_MAJOR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NONE_MAJOR_g
     * }
     */
    public static void H5E_NONE_MAJOR_g(long varValue)
    {
        H5E_NONE_MAJOR_g$constants.SEGMENT.set(H5E_NONE_MAJOR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_OHDR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_OHDR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OHDR_g
     * }
     */
    public static OfLong H5E_OHDR_g$layout() { return H5E_OHDR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OHDR_g
     * }
     */
    public static MemorySegment H5E_OHDR_g$segment() { return H5E_OHDR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OHDR_g
     * }
     */
    public static long H5E_OHDR_g()
    {
        return H5E_OHDR_g$constants.SEGMENT.get(H5E_OHDR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OHDR_g
     * }
     */
    public static void H5E_OHDR_g(long varValue)
    {
        H5E_OHDR_g$constants.SEGMENT.set(H5E_OHDR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_PAGEBUF_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_PAGEBUF_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PAGEBUF_g
     * }
     */
    public static OfLong H5E_PAGEBUF_g$layout() { return H5E_PAGEBUF_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PAGEBUF_g
     * }
     */
    public static MemorySegment H5E_PAGEBUF_g$segment() { return H5E_PAGEBUF_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PAGEBUF_g
     * }
     */
    public static long H5E_PAGEBUF_g()
    {
        return H5E_PAGEBUF_g$constants.SEGMENT.get(H5E_PAGEBUF_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PAGEBUF_g
     * }
     */
    public static void H5E_PAGEBUF_g(long varValue)
    {
        H5E_PAGEBUF_g$constants.SEGMENT.set(H5E_PAGEBUF_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_PLINE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_PLINE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PLINE_g
     * }
     */
    public static OfLong H5E_PLINE_g$layout() { return H5E_PLINE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PLINE_g
     * }
     */
    public static MemorySegment H5E_PLINE_g$segment() { return H5E_PLINE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PLINE_g
     * }
     */
    public static long H5E_PLINE_g()
    {
        return H5E_PLINE_g$constants.SEGMENT.get(H5E_PLINE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PLINE_g
     * }
     */
    public static void H5E_PLINE_g(long varValue)
    {
        H5E_PLINE_g$constants.SEGMENT.set(H5E_PLINE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_PLIST_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_PLIST_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PLIST_g
     * }
     */
    public static OfLong H5E_PLIST_g$layout() { return H5E_PLIST_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PLIST_g
     * }
     */
    public static MemorySegment H5E_PLIST_g$segment() { return H5E_PLIST_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PLIST_g
     * }
     */
    public static long H5E_PLIST_g()
    {
        return H5E_PLIST_g$constants.SEGMENT.get(H5E_PLIST_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PLIST_g
     * }
     */
    public static void H5E_PLIST_g(long varValue)
    {
        H5E_PLIST_g$constants.SEGMENT.set(H5E_PLIST_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_PLUGIN_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_PLUGIN_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PLUGIN_g
     * }
     */
    public static OfLong H5E_PLUGIN_g$layout() { return H5E_PLUGIN_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PLUGIN_g
     * }
     */
    public static MemorySegment H5E_PLUGIN_g$segment() { return H5E_PLUGIN_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PLUGIN_g
     * }
     */
    public static long H5E_PLUGIN_g()
    {
        return H5E_PLUGIN_g$constants.SEGMENT.get(H5E_PLUGIN_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PLUGIN_g
     * }
     */
    public static void H5E_PLUGIN_g(long varValue)
    {
        H5E_PLUGIN_g$constants.SEGMENT.set(H5E_PLUGIN_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_REFERENCE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_REFERENCE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_REFERENCE_g
     * }
     */
    public static OfLong H5E_REFERENCE_g$layout() { return H5E_REFERENCE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_REFERENCE_g
     * }
     */
    public static MemorySegment H5E_REFERENCE_g$segment() { return H5E_REFERENCE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_REFERENCE_g
     * }
     */
    public static long H5E_REFERENCE_g()
    {
        return H5E_REFERENCE_g$constants.SEGMENT.get(H5E_REFERENCE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_REFERENCE_g
     * }
     */
    public static void H5E_REFERENCE_g(long varValue)
    {
        H5E_REFERENCE_g$constants.SEGMENT.set(H5E_REFERENCE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_RESOURCE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_RESOURCE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_RESOURCE_g
     * }
     */
    public static OfLong H5E_RESOURCE_g$layout() { return H5E_RESOURCE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_RESOURCE_g
     * }
     */
    public static MemorySegment H5E_RESOURCE_g$segment() { return H5E_RESOURCE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_RESOURCE_g
     * }
     */
    public static long H5E_RESOURCE_g()
    {
        return H5E_RESOURCE_g$constants.SEGMENT.get(H5E_RESOURCE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_RESOURCE_g
     * }
     */
    public static void H5E_RESOURCE_g(long varValue)
    {
        H5E_RESOURCE_g$constants.SEGMENT.set(H5E_RESOURCE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_RS_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_RS_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_RS_g
     * }
     */
    public static OfLong H5E_RS_g$layout() { return H5E_RS_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_RS_g
     * }
     */
    public static MemorySegment H5E_RS_g$segment() { return H5E_RS_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_RS_g
     * }
     */
    public static long H5E_RS_g() { return H5E_RS_g$constants.SEGMENT.get(H5E_RS_g$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_RS_g
     * }
     */
    public static void H5E_RS_g(long varValue)
    {
        H5E_RS_g$constants.SEGMENT.set(H5E_RS_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_SLIST_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_SLIST_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SLIST_g
     * }
     */
    public static OfLong H5E_SLIST_g$layout() { return H5E_SLIST_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SLIST_g
     * }
     */
    public static MemorySegment H5E_SLIST_g$segment() { return H5E_SLIST_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SLIST_g
     * }
     */
    public static long H5E_SLIST_g()
    {
        return H5E_SLIST_g$constants.SEGMENT.get(H5E_SLIST_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SLIST_g
     * }
     */
    public static void H5E_SLIST_g(long varValue)
    {
        H5E_SLIST_g$constants.SEGMENT.set(H5E_SLIST_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_SOHM_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_SOHM_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SOHM_g
     * }
     */
    public static OfLong H5E_SOHM_g$layout() { return H5E_SOHM_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SOHM_g
     * }
     */
    public static MemorySegment H5E_SOHM_g$segment() { return H5E_SOHM_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SOHM_g
     * }
     */
    public static long H5E_SOHM_g()
    {
        return H5E_SOHM_g$constants.SEGMENT.get(H5E_SOHM_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SOHM_g
     * }
     */
    public static void H5E_SOHM_g(long varValue)
    {
        H5E_SOHM_g$constants.SEGMENT.set(H5E_SOHM_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_STORAGE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_STORAGE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_STORAGE_g
     * }
     */
    public static OfLong H5E_STORAGE_g$layout() { return H5E_STORAGE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_STORAGE_g
     * }
     */
    public static MemorySegment H5E_STORAGE_g$segment() { return H5E_STORAGE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_STORAGE_g
     * }
     */
    public static long H5E_STORAGE_g()
    {
        return H5E_STORAGE_g$constants.SEGMENT.get(H5E_STORAGE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_STORAGE_g
     * }
     */
    public static void H5E_STORAGE_g(long varValue)
    {
        H5E_STORAGE_g$constants.SEGMENT.set(H5E_STORAGE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_SYM_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_SYM_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SYM_g
     * }
     */
    public static OfLong H5E_SYM_g$layout() { return H5E_SYM_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SYM_g
     * }
     */
    public static MemorySegment H5E_SYM_g$segment() { return H5E_SYM_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SYM_g
     * }
     */
    public static long H5E_SYM_g() { return H5E_SYM_g$constants.SEGMENT.get(H5E_SYM_g$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SYM_g
     * }
     */
    public static void H5E_SYM_g(long varValue)
    {
        H5E_SYM_g$constants.SEGMENT.set(H5E_SYM_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_THREADSAFE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_THREADSAFE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_THREADSAFE_g
     * }
     */
    public static OfLong H5E_THREADSAFE_g$layout() { return H5E_THREADSAFE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_THREADSAFE_g
     * }
     */
    public static MemorySegment H5E_THREADSAFE_g$segment() { return H5E_THREADSAFE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_THREADSAFE_g
     * }
     */
    public static long H5E_THREADSAFE_g()
    {
        return H5E_THREADSAFE_g$constants.SEGMENT.get(H5E_THREADSAFE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_THREADSAFE_g
     * }
     */
    public static void H5E_THREADSAFE_g(long varValue)
    {
        H5E_THREADSAFE_g$constants.SEGMENT.set(H5E_THREADSAFE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_TST_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_TST_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_TST_g
     * }
     */
    public static OfLong H5E_TST_g$layout() { return H5E_TST_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_TST_g
     * }
     */
    public static MemorySegment H5E_TST_g$segment() { return H5E_TST_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_TST_g
     * }
     */
    public static long H5E_TST_g() { return H5E_TST_g$constants.SEGMENT.get(H5E_TST_g$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_TST_g
     * }
     */
    public static void H5E_TST_g(long varValue)
    {
        H5E_TST_g$constants.SEGMENT.set(H5E_TST_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_VFL_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_VFL_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_VFL_g
     * }
     */
    public static OfLong H5E_VFL_g$layout() { return H5E_VFL_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_VFL_g
     * }
     */
    public static MemorySegment H5E_VFL_g$segment() { return H5E_VFL_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_VFL_g
     * }
     */
    public static long H5E_VFL_g() { return H5E_VFL_g$constants.SEGMENT.get(H5E_VFL_g$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_VFL_g
     * }
     */
    public static void H5E_VFL_g(long varValue)
    {
        H5E_VFL_g$constants.SEGMENT.set(H5E_VFL_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_VOL_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_VOL_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_VOL_g
     * }
     */
    public static OfLong H5E_VOL_g$layout() { return H5E_VOL_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_VOL_g
     * }
     */
    public static MemorySegment H5E_VOL_g$segment() { return H5E_VOL_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_VOL_g
     * }
     */
    public static long H5E_VOL_g() { return H5E_VOL_g$constants.SEGMENT.get(H5E_VOL_g$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_VOL_g
     * }
     */
    public static void H5E_VOL_g(long varValue)
    {
        H5E_VOL_g$constants.SEGMENT.set(H5E_VOL_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_BADRANGE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_BADRANGE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADRANGE_g
     * }
     */
    public static OfLong H5E_BADRANGE_g$layout() { return H5E_BADRANGE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADRANGE_g
     * }
     */
    public static MemorySegment H5E_BADRANGE_g$segment() { return H5E_BADRANGE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADRANGE_g
     * }
     */
    public static long H5E_BADRANGE_g()
    {
        return H5E_BADRANGE_g$constants.SEGMENT.get(H5E_BADRANGE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADRANGE_g
     * }
     */
    public static void H5E_BADRANGE_g(long varValue)
    {
        H5E_BADRANGE_g$constants.SEGMENT.set(H5E_BADRANGE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_BADTYPE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_BADTYPE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADTYPE_g
     * }
     */
    public static OfLong H5E_BADTYPE_g$layout() { return H5E_BADTYPE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADTYPE_g
     * }
     */
    public static MemorySegment H5E_BADTYPE_g$segment() { return H5E_BADTYPE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADTYPE_g
     * }
     */
    public static long H5E_BADTYPE_g()
    {
        return H5E_BADTYPE_g$constants.SEGMENT.get(H5E_BADTYPE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADTYPE_g
     * }
     */
    public static void H5E_BADTYPE_g(long varValue)
    {
        H5E_BADTYPE_g$constants.SEGMENT.set(H5E_BADTYPE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_BADVALUE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_BADVALUE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADVALUE_g
     * }
     */
    public static OfLong H5E_BADVALUE_g$layout() { return H5E_BADVALUE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADVALUE_g
     * }
     */
    public static MemorySegment H5E_BADVALUE_g$segment() { return H5E_BADVALUE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADVALUE_g
     * }
     */
    public static long H5E_BADVALUE_g()
    {
        return H5E_BADVALUE_g$constants.SEGMENT.get(H5E_BADVALUE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADVALUE_g
     * }
     */
    public static void H5E_BADVALUE_g(long varValue)
    {
        H5E_BADVALUE_g$constants.SEGMENT.set(H5E_BADVALUE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_UNINITIALIZED_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_UNINITIALIZED_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_UNINITIALIZED_g
     * }
     */
    public static OfLong H5E_UNINITIALIZED_g$layout() { return H5E_UNINITIALIZED_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_UNINITIALIZED_g
     * }
     */
    public static MemorySegment H5E_UNINITIALIZED_g$segment()
    {
        return H5E_UNINITIALIZED_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_UNINITIALIZED_g
     * }
     */
    public static long H5E_UNINITIALIZED_g()
    {
        return H5E_UNINITIALIZED_g$constants.SEGMENT.get(H5E_UNINITIALIZED_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_UNINITIALIZED_g
     * }
     */
    public static void H5E_UNINITIALIZED_g(long varValue)
    {
        H5E_UNINITIALIZED_g$constants.SEGMENT.set(H5E_UNINITIALIZED_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_UNSUPPORTED_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_UNSUPPORTED_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_UNSUPPORTED_g
     * }
     */
    public static OfLong H5E_UNSUPPORTED_g$layout() { return H5E_UNSUPPORTED_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_UNSUPPORTED_g
     * }
     */
    public static MemorySegment H5E_UNSUPPORTED_g$segment() { return H5E_UNSUPPORTED_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_UNSUPPORTED_g
     * }
     */
    public static long H5E_UNSUPPORTED_g()
    {
        return H5E_UNSUPPORTED_g$constants.SEGMENT.get(H5E_UNSUPPORTED_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_UNSUPPORTED_g
     * }
     */
    public static void H5E_UNSUPPORTED_g(long varValue)
    {
        H5E_UNSUPPORTED_g$constants.SEGMENT.set(H5E_UNSUPPORTED_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTCANCEL_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTCANCEL_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCANCEL_g
     * }
     */
    public static OfLong H5E_CANTCANCEL_g$layout() { return H5E_CANTCANCEL_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCANCEL_g
     * }
     */
    public static MemorySegment H5E_CANTCANCEL_g$segment() { return H5E_CANTCANCEL_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCANCEL_g
     * }
     */
    public static long H5E_CANTCANCEL_g()
    {
        return H5E_CANTCANCEL_g$constants.SEGMENT.get(H5E_CANTCANCEL_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCANCEL_g
     * }
     */
    public static void H5E_CANTCANCEL_g(long varValue)
    {
        H5E_CANTCANCEL_g$constants.SEGMENT.set(H5E_CANTCANCEL_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTWAIT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTWAIT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTWAIT_g
     * }
     */
    public static OfLong H5E_CANTWAIT_g$layout() { return H5E_CANTWAIT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTWAIT_g
     * }
     */
    public static MemorySegment H5E_CANTWAIT_g$segment() { return H5E_CANTWAIT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTWAIT_g
     * }
     */
    public static long H5E_CANTWAIT_g()
    {
        return H5E_CANTWAIT_g$constants.SEGMENT.get(H5E_CANTWAIT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTWAIT_g
     * }
     */
    public static void H5E_CANTWAIT_g(long varValue)
    {
        H5E_CANTWAIT_g$constants.SEGMENT.set(H5E_CANTWAIT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTDECODE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTDECODE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDECODE_g
     * }
     */
    public static OfLong H5E_CANTDECODE_g$layout() { return H5E_CANTDECODE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDECODE_g
     * }
     */
    public static MemorySegment H5E_CANTDECODE_g$segment() { return H5E_CANTDECODE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDECODE_g
     * }
     */
    public static long H5E_CANTDECODE_g()
    {
        return H5E_CANTDECODE_g$constants.SEGMENT.get(H5E_CANTDECODE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDECODE_g
     * }
     */
    public static void H5E_CANTDECODE_g(long varValue)
    {
        H5E_CANTDECODE_g$constants.SEGMENT.set(H5E_CANTDECODE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTENCODE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTENCODE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTENCODE_g
     * }
     */
    public static OfLong H5E_CANTENCODE_g$layout() { return H5E_CANTENCODE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTENCODE_g
     * }
     */
    public static MemorySegment H5E_CANTENCODE_g$segment() { return H5E_CANTENCODE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTENCODE_g
     * }
     */
    public static long H5E_CANTENCODE_g()
    {
        return H5E_CANTENCODE_g$constants.SEGMENT.get(H5E_CANTENCODE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTENCODE_g
     * }
     */
    public static void H5E_CANTENCODE_g(long varValue)
    {
        H5E_CANTENCODE_g$constants.SEGMENT.set(H5E_CANTENCODE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTFIND_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTFIND_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFIND_g
     * }
     */
    public static OfLong H5E_CANTFIND_g$layout() { return H5E_CANTFIND_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFIND_g
     * }
     */
    public static MemorySegment H5E_CANTFIND_g$segment() { return H5E_CANTFIND_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFIND_g
     * }
     */
    public static long H5E_CANTFIND_g()
    {
        return H5E_CANTFIND_g$constants.SEGMENT.get(H5E_CANTFIND_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFIND_g
     * }
     */
    public static void H5E_CANTFIND_g(long varValue)
    {
        H5E_CANTFIND_g$constants.SEGMENT.set(H5E_CANTFIND_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTINSERT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTINSERT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINSERT_g
     * }
     */
    public static OfLong H5E_CANTINSERT_g$layout() { return H5E_CANTINSERT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINSERT_g
     * }
     */
    public static MemorySegment H5E_CANTINSERT_g$segment() { return H5E_CANTINSERT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINSERT_g
     * }
     */
    public static long H5E_CANTINSERT_g()
    {
        return H5E_CANTINSERT_g$constants.SEGMENT.get(H5E_CANTINSERT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINSERT_g
     * }
     */
    public static void H5E_CANTINSERT_g(long varValue)
    {
        H5E_CANTINSERT_g$constants.SEGMENT.set(H5E_CANTINSERT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTLIST_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTLIST_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLIST_g
     * }
     */
    public static OfLong H5E_CANTLIST_g$layout() { return H5E_CANTLIST_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLIST_g
     * }
     */
    public static MemorySegment H5E_CANTLIST_g$segment() { return H5E_CANTLIST_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLIST_g
     * }
     */
    public static long H5E_CANTLIST_g()
    {
        return H5E_CANTLIST_g$constants.SEGMENT.get(H5E_CANTLIST_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLIST_g
     * }
     */
    public static void H5E_CANTLIST_g(long varValue)
    {
        H5E_CANTLIST_g$constants.SEGMENT.set(H5E_CANTLIST_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTMODIFY_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTMODIFY_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMODIFY_g
     * }
     */
    public static OfLong H5E_CANTMODIFY_g$layout() { return H5E_CANTMODIFY_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMODIFY_g
     * }
     */
    public static MemorySegment H5E_CANTMODIFY_g$segment() { return H5E_CANTMODIFY_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMODIFY_g
     * }
     */
    public static long H5E_CANTMODIFY_g()
    {
        return H5E_CANTMODIFY_g$constants.SEGMENT.get(H5E_CANTMODIFY_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMODIFY_g
     * }
     */
    public static void H5E_CANTMODIFY_g(long varValue)
    {
        H5E_CANTMODIFY_g$constants.SEGMENT.set(H5E_CANTMODIFY_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTREDISTRIBUTE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTREDISTRIBUTE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREDISTRIBUTE_g
     * }
     */
    public static OfLong H5E_CANTREDISTRIBUTE_g$layout() { return H5E_CANTREDISTRIBUTE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREDISTRIBUTE_g
     * }
     */
    public static MemorySegment H5E_CANTREDISTRIBUTE_g$segment()
    {
        return H5E_CANTREDISTRIBUTE_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREDISTRIBUTE_g
     * }
     */
    public static long H5E_CANTREDISTRIBUTE_g()
    {
        return H5E_CANTREDISTRIBUTE_g$constants.SEGMENT.get(H5E_CANTREDISTRIBUTE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREDISTRIBUTE_g
     * }
     */
    public static void H5E_CANTREDISTRIBUTE_g(long varValue)
    {
        H5E_CANTREDISTRIBUTE_g$constants.SEGMENT.set(H5E_CANTREDISTRIBUTE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTREMOVE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTREMOVE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREMOVE_g
     * }
     */
    public static OfLong H5E_CANTREMOVE_g$layout() { return H5E_CANTREMOVE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREMOVE_g
     * }
     */
    public static MemorySegment H5E_CANTREMOVE_g$segment() { return H5E_CANTREMOVE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREMOVE_g
     * }
     */
    public static long H5E_CANTREMOVE_g()
    {
        return H5E_CANTREMOVE_g$constants.SEGMENT.get(H5E_CANTREMOVE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREMOVE_g
     * }
     */
    public static void H5E_CANTREMOVE_g(long varValue)
    {
        H5E_CANTREMOVE_g$constants.SEGMENT.set(H5E_CANTREMOVE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTSPLIT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTSPLIT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSPLIT_g
     * }
     */
    public static OfLong H5E_CANTSPLIT_g$layout() { return H5E_CANTSPLIT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSPLIT_g
     * }
     */
    public static MemorySegment H5E_CANTSPLIT_g$segment() { return H5E_CANTSPLIT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSPLIT_g
     * }
     */
    public static long H5E_CANTSPLIT_g()
    {
        return H5E_CANTSPLIT_g$constants.SEGMENT.get(H5E_CANTSPLIT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSPLIT_g
     * }
     */
    public static void H5E_CANTSPLIT_g(long varValue)
    {
        H5E_CANTSPLIT_g$constants.SEGMENT.set(H5E_CANTSPLIT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTSWAP_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTSWAP_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSWAP_g
     * }
     */
    public static OfLong H5E_CANTSWAP_g$layout() { return H5E_CANTSWAP_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSWAP_g
     * }
     */
    public static MemorySegment H5E_CANTSWAP_g$segment() { return H5E_CANTSWAP_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSWAP_g
     * }
     */
    public static long H5E_CANTSWAP_g()
    {
        return H5E_CANTSWAP_g$constants.SEGMENT.get(H5E_CANTSWAP_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSWAP_g
     * }
     */
    public static void H5E_CANTSWAP_g(long varValue)
    {
        H5E_CANTSWAP_g$constants.SEGMENT.set(H5E_CANTSWAP_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_EXISTS_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_EXISTS_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EXISTS_g
     * }
     */
    public static OfLong H5E_EXISTS_g$layout() { return H5E_EXISTS_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EXISTS_g
     * }
     */
    public static MemorySegment H5E_EXISTS_g$segment() { return H5E_EXISTS_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EXISTS_g
     * }
     */
    public static long H5E_EXISTS_g()
    {
        return H5E_EXISTS_g$constants.SEGMENT.get(H5E_EXISTS_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_EXISTS_g
     * }
     */
    public static void H5E_EXISTS_g(long varValue)
    {
        H5E_EXISTS_g$constants.SEGMENT.set(H5E_EXISTS_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_NOTFOUND_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_NOTFOUND_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTFOUND_g
     * }
     */
    public static OfLong H5E_NOTFOUND_g$layout() { return H5E_NOTFOUND_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTFOUND_g
     * }
     */
    public static MemorySegment H5E_NOTFOUND_g$segment() { return H5E_NOTFOUND_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTFOUND_g
     * }
     */
    public static long H5E_NOTFOUND_g()
    {
        return H5E_NOTFOUND_g$constants.SEGMENT.get(H5E_NOTFOUND_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTFOUND_g
     * }
     */
    public static void H5E_NOTFOUND_g(long varValue)
    {
        H5E_NOTFOUND_g$constants.SEGMENT.set(H5E_NOTFOUND_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTCLEAN_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTCLEAN_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLEAN_g
     * }
     */
    public static OfLong H5E_CANTCLEAN_g$layout() { return H5E_CANTCLEAN_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLEAN_g
     * }
     */
    public static MemorySegment H5E_CANTCLEAN_g$segment() { return H5E_CANTCLEAN_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLEAN_g
     * }
     */
    public static long H5E_CANTCLEAN_g()
    {
        return H5E_CANTCLEAN_g$constants.SEGMENT.get(H5E_CANTCLEAN_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLEAN_g
     * }
     */
    public static void H5E_CANTCLEAN_g(long varValue)
    {
        H5E_CANTCLEAN_g$constants.SEGMENT.set(H5E_CANTCLEAN_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTCORK_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTCORK_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCORK_g
     * }
     */
    public static OfLong H5E_CANTCORK_g$layout() { return H5E_CANTCORK_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCORK_g
     * }
     */
    public static MemorySegment H5E_CANTCORK_g$segment() { return H5E_CANTCORK_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCORK_g
     * }
     */
    public static long H5E_CANTCORK_g()
    {
        return H5E_CANTCORK_g$constants.SEGMENT.get(H5E_CANTCORK_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCORK_g
     * }
     */
    public static void H5E_CANTCORK_g(long varValue)
    {
        H5E_CANTCORK_g$constants.SEGMENT.set(H5E_CANTCORK_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTDEPEND_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTDEPEND_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDEPEND_g
     * }
     */
    public static OfLong H5E_CANTDEPEND_g$layout() { return H5E_CANTDEPEND_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDEPEND_g
     * }
     */
    public static MemorySegment H5E_CANTDEPEND_g$segment() { return H5E_CANTDEPEND_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDEPEND_g
     * }
     */
    public static long H5E_CANTDEPEND_g()
    {
        return H5E_CANTDEPEND_g$constants.SEGMENT.get(H5E_CANTDEPEND_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDEPEND_g
     * }
     */
    public static void H5E_CANTDEPEND_g(long varValue)
    {
        H5E_CANTDEPEND_g$constants.SEGMENT.set(H5E_CANTDEPEND_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTDIRTY_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTDIRTY_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDIRTY_g
     * }
     */
    public static OfLong H5E_CANTDIRTY_g$layout() { return H5E_CANTDIRTY_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDIRTY_g
     * }
     */
    public static MemorySegment H5E_CANTDIRTY_g$segment() { return H5E_CANTDIRTY_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDIRTY_g
     * }
     */
    public static long H5E_CANTDIRTY_g()
    {
        return H5E_CANTDIRTY_g$constants.SEGMENT.get(H5E_CANTDIRTY_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDIRTY_g
     * }
     */
    public static void H5E_CANTDIRTY_g(long varValue)
    {
        H5E_CANTDIRTY_g$constants.SEGMENT.set(H5E_CANTDIRTY_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTEXPUNGE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTEXPUNGE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTEXPUNGE_g
     * }
     */
    public static OfLong H5E_CANTEXPUNGE_g$layout() { return H5E_CANTEXPUNGE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTEXPUNGE_g
     * }
     */
    public static MemorySegment H5E_CANTEXPUNGE_g$segment() { return H5E_CANTEXPUNGE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTEXPUNGE_g
     * }
     */
    public static long H5E_CANTEXPUNGE_g()
    {
        return H5E_CANTEXPUNGE_g$constants.SEGMENT.get(H5E_CANTEXPUNGE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTEXPUNGE_g
     * }
     */
    public static void H5E_CANTEXPUNGE_g(long varValue)
    {
        H5E_CANTEXPUNGE_g$constants.SEGMENT.set(H5E_CANTEXPUNGE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTFLUSH_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTFLUSH_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFLUSH_g
     * }
     */
    public static OfLong H5E_CANTFLUSH_g$layout() { return H5E_CANTFLUSH_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFLUSH_g
     * }
     */
    public static MemorySegment H5E_CANTFLUSH_g$segment() { return H5E_CANTFLUSH_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFLUSH_g
     * }
     */
    public static long H5E_CANTFLUSH_g()
    {
        return H5E_CANTFLUSH_g$constants.SEGMENT.get(H5E_CANTFLUSH_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFLUSH_g
     * }
     */
    public static void H5E_CANTFLUSH_g(long varValue)
    {
        H5E_CANTFLUSH_g$constants.SEGMENT.set(H5E_CANTFLUSH_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTINS_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTINS_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINS_g
     * }
     */
    public static OfLong H5E_CANTINS_g$layout() { return H5E_CANTINS_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINS_g
     * }
     */
    public static MemorySegment H5E_CANTINS_g$segment() { return H5E_CANTINS_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINS_g
     * }
     */
    public static long H5E_CANTINS_g()
    {
        return H5E_CANTINS_g$constants.SEGMENT.get(H5E_CANTINS_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINS_g
     * }
     */
    public static void H5E_CANTINS_g(long varValue)
    {
        H5E_CANTINS_g$constants.SEGMENT.set(H5E_CANTINS_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTLOAD_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTLOAD_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLOAD_g
     * }
     */
    public static OfLong H5E_CANTLOAD_g$layout() { return H5E_CANTLOAD_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLOAD_g
     * }
     */
    public static MemorySegment H5E_CANTLOAD_g$segment() { return H5E_CANTLOAD_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLOAD_g
     * }
     */
    public static long H5E_CANTLOAD_g()
    {
        return H5E_CANTLOAD_g$constants.SEGMENT.get(H5E_CANTLOAD_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLOAD_g
     * }
     */
    public static void H5E_CANTLOAD_g(long varValue)
    {
        H5E_CANTLOAD_g$constants.SEGMENT.set(H5E_CANTLOAD_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTMARKCLEAN_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTMARKCLEAN_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKCLEAN_g
     * }
     */
    public static OfLong H5E_CANTMARKCLEAN_g$layout() { return H5E_CANTMARKCLEAN_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKCLEAN_g
     * }
     */
    public static MemorySegment H5E_CANTMARKCLEAN_g$segment()
    {
        return H5E_CANTMARKCLEAN_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKCLEAN_g
     * }
     */
    public static long H5E_CANTMARKCLEAN_g()
    {
        return H5E_CANTMARKCLEAN_g$constants.SEGMENT.get(H5E_CANTMARKCLEAN_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKCLEAN_g
     * }
     */
    public static void H5E_CANTMARKCLEAN_g(long varValue)
    {
        H5E_CANTMARKCLEAN_g$constants.SEGMENT.set(H5E_CANTMARKCLEAN_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTMARKDIRTY_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTMARKDIRTY_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKDIRTY_g
     * }
     */
    public static OfLong H5E_CANTMARKDIRTY_g$layout() { return H5E_CANTMARKDIRTY_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKDIRTY_g
     * }
     */
    public static MemorySegment H5E_CANTMARKDIRTY_g$segment()
    {
        return H5E_CANTMARKDIRTY_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKDIRTY_g
     * }
     */
    public static long H5E_CANTMARKDIRTY_g()
    {
        return H5E_CANTMARKDIRTY_g$constants.SEGMENT.get(H5E_CANTMARKDIRTY_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKDIRTY_g
     * }
     */
    public static void H5E_CANTMARKDIRTY_g(long varValue)
    {
        H5E_CANTMARKDIRTY_g$constants.SEGMENT.set(H5E_CANTMARKDIRTY_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTMARKSERIALIZED_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTMARKSERIALIZED_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKSERIALIZED_g
     * }
     */
    public static OfLong H5E_CANTMARKSERIALIZED_g$layout()
    {
        return H5E_CANTMARKSERIALIZED_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKSERIALIZED_g
     * }
     */
    public static MemorySegment H5E_CANTMARKSERIALIZED_g$segment()
    {
        return H5E_CANTMARKSERIALIZED_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKSERIALIZED_g
     * }
     */
    public static long H5E_CANTMARKSERIALIZED_g()
    {
        return H5E_CANTMARKSERIALIZED_g$constants.SEGMENT.get(H5E_CANTMARKSERIALIZED_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKSERIALIZED_g
     * }
     */
    public static void H5E_CANTMARKSERIALIZED_g(long varValue)
    {
        H5E_CANTMARKSERIALIZED_g$constants.SEGMENT.set(H5E_CANTMARKSERIALIZED_g$constants.LAYOUT, 0L,
                                                       varValue);
    }

    private static class H5E_CANTMARKUNSERIALIZED_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTMARKUNSERIALIZED_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKUNSERIALIZED_g
     * }
     */
    public static OfLong H5E_CANTMARKUNSERIALIZED_g$layout()
    {
        return H5E_CANTMARKUNSERIALIZED_g$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKUNSERIALIZED_g
     * }
     */
    public static MemorySegment H5E_CANTMARKUNSERIALIZED_g$segment()
    {
        return H5E_CANTMARKUNSERIALIZED_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKUNSERIALIZED_g
     * }
     */
    public static long H5E_CANTMARKUNSERIALIZED_g()
    {
        return H5E_CANTMARKUNSERIALIZED_g$constants.SEGMENT.get(H5E_CANTMARKUNSERIALIZED_g$constants.LAYOUT,
                                                                0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMARKUNSERIALIZED_g
     * }
     */
    public static void H5E_CANTMARKUNSERIALIZED_g(long varValue)
    {
        H5E_CANTMARKUNSERIALIZED_g$constants.SEGMENT.set(H5E_CANTMARKUNSERIALIZED_g$constants.LAYOUT, 0L,
                                                         varValue);
    }

    private static class H5E_CANTNOTIFY_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTNOTIFY_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTNOTIFY_g
     * }
     */
    public static OfLong H5E_CANTNOTIFY_g$layout() { return H5E_CANTNOTIFY_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTNOTIFY_g
     * }
     */
    public static MemorySegment H5E_CANTNOTIFY_g$segment() { return H5E_CANTNOTIFY_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTNOTIFY_g
     * }
     */
    public static long H5E_CANTNOTIFY_g()
    {
        return H5E_CANTNOTIFY_g$constants.SEGMENT.get(H5E_CANTNOTIFY_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTNOTIFY_g
     * }
     */
    public static void H5E_CANTNOTIFY_g(long varValue)
    {
        H5E_CANTNOTIFY_g$constants.SEGMENT.set(H5E_CANTNOTIFY_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTPIN_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTPIN_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPIN_g
     * }
     */
    public static OfLong H5E_CANTPIN_g$layout() { return H5E_CANTPIN_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPIN_g
     * }
     */
    public static MemorySegment H5E_CANTPIN_g$segment() { return H5E_CANTPIN_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPIN_g
     * }
     */
    public static long H5E_CANTPIN_g()
    {
        return H5E_CANTPIN_g$constants.SEGMENT.get(H5E_CANTPIN_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPIN_g
     * }
     */
    public static void H5E_CANTPIN_g(long varValue)
    {
        H5E_CANTPIN_g$constants.SEGMENT.set(H5E_CANTPIN_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTPROTECT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTPROTECT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPROTECT_g
     * }
     */
    public static OfLong H5E_CANTPROTECT_g$layout() { return H5E_CANTPROTECT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPROTECT_g
     * }
     */
    public static MemorySegment H5E_CANTPROTECT_g$segment() { return H5E_CANTPROTECT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPROTECT_g
     * }
     */
    public static long H5E_CANTPROTECT_g()
    {
        return H5E_CANTPROTECT_g$constants.SEGMENT.get(H5E_CANTPROTECT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPROTECT_g
     * }
     */
    public static void H5E_CANTPROTECT_g(long varValue)
    {
        H5E_CANTPROTECT_g$constants.SEGMENT.set(H5E_CANTPROTECT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTRESIZE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTRESIZE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRESIZE_g
     * }
     */
    public static OfLong H5E_CANTRESIZE_g$layout() { return H5E_CANTRESIZE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRESIZE_g
     * }
     */
    public static MemorySegment H5E_CANTRESIZE_g$segment() { return H5E_CANTRESIZE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRESIZE_g
     * }
     */
    public static long H5E_CANTRESIZE_g()
    {
        return H5E_CANTRESIZE_g$constants.SEGMENT.get(H5E_CANTRESIZE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRESIZE_g
     * }
     */
    public static void H5E_CANTRESIZE_g(long varValue)
    {
        H5E_CANTRESIZE_g$constants.SEGMENT.set(H5E_CANTRESIZE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTSERIALIZE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTSERIALIZE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSERIALIZE_g
     * }
     */
    public static OfLong H5E_CANTSERIALIZE_g$layout() { return H5E_CANTSERIALIZE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSERIALIZE_g
     * }
     */
    public static MemorySegment H5E_CANTSERIALIZE_g$segment()
    {
        return H5E_CANTSERIALIZE_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSERIALIZE_g
     * }
     */
    public static long H5E_CANTSERIALIZE_g()
    {
        return H5E_CANTSERIALIZE_g$constants.SEGMENT.get(H5E_CANTSERIALIZE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSERIALIZE_g
     * }
     */
    public static void H5E_CANTSERIALIZE_g(long varValue)
    {
        H5E_CANTSERIALIZE_g$constants.SEGMENT.set(H5E_CANTSERIALIZE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTTAG_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTTAG_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTTAG_g
     * }
     */
    public static OfLong H5E_CANTTAG_g$layout() { return H5E_CANTTAG_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTTAG_g
     * }
     */
    public static MemorySegment H5E_CANTTAG_g$segment() { return H5E_CANTTAG_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTTAG_g
     * }
     */
    public static long H5E_CANTTAG_g()
    {
        return H5E_CANTTAG_g$constants.SEGMENT.get(H5E_CANTTAG_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTTAG_g
     * }
     */
    public static void H5E_CANTTAG_g(long varValue)
    {
        H5E_CANTTAG_g$constants.SEGMENT.set(H5E_CANTTAG_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTUNCORK_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTUNCORK_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNCORK_g
     * }
     */
    public static OfLong H5E_CANTUNCORK_g$layout() { return H5E_CANTUNCORK_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNCORK_g
     * }
     */
    public static MemorySegment H5E_CANTUNCORK_g$segment() { return H5E_CANTUNCORK_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNCORK_g
     * }
     */
    public static long H5E_CANTUNCORK_g()
    {
        return H5E_CANTUNCORK_g$constants.SEGMENT.get(H5E_CANTUNCORK_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNCORK_g
     * }
     */
    public static void H5E_CANTUNCORK_g(long varValue)
    {
        H5E_CANTUNCORK_g$constants.SEGMENT.set(H5E_CANTUNCORK_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTUNDEPEND_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTUNDEPEND_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNDEPEND_g
     * }
     */
    public static OfLong H5E_CANTUNDEPEND_g$layout() { return H5E_CANTUNDEPEND_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNDEPEND_g
     * }
     */
    public static MemorySegment H5E_CANTUNDEPEND_g$segment() { return H5E_CANTUNDEPEND_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNDEPEND_g
     * }
     */
    public static long H5E_CANTUNDEPEND_g()
    {
        return H5E_CANTUNDEPEND_g$constants.SEGMENT.get(H5E_CANTUNDEPEND_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNDEPEND_g
     * }
     */
    public static void H5E_CANTUNDEPEND_g(long varValue)
    {
        H5E_CANTUNDEPEND_g$constants.SEGMENT.set(H5E_CANTUNDEPEND_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTUNPIN_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTUNPIN_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNPIN_g
     * }
     */
    public static OfLong H5E_CANTUNPIN_g$layout() { return H5E_CANTUNPIN_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNPIN_g
     * }
     */
    public static MemorySegment H5E_CANTUNPIN_g$segment() { return H5E_CANTUNPIN_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNPIN_g
     * }
     */
    public static long H5E_CANTUNPIN_g()
    {
        return H5E_CANTUNPIN_g$constants.SEGMENT.get(H5E_CANTUNPIN_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNPIN_g
     * }
     */
    public static void H5E_CANTUNPIN_g(long varValue)
    {
        H5E_CANTUNPIN_g$constants.SEGMENT.set(H5E_CANTUNPIN_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTUNPROTECT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTUNPROTECT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNPROTECT_g
     * }
     */
    public static OfLong H5E_CANTUNPROTECT_g$layout() { return H5E_CANTUNPROTECT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNPROTECT_g
     * }
     */
    public static MemorySegment H5E_CANTUNPROTECT_g$segment()
    {
        return H5E_CANTUNPROTECT_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNPROTECT_g
     * }
     */
    public static long H5E_CANTUNPROTECT_g()
    {
        return H5E_CANTUNPROTECT_g$constants.SEGMENT.get(H5E_CANTUNPROTECT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNPROTECT_g
     * }
     */
    public static void H5E_CANTUNPROTECT_g(long varValue)
    {
        H5E_CANTUNPROTECT_g$constants.SEGMENT.set(H5E_CANTUNPROTECT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTUNSERIALIZE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTUNSERIALIZE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNSERIALIZE_g
     * }
     */
    public static OfLong H5E_CANTUNSERIALIZE_g$layout() { return H5E_CANTUNSERIALIZE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNSERIALIZE_g
     * }
     */
    public static MemorySegment H5E_CANTUNSERIALIZE_g$segment()
    {
        return H5E_CANTUNSERIALIZE_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNSERIALIZE_g
     * }
     */
    public static long H5E_CANTUNSERIALIZE_g()
    {
        return H5E_CANTUNSERIALIZE_g$constants.SEGMENT.get(H5E_CANTUNSERIALIZE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNSERIALIZE_g
     * }
     */
    public static void H5E_CANTUNSERIALIZE_g(long varValue)
    {
        H5E_CANTUNSERIALIZE_g$constants.SEGMENT.set(H5E_CANTUNSERIALIZE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_LOGGING_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_LOGGING_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LOGGING_g
     * }
     */
    public static OfLong H5E_LOGGING_g$layout() { return H5E_LOGGING_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LOGGING_g
     * }
     */
    public static MemorySegment H5E_LOGGING_g$segment() { return H5E_LOGGING_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LOGGING_g
     * }
     */
    public static long H5E_LOGGING_g()
    {
        return H5E_LOGGING_g$constants.SEGMENT.get(H5E_LOGGING_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LOGGING_g
     * }
     */
    public static void H5E_LOGGING_g(long varValue)
    {
        H5E_LOGGING_g$constants.SEGMENT.set(H5E_LOGGING_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_NOTCACHED_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_NOTCACHED_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTCACHED_g
     * }
     */
    public static OfLong H5E_NOTCACHED_g$layout() { return H5E_NOTCACHED_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTCACHED_g
     * }
     */
    public static MemorySegment H5E_NOTCACHED_g$segment() { return H5E_NOTCACHED_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTCACHED_g
     * }
     */
    public static long H5E_NOTCACHED_g()
    {
        return H5E_NOTCACHED_g$constants.SEGMENT.get(H5E_NOTCACHED_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTCACHED_g
     * }
     */
    public static void H5E_NOTCACHED_g(long varValue)
    {
        H5E_NOTCACHED_g$constants.SEGMENT.set(H5E_NOTCACHED_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_PROTECT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_PROTECT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PROTECT_g
     * }
     */
    public static OfLong H5E_PROTECT_g$layout() { return H5E_PROTECT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PROTECT_g
     * }
     */
    public static MemorySegment H5E_PROTECT_g$segment() { return H5E_PROTECT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PROTECT_g
     * }
     */
    public static long H5E_PROTECT_g()
    {
        return H5E_PROTECT_g$constants.SEGMENT.get(H5E_PROTECT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PROTECT_g
     * }
     */
    public static void H5E_PROTECT_g(long varValue)
    {
        H5E_PROTECT_g$constants.SEGMENT.set(H5E_PROTECT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_SYSTEM_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_SYSTEM_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SYSTEM_g
     * }
     */
    public static OfLong H5E_SYSTEM_g$layout() { return H5E_SYSTEM_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SYSTEM_g
     * }
     */
    public static MemorySegment H5E_SYSTEM_g$segment() { return H5E_SYSTEM_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SYSTEM_g
     * }
     */
    public static long H5E_SYSTEM_g()
    {
        return H5E_SYSTEM_g$constants.SEGMENT.get(H5E_SYSTEM_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SYSTEM_g
     * }
     */
    public static void H5E_SYSTEM_g(long varValue)
    {
        H5E_SYSTEM_g$constants.SEGMENT.set(H5E_SYSTEM_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_BADSELECT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_BADSELECT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADSELECT_g
     * }
     */
    public static OfLong H5E_BADSELECT_g$layout() { return H5E_BADSELECT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADSELECT_g
     * }
     */
    public static MemorySegment H5E_BADSELECT_g$segment() { return H5E_BADSELECT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADSELECT_g
     * }
     */
    public static long H5E_BADSELECT_g()
    {
        return H5E_BADSELECT_g$constants.SEGMENT.get(H5E_BADSELECT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADSELECT_g
     * }
     */
    public static void H5E_BADSELECT_g(long varValue)
    {
        H5E_BADSELECT_g$constants.SEGMENT.set(H5E_BADSELECT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTAPPEND_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTAPPEND_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTAPPEND_g
     * }
     */
    public static OfLong H5E_CANTAPPEND_g$layout() { return H5E_CANTAPPEND_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTAPPEND_g
     * }
     */
    public static MemorySegment H5E_CANTAPPEND_g$segment() { return H5E_CANTAPPEND_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTAPPEND_g
     * }
     */
    public static long H5E_CANTAPPEND_g()
    {
        return H5E_CANTAPPEND_g$constants.SEGMENT.get(H5E_CANTAPPEND_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTAPPEND_g
     * }
     */
    public static void H5E_CANTAPPEND_g(long varValue)
    {
        H5E_CANTAPPEND_g$constants.SEGMENT.set(H5E_CANTAPPEND_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTCLIP_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTCLIP_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLIP_g
     * }
     */
    public static OfLong H5E_CANTCLIP_g$layout() { return H5E_CANTCLIP_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLIP_g
     * }
     */
    public static MemorySegment H5E_CANTCLIP_g$segment() { return H5E_CANTCLIP_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLIP_g
     * }
     */
    public static long H5E_CANTCLIP_g()
    {
        return H5E_CANTCLIP_g$constants.SEGMENT.get(H5E_CANTCLIP_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLIP_g
     * }
     */
    public static void H5E_CANTCLIP_g(long varValue)
    {
        H5E_CANTCLIP_g$constants.SEGMENT.set(H5E_CANTCLIP_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTCOMPARE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTCOMPARE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOMPARE_g
     * }
     */
    public static OfLong H5E_CANTCOMPARE_g$layout() { return H5E_CANTCOMPARE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOMPARE_g
     * }
     */
    public static MemorySegment H5E_CANTCOMPARE_g$segment() { return H5E_CANTCOMPARE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOMPARE_g
     * }
     */
    public static long H5E_CANTCOMPARE_g()
    {
        return H5E_CANTCOMPARE_g$constants.SEGMENT.get(H5E_CANTCOMPARE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOMPARE_g
     * }
     */
    public static void H5E_CANTCOMPARE_g(long varValue)
    {
        H5E_CANTCOMPARE_g$constants.SEGMENT.set(H5E_CANTCOMPARE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTCOUNT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTCOUNT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOUNT_g
     * }
     */
    public static OfLong H5E_CANTCOUNT_g$layout() { return H5E_CANTCOUNT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOUNT_g
     * }
     */
    public static MemorySegment H5E_CANTCOUNT_g$segment() { return H5E_CANTCOUNT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOUNT_g
     * }
     */
    public static long H5E_CANTCOUNT_g()
    {
        return H5E_CANTCOUNT_g$constants.SEGMENT.get(H5E_CANTCOUNT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOUNT_g
     * }
     */
    public static void H5E_CANTCOUNT_g(long varValue)
    {
        H5E_CANTCOUNT_g$constants.SEGMENT.set(H5E_CANTCOUNT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTNEXT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTNEXT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTNEXT_g
     * }
     */
    public static OfLong H5E_CANTNEXT_g$layout() { return H5E_CANTNEXT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTNEXT_g
     * }
     */
    public static MemorySegment H5E_CANTNEXT_g$segment() { return H5E_CANTNEXT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTNEXT_g
     * }
     */
    public static long H5E_CANTNEXT_g()
    {
        return H5E_CANTNEXT_g$constants.SEGMENT.get(H5E_CANTNEXT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTNEXT_g
     * }
     */
    public static void H5E_CANTNEXT_g(long varValue)
    {
        H5E_CANTNEXT_g$constants.SEGMENT.set(H5E_CANTNEXT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTSELECT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTSELECT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSELECT_g
     * }
     */
    public static OfLong H5E_CANTSELECT_g$layout() { return H5E_CANTSELECT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSELECT_g
     * }
     */
    public static MemorySegment H5E_CANTSELECT_g$segment() { return H5E_CANTSELECT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSELECT_g
     * }
     */
    public static long H5E_CANTSELECT_g()
    {
        return H5E_CANTSELECT_g$constants.SEGMENT.get(H5E_CANTSELECT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSELECT_g
     * }
     */
    public static void H5E_CANTSELECT_g(long varValue)
    {
        H5E_CANTSELECT_g$constants.SEGMENT.set(H5E_CANTSELECT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_INCONSISTENTSTATE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_INCONSISTENTSTATE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_INCONSISTENTSTATE_g
     * }
     */
    public static OfLong H5E_INCONSISTENTSTATE_g$layout() { return H5E_INCONSISTENTSTATE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_INCONSISTENTSTATE_g
     * }
     */
    public static MemorySegment H5E_INCONSISTENTSTATE_g$segment()
    {
        return H5E_INCONSISTENTSTATE_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_INCONSISTENTSTATE_g
     * }
     */
    public static long H5E_INCONSISTENTSTATE_g()
    {
        return H5E_INCONSISTENTSTATE_g$constants.SEGMENT.get(H5E_INCONSISTENTSTATE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_INCONSISTENTSTATE_g
     * }
     */
    public static void H5E_INCONSISTENTSTATE_g(long varValue)
    {
        H5E_INCONSISTENTSTATE_g$constants.SEGMENT.set(H5E_INCONSISTENTSTATE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CLOSEERROR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CLOSEERROR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CLOSEERROR_g
     * }
     */
    public static OfLong H5E_CLOSEERROR_g$layout() { return H5E_CLOSEERROR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CLOSEERROR_g
     * }
     */
    public static MemorySegment H5E_CLOSEERROR_g$segment() { return H5E_CLOSEERROR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CLOSEERROR_g
     * }
     */
    public static long H5E_CLOSEERROR_g()
    {
        return H5E_CLOSEERROR_g$constants.SEGMENT.get(H5E_CLOSEERROR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CLOSEERROR_g
     * }
     */
    public static void H5E_CLOSEERROR_g(long varValue)
    {
        H5E_CLOSEERROR_g$constants.SEGMENT.set(H5E_CLOSEERROR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_FCNTL_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_FCNTL_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FCNTL_g
     * }
     */
    public static OfLong H5E_FCNTL_g$layout() { return H5E_FCNTL_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FCNTL_g
     * }
     */
    public static MemorySegment H5E_FCNTL_g$segment() { return H5E_FCNTL_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FCNTL_g
     * }
     */
    public static long H5E_FCNTL_g()
    {
        return H5E_FCNTL_g$constants.SEGMENT.get(H5E_FCNTL_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FCNTL_g
     * }
     */
    public static void H5E_FCNTL_g(long varValue)
    {
        H5E_FCNTL_g$constants.SEGMENT.set(H5E_FCNTL_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_OVERFLOW_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_OVERFLOW_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OVERFLOW_g
     * }
     */
    public static OfLong H5E_OVERFLOW_g$layout() { return H5E_OVERFLOW_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OVERFLOW_g
     * }
     */
    public static MemorySegment H5E_OVERFLOW_g$segment() { return H5E_OVERFLOW_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OVERFLOW_g
     * }
     */
    public static long H5E_OVERFLOW_g()
    {
        return H5E_OVERFLOW_g$constants.SEGMENT.get(H5E_OVERFLOW_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OVERFLOW_g
     * }
     */
    public static void H5E_OVERFLOW_g(long varValue)
    {
        H5E_OVERFLOW_g$constants.SEGMENT.set(H5E_OVERFLOW_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_READERROR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_READERROR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_READERROR_g
     * }
     */
    public static OfLong H5E_READERROR_g$layout() { return H5E_READERROR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_READERROR_g
     * }
     */
    public static MemorySegment H5E_READERROR_g$segment() { return H5E_READERROR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_READERROR_g
     * }
     */
    public static long H5E_READERROR_g()
    {
        return H5E_READERROR_g$constants.SEGMENT.get(H5E_READERROR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_READERROR_g
     * }
     */
    public static void H5E_READERROR_g(long varValue)
    {
        H5E_READERROR_g$constants.SEGMENT.set(H5E_READERROR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_SEEKERROR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_SEEKERROR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SEEKERROR_g
     * }
     */
    public static OfLong H5E_SEEKERROR_g$layout() { return H5E_SEEKERROR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SEEKERROR_g
     * }
     */
    public static MemorySegment H5E_SEEKERROR_g$segment() { return H5E_SEEKERROR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SEEKERROR_g
     * }
     */
    public static long H5E_SEEKERROR_g()
    {
        return H5E_SEEKERROR_g$constants.SEGMENT.get(H5E_SEEKERROR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SEEKERROR_g
     * }
     */
    public static void H5E_SEEKERROR_g(long varValue)
    {
        H5E_SEEKERROR_g$constants.SEGMENT.set(H5E_SEEKERROR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_WRITEERROR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_WRITEERROR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_WRITEERROR_g
     * }
     */
    public static OfLong H5E_WRITEERROR_g$layout() { return H5E_WRITEERROR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_WRITEERROR_g
     * }
     */
    public static MemorySegment H5E_WRITEERROR_g$segment() { return H5E_WRITEERROR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_WRITEERROR_g
     * }
     */
    public static long H5E_WRITEERROR_g()
    {
        return H5E_WRITEERROR_g$constants.SEGMENT.get(H5E_WRITEERROR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_WRITEERROR_g
     * }
     */
    public static void H5E_WRITEERROR_g(long varValue)
    {
        H5E_WRITEERROR_g$constants.SEGMENT.set(H5E_WRITEERROR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_BADFILE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_BADFILE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADFILE_g
     * }
     */
    public static OfLong H5E_BADFILE_g$layout() { return H5E_BADFILE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADFILE_g
     * }
     */
    public static MemorySegment H5E_BADFILE_g$segment() { return H5E_BADFILE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADFILE_g
     * }
     */
    public static long H5E_BADFILE_g()
    {
        return H5E_BADFILE_g$constants.SEGMENT.get(H5E_BADFILE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADFILE_g
     * }
     */
    public static void H5E_BADFILE_g(long varValue)
    {
        H5E_BADFILE_g$constants.SEGMENT.set(H5E_BADFILE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTCLOSEFILE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTCLOSEFILE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLOSEFILE_g
     * }
     */
    public static OfLong H5E_CANTCLOSEFILE_g$layout() { return H5E_CANTCLOSEFILE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLOSEFILE_g
     * }
     */
    public static MemorySegment H5E_CANTCLOSEFILE_g$segment()
    {
        return H5E_CANTCLOSEFILE_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLOSEFILE_g
     * }
     */
    public static long H5E_CANTCLOSEFILE_g()
    {
        return H5E_CANTCLOSEFILE_g$constants.SEGMENT.get(H5E_CANTCLOSEFILE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLOSEFILE_g
     * }
     */
    public static void H5E_CANTCLOSEFILE_g(long varValue)
    {
        H5E_CANTCLOSEFILE_g$constants.SEGMENT.set(H5E_CANTCLOSEFILE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTCREATE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTCREATE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCREATE_g
     * }
     */
    public static OfLong H5E_CANTCREATE_g$layout() { return H5E_CANTCREATE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCREATE_g
     * }
     */
    public static MemorySegment H5E_CANTCREATE_g$segment() { return H5E_CANTCREATE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCREATE_g
     * }
     */
    public static long H5E_CANTCREATE_g()
    {
        return H5E_CANTCREATE_g$constants.SEGMENT.get(H5E_CANTCREATE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCREATE_g
     * }
     */
    public static void H5E_CANTCREATE_g(long varValue)
    {
        H5E_CANTCREATE_g$constants.SEGMENT.set(H5E_CANTCREATE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTDELETEFILE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTDELETEFILE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDELETEFILE_g
     * }
     */
    public static OfLong H5E_CANTDELETEFILE_g$layout() { return H5E_CANTDELETEFILE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDELETEFILE_g
     * }
     */
    public static MemorySegment H5E_CANTDELETEFILE_g$segment()
    {
        return H5E_CANTDELETEFILE_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDELETEFILE_g
     * }
     */
    public static long H5E_CANTDELETEFILE_g()
    {
        return H5E_CANTDELETEFILE_g$constants.SEGMENT.get(H5E_CANTDELETEFILE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDELETEFILE_g
     * }
     */
    public static void H5E_CANTDELETEFILE_g(long varValue)
    {
        H5E_CANTDELETEFILE_g$constants.SEGMENT.set(H5E_CANTDELETEFILE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTLOCKFILE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTLOCKFILE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLOCKFILE_g
     * }
     */
    public static OfLong H5E_CANTLOCKFILE_g$layout() { return H5E_CANTLOCKFILE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLOCKFILE_g
     * }
     */
    public static MemorySegment H5E_CANTLOCKFILE_g$segment() { return H5E_CANTLOCKFILE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLOCKFILE_g
     * }
     */
    public static long H5E_CANTLOCKFILE_g()
    {
        return H5E_CANTLOCKFILE_g$constants.SEGMENT.get(H5E_CANTLOCKFILE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLOCKFILE_g
     * }
     */
    public static void H5E_CANTLOCKFILE_g(long varValue)
    {
        H5E_CANTLOCKFILE_g$constants.SEGMENT.set(H5E_CANTLOCKFILE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTOPENFILE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTOPENFILE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTOPENFILE_g
     * }
     */
    public static OfLong H5E_CANTOPENFILE_g$layout() { return H5E_CANTOPENFILE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTOPENFILE_g
     * }
     */
    public static MemorySegment H5E_CANTOPENFILE_g$segment() { return H5E_CANTOPENFILE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTOPENFILE_g
     * }
     */
    public static long H5E_CANTOPENFILE_g()
    {
        return H5E_CANTOPENFILE_g$constants.SEGMENT.get(H5E_CANTOPENFILE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTOPENFILE_g
     * }
     */
    public static void H5E_CANTOPENFILE_g(long varValue)
    {
        H5E_CANTOPENFILE_g$constants.SEGMENT.set(H5E_CANTOPENFILE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTUNLOCKFILE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTUNLOCKFILE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNLOCKFILE_g
     * }
     */
    public static OfLong H5E_CANTUNLOCKFILE_g$layout() { return H5E_CANTUNLOCKFILE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNLOCKFILE_g
     * }
     */
    public static MemorySegment H5E_CANTUNLOCKFILE_g$segment()
    {
        return H5E_CANTUNLOCKFILE_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNLOCKFILE_g
     * }
     */
    public static long H5E_CANTUNLOCKFILE_g()
    {
        return H5E_CANTUNLOCKFILE_g$constants.SEGMENT.get(H5E_CANTUNLOCKFILE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNLOCKFILE_g
     * }
     */
    public static void H5E_CANTUNLOCKFILE_g(long varValue)
    {
        H5E_CANTUNLOCKFILE_g$constants.SEGMENT.set(H5E_CANTUNLOCKFILE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_FILEEXISTS_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_FILEEXISTS_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FILEEXISTS_g
     * }
     */
    public static OfLong H5E_FILEEXISTS_g$layout() { return H5E_FILEEXISTS_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FILEEXISTS_g
     * }
     */
    public static MemorySegment H5E_FILEEXISTS_g$segment() { return H5E_FILEEXISTS_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FILEEXISTS_g
     * }
     */
    public static long H5E_FILEEXISTS_g()
    {
        return H5E_FILEEXISTS_g$constants.SEGMENT.get(H5E_FILEEXISTS_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FILEEXISTS_g
     * }
     */
    public static void H5E_FILEEXISTS_g(long varValue)
    {
        H5E_FILEEXISTS_g$constants.SEGMENT.set(H5E_FILEEXISTS_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_FILEOPEN_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_FILEOPEN_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FILEOPEN_g
     * }
     */
    public static OfLong H5E_FILEOPEN_g$layout() { return H5E_FILEOPEN_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FILEOPEN_g
     * }
     */
    public static MemorySegment H5E_FILEOPEN_g$segment() { return H5E_FILEOPEN_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FILEOPEN_g
     * }
     */
    public static long H5E_FILEOPEN_g()
    {
        return H5E_FILEOPEN_g$constants.SEGMENT.get(H5E_FILEOPEN_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_FILEOPEN_g
     * }
     */
    public static void H5E_FILEOPEN_g(long varValue)
    {
        H5E_FILEOPEN_g$constants.SEGMENT.set(H5E_FILEOPEN_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_MOUNT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_MOUNT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MOUNT_g
     * }
     */
    public static OfLong H5E_MOUNT_g$layout() { return H5E_MOUNT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MOUNT_g
     * }
     */
    public static MemorySegment H5E_MOUNT_g$segment() { return H5E_MOUNT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MOUNT_g
     * }
     */
    public static long H5E_MOUNT_g()
    {
        return H5E_MOUNT_g$constants.SEGMENT.get(H5E_MOUNT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MOUNT_g
     * }
     */
    public static void H5E_MOUNT_g(long varValue)
    {
        H5E_MOUNT_g$constants.SEGMENT.set(H5E_MOUNT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_NOTHDF5_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_NOTHDF5_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTHDF5_g
     * }
     */
    public static OfLong H5E_NOTHDF5_g$layout() { return H5E_NOTHDF5_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTHDF5_g
     * }
     */
    public static MemorySegment H5E_NOTHDF5_g$segment() { return H5E_NOTHDF5_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTHDF5_g
     * }
     */
    public static long H5E_NOTHDF5_g()
    {
        return H5E_NOTHDF5_g$constants.SEGMENT.get(H5E_NOTHDF5_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTHDF5_g
     * }
     */
    public static void H5E_NOTHDF5_g(long varValue)
    {
        H5E_NOTHDF5_g$constants.SEGMENT.set(H5E_NOTHDF5_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_TRUNCATED_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_TRUNCATED_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_TRUNCATED_g
     * }
     */
    public static OfLong H5E_TRUNCATED_g$layout() { return H5E_TRUNCATED_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_TRUNCATED_g
     * }
     */
    public static MemorySegment H5E_TRUNCATED_g$segment() { return H5E_TRUNCATED_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_TRUNCATED_g
     * }
     */
    public static long H5E_TRUNCATED_g()
    {
        return H5E_TRUNCATED_g$constants.SEGMENT.get(H5E_TRUNCATED_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_TRUNCATED_g
     * }
     */
    public static void H5E_TRUNCATED_g(long varValue)
    {
        H5E_TRUNCATED_g$constants.SEGMENT.set(H5E_TRUNCATED_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_UNMOUNT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_UNMOUNT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_UNMOUNT_g
     * }
     */
    public static OfLong H5E_UNMOUNT_g$layout() { return H5E_UNMOUNT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_UNMOUNT_g
     * }
     */
    public static MemorySegment H5E_UNMOUNT_g$segment() { return H5E_UNMOUNT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_UNMOUNT_g
     * }
     */
    public static long H5E_UNMOUNT_g()
    {
        return H5E_UNMOUNT_g$constants.SEGMENT.get(H5E_UNMOUNT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_UNMOUNT_g
     * }
     */
    public static void H5E_UNMOUNT_g(long varValue)
    {
        H5E_UNMOUNT_g$constants.SEGMENT.set(H5E_UNMOUNT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTMERGE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTMERGE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMERGE_g
     * }
     */
    public static OfLong H5E_CANTMERGE_g$layout() { return H5E_CANTMERGE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMERGE_g
     * }
     */
    public static MemorySegment H5E_CANTMERGE_g$segment() { return H5E_CANTMERGE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMERGE_g
     * }
     */
    public static long H5E_CANTMERGE_g()
    {
        return H5E_CANTMERGE_g$constants.SEGMENT.get(H5E_CANTMERGE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMERGE_g
     * }
     */
    public static void H5E_CANTMERGE_g(long varValue)
    {
        H5E_CANTMERGE_g$constants.SEGMENT.set(H5E_CANTMERGE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTREVIVE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTREVIVE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREVIVE_g
     * }
     */
    public static OfLong H5E_CANTREVIVE_g$layout() { return H5E_CANTREVIVE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREVIVE_g
     * }
     */
    public static MemorySegment H5E_CANTREVIVE_g$segment() { return H5E_CANTREVIVE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREVIVE_g
     * }
     */
    public static long H5E_CANTREVIVE_g()
    {
        return H5E_CANTREVIVE_g$constants.SEGMENT.get(H5E_CANTREVIVE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREVIVE_g
     * }
     */
    public static void H5E_CANTREVIVE_g(long varValue)
    {
        H5E_CANTREVIVE_g$constants.SEGMENT.set(H5E_CANTREVIVE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTSHRINK_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTSHRINK_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSHRINK_g
     * }
     */
    public static OfLong H5E_CANTSHRINK_g$layout() { return H5E_CANTSHRINK_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSHRINK_g
     * }
     */
    public static MemorySegment H5E_CANTSHRINK_g$segment() { return H5E_CANTSHRINK_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSHRINK_g
     * }
     */
    public static long H5E_CANTSHRINK_g()
    {
        return H5E_CANTSHRINK_g$constants.SEGMENT.get(H5E_CANTSHRINK_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSHRINK_g
     * }
     */
    public static void H5E_CANTSHRINK_g(long varValue)
    {
        H5E_CANTSHRINK_g$constants.SEGMENT.set(H5E_CANTSHRINK_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_ALREADYINIT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_ALREADYINIT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ALREADYINIT_g
     * }
     */
    public static OfLong H5E_ALREADYINIT_g$layout() { return H5E_ALREADYINIT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ALREADYINIT_g
     * }
     */
    public static MemorySegment H5E_ALREADYINIT_g$segment() { return H5E_ALREADYINIT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ALREADYINIT_g
     * }
     */
    public static long H5E_ALREADYINIT_g()
    {
        return H5E_ALREADYINIT_g$constants.SEGMENT.get(H5E_ALREADYINIT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ALREADYINIT_g
     * }
     */
    public static void H5E_ALREADYINIT_g(long varValue)
    {
        H5E_ALREADYINIT_g$constants.SEGMENT.set(H5E_ALREADYINIT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTINIT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTINIT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINIT_g
     * }
     */
    public static OfLong H5E_CANTINIT_g$layout() { return H5E_CANTINIT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINIT_g
     * }
     */
    public static MemorySegment H5E_CANTINIT_g$segment() { return H5E_CANTINIT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINIT_g
     * }
     */
    public static long H5E_CANTINIT_g()
    {
        return H5E_CANTINIT_g$constants.SEGMENT.get(H5E_CANTINIT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINIT_g
     * }
     */
    public static void H5E_CANTINIT_g(long varValue)
    {
        H5E_CANTINIT_g$constants.SEGMENT.set(H5E_CANTINIT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTRELEASE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTRELEASE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRELEASE_g
     * }
     */
    public static OfLong H5E_CANTRELEASE_g$layout() { return H5E_CANTRELEASE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRELEASE_g
     * }
     */
    public static MemorySegment H5E_CANTRELEASE_g$segment() { return H5E_CANTRELEASE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRELEASE_g
     * }
     */
    public static long H5E_CANTRELEASE_g()
    {
        return H5E_CANTRELEASE_g$constants.SEGMENT.get(H5E_CANTRELEASE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRELEASE_g
     * }
     */
    public static void H5E_CANTRELEASE_g(long varValue)
    {
        H5E_CANTRELEASE_g$constants.SEGMENT.set(H5E_CANTRELEASE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTCLOSEOBJ_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTCLOSEOBJ_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLOSEOBJ_g
     * }
     */
    public static OfLong H5E_CANTCLOSEOBJ_g$layout() { return H5E_CANTCLOSEOBJ_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLOSEOBJ_g
     * }
     */
    public static MemorySegment H5E_CANTCLOSEOBJ_g$segment() { return H5E_CANTCLOSEOBJ_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLOSEOBJ_g
     * }
     */
    public static long H5E_CANTCLOSEOBJ_g()
    {
        return H5E_CANTCLOSEOBJ_g$constants.SEGMENT.get(H5E_CANTCLOSEOBJ_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCLOSEOBJ_g
     * }
     */
    public static void H5E_CANTCLOSEOBJ_g(long varValue)
    {
        H5E_CANTCLOSEOBJ_g$constants.SEGMENT.set(H5E_CANTCLOSEOBJ_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTOPENOBJ_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTOPENOBJ_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTOPENOBJ_g
     * }
     */
    public static OfLong H5E_CANTOPENOBJ_g$layout() { return H5E_CANTOPENOBJ_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTOPENOBJ_g
     * }
     */
    public static MemorySegment H5E_CANTOPENOBJ_g$segment() { return H5E_CANTOPENOBJ_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTOPENOBJ_g
     * }
     */
    public static long H5E_CANTOPENOBJ_g()
    {
        return H5E_CANTOPENOBJ_g$constants.SEGMENT.get(H5E_CANTOPENOBJ_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTOPENOBJ_g
     * }
     */
    public static void H5E_CANTOPENOBJ_g(long varValue)
    {
        H5E_CANTOPENOBJ_g$constants.SEGMENT.set(H5E_CANTOPENOBJ_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_COMPLEN_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_COMPLEN_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_COMPLEN_g
     * }
     */
    public static OfLong H5E_COMPLEN_g$layout() { return H5E_COMPLEN_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_COMPLEN_g
     * }
     */
    public static MemorySegment H5E_COMPLEN_g$segment() { return H5E_COMPLEN_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_COMPLEN_g
     * }
     */
    public static long H5E_COMPLEN_g()
    {
        return H5E_COMPLEN_g$constants.SEGMENT.get(H5E_COMPLEN_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_COMPLEN_g
     * }
     */
    public static void H5E_COMPLEN_g(long varValue)
    {
        H5E_COMPLEN_g$constants.SEGMENT.set(H5E_COMPLEN_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_PATH_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_PATH_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PATH_g
     * }
     */
    public static OfLong H5E_PATH_g$layout() { return H5E_PATH_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PATH_g
     * }
     */
    public static MemorySegment H5E_PATH_g$segment() { return H5E_PATH_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PATH_g
     * }
     */
    public static long H5E_PATH_g()
    {
        return H5E_PATH_g$constants.SEGMENT.get(H5E_PATH_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_PATH_g
     * }
     */
    public static void H5E_PATH_g(long varValue)
    {
        H5E_PATH_g$constants.SEGMENT.set(H5E_PATH_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTATTACH_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTATTACH_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTATTACH_g
     * }
     */
    public static OfLong H5E_CANTATTACH_g$layout() { return H5E_CANTATTACH_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTATTACH_g
     * }
     */
    public static MemorySegment H5E_CANTATTACH_g$segment() { return H5E_CANTATTACH_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTATTACH_g
     * }
     */
    public static long H5E_CANTATTACH_g()
    {
        return H5E_CANTATTACH_g$constants.SEGMENT.get(H5E_CANTATTACH_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTATTACH_g
     * }
     */
    public static void H5E_CANTATTACH_g(long varValue)
    {
        H5E_CANTATTACH_g$constants.SEGMENT.set(H5E_CANTATTACH_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTCOMPUTE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTCOMPUTE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOMPUTE_g
     * }
     */
    public static OfLong H5E_CANTCOMPUTE_g$layout() { return H5E_CANTCOMPUTE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOMPUTE_g
     * }
     */
    public static MemorySegment H5E_CANTCOMPUTE_g$segment() { return H5E_CANTCOMPUTE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOMPUTE_g
     * }
     */
    public static long H5E_CANTCOMPUTE_g()
    {
        return H5E_CANTCOMPUTE_g$constants.SEGMENT.get(H5E_CANTCOMPUTE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOMPUTE_g
     * }
     */
    public static void H5E_CANTCOMPUTE_g(long varValue)
    {
        H5E_CANTCOMPUTE_g$constants.SEGMENT.set(H5E_CANTCOMPUTE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTEXTEND_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTEXTEND_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTEXTEND_g
     * }
     */
    public static OfLong H5E_CANTEXTEND_g$layout() { return H5E_CANTEXTEND_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTEXTEND_g
     * }
     */
    public static MemorySegment H5E_CANTEXTEND_g$segment() { return H5E_CANTEXTEND_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTEXTEND_g
     * }
     */
    public static long H5E_CANTEXTEND_g()
    {
        return H5E_CANTEXTEND_g$constants.SEGMENT.get(H5E_CANTEXTEND_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTEXTEND_g
     * }
     */
    public static void H5E_CANTEXTEND_g(long varValue)
    {
        H5E_CANTEXTEND_g$constants.SEGMENT.set(H5E_CANTEXTEND_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTOPERATE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTOPERATE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTOPERATE_g
     * }
     */
    public static OfLong H5E_CANTOPERATE_g$layout() { return H5E_CANTOPERATE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTOPERATE_g
     * }
     */
    public static MemorySegment H5E_CANTOPERATE_g$segment() { return H5E_CANTOPERATE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTOPERATE_g
     * }
     */
    public static long H5E_CANTOPERATE_g()
    {
        return H5E_CANTOPERATE_g$constants.SEGMENT.get(H5E_CANTOPERATE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTOPERATE_g
     * }
     */
    public static void H5E_CANTOPERATE_g(long varValue)
    {
        H5E_CANTOPERATE_g$constants.SEGMENT.set(H5E_CANTOPERATE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTRESTORE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTRESTORE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRESTORE_g
     * }
     */
    public static OfLong H5E_CANTRESTORE_g$layout() { return H5E_CANTRESTORE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRESTORE_g
     * }
     */
    public static MemorySegment H5E_CANTRESTORE_g$segment() { return H5E_CANTRESTORE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRESTORE_g
     * }
     */
    public static long H5E_CANTRESTORE_g()
    {
        return H5E_CANTRESTORE_g$constants.SEGMENT.get(H5E_CANTRESTORE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRESTORE_g
     * }
     */
    public static void H5E_CANTRESTORE_g(long varValue)
    {
        H5E_CANTRESTORE_g$constants.SEGMENT.set(H5E_CANTRESTORE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTUPDATE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTUPDATE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUPDATE_g
     * }
     */
    public static OfLong H5E_CANTUPDATE_g$layout() { return H5E_CANTUPDATE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUPDATE_g
     * }
     */
    public static MemorySegment H5E_CANTUPDATE_g$segment() { return H5E_CANTUPDATE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUPDATE_g
     * }
     */
    public static long H5E_CANTUPDATE_g()
    {
        return H5E_CANTUPDATE_g$constants.SEGMENT.get(H5E_CANTUPDATE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUPDATE_g
     * }
     */
    public static void H5E_CANTUPDATE_g(long varValue)
    {
        H5E_CANTUPDATE_g$constants.SEGMENT.set(H5E_CANTUPDATE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_BADGROUP_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_BADGROUP_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADGROUP_g
     * }
     */
    public static OfLong H5E_BADGROUP_g$layout() { return H5E_BADGROUP_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADGROUP_g
     * }
     */
    public static MemorySegment H5E_BADGROUP_g$segment() { return H5E_BADGROUP_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADGROUP_g
     * }
     */
    public static long H5E_BADGROUP_g()
    {
        return H5E_BADGROUP_g$constants.SEGMENT.get(H5E_BADGROUP_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADGROUP_g
     * }
     */
    public static void H5E_BADGROUP_g(long varValue)
    {
        H5E_BADGROUP_g$constants.SEGMENT.set(H5E_BADGROUP_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_BADID_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_BADID_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADID_g
     * }
     */
    public static OfLong H5E_BADID_g$layout() { return H5E_BADID_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADID_g
     * }
     */
    public static MemorySegment H5E_BADID_g$segment() { return H5E_BADID_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADID_g
     * }
     */
    public static long H5E_BADID_g()
    {
        return H5E_BADID_g$constants.SEGMENT.get(H5E_BADID_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADID_g
     * }
     */
    public static void H5E_BADID_g(long varValue)
    {
        H5E_BADID_g$constants.SEGMENT.set(H5E_BADID_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTDEC_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTDEC_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDEC_g
     * }
     */
    public static OfLong H5E_CANTDEC_g$layout() { return H5E_CANTDEC_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDEC_g
     * }
     */
    public static MemorySegment H5E_CANTDEC_g$segment() { return H5E_CANTDEC_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDEC_g
     * }
     */
    public static long H5E_CANTDEC_g()
    {
        return H5E_CANTDEC_g$constants.SEGMENT.get(H5E_CANTDEC_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDEC_g
     * }
     */
    public static void H5E_CANTDEC_g(long varValue)
    {
        H5E_CANTDEC_g$constants.SEGMENT.set(H5E_CANTDEC_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTINC_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTINC_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINC_g
     * }
     */
    public static OfLong H5E_CANTINC_g$layout() { return H5E_CANTINC_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINC_g
     * }
     */
    public static MemorySegment H5E_CANTINC_g$segment() { return H5E_CANTINC_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINC_g
     * }
     */
    public static long H5E_CANTINC_g()
    {
        return H5E_CANTINC_g$constants.SEGMENT.get(H5E_CANTINC_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTINC_g
     * }
     */
    public static void H5E_CANTINC_g(long varValue)
    {
        H5E_CANTINC_g$constants.SEGMENT.set(H5E_CANTINC_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTREGISTER_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTREGISTER_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREGISTER_g
     * }
     */
    public static OfLong H5E_CANTREGISTER_g$layout() { return H5E_CANTREGISTER_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREGISTER_g
     * }
     */
    public static MemorySegment H5E_CANTREGISTER_g$segment() { return H5E_CANTREGISTER_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREGISTER_g
     * }
     */
    public static long H5E_CANTREGISTER_g()
    {
        return H5E_CANTREGISTER_g$constants.SEGMENT.get(H5E_CANTREGISTER_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTREGISTER_g
     * }
     */
    public static void H5E_CANTREGISTER_g(long varValue)
    {
        H5E_CANTREGISTER_g$constants.SEGMENT.set(H5E_CANTREGISTER_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_NOIDS_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_NOIDS_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOIDS_g
     * }
     */
    public static OfLong H5E_NOIDS_g$layout() { return H5E_NOIDS_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOIDS_g
     * }
     */
    public static MemorySegment H5E_NOIDS_g$segment() { return H5E_NOIDS_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOIDS_g
     * }
     */
    public static long H5E_NOIDS_g()
    {
        return H5E_NOIDS_g$constants.SEGMENT.get(H5E_NOIDS_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOIDS_g
     * }
     */
    public static void H5E_NOIDS_g(long varValue)
    {
        H5E_NOIDS_g$constants.SEGMENT.set(H5E_NOIDS_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTMOVE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTMOVE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMOVE_g
     * }
     */
    public static OfLong H5E_CANTMOVE_g$layout() { return H5E_CANTMOVE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMOVE_g
     * }
     */
    public static MemorySegment H5E_CANTMOVE_g$segment() { return H5E_CANTMOVE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMOVE_g
     * }
     */
    public static long H5E_CANTMOVE_g()
    {
        return H5E_CANTMOVE_g$constants.SEGMENT.get(H5E_CANTMOVE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTMOVE_g
     * }
     */
    public static void H5E_CANTMOVE_g(long varValue)
    {
        H5E_CANTMOVE_g$constants.SEGMENT.set(H5E_CANTMOVE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTSORT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTSORT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSORT_g
     * }
     */
    public static OfLong H5E_CANTSORT_g$layout() { return H5E_CANTSORT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSORT_g
     * }
     */
    public static MemorySegment H5E_CANTSORT_g$segment() { return H5E_CANTSORT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSORT_g
     * }
     */
    public static long H5E_CANTSORT_g()
    {
        return H5E_CANTSORT_g$constants.SEGMENT.get(H5E_CANTSORT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSORT_g
     * }
     */
    public static void H5E_CANTSORT_g(long varValue)
    {
        H5E_CANTSORT_g$constants.SEGMENT.set(H5E_CANTSORT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_NLINKS_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_NLINKS_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NLINKS_g
     * }
     */
    public static OfLong H5E_NLINKS_g$layout() { return H5E_NLINKS_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NLINKS_g
     * }
     */
    public static MemorySegment H5E_NLINKS_g$segment() { return H5E_NLINKS_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NLINKS_g
     * }
     */
    public static long H5E_NLINKS_g()
    {
        return H5E_NLINKS_g$constants.SEGMENT.get(H5E_NLINKS_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NLINKS_g
     * }
     */
    public static void H5E_NLINKS_g(long varValue)
    {
        H5E_NLINKS_g$constants.SEGMENT.set(H5E_NLINKS_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_NOTREGISTERED_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_NOTREGISTERED_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTREGISTERED_g
     * }
     */
    public static OfLong H5E_NOTREGISTERED_g$layout() { return H5E_NOTREGISTERED_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTREGISTERED_g
     * }
     */
    public static MemorySegment H5E_NOTREGISTERED_g$segment()
    {
        return H5E_NOTREGISTERED_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTREGISTERED_g
     * }
     */
    public static long H5E_NOTREGISTERED_g()
    {
        return H5E_NOTREGISTERED_g$constants.SEGMENT.get(H5E_NOTREGISTERED_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOTREGISTERED_g
     * }
     */
    public static void H5E_NOTREGISTERED_g(long varValue)
    {
        H5E_NOTREGISTERED_g$constants.SEGMENT.set(H5E_NOTREGISTERED_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_TRAVERSE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_TRAVERSE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_TRAVERSE_g
     * }
     */
    public static OfLong H5E_TRAVERSE_g$layout() { return H5E_TRAVERSE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_TRAVERSE_g
     * }
     */
    public static MemorySegment H5E_TRAVERSE_g$segment() { return H5E_TRAVERSE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_TRAVERSE_g
     * }
     */
    public static long H5E_TRAVERSE_g()
    {
        return H5E_TRAVERSE_g$constants.SEGMENT.get(H5E_TRAVERSE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_TRAVERSE_g
     * }
     */
    public static void H5E_TRAVERSE_g(long varValue)
    {
        H5E_TRAVERSE_g$constants.SEGMENT.set(H5E_TRAVERSE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTPUT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTPUT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPUT_g
     * }
     */
    public static OfLong H5E_CANTPUT_g$layout() { return H5E_CANTPUT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPUT_g
     * }
     */
    public static MemorySegment H5E_CANTPUT_g$segment() { return H5E_CANTPUT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPUT_g
     * }
     */
    public static long H5E_CANTPUT_g()
    {
        return H5E_CANTPUT_g$constants.SEGMENT.get(H5E_CANTPUT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPUT_g
     * }
     */
    public static void H5E_CANTPUT_g(long varValue)
    {
        H5E_CANTPUT_g$constants.SEGMENT.set(H5E_CANTPUT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTGATHER_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTGATHER_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGATHER_g
     * }
     */
    public static OfLong H5E_CANTGATHER_g$layout() { return H5E_CANTGATHER_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGATHER_g
     * }
     */
    public static MemorySegment H5E_CANTGATHER_g$segment() { return H5E_CANTGATHER_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGATHER_g
     * }
     */
    public static long H5E_CANTGATHER_g()
    {
        return H5E_CANTGATHER_g$constants.SEGMENT.get(H5E_CANTGATHER_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGATHER_g
     * }
     */
    public static void H5E_CANTGATHER_g(long varValue)
    {
        H5E_CANTGATHER_g$constants.SEGMENT.set(H5E_CANTGATHER_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTRECV_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTRECV_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRECV_g
     * }
     */
    public static OfLong H5E_CANTRECV_g$layout() { return H5E_CANTRECV_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRECV_g
     * }
     */
    public static MemorySegment H5E_CANTRECV_g$segment() { return H5E_CANTRECV_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRECV_g
     * }
     */
    public static long H5E_CANTRECV_g()
    {
        return H5E_CANTRECV_g$constants.SEGMENT.get(H5E_CANTRECV_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRECV_g
     * }
     */
    public static void H5E_CANTRECV_g(long varValue)
    {
        H5E_CANTRECV_g$constants.SEGMENT.set(H5E_CANTRECV_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_MPI_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_MPI_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MPI_g
     * }
     */
    public static OfLong H5E_MPI_g$layout() { return H5E_MPI_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MPI_g
     * }
     */
    public static MemorySegment H5E_MPI_g$segment() { return H5E_MPI_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MPI_g
     * }
     */
    public static long H5E_MPI_g() { return H5E_MPI_g$constants.SEGMENT.get(H5E_MPI_g$constants.LAYOUT, 0L); }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MPI_g
     * }
     */
    public static void H5E_MPI_g(long varValue)
    {
        H5E_MPI_g$constants.SEGMENT.set(H5E_MPI_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_MPIERRSTR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_MPIERRSTR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MPIERRSTR_g
     * }
     */
    public static OfLong H5E_MPIERRSTR_g$layout() { return H5E_MPIERRSTR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MPIERRSTR_g
     * }
     */
    public static MemorySegment H5E_MPIERRSTR_g$segment() { return H5E_MPIERRSTR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MPIERRSTR_g
     * }
     */
    public static long H5E_MPIERRSTR_g()
    {
        return H5E_MPIERRSTR_g$constants.SEGMENT.get(H5E_MPIERRSTR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_MPIERRSTR_g
     * }
     */
    public static void H5E_MPIERRSTR_g(long varValue)
    {
        H5E_MPIERRSTR_g$constants.SEGMENT.set(H5E_MPIERRSTR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_NO_INDEPENDENT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_NO_INDEPENDENT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NO_INDEPENDENT_g
     * }
     */
    public static OfLong H5E_NO_INDEPENDENT_g$layout() { return H5E_NO_INDEPENDENT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NO_INDEPENDENT_g
     * }
     */
    public static MemorySegment H5E_NO_INDEPENDENT_g$segment()
    {
        return H5E_NO_INDEPENDENT_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NO_INDEPENDENT_g
     * }
     */
    public static long H5E_NO_INDEPENDENT_g()
    {
        return H5E_NO_INDEPENDENT_g$constants.SEGMENT.get(H5E_NO_INDEPENDENT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NO_INDEPENDENT_g
     * }
     */
    public static void H5E_NO_INDEPENDENT_g(long varValue)
    {
        H5E_NO_INDEPENDENT_g$constants.SEGMENT.set(H5E_NO_INDEPENDENT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_NONE_MINOR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_NONE_MINOR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NONE_MINOR_g
     * }
     */
    public static OfLong H5E_NONE_MINOR_g$layout() { return H5E_NONE_MINOR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NONE_MINOR_g
     * }
     */
    public static MemorySegment H5E_NONE_MINOR_g$segment() { return H5E_NONE_MINOR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NONE_MINOR_g
     * }
     */
    public static long H5E_NONE_MINOR_g()
    {
        return H5E_NONE_MINOR_g$constants.SEGMENT.get(H5E_NONE_MINOR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NONE_MINOR_g
     * }
     */
    public static void H5E_NONE_MINOR_g(long varValue)
    {
        H5E_NONE_MINOR_g$constants.SEGMENT.set(H5E_NONE_MINOR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_ALIGNMENT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_ALIGNMENT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ALIGNMENT_g
     * }
     */
    public static OfLong H5E_ALIGNMENT_g$layout() { return H5E_ALIGNMENT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ALIGNMENT_g
     * }
     */
    public static MemorySegment H5E_ALIGNMENT_g$segment() { return H5E_ALIGNMENT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ALIGNMENT_g
     * }
     */
    public static long H5E_ALIGNMENT_g()
    {
        return H5E_ALIGNMENT_g$constants.SEGMENT.get(H5E_ALIGNMENT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ALIGNMENT_g
     * }
     */
    public static void H5E_ALIGNMENT_g(long varValue)
    {
        H5E_ALIGNMENT_g$constants.SEGMENT.set(H5E_ALIGNMENT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_BADITER_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_BADITER_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADITER_g
     * }
     */
    public static OfLong H5E_BADITER_g$layout() { return H5E_BADITER_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADITER_g
     * }
     */
    public static MemorySegment H5E_BADITER_g$segment() { return H5E_BADITER_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADITER_g
     * }
     */
    public static long H5E_BADITER_g()
    {
        return H5E_BADITER_g$constants.SEGMENT.get(H5E_BADITER_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADITER_g
     * }
     */
    public static void H5E_BADITER_g(long varValue)
    {
        H5E_BADITER_g$constants.SEGMENT.set(H5E_BADITER_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_BADMESG_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_BADMESG_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADMESG_g
     * }
     */
    public static OfLong H5E_BADMESG_g$layout() { return H5E_BADMESG_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADMESG_g
     * }
     */
    public static MemorySegment H5E_BADMESG_g$segment() { return H5E_BADMESG_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADMESG_g
     * }
     */
    public static long H5E_BADMESG_g()
    {
        return H5E_BADMESG_g$constants.SEGMENT.get(H5E_BADMESG_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADMESG_g
     * }
     */
    public static void H5E_BADMESG_g(long varValue)
    {
        H5E_BADMESG_g$constants.SEGMENT.set(H5E_BADMESG_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTDELETE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTDELETE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDELETE_g
     * }
     */
    public static OfLong H5E_CANTDELETE_g$layout() { return H5E_CANTDELETE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDELETE_g
     * }
     */
    public static MemorySegment H5E_CANTDELETE_g$segment() { return H5E_CANTDELETE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDELETE_g
     * }
     */
    public static long H5E_CANTDELETE_g()
    {
        return H5E_CANTDELETE_g$constants.SEGMENT.get(H5E_CANTDELETE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTDELETE_g
     * }
     */
    public static void H5E_CANTDELETE_g(long varValue)
    {
        H5E_CANTDELETE_g$constants.SEGMENT.set(H5E_CANTDELETE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTPACK_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTPACK_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPACK_g
     * }
     */
    public static OfLong H5E_CANTPACK_g$layout() { return H5E_CANTPACK_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPACK_g
     * }
     */
    public static MemorySegment H5E_CANTPACK_g$segment() { return H5E_CANTPACK_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPACK_g
     * }
     */
    public static long H5E_CANTPACK_g()
    {
        return H5E_CANTPACK_g$constants.SEGMENT.get(H5E_CANTPACK_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTPACK_g
     * }
     */
    public static void H5E_CANTPACK_g(long varValue)
    {
        H5E_CANTPACK_g$constants.SEGMENT.set(H5E_CANTPACK_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTRENAME_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTRENAME_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRENAME_g
     * }
     */
    public static OfLong H5E_CANTRENAME_g$layout() { return H5E_CANTRENAME_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRENAME_g
     * }
     */
    public static MemorySegment H5E_CANTRENAME_g$segment() { return H5E_CANTRENAME_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRENAME_g
     * }
     */
    public static long H5E_CANTRENAME_g()
    {
        return H5E_CANTRENAME_g$constants.SEGMENT.get(H5E_CANTRENAME_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRENAME_g
     * }
     */
    public static void H5E_CANTRENAME_g(long varValue)
    {
        H5E_CANTRENAME_g$constants.SEGMENT.set(H5E_CANTRENAME_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTRESET_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTRESET_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRESET_g
     * }
     */
    public static OfLong H5E_CANTRESET_g$layout() { return H5E_CANTRESET_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRESET_g
     * }
     */
    public static MemorySegment H5E_CANTRESET_g$segment() { return H5E_CANTRESET_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRESET_g
     * }
     */
    public static long H5E_CANTRESET_g()
    {
        return H5E_CANTRESET_g$constants.SEGMENT.get(H5E_CANTRESET_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTRESET_g
     * }
     */
    public static void H5E_CANTRESET_g(long varValue)
    {
        H5E_CANTRESET_g$constants.SEGMENT.set(H5E_CANTRESET_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_LINKCOUNT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_LINKCOUNT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LINKCOUNT_g
     * }
     */
    public static OfLong H5E_LINKCOUNT_g$layout() { return H5E_LINKCOUNT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LINKCOUNT_g
     * }
     */
    public static MemorySegment H5E_LINKCOUNT_g$segment() { return H5E_LINKCOUNT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LINKCOUNT_g
     * }
     */
    public static long H5E_LINKCOUNT_g()
    {
        return H5E_LINKCOUNT_g$constants.SEGMENT.get(H5E_LINKCOUNT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_LINKCOUNT_g
     * }
     */
    public static void H5E_LINKCOUNT_g(long varValue)
    {
        H5E_LINKCOUNT_g$constants.SEGMENT.set(H5E_LINKCOUNT_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_VERSION_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_VERSION_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_VERSION_g
     * }
     */
    public static OfLong H5E_VERSION_g$layout() { return H5E_VERSION_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_VERSION_g
     * }
     */
    public static MemorySegment H5E_VERSION_g$segment() { return H5E_VERSION_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_VERSION_g
     * }
     */
    public static long H5E_VERSION_g()
    {
        return H5E_VERSION_g$constants.SEGMENT.get(H5E_VERSION_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_VERSION_g
     * }
     */
    public static void H5E_VERSION_g(long varValue)
    {
        H5E_VERSION_g$constants.SEGMENT.set(H5E_VERSION_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CALLBACK_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CALLBACK_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CALLBACK_g
     * }
     */
    public static OfLong H5E_CALLBACK_g$layout() { return H5E_CALLBACK_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CALLBACK_g
     * }
     */
    public static MemorySegment H5E_CALLBACK_g$segment() { return H5E_CALLBACK_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CALLBACK_g
     * }
     */
    public static long H5E_CALLBACK_g()
    {
        return H5E_CALLBACK_g$constants.SEGMENT.get(H5E_CALLBACK_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CALLBACK_g
     * }
     */
    public static void H5E_CALLBACK_g(long varValue)
    {
        H5E_CALLBACK_g$constants.SEGMENT.set(H5E_CALLBACK_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANAPPLY_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANAPPLY_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANAPPLY_g
     * }
     */
    public static OfLong H5E_CANAPPLY_g$layout() { return H5E_CANAPPLY_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANAPPLY_g
     * }
     */
    public static MemorySegment H5E_CANAPPLY_g$segment() { return H5E_CANAPPLY_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANAPPLY_g
     * }
     */
    public static long H5E_CANAPPLY_g()
    {
        return H5E_CANAPPLY_g$constants.SEGMENT.get(H5E_CANAPPLY_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANAPPLY_g
     * }
     */
    public static void H5E_CANAPPLY_g(long varValue)
    {
        H5E_CANAPPLY_g$constants.SEGMENT.set(H5E_CANAPPLY_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTFILTER_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTFILTER_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFILTER_g
     * }
     */
    public static OfLong H5E_CANTFILTER_g$layout() { return H5E_CANTFILTER_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFILTER_g
     * }
     */
    public static MemorySegment H5E_CANTFILTER_g$segment() { return H5E_CANTFILTER_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFILTER_g
     * }
     */
    public static long H5E_CANTFILTER_g()
    {
        return H5E_CANTFILTER_g$constants.SEGMENT.get(H5E_CANTFILTER_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFILTER_g
     * }
     */
    public static void H5E_CANTFILTER_g(long varValue)
    {
        H5E_CANTFILTER_g$constants.SEGMENT.set(H5E_CANTFILTER_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_NOENCODER_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_NOENCODER_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOENCODER_g
     * }
     */
    public static OfLong H5E_NOENCODER_g$layout() { return H5E_NOENCODER_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOENCODER_g
     * }
     */
    public static MemorySegment H5E_NOENCODER_g$segment() { return H5E_NOENCODER_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOENCODER_g
     * }
     */
    public static long H5E_NOENCODER_g()
    {
        return H5E_NOENCODER_g$constants.SEGMENT.get(H5E_NOENCODER_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOENCODER_g
     * }
     */
    public static void H5E_NOENCODER_g(long varValue)
    {
        H5E_NOENCODER_g$constants.SEGMENT.set(H5E_NOENCODER_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_NOFILTER_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_NOFILTER_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOFILTER_g
     * }
     */
    public static OfLong H5E_NOFILTER_g$layout() { return H5E_NOFILTER_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOFILTER_g
     * }
     */
    public static MemorySegment H5E_NOFILTER_g$segment() { return H5E_NOFILTER_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOFILTER_g
     * }
     */
    public static long H5E_NOFILTER_g()
    {
        return H5E_NOFILTER_g$constants.SEGMENT.get(H5E_NOFILTER_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOFILTER_g
     * }
     */
    public static void H5E_NOFILTER_g(long varValue)
    {
        H5E_NOFILTER_g$constants.SEGMENT.set(H5E_NOFILTER_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_SETLOCAL_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_SETLOCAL_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SETLOCAL_g
     * }
     */
    public static OfLong H5E_SETLOCAL_g$layout() { return H5E_SETLOCAL_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SETLOCAL_g
     * }
     */
    public static MemorySegment H5E_SETLOCAL_g$segment() { return H5E_SETLOCAL_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SETLOCAL_g
     * }
     */
    public static long H5E_SETLOCAL_g()
    {
        return H5E_SETLOCAL_g$constants.SEGMENT.get(H5E_SETLOCAL_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SETLOCAL_g
     * }
     */
    public static void H5E_SETLOCAL_g(long varValue)
    {
        H5E_SETLOCAL_g$constants.SEGMENT.set(H5E_SETLOCAL_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTGET_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTGET_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGET_g
     * }
     */
    public static OfLong H5E_CANTGET_g$layout() { return H5E_CANTGET_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGET_g
     * }
     */
    public static MemorySegment H5E_CANTGET_g$segment() { return H5E_CANTGET_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGET_g
     * }
     */
    public static long H5E_CANTGET_g()
    {
        return H5E_CANTGET_g$constants.SEGMENT.get(H5E_CANTGET_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGET_g
     * }
     */
    public static void H5E_CANTGET_g(long varValue)
    {
        H5E_CANTGET_g$constants.SEGMENT.set(H5E_CANTGET_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTSET_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTSET_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSET_g
     * }
     */
    public static OfLong H5E_CANTSET_g$layout() { return H5E_CANTSET_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSET_g
     * }
     */
    public static MemorySegment H5E_CANTSET_g$segment() { return H5E_CANTSET_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSET_g
     * }
     */
    public static long H5E_CANTSET_g()
    {
        return H5E_CANTSET_g$constants.SEGMENT.get(H5E_CANTSET_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTSET_g
     * }
     */
    public static void H5E_CANTSET_g(long varValue)
    {
        H5E_CANTSET_g$constants.SEGMENT.set(H5E_CANTSET_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_DUPCLASS_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_DUPCLASS_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DUPCLASS_g
     * }
     */
    public static OfLong H5E_DUPCLASS_g$layout() { return H5E_DUPCLASS_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DUPCLASS_g
     * }
     */
    public static MemorySegment H5E_DUPCLASS_g$segment() { return H5E_DUPCLASS_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DUPCLASS_g
     * }
     */
    public static long H5E_DUPCLASS_g()
    {
        return H5E_DUPCLASS_g$constants.SEGMENT.get(H5E_DUPCLASS_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_DUPCLASS_g
     * }
     */
    public static void H5E_DUPCLASS_g(long varValue)
    {
        H5E_DUPCLASS_g$constants.SEGMENT.set(H5E_DUPCLASS_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_SETDISALLOWED_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_SETDISALLOWED_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SETDISALLOWED_g
     * }
     */
    public static OfLong H5E_SETDISALLOWED_g$layout() { return H5E_SETDISALLOWED_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SETDISALLOWED_g
     * }
     */
    public static MemorySegment H5E_SETDISALLOWED_g$segment()
    {
        return H5E_SETDISALLOWED_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SETDISALLOWED_g
     * }
     */
    public static long H5E_SETDISALLOWED_g()
    {
        return H5E_SETDISALLOWED_g$constants.SEGMENT.get(H5E_SETDISALLOWED_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SETDISALLOWED_g
     * }
     */
    public static void H5E_SETDISALLOWED_g(long varValue)
    {
        H5E_SETDISALLOWED_g$constants.SEGMENT.set(H5E_SETDISALLOWED_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_OPENERROR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_OPENERROR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OPENERROR_g
     * }
     */
    public static OfLong H5E_OPENERROR_g$layout() { return H5E_OPENERROR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OPENERROR_g
     * }
     */
    public static MemorySegment H5E_OPENERROR_g$segment() { return H5E_OPENERROR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OPENERROR_g
     * }
     */
    public static long H5E_OPENERROR_g()
    {
        return H5E_OPENERROR_g$constants.SEGMENT.get(H5E_OPENERROR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OPENERROR_g
     * }
     */
    public static void H5E_OPENERROR_g(long varValue)
    {
        H5E_OPENERROR_g$constants.SEGMENT.set(H5E_OPENERROR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_ALREADYEXISTS_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_ALREADYEXISTS_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ALREADYEXISTS_g
     * }
     */
    public static OfLong H5E_ALREADYEXISTS_g$layout() { return H5E_ALREADYEXISTS_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ALREADYEXISTS_g
     * }
     */
    public static MemorySegment H5E_ALREADYEXISTS_g$segment()
    {
        return H5E_ALREADYEXISTS_g$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ALREADYEXISTS_g
     * }
     */
    public static long H5E_ALREADYEXISTS_g()
    {
        return H5E_ALREADYEXISTS_g$constants.SEGMENT.get(H5E_ALREADYEXISTS_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_ALREADYEXISTS_g
     * }
     */
    public static void H5E_ALREADYEXISTS_g(long varValue)
    {
        H5E_ALREADYEXISTS_g$constants.SEGMENT.set(H5E_ALREADYEXISTS_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTALLOC_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTALLOC_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTALLOC_g
     * }
     */
    public static OfLong H5E_CANTALLOC_g$layout() { return H5E_CANTALLOC_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTALLOC_g
     * }
     */
    public static MemorySegment H5E_CANTALLOC_g$segment() { return H5E_CANTALLOC_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTALLOC_g
     * }
     */
    public static long H5E_CANTALLOC_g()
    {
        return H5E_CANTALLOC_g$constants.SEGMENT.get(H5E_CANTALLOC_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTALLOC_g
     * }
     */
    public static void H5E_CANTALLOC_g(long varValue)
    {
        H5E_CANTALLOC_g$constants.SEGMENT.set(H5E_CANTALLOC_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTCOPY_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTCOPY_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOPY_g
     * }
     */
    public static OfLong H5E_CANTCOPY_g$layout() { return H5E_CANTCOPY_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOPY_g
     * }
     */
    public static MemorySegment H5E_CANTCOPY_g$segment() { return H5E_CANTCOPY_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOPY_g
     * }
     */
    public static long H5E_CANTCOPY_g()
    {
        return H5E_CANTCOPY_g$constants.SEGMENT.get(H5E_CANTCOPY_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCOPY_g
     * }
     */
    public static void H5E_CANTCOPY_g(long varValue)
    {
        H5E_CANTCOPY_g$constants.SEGMENT.set(H5E_CANTCOPY_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTFREE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTFREE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFREE_g
     * }
     */
    public static OfLong H5E_CANTFREE_g$layout() { return H5E_CANTFREE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFREE_g
     * }
     */
    public static MemorySegment H5E_CANTFREE_g$segment() { return H5E_CANTFREE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFREE_g
     * }
     */
    public static long H5E_CANTFREE_g()
    {
        return H5E_CANTFREE_g$constants.SEGMENT.get(H5E_CANTFREE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTFREE_g
     * }
     */
    public static void H5E_CANTFREE_g(long varValue)
    {
        H5E_CANTFREE_g$constants.SEGMENT.set(H5E_CANTFREE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTGC_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTGC_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGC_g
     * }
     */
    public static OfLong H5E_CANTGC_g$layout() { return H5E_CANTGC_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGC_g
     * }
     */
    public static MemorySegment H5E_CANTGC_g$segment() { return H5E_CANTGC_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGC_g
     * }
     */
    public static long H5E_CANTGC_g()
    {
        return H5E_CANTGC_g$constants.SEGMENT.get(H5E_CANTGC_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGC_g
     * }
     */
    public static void H5E_CANTGC_g(long varValue)
    {
        H5E_CANTGC_g$constants.SEGMENT.set(H5E_CANTGC_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTGETSIZE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTGETSIZE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGETSIZE_g
     * }
     */
    public static OfLong H5E_CANTGETSIZE_g$layout() { return H5E_CANTGETSIZE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGETSIZE_g
     * }
     */
    public static MemorySegment H5E_CANTGETSIZE_g$segment() { return H5E_CANTGETSIZE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGETSIZE_g
     * }
     */
    public static long H5E_CANTGETSIZE_g()
    {
        return H5E_CANTGETSIZE_g$constants.SEGMENT.get(H5E_CANTGETSIZE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTGETSIZE_g
     * }
     */
    public static void H5E_CANTGETSIZE_g(long varValue)
    {
        H5E_CANTGETSIZE_g$constants.SEGMENT.set(H5E_CANTGETSIZE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTLOCK_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTLOCK_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLOCK_g
     * }
     */
    public static OfLong H5E_CANTLOCK_g$layout() { return H5E_CANTLOCK_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLOCK_g
     * }
     */
    public static MemorySegment H5E_CANTLOCK_g$segment() { return H5E_CANTLOCK_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLOCK_g
     * }
     */
    public static long H5E_CANTLOCK_g()
    {
        return H5E_CANTLOCK_g$constants.SEGMENT.get(H5E_CANTLOCK_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTLOCK_g
     * }
     */
    public static void H5E_CANTLOCK_g(long varValue)
    {
        H5E_CANTLOCK_g$constants.SEGMENT.set(H5E_CANTLOCK_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTUNLOCK_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTUNLOCK_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNLOCK_g
     * }
     */
    public static OfLong H5E_CANTUNLOCK_g$layout() { return H5E_CANTUNLOCK_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNLOCK_g
     * }
     */
    public static MemorySegment H5E_CANTUNLOCK_g$segment() { return H5E_CANTUNLOCK_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNLOCK_g
     * }
     */
    public static long H5E_CANTUNLOCK_g()
    {
        return H5E_CANTUNLOCK_g$constants.SEGMENT.get(H5E_CANTUNLOCK_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTUNLOCK_g
     * }
     */
    public static void H5E_CANTUNLOCK_g(long varValue)
    {
        H5E_CANTUNLOCK_g$constants.SEGMENT.set(H5E_CANTUNLOCK_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_NOSPACE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_NOSPACE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOSPACE_g
     * }
     */
    public static OfLong H5E_NOSPACE_g$layout() { return H5E_NOSPACE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOSPACE_g
     * }
     */
    public static MemorySegment H5E_NOSPACE_g$segment() { return H5E_NOSPACE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOSPACE_g
     * }
     */
    public static long H5E_NOSPACE_g()
    {
        return H5E_NOSPACE_g$constants.SEGMENT.get(H5E_NOSPACE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_NOSPACE_g
     * }
     */
    public static void H5E_NOSPACE_g(long varValue)
    {
        H5E_NOSPACE_g$constants.SEGMENT.set(H5E_NOSPACE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_OBJOPEN_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_OBJOPEN_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OBJOPEN_g
     * }
     */
    public static OfLong H5E_OBJOPEN_g$layout() { return H5E_OBJOPEN_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OBJOPEN_g
     * }
     */
    public static MemorySegment H5E_OBJOPEN_g$segment() { return H5E_OBJOPEN_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OBJOPEN_g
     * }
     */
    public static long H5E_OBJOPEN_g()
    {
        return H5E_OBJOPEN_g$constants.SEGMENT.get(H5E_OBJOPEN_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_OBJOPEN_g
     * }
     */
    public static void H5E_OBJOPEN_g(long varValue)
    {
        H5E_OBJOPEN_g$constants.SEGMENT.set(H5E_OBJOPEN_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_SYSERRSTR_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_SYSERRSTR_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SYSERRSTR_g
     * }
     */
    public static OfLong H5E_SYSERRSTR_g$layout() { return H5E_SYSERRSTR_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SYSERRSTR_g
     * }
     */
    public static MemorySegment H5E_SYSERRSTR_g$segment() { return H5E_SYSERRSTR_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SYSERRSTR_g
     * }
     */
    public static long H5E_SYSERRSTR_g()
    {
        return H5E_SYSERRSTR_g$constants.SEGMENT.get(H5E_SYSERRSTR_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_SYSERRSTR_g
     * }
     */
    public static void H5E_SYSERRSTR_g(long varValue)
    {
        H5E_SYSERRSTR_g$constants.SEGMENT.set(H5E_SYSERRSTR_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_BADSIZE_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_BADSIZE_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADSIZE_g
     * }
     */
    public static OfLong H5E_BADSIZE_g$layout() { return H5E_BADSIZE_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADSIZE_g
     * }
     */
    public static MemorySegment H5E_BADSIZE_g$segment() { return H5E_BADSIZE_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADSIZE_g
     * }
     */
    public static long H5E_BADSIZE_g()
    {
        return H5E_BADSIZE_g$constants.SEGMENT.get(H5E_BADSIZE_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_BADSIZE_g
     * }
     */
    public static void H5E_BADSIZE_g(long varValue)
    {
        H5E_BADSIZE_g$constants.SEGMENT.set(H5E_BADSIZE_g$constants.LAYOUT, 0L, varValue);
    }

    private static class H5E_CANTCONVERT_g$constants {
        public static final OfLong LAYOUT = hdf5_h.C_LONG;
        public static final MemorySegment SEGMENT =
            hdf5_h.findOrThrow("H5E_CANTCONVERT_g").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCONVERT_g
     * }
     */
    public static OfLong H5E_CANTCONVERT_g$layout() { return H5E_CANTCONVERT_g$constants.LAYOUT; }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCONVERT_g
     * }
     */
    public static MemorySegment H5E_CANTCONVERT_g$segment() { return H5E_CANTCONVERT_g$constants.SEGMENT; }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCONVERT_g
     * }
     */
    public static long H5E_CANTCONVERT_g()
    {
        return H5E_CANTCONVERT_g$constants.SEGMENT.get(H5E_CANTCONVERT_g$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern hid_t H5E_CANTCONVERT_g
     * }
     */
    public static void H5E_CANTCONVERT_g(long varValue)
    {
        H5E_CANTCONVERT_g$constants.SEGMENT.set(H5E_CANTCONVERT_g$constants.LAYOUT, 0L, varValue);
    }
    private static final int H5E_WALK_UPWARD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5E_direction_t.H5E_WALK_UPWARD = 0
     * }
     */
    public static int H5E_WALK_UPWARD() { return H5E_WALK_UPWARD; }
    private static final int H5E_WALK_DOWNWARD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5E_direction_t.H5E_WALK_DOWNWARD = 1
     * }
     */
    public static int H5E_WALK_DOWNWARD() { return H5E_WALK_DOWNWARD; }

    private static class H5Eregister_class {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eregister_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Eregister_class(const char *cls_name, const char *lib_name, const char *version)
     * }
     */
    public static FunctionDescriptor H5Eregister_class$descriptor() { return H5Eregister_class.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Eregister_class(const char *cls_name, const char *lib_name, const char *version)
     * }
     */
    public static MethodHandle H5Eregister_class$handle() { return H5Eregister_class.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Eregister_class(const char *cls_name, const char *lib_name, const char *version)
     * }
     */
    public static MemorySegment H5Eregister_class$address() { return H5Eregister_class.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Eregister_class(const char *cls_name, const char *lib_name, const char *version)
     * }
     */
    public static long H5Eregister_class(MemorySegment cls_name, MemorySegment lib_name,
                                         MemorySegment version)
    {
        var mh$ = H5Eregister_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eregister_class", cls_name, lib_name, version);
            }
            return (long)mh$.invokeExact(cls_name, lib_name, version);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eunregister_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eunregister_class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eunregister_class(hid_t class_id)
     * }
     */
    public static FunctionDescriptor H5Eunregister_class$descriptor() { return H5Eunregister_class.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eunregister_class(hid_t class_id)
     * }
     */
    public static MethodHandle H5Eunregister_class$handle() { return H5Eunregister_class.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eunregister_class(hid_t class_id)
     * }
     */
    public static MemorySegment H5Eunregister_class$address() { return H5Eunregister_class.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eunregister_class(hid_t class_id)
     * }
     */
    public static int H5Eunregister_class(long class_id)
    {
        var mh$ = H5Eunregister_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eunregister_class", class_id);
            }
            return (int)mh$.invokeExact(class_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eclose_msg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eclose_msg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eclose_msg(hid_t err_id)
     * }
     */
    public static FunctionDescriptor H5Eclose_msg$descriptor() { return H5Eclose_msg.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eclose_msg(hid_t err_id)
     * }
     */
    public static MethodHandle H5Eclose_msg$handle() { return H5Eclose_msg.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eclose_msg(hid_t err_id)
     * }
     */
    public static MemorySegment H5Eclose_msg$address() { return H5Eclose_msg.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eclose_msg(hid_t err_id)
     * }
     */
    public static int H5Eclose_msg(long err_id)
    {
        var mh$ = H5Eclose_msg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eclose_msg", err_id);
            }
            return (int)mh$.invokeExact(err_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ecreate_msg {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ecreate_msg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Ecreate_msg(hid_t cls, H5E_type_t msg_type, const char *msg)
     * }
     */
    public static FunctionDescriptor H5Ecreate_msg$descriptor() { return H5Ecreate_msg.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Ecreate_msg(hid_t cls, H5E_type_t msg_type, const char *msg)
     * }
     */
    public static MethodHandle H5Ecreate_msg$handle() { return H5Ecreate_msg.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Ecreate_msg(hid_t cls, H5E_type_t msg_type, const char *msg)
     * }
     */
    public static MemorySegment H5Ecreate_msg$address() { return H5Ecreate_msg.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Ecreate_msg(hid_t cls, H5E_type_t msg_type, const char *msg)
     * }
     */
    public static long H5Ecreate_msg(long cls, int msg_type, MemorySegment msg)
    {
        var mh$ = H5Ecreate_msg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ecreate_msg", cls, msg_type, msg);
            }
            return (long)mh$.invokeExact(cls, msg_type, msg);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ecreate_stack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ecreate_stack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Ecreate_stack()
     * }
     */
    public static FunctionDescriptor H5Ecreate_stack$descriptor() { return H5Ecreate_stack.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Ecreate_stack()
     * }
     */
    public static MethodHandle H5Ecreate_stack$handle() { return H5Ecreate_stack.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Ecreate_stack()
     * }
     */
    public static MemorySegment H5Ecreate_stack$address() { return H5Ecreate_stack.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Ecreate_stack()
     * }
     */
    public static long H5Ecreate_stack()
    {
        var mh$ = H5Ecreate_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ecreate_stack");
            }
            return (long)mh$.invokeExact();
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eget_current_stack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eget_current_stack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Eget_current_stack()
     * }
     */
    public static FunctionDescriptor H5Eget_current_stack$descriptor() { return H5Eget_current_stack.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Eget_current_stack()
     * }
     */
    public static MethodHandle H5Eget_current_stack$handle() { return H5Eget_current_stack.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Eget_current_stack()
     * }
     */
    public static MemorySegment H5Eget_current_stack$address() { return H5Eget_current_stack.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Eget_current_stack()
     * }
     */
    public static long H5Eget_current_stack()
    {
        var mh$ = H5Eget_current_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eget_current_stack");
            }
            return (long)mh$.invokeExact();
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eappend_stack {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_BOOL);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eappend_stack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eappend_stack(hid_t dst_stack_id, hid_t src_stack_id, hbool_t close_source_stack)
     * }
     */
    public static FunctionDescriptor H5Eappend_stack$descriptor() { return H5Eappend_stack.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eappend_stack(hid_t dst_stack_id, hid_t src_stack_id, hbool_t close_source_stack)
     * }
     */
    public static MethodHandle H5Eappend_stack$handle() { return H5Eappend_stack.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eappend_stack(hid_t dst_stack_id, hid_t src_stack_id, hbool_t close_source_stack)
     * }
     */
    public static MemorySegment H5Eappend_stack$address() { return H5Eappend_stack.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eappend_stack(hid_t dst_stack_id, hid_t src_stack_id, hbool_t close_source_stack)
     * }
     */
    public static int H5Eappend_stack(long dst_stack_id, long src_stack_id, boolean close_source_stack)
    {
        var mh$ = H5Eappend_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eappend_stack", dst_stack_id, src_stack_id, close_source_stack);
            }
            return (int)mh$.invokeExact(dst_stack_id, src_stack_id, close_source_stack);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eis_paused {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eis_paused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eis_paused(hid_t stack_id, hbool_t *is_paused)
     * }
     */
    public static FunctionDescriptor H5Eis_paused$descriptor() { return H5Eis_paused.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eis_paused(hid_t stack_id, hbool_t *is_paused)
     * }
     */
    public static MethodHandle H5Eis_paused$handle() { return H5Eis_paused.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eis_paused(hid_t stack_id, hbool_t *is_paused)
     * }
     */
    public static MemorySegment H5Eis_paused$address() { return H5Eis_paused.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eis_paused(hid_t stack_id, hbool_t *is_paused)
     * }
     */
    public static int H5Eis_paused(long stack_id, MemorySegment is_paused)
    {
        var mh$ = H5Eis_paused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eis_paused", stack_id, is_paused);
            }
            return (int)mh$.invokeExact(stack_id, is_paused);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Epause_stack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Epause_stack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Epause_stack(hid_t stack_id)
     * }
     */
    public static FunctionDescriptor H5Epause_stack$descriptor() { return H5Epause_stack.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Epause_stack(hid_t stack_id)
     * }
     */
    public static MethodHandle H5Epause_stack$handle() { return H5Epause_stack.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Epause_stack(hid_t stack_id)
     * }
     */
    public static MemorySegment H5Epause_stack$address() { return H5Epause_stack.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Epause_stack(hid_t stack_id)
     * }
     */
    public static int H5Epause_stack(long stack_id)
    {
        var mh$ = H5Epause_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Epause_stack", stack_id);
            }
            return (int)mh$.invokeExact(stack_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eresume_stack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eresume_stack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eresume_stack(hid_t stack_id)
     * }
     */
    public static FunctionDescriptor H5Eresume_stack$descriptor() { return H5Eresume_stack.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eresume_stack(hid_t stack_id)
     * }
     */
    public static MethodHandle H5Eresume_stack$handle() { return H5Eresume_stack.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eresume_stack(hid_t stack_id)
     * }
     */
    public static MemorySegment H5Eresume_stack$address() { return H5Eresume_stack.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eresume_stack(hid_t stack_id)
     * }
     */
    public static int H5Eresume_stack(long stack_id)
    {
        var mh$ = H5Eresume_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eresume_stack", stack_id);
            }
            return (int)mh$.invokeExact(stack_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eclose_stack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eclose_stack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eclose_stack(hid_t stack_id)
     * }
     */
    public static FunctionDescriptor H5Eclose_stack$descriptor() { return H5Eclose_stack.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eclose_stack(hid_t stack_id)
     * }
     */
    public static MethodHandle H5Eclose_stack$handle() { return H5Eclose_stack.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eclose_stack(hid_t stack_id)
     * }
     */
    public static MemorySegment H5Eclose_stack$address() { return H5Eclose_stack.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eclose_stack(hid_t stack_id)
     * }
     */
    public static int H5Eclose_stack(long stack_id)
    {
        var mh$ = H5Eclose_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eclose_stack", stack_id);
            }
            return (int)mh$.invokeExact(stack_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eget_class_name {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eget_class_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Eget_class_name(hid_t class_id, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor H5Eget_class_name$descriptor() { return H5Eget_class_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Eget_class_name(hid_t class_id, char *name, size_t size)
     * }
     */
    public static MethodHandle H5Eget_class_name$handle() { return H5Eget_class_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Eget_class_name(hid_t class_id, char *name, size_t size)
     * }
     */
    public static MemorySegment H5Eget_class_name$address() { return H5Eget_class_name.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Eget_class_name(hid_t class_id, char *name, size_t size)
     * }
     */
    public static long H5Eget_class_name(long class_id, MemorySegment name, long size)
    {
        var mh$ = H5Eget_class_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eget_class_name", class_id, name, size);
            }
            return (long)mh$.invokeExact(class_id, name, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eset_current_stack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eset_current_stack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eset_current_stack(hid_t err_stack_id)
     * }
     */
    public static FunctionDescriptor H5Eset_current_stack$descriptor() { return H5Eset_current_stack.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eset_current_stack(hid_t err_stack_id)
     * }
     */
    public static MethodHandle H5Eset_current_stack$handle() { return H5Eset_current_stack.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eset_current_stack(hid_t err_stack_id)
     * }
     */
    public static MemorySegment H5Eset_current_stack$address() { return H5Eset_current_stack.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eset_current_stack(hid_t err_stack_id)
     * }
     */
    public static int H5Eset_current_stack(long err_stack_id)
    {
        var mh$ = H5Eset_current_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eset_current_stack", err_stack_id);
            }
            return (int)mh$.invokeExact(err_stack_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * herr_t H5Epush2(hid_t err_stack, const char *file, const char *func, unsigned int line, hid_t cls_id,
     * hid_t maj_id, hid_t min_id, const char *msg, ...)
     * }
     */
    public static class H5Epush2 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG,
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);
        private static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Epush2");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private H5Epush2(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader)
        {
            this.handle     = handle;
            this.descriptor = descriptor;
            this.spreader   = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * herr_t H5Epush2(hid_t err_stack, const char *file, const char *func, unsigned int line, hid_t
         * cls_id, hid_t maj_id, hid_t min_id, const char *msg, ...)
         * }
         */
        public static H5Epush2 makeInvoker(MemoryLayout... layouts)
        {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$       = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$                  = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$            = mh$.asSpreader(Object[].class, layouts.length);
            return new H5Epush2(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() { return ADDR; }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() { return handle; }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() { return descriptor; }

        public int apply(long err_stack, MemorySegment file, MemorySegment func, int line, long cls_id,
                         long maj_id, long min_id, MemorySegment msg, Object... x8)
        {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("H5Epush2", err_stack, file, func, line, cls_id, maj_id, min_id, msg, x8);
                }
                return (int)spreader.invokeExact(err_stack, file, func, line, cls_id, maj_id, min_id, msg,
                                                 x8);
            }
            catch (IllegalArgumentException | ClassCastException ex$) {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            }
            catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class H5Epop {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Epop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Epop(hid_t err_stack, size_t count)
     * }
     */
    public static FunctionDescriptor H5Epop$descriptor() { return H5Epop.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Epop(hid_t err_stack, size_t count)
     * }
     */
    public static MethodHandle H5Epop$handle() { return H5Epop.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Epop(hid_t err_stack, size_t count)
     * }
     */
    public static MemorySegment H5Epop$address() { return H5Epop.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Epop(hid_t err_stack, size_t count)
     * }
     */
    public static int H5Epop(long err_stack, long count)
    {
        var mh$ = H5Epop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Epop", err_stack, count);
            }
            return (int)mh$.invokeExact(err_stack, count);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eprint2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eprint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eprint2(hid_t err_stack, FILE *stream)
     * }
     */
    public static FunctionDescriptor H5Eprint2$descriptor() { return H5Eprint2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eprint2(hid_t err_stack, FILE *stream)
     * }
     */
    public static MethodHandle H5Eprint2$handle() { return H5Eprint2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eprint2(hid_t err_stack, FILE *stream)
     * }
     */
    public static MemorySegment H5Eprint2$address() { return H5Eprint2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eprint2(hid_t err_stack, FILE *stream)
     * }
     */
    public static int H5Eprint2(long err_stack, MemorySegment stream)
    {
        var mh$ = H5Eprint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eprint2", err_stack, stream);
            }
            return (int)mh$.invokeExact(err_stack, stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ewalk2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ewalk2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Ewalk2(hid_t err_stack, H5E_direction_t direction, H5E_walk2_t func, void *client_data)
     * }
     */
    public static FunctionDescriptor H5Ewalk2$descriptor() { return H5Ewalk2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Ewalk2(hid_t err_stack, H5E_direction_t direction, H5E_walk2_t func, void *client_data)
     * }
     */
    public static MethodHandle H5Ewalk2$handle() { return H5Ewalk2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Ewalk2(hid_t err_stack, H5E_direction_t direction, H5E_walk2_t func, void *client_data)
     * }
     */
    public static MemorySegment H5Ewalk2$address() { return H5Ewalk2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Ewalk2(hid_t err_stack, H5E_direction_t direction, H5E_walk2_t func, void *client_data)
     * }
     */
    public static int H5Ewalk2(long err_stack, int direction, MemorySegment func, MemorySegment client_data)
    {
        var mh$ = H5Ewalk2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ewalk2", err_stack, direction, func, client_data);
            }
            return (int)mh$.invokeExact(err_stack, direction, func, client_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eget_auto2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eget_auto2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eget_auto2(hid_t estack_id, H5E_auto2_t *func, void **client_data)
     * }
     */
    public static FunctionDescriptor H5Eget_auto2$descriptor() { return H5Eget_auto2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eget_auto2(hid_t estack_id, H5E_auto2_t *func, void **client_data)
     * }
     */
    public static MethodHandle H5Eget_auto2$handle() { return H5Eget_auto2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eget_auto2(hid_t estack_id, H5E_auto2_t *func, void **client_data)
     * }
     */
    public static MemorySegment H5Eget_auto2$address() { return H5Eget_auto2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eget_auto2(hid_t estack_id, H5E_auto2_t *func, void **client_data)
     * }
     */
    public static int H5Eget_auto2(long estack_id, MemorySegment func, MemorySegment client_data)
    {
        var mh$ = H5Eget_auto2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eget_auto2", estack_id, func, client_data);
            }
            return (int)mh$.invokeExact(estack_id, func, client_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eset_auto2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eset_auto2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eset_auto2(hid_t estack_id, H5E_auto2_t func, void *client_data)
     * }
     */
    public static FunctionDescriptor H5Eset_auto2$descriptor() { return H5Eset_auto2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eset_auto2(hid_t estack_id, H5E_auto2_t func, void *client_data)
     * }
     */
    public static MethodHandle H5Eset_auto2$handle() { return H5Eset_auto2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eset_auto2(hid_t estack_id, H5E_auto2_t func, void *client_data)
     * }
     */
    public static MemorySegment H5Eset_auto2$address() { return H5Eset_auto2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eset_auto2(hid_t estack_id, H5E_auto2_t func, void *client_data)
     * }
     */
    public static int H5Eset_auto2(long estack_id, MemorySegment func, MemorySegment client_data)
    {
        var mh$ = H5Eset_auto2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eset_auto2", estack_id, func, client_data);
            }
            return (int)mh$.invokeExact(estack_id, func, client_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eclear2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eclear2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eclear2(hid_t err_stack)
     * }
     */
    public static FunctionDescriptor H5Eclear2$descriptor() { return H5Eclear2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eclear2(hid_t err_stack)
     * }
     */
    public static MethodHandle H5Eclear2$handle() { return H5Eclear2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eclear2(hid_t err_stack)
     * }
     */
    public static MemorySegment H5Eclear2$address() { return H5Eclear2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eclear2(hid_t err_stack)
     * }
     */
    public static int H5Eclear2(long err_stack)
    {
        var mh$ = H5Eclear2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eclear2", err_stack);
            }
            return (int)mh$.invokeExact(err_stack);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eauto_is_v2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eauto_is_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eauto_is_v2(hid_t err_stack, unsigned int *is_stack)
     * }
     */
    public static FunctionDescriptor H5Eauto_is_v2$descriptor() { return H5Eauto_is_v2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eauto_is_v2(hid_t err_stack, unsigned int *is_stack)
     * }
     */
    public static MethodHandle H5Eauto_is_v2$handle() { return H5Eauto_is_v2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eauto_is_v2(hid_t err_stack, unsigned int *is_stack)
     * }
     */
    public static MemorySegment H5Eauto_is_v2$address() { return H5Eauto_is_v2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eauto_is_v2(hid_t err_stack, unsigned int *is_stack)
     * }
     */
    public static int H5Eauto_is_v2(long err_stack, MemorySegment is_stack)
    {
        var mh$ = H5Eauto_is_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eauto_is_v2", err_stack, is_stack);
            }
            return (int)mh$.invokeExact(err_stack, is_stack);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eget_msg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eget_msg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Eget_msg(hid_t msg_id, H5E_type_t *type, char *msg, size_t size)
     * }
     */
    public static FunctionDescriptor H5Eget_msg$descriptor() { return H5Eget_msg.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Eget_msg(hid_t msg_id, H5E_type_t *type, char *msg, size_t size)
     * }
     */
    public static MethodHandle H5Eget_msg$handle() { return H5Eget_msg.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Eget_msg(hid_t msg_id, H5E_type_t *type, char *msg, size_t size)
     * }
     */
    public static MemorySegment H5Eget_msg$address() { return H5Eget_msg.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Eget_msg(hid_t msg_id, H5E_type_t *type, char *msg, size_t size)
     * }
     */
    public static long H5Eget_msg(long msg_id, MemorySegment type, MemorySegment msg, long size)
    {
        var mh$ = H5Eget_msg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eget_msg", msg_id, type, msg, size);
            }
            return (long)mh$.invokeExact(msg_id, type, msg, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eget_num {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eget_num");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Eget_num(hid_t error_stack_id)
     * }
     */
    public static FunctionDescriptor H5Eget_num$descriptor() { return H5Eget_num.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Eget_num(hid_t error_stack_id)
     * }
     */
    public static MethodHandle H5Eget_num$handle() { return H5Eget_num.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Eget_num(hid_t error_stack_id)
     * }
     */
    public static MemorySegment H5Eget_num$address() { return H5Eget_num.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Eget_num(hid_t error_stack_id)
     * }
     */
    public static long H5Eget_num(long error_stack_id)
    {
        var mh$ = H5Eget_num.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eget_num", error_stack_id);
            }
            return (long)mh$.invokeExact(error_stack_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef hid_t H5E_major_t
     * }
     */
    public static final OfLong H5E_major_t = hdf5_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef hid_t H5E_minor_t
     * }
     */
    public static final OfLong H5E_minor_t = hdf5_h.C_LONG;

    private static class H5Eclear1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eclear1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eclear1()
     * }
     */
    public static FunctionDescriptor H5Eclear1$descriptor() { return H5Eclear1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eclear1()
     * }
     */
    public static MethodHandle H5Eclear1$handle() { return H5Eclear1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eclear1()
     * }
     */
    public static MemorySegment H5Eclear1$address() { return H5Eclear1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eclear1()
     * }
     */
    public static int H5Eclear1()
    {
        var mh$ = H5Eclear1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eclear1");
            }
            return (int)mh$.invokeExact();
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eget_auto1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eget_auto1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eget_auto1(H5E_auto1_t *func, void **client_data)
     * }
     */
    public static FunctionDescriptor H5Eget_auto1$descriptor() { return H5Eget_auto1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eget_auto1(H5E_auto1_t *func, void **client_data)
     * }
     */
    public static MethodHandle H5Eget_auto1$handle() { return H5Eget_auto1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eget_auto1(H5E_auto1_t *func, void **client_data)
     * }
     */
    public static MemorySegment H5Eget_auto1$address() { return H5Eget_auto1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eget_auto1(H5E_auto1_t *func, void **client_data)
     * }
     */
    public static int H5Eget_auto1(MemorySegment func, MemorySegment client_data)
    {
        var mh$ = H5Eget_auto1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eget_auto1", func, client_data);
            }
            return (int)mh$.invokeExact(func, client_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Epush1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Epush1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Epush1(const char *file, const char *func, unsigned int line, H5E_major_t maj, H5E_minor_t
     * min, const char *str)
     * }
     */
    public static FunctionDescriptor H5Epush1$descriptor() { return H5Epush1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Epush1(const char *file, const char *func, unsigned int line, H5E_major_t maj, H5E_minor_t
     * min, const char *str)
     * }
     */
    public static MethodHandle H5Epush1$handle() { return H5Epush1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Epush1(const char *file, const char *func, unsigned int line, H5E_major_t maj, H5E_minor_t
     * min, const char *str)
     * }
     */
    public static MemorySegment H5Epush1$address() { return H5Epush1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Epush1(const char *file, const char *func, unsigned int line, H5E_major_t maj, H5E_minor_t
     * min, const char *str)
     * }
     */
    public static int H5Epush1(MemorySegment file, MemorySegment func, int line, long maj, long min,
                               MemorySegment str)
    {
        var mh$ = H5Epush1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Epush1", file, func, line, maj, min, str);
            }
            return (int)mh$.invokeExact(file, func, line, maj, min, str);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eprint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eprint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eprint1(FILE *stream)
     * }
     */
    public static FunctionDescriptor H5Eprint1$descriptor() { return H5Eprint1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eprint1(FILE *stream)
     * }
     */
    public static MethodHandle H5Eprint1$handle() { return H5Eprint1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eprint1(FILE *stream)
     * }
     */
    public static MemorySegment H5Eprint1$address() { return H5Eprint1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eprint1(FILE *stream)
     * }
     */
    public static int H5Eprint1(MemorySegment stream)
    {
        var mh$ = H5Eprint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eprint1", stream);
            }
            return (int)mh$.invokeExact(stream);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eset_auto1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eset_auto1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Eset_auto1(H5E_auto1_t func, void *client_data)
     * }
     */
    public static FunctionDescriptor H5Eset_auto1$descriptor() { return H5Eset_auto1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Eset_auto1(H5E_auto1_t func, void *client_data)
     * }
     */
    public static MethodHandle H5Eset_auto1$handle() { return H5Eset_auto1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Eset_auto1(H5E_auto1_t func, void *client_data)
     * }
     */
    public static MemorySegment H5Eset_auto1$address() { return H5Eset_auto1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Eset_auto1(H5E_auto1_t func, void *client_data)
     * }
     */
    public static int H5Eset_auto1(MemorySegment func, MemorySegment client_data)
    {
        var mh$ = H5Eset_auto1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eset_auto1", func, client_data);
            }
            return (int)mh$.invokeExact(func, client_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ewalk1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ewalk1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Ewalk1(H5E_direction_t direction, H5E_walk1_t func, void *client_data)
     * }
     */
    public static FunctionDescriptor H5Ewalk1$descriptor() { return H5Ewalk1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Ewalk1(H5E_direction_t direction, H5E_walk1_t func, void *client_data)
     * }
     */
    public static MethodHandle H5Ewalk1$handle() { return H5Ewalk1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Ewalk1(H5E_direction_t direction, H5E_walk1_t func, void *client_data)
     * }
     */
    public static MemorySegment H5Ewalk1$address() { return H5Ewalk1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Ewalk1(H5E_direction_t direction, H5E_walk1_t func, void *client_data)
     * }
     */
    public static int H5Ewalk1(int direction, MemorySegment func, MemorySegment client_data)
    {
        var mh$ = H5Ewalk1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ewalk1", direction, func, client_data);
            }
            return (int)mh$.invokeExact(direction, func, client_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eget_major {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eget_major");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *H5Eget_major(H5E_major_t maj)
     * }
     */
    public static FunctionDescriptor H5Eget_major$descriptor() { return H5Eget_major.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *H5Eget_major(H5E_major_t maj)
     * }
     */
    public static MethodHandle H5Eget_major$handle() { return H5Eget_major.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *H5Eget_major(H5E_major_t maj)
     * }
     */
    public static MemorySegment H5Eget_major$address() { return H5Eget_major.ADDR; }

    /**
     * {@snippet lang=c :
     * char *H5Eget_major(H5E_major_t maj)
     * }
     */
    public static MemorySegment H5Eget_major(long maj)
    {
        var mh$ = H5Eget_major.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eget_major", maj);
            }
            return (MemorySegment)mh$.invokeExact(maj);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Eget_minor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Eget_minor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *H5Eget_minor(H5E_minor_t min)
     * }
     */
    public static FunctionDescriptor H5Eget_minor$descriptor() { return H5Eget_minor.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *H5Eget_minor(H5E_minor_t min)
     * }
     */
    public static MethodHandle H5Eget_minor$handle() { return H5Eget_minor.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *H5Eget_minor(H5E_minor_t min)
     * }
     */
    public static MemorySegment H5Eget_minor$address() { return H5Eget_minor.ADDR; }

    /**
     * {@snippet lang=c :
     * char *H5Eget_minor(H5E_minor_t min)
     * }
     */
    public static MemorySegment H5Eget_minor(long min)
    {
        var mh$ = H5Eget_minor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Eget_minor", min);
            }
            return (MemorySegment)mh$.invokeExact(min);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5ES_STATUS_IN_PROGRESS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5ES_status_t.H5ES_STATUS_IN_PROGRESS = 0
     * }
     */
    public static int H5ES_STATUS_IN_PROGRESS() { return H5ES_STATUS_IN_PROGRESS; }
    private static final int H5ES_STATUS_SUCCEED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5ES_status_t.H5ES_STATUS_SUCCEED = 1
     * }
     */
    public static int H5ES_STATUS_SUCCEED() { return H5ES_STATUS_SUCCEED; }
    private static final int H5ES_STATUS_CANCELED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5ES_status_t.H5ES_STATUS_CANCELED = 2
     * }
     */
    public static int H5ES_STATUS_CANCELED() { return H5ES_STATUS_CANCELED; }
    private static final int H5ES_STATUS_FAIL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5ES_status_t.H5ES_STATUS_FAIL = 3
     * }
     */
    public static int H5ES_STATUS_FAIL() { return H5ES_STATUS_FAIL; }

    private static class H5EScreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5EScreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5EScreate()
     * }
     */
    public static FunctionDescriptor H5EScreate$descriptor() { return H5EScreate.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5EScreate()
     * }
     */
    public static MethodHandle H5EScreate$handle() { return H5EScreate.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5EScreate()
     * }
     */
    public static MemorySegment H5EScreate$address() { return H5EScreate.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5EScreate()
     * }
     */
    public static long H5EScreate()
    {
        var mh$ = H5EScreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5EScreate");
            }
            return (long)mh$.invokeExact();
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5ESwait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5ESwait");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5ESwait(hid_t es_id, uint64_t timeout, size_t *num_in_progress, hbool_t *err_occurred)
     * }
     */
    public static FunctionDescriptor H5ESwait$descriptor() { return H5ESwait.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5ESwait(hid_t es_id, uint64_t timeout, size_t *num_in_progress, hbool_t *err_occurred)
     * }
     */
    public static MethodHandle H5ESwait$handle() { return H5ESwait.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5ESwait(hid_t es_id, uint64_t timeout, size_t *num_in_progress, hbool_t *err_occurred)
     * }
     */
    public static MemorySegment H5ESwait$address() { return H5ESwait.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5ESwait(hid_t es_id, uint64_t timeout, size_t *num_in_progress, hbool_t *err_occurred)
     * }
     */
    public static int H5ESwait(long es_id, long timeout, MemorySegment num_in_progress,
                               MemorySegment err_occurred)
    {
        var mh$ = H5ESwait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5ESwait", es_id, timeout, num_in_progress, err_occurred);
            }
            return (int)mh$.invokeExact(es_id, timeout, num_in_progress, err_occurred);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5EScancel {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5EScancel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5EScancel(hid_t es_id, size_t *num_not_canceled, hbool_t *err_occurred)
     * }
     */
    public static FunctionDescriptor H5EScancel$descriptor() { return H5EScancel.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5EScancel(hid_t es_id, size_t *num_not_canceled, hbool_t *err_occurred)
     * }
     */
    public static MethodHandle H5EScancel$handle() { return H5EScancel.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5EScancel(hid_t es_id, size_t *num_not_canceled, hbool_t *err_occurred)
     * }
     */
    public static MemorySegment H5EScancel$address() { return H5EScancel.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5EScancel(hid_t es_id, size_t *num_not_canceled, hbool_t *err_occurred)
     * }
     */
    public static int H5EScancel(long es_id, MemorySegment num_not_canceled, MemorySegment err_occurred)
    {
        var mh$ = H5EScancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5EScancel", es_id, num_not_canceled, err_occurred);
            }
            return (int)mh$.invokeExact(es_id, num_not_canceled, err_occurred);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5ESget_count {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5ESget_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5ESget_count(hid_t es_id, size_t *count)
     * }
     */
    public static FunctionDescriptor H5ESget_count$descriptor() { return H5ESget_count.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5ESget_count(hid_t es_id, size_t *count)
     * }
     */
    public static MethodHandle H5ESget_count$handle() { return H5ESget_count.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5ESget_count(hid_t es_id, size_t *count)
     * }
     */
    public static MemorySegment H5ESget_count$address() { return H5ESget_count.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5ESget_count(hid_t es_id, size_t *count)
     * }
     */
    public static int H5ESget_count(long es_id, MemorySegment count)
    {
        var mh$ = H5ESget_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5ESget_count", es_id, count);
            }
            return (int)mh$.invokeExact(es_id, count);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5ESget_op_counter {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5ESget_op_counter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5ESget_op_counter(hid_t es_id, uint64_t *counter)
     * }
     */
    public static FunctionDescriptor H5ESget_op_counter$descriptor() { return H5ESget_op_counter.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5ESget_op_counter(hid_t es_id, uint64_t *counter)
     * }
     */
    public static MethodHandle H5ESget_op_counter$handle() { return H5ESget_op_counter.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5ESget_op_counter(hid_t es_id, uint64_t *counter)
     * }
     */
    public static MemorySegment H5ESget_op_counter$address() { return H5ESget_op_counter.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5ESget_op_counter(hid_t es_id, uint64_t *counter)
     * }
     */
    public static int H5ESget_op_counter(long es_id, MemorySegment counter)
    {
        var mh$ = H5ESget_op_counter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5ESget_op_counter", es_id, counter);
            }
            return (int)mh$.invokeExact(es_id, counter);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5ESget_err_status {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5ESget_err_status");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5ESget_err_status(hid_t es_id, hbool_t *err_occurred)
     * }
     */
    public static FunctionDescriptor H5ESget_err_status$descriptor() { return H5ESget_err_status.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5ESget_err_status(hid_t es_id, hbool_t *err_occurred)
     * }
     */
    public static MethodHandle H5ESget_err_status$handle() { return H5ESget_err_status.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5ESget_err_status(hid_t es_id, hbool_t *err_occurred)
     * }
     */
    public static MemorySegment H5ESget_err_status$address() { return H5ESget_err_status.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5ESget_err_status(hid_t es_id, hbool_t *err_occurred)
     * }
     */
    public static int H5ESget_err_status(long es_id, MemorySegment err_occurred)
    {
        var mh$ = H5ESget_err_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5ESget_err_status", es_id, err_occurred);
            }
            return (int)mh$.invokeExact(es_id, err_occurred);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5ESget_err_count {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5ESget_err_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5ESget_err_count(hid_t es_id, size_t *num_errs)
     * }
     */
    public static FunctionDescriptor H5ESget_err_count$descriptor() { return H5ESget_err_count.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5ESget_err_count(hid_t es_id, size_t *num_errs)
     * }
     */
    public static MethodHandle H5ESget_err_count$handle() { return H5ESget_err_count.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5ESget_err_count(hid_t es_id, size_t *num_errs)
     * }
     */
    public static MemorySegment H5ESget_err_count$address() { return H5ESget_err_count.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5ESget_err_count(hid_t es_id, size_t *num_errs)
     * }
     */
    public static int H5ESget_err_count(long es_id, MemorySegment num_errs)
    {
        var mh$ = H5ESget_err_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5ESget_err_count", es_id, num_errs);
            }
            return (int)mh$.invokeExact(es_id, num_errs);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5ESget_err_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5ESget_err_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5ESget_err_info(hid_t es_id, size_t num_err_info, H5ES_err_info_t err_info[], size_t
     * *err_cleared)
     * }
     */
    public static FunctionDescriptor H5ESget_err_info$descriptor() { return H5ESget_err_info.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5ESget_err_info(hid_t es_id, size_t num_err_info, H5ES_err_info_t err_info[], size_t
     * *err_cleared)
     * }
     */
    public static MethodHandle H5ESget_err_info$handle() { return H5ESget_err_info.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5ESget_err_info(hid_t es_id, size_t num_err_info, H5ES_err_info_t err_info[], size_t
     * *err_cleared)
     * }
     */
    public static MemorySegment H5ESget_err_info$address() { return H5ESget_err_info.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5ESget_err_info(hid_t es_id, size_t num_err_info, H5ES_err_info_t err_info[], size_t
     * *err_cleared)
     * }
     */
    public static int H5ESget_err_info(long es_id, long num_err_info, MemorySegment err_info,
                                       MemorySegment err_cleared)
    {
        var mh$ = H5ESget_err_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5ESget_err_info", es_id, num_err_info, err_info, err_cleared);
            }
            return (int)mh$.invokeExact(es_id, num_err_info, err_info, err_cleared);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5ESfree_err_info {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5ESfree_err_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5ESfree_err_info(size_t num_err_info, H5ES_err_info_t err_info[])
     * }
     */
    public static FunctionDescriptor H5ESfree_err_info$descriptor() { return H5ESfree_err_info.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5ESfree_err_info(size_t num_err_info, H5ES_err_info_t err_info[])
     * }
     */
    public static MethodHandle H5ESfree_err_info$handle() { return H5ESfree_err_info.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5ESfree_err_info(size_t num_err_info, H5ES_err_info_t err_info[])
     * }
     */
    public static MemorySegment H5ESfree_err_info$address() { return H5ESfree_err_info.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5ESfree_err_info(size_t num_err_info, H5ES_err_info_t err_info[])
     * }
     */
    public static int H5ESfree_err_info(long num_err_info, MemorySegment err_info)
    {
        var mh$ = H5ESfree_err_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5ESfree_err_info", num_err_info, err_info);
            }
            return (int)mh$.invokeExact(num_err_info, err_info);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5ESregister_insert_func {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5ESregister_insert_func");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5ESregister_insert_func(hid_t es_id, H5ES_event_insert_func_t func, void *ctx)
     * }
     */
    public static FunctionDescriptor H5ESregister_insert_func$descriptor()
    {
        return H5ESregister_insert_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5ESregister_insert_func(hid_t es_id, H5ES_event_insert_func_t func, void *ctx)
     * }
     */
    public static MethodHandle H5ESregister_insert_func$handle() { return H5ESregister_insert_func.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5ESregister_insert_func(hid_t es_id, H5ES_event_insert_func_t func, void *ctx)
     * }
     */
    public static MemorySegment H5ESregister_insert_func$address() { return H5ESregister_insert_func.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5ESregister_insert_func(hid_t es_id, H5ES_event_insert_func_t func, void *ctx)
     * }
     */
    public static int H5ESregister_insert_func(long es_id, MemorySegment func, MemorySegment ctx)
    {
        var mh$ = H5ESregister_insert_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5ESregister_insert_func", es_id, func, ctx);
            }
            return (int)mh$.invokeExact(es_id, func, ctx);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5ESregister_complete_func {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5ESregister_complete_func");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5ESregister_complete_func(hid_t es_id, H5ES_event_complete_func_t func, void *ctx)
     * }
     */
    public static FunctionDescriptor H5ESregister_complete_func$descriptor()
    {
        return H5ESregister_complete_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5ESregister_complete_func(hid_t es_id, H5ES_event_complete_func_t func, void *ctx)
     * }
     */
    public static MethodHandle H5ESregister_complete_func$handle()
    {
        return H5ESregister_complete_func.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5ESregister_complete_func(hid_t es_id, H5ES_event_complete_func_t func, void *ctx)
     * }
     */
    public static MemorySegment H5ESregister_complete_func$address()
    {
        return H5ESregister_complete_func.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5ESregister_complete_func(hid_t es_id, H5ES_event_complete_func_t func, void *ctx)
     * }
     */
    public static int H5ESregister_complete_func(long es_id, MemorySegment func, MemorySegment ctx)
    {
        var mh$ = H5ESregister_complete_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5ESregister_complete_func", es_id, func, ctx);
            }
            return (int)mh$.invokeExact(es_id, func, ctx);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5ESclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5ESclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5ESclose(hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5ESclose$descriptor() { return H5ESclose.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5ESclose(hid_t es_id)
     * }
     */
    public static MethodHandle H5ESclose$handle() { return H5ESclose.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5ESclose(hid_t es_id)
     * }
     */
    public static MemorySegment H5ESclose$address() { return H5ESclose.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5ESclose(hid_t es_id)
     * }
     */
    public static int H5ESclose(long es_id)
    {
        var mh$ = H5ESclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5ESclose", es_id);
            }
            return (int)mh$.invokeExact(es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5F_SCOPE_LOCAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5F_scope_t.H5F_SCOPE_LOCAL = 0
     * }
     */
    public static int H5F_SCOPE_LOCAL() { return H5F_SCOPE_LOCAL; }
    private static final int H5F_SCOPE_GLOBAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5F_scope_t.H5F_SCOPE_GLOBAL = 1
     * }
     */
    public static int H5F_SCOPE_GLOBAL() { return H5F_SCOPE_GLOBAL; }
    private static final int H5F_CLOSE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5F_close_degree_t.H5F_CLOSE_DEFAULT = 0
     * }
     */
    public static int H5F_CLOSE_DEFAULT() { return H5F_CLOSE_DEFAULT; }
    private static final int H5F_CLOSE_WEAK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5F_close_degree_t.H5F_CLOSE_WEAK = 1
     * }
     */
    public static int H5F_CLOSE_WEAK() { return H5F_CLOSE_WEAK; }
    private static final int H5F_CLOSE_SEMI = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5F_close_degree_t.H5F_CLOSE_SEMI = 2
     * }
     */
    public static int H5F_CLOSE_SEMI() { return H5F_CLOSE_SEMI; }
    private static final int H5F_CLOSE_STRONG = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5F_close_degree_t.H5F_CLOSE_STRONG = 3
     * }
     */
    public static int H5F_CLOSE_STRONG() { return H5F_CLOSE_STRONG; }
    private static final int H5FD_MEM_NOLIST = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5F_mem_t.H5FD_MEM_NOLIST = -1
     * }
     */
    public static int H5FD_MEM_NOLIST() { return H5FD_MEM_NOLIST; }
    private static final int H5FD_MEM_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5F_mem_t.H5FD_MEM_DEFAULT = 0
     * }
     */
    public static int H5FD_MEM_DEFAULT() { return H5FD_MEM_DEFAULT; }
    private static final int H5FD_MEM_SUPER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5F_mem_t.H5FD_MEM_SUPER = 1
     * }
     */
    public static int H5FD_MEM_SUPER() { return H5FD_MEM_SUPER; }
    private static final int H5FD_MEM_BTREE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5F_mem_t.H5FD_MEM_BTREE = 2
     * }
     */
    public static int H5FD_MEM_BTREE() { return H5FD_MEM_BTREE; }
    private static final int H5FD_MEM_DRAW = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5F_mem_t.H5FD_MEM_DRAW = 3
     * }
     */
    public static int H5FD_MEM_DRAW() { return H5FD_MEM_DRAW; }
    private static final int H5FD_MEM_GHEAP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5F_mem_t.H5FD_MEM_GHEAP = 4
     * }
     */
    public static int H5FD_MEM_GHEAP() { return H5FD_MEM_GHEAP; }
    private static final int H5FD_MEM_LHEAP = (int)5L;
    /**
     * {@snippet lang=c :
     * enum H5F_mem_t.H5FD_MEM_LHEAP = 5
     * }
     */
    public static int H5FD_MEM_LHEAP() { return H5FD_MEM_LHEAP; }
    private static final int H5FD_MEM_OHDR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum H5F_mem_t.H5FD_MEM_OHDR = 6
     * }
     */
    public static int H5FD_MEM_OHDR() { return H5FD_MEM_OHDR; }
    private static final int H5FD_MEM_NTYPES = (int)7L;
    /**
     * {@snippet lang=c :
     * enum H5F_mem_t.H5FD_MEM_NTYPES = 7
     * }
     */
    public static int H5FD_MEM_NTYPES() { return H5FD_MEM_NTYPES; }
    private static final int H5F_LIBVER_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5F_libver_t.H5F_LIBVER_ERROR = -1
     * }
     */
    public static int H5F_LIBVER_ERROR() { return H5F_LIBVER_ERROR; }
    private static final int H5F_LIBVER_EARLIEST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5F_libver_t.H5F_LIBVER_EARLIEST = 0
     * }
     */
    public static int H5F_LIBVER_EARLIEST() { return H5F_LIBVER_EARLIEST; }
    private static final int H5F_LIBVER_V18 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5F_libver_t.H5F_LIBVER_V18 = 1
     * }
     */
    public static int H5F_LIBVER_V18() { return H5F_LIBVER_V18; }
    private static final int H5F_LIBVER_V110 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5F_libver_t.H5F_LIBVER_V110 = 2
     * }
     */
    public static int H5F_LIBVER_V110() { return H5F_LIBVER_V110; }
    private static final int H5F_LIBVER_V112 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5F_libver_t.H5F_LIBVER_V112 = 3
     * }
     */
    public static int H5F_LIBVER_V112() { return H5F_LIBVER_V112; }
    private static final int H5F_LIBVER_V114 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5F_libver_t.H5F_LIBVER_V114 = 4
     * }
     */
    public static int H5F_LIBVER_V114() { return H5F_LIBVER_V114; }
    private static final int H5F_LIBVER_V116 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum H5F_libver_t.H5F_LIBVER_V116 = 5
     * }
     */
    public static int H5F_LIBVER_V116() { return H5F_LIBVER_V116; }
    private static final int H5F_LIBVER_V118 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum H5F_libver_t.H5F_LIBVER_V118 = 6
     * }
     */
    public static int H5F_LIBVER_V118() { return H5F_LIBVER_V118; }
    private static final int H5F_LIBVER_NBOUNDS = (int)7L;
    /**
     * {@snippet lang=c :
     * enum H5F_libver_t.H5F_LIBVER_NBOUNDS = 7
     * }
     */
    public static int H5F_LIBVER_NBOUNDS() { return H5F_LIBVER_NBOUNDS; }
    private static final int H5F_FSPACE_STRATEGY_FSM_AGGR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5F_fspace_strategy_t.H5F_FSPACE_STRATEGY_FSM_AGGR = 0
     * }
     */
    public static int H5F_FSPACE_STRATEGY_FSM_AGGR() { return H5F_FSPACE_STRATEGY_FSM_AGGR; }
    private static final int H5F_FSPACE_STRATEGY_PAGE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5F_fspace_strategy_t.H5F_FSPACE_STRATEGY_PAGE = 1
     * }
     */
    public static int H5F_FSPACE_STRATEGY_PAGE() { return H5F_FSPACE_STRATEGY_PAGE; }
    private static final int H5F_FSPACE_STRATEGY_AGGR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5F_fspace_strategy_t.H5F_FSPACE_STRATEGY_AGGR = 2
     * }
     */
    public static int H5F_FSPACE_STRATEGY_AGGR() { return H5F_FSPACE_STRATEGY_AGGR; }
    private static final int H5F_FSPACE_STRATEGY_NONE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5F_fspace_strategy_t.H5F_FSPACE_STRATEGY_NONE = 3
     * }
     */
    public static int H5F_FSPACE_STRATEGY_NONE() { return H5F_FSPACE_STRATEGY_NONE; }
    private static final int H5F_FSPACE_STRATEGY_NTYPES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5F_fspace_strategy_t.H5F_FSPACE_STRATEGY_NTYPES = 4
     * }
     */
    public static int H5F_FSPACE_STRATEGY_NTYPES() { return H5F_FSPACE_STRATEGY_NTYPES; }
    private static final int H5F_FILE_SPACE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5F_file_space_type_t.H5F_FILE_SPACE_DEFAULT = 0
     * }
     */
    public static int H5F_FILE_SPACE_DEFAULT() { return H5F_FILE_SPACE_DEFAULT; }
    private static final int H5F_FILE_SPACE_ALL_PERSIST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5F_file_space_type_t.H5F_FILE_SPACE_ALL_PERSIST = 1
     * }
     */
    public static int H5F_FILE_SPACE_ALL_PERSIST() { return H5F_FILE_SPACE_ALL_PERSIST; }
    private static final int H5F_FILE_SPACE_ALL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5F_file_space_type_t.H5F_FILE_SPACE_ALL = 2
     * }
     */
    public static int H5F_FILE_SPACE_ALL() { return H5F_FILE_SPACE_ALL; }
    private static final int H5F_FILE_SPACE_AGGR_VFD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5F_file_space_type_t.H5F_FILE_SPACE_AGGR_VFD = 3
     * }
     */
    public static int H5F_FILE_SPACE_AGGR_VFD() { return H5F_FILE_SPACE_AGGR_VFD; }
    private static final int H5F_FILE_SPACE_VFD = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5F_file_space_type_t.H5F_FILE_SPACE_VFD = 4
     * }
     */
    public static int H5F_FILE_SPACE_VFD() { return H5F_FILE_SPACE_VFD; }
    private static final int H5F_FILE_SPACE_NTYPES = (int)5L;
    /**
     * {@snippet lang=c :
     * enum H5F_file_space_type_t.H5F_FILE_SPACE_NTYPES = 5
     * }
     */
    public static int H5F_FILE_SPACE_NTYPES() { return H5F_FILE_SPACE_NTYPES; }

    private static class H5Fis_accessible {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fis_accessible");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Fis_accessible(const char *container_name, hid_t fapl_id)
     * }
     */
    public static FunctionDescriptor H5Fis_accessible$descriptor() { return H5Fis_accessible.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Fis_accessible(const char *container_name, hid_t fapl_id)
     * }
     */
    public static MethodHandle H5Fis_accessible$handle() { return H5Fis_accessible.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Fis_accessible(const char *container_name, hid_t fapl_id)
     * }
     */
    public static MemorySegment H5Fis_accessible$address() { return H5Fis_accessible.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Fis_accessible(const char *container_name, hid_t fapl_id)
     * }
     */
    public static int H5Fis_accessible(MemorySegment container_name, long fapl_id)
    {
        var mh$ = H5Fis_accessible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fis_accessible", container_name, fapl_id);
            }
            return (int)mh$.invokeExact(container_name, fapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fcreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fcreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Fcreate(const char *filename, unsigned int flags, hid_t fcpl_id, hid_t fapl_id)
     * }
     */
    public static FunctionDescriptor H5Fcreate$descriptor() { return H5Fcreate.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Fcreate(const char *filename, unsigned int flags, hid_t fcpl_id, hid_t fapl_id)
     * }
     */
    public static MethodHandle H5Fcreate$handle() { return H5Fcreate.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Fcreate(const char *filename, unsigned int flags, hid_t fcpl_id, hid_t fapl_id)
     * }
     */
    public static MemorySegment H5Fcreate$address() { return H5Fcreate.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Fcreate(const char *filename, unsigned int flags, hid_t fcpl_id, hid_t fapl_id)
     * }
     */
    public static long H5Fcreate(MemorySegment filename, int flags, long fcpl_id, long fapl_id)
    {
        var mh$ = H5Fcreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fcreate", filename, flags, fcpl_id, fapl_id);
            }
            return (long)mh$.invokeExact(filename, flags, fcpl_id, fapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fcreate_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_INT,
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fcreate_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Fcreate_async(const char *app_file, const char *app_func, unsigned int app_line, const char
     * *filename, unsigned int flags, hid_t fcpl_id, hid_t fapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Fcreate_async$descriptor() { return H5Fcreate_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Fcreate_async(const char *app_file, const char *app_func, unsigned int app_line, const char
     * *filename, unsigned int flags, hid_t fcpl_id, hid_t fapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Fcreate_async$handle() { return H5Fcreate_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Fcreate_async(const char *app_file, const char *app_func, unsigned int app_line, const char
     * *filename, unsigned int flags, hid_t fcpl_id, hid_t fapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Fcreate_async$address() { return H5Fcreate_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Fcreate_async(const char *app_file, const char *app_func, unsigned int app_line, const char
     * *filename, unsigned int flags, hid_t fcpl_id, hid_t fapl_id, hid_t es_id)
     * }
     */
    public static long H5Fcreate_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                       MemorySegment filename, int flags, long fcpl_id, long fapl_id,
                                       long es_id)
    {
        var mh$ = H5Fcreate_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fcreate_async", app_file, app_func, app_line, filename, flags, fcpl_id,
                              fapl_id, es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, filename, flags, fcpl_id, fapl_id,
                                         es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fopen {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Fopen(const char *filename, unsigned int flags, hid_t fapl_id)
     * }
     */
    public static FunctionDescriptor H5Fopen$descriptor() { return H5Fopen.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Fopen(const char *filename, unsigned int flags, hid_t fapl_id)
     * }
     */
    public static MethodHandle H5Fopen$handle() { return H5Fopen.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Fopen(const char *filename, unsigned int flags, hid_t fapl_id)
     * }
     */
    public static MemorySegment H5Fopen$address() { return H5Fopen.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Fopen(const char *filename, unsigned int flags, hid_t fapl_id)
     * }
     */
    public static long H5Fopen(MemorySegment filename, int flags, long fapl_id)
    {
        var mh$ = H5Fopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fopen", filename, flags, fapl_id);
            }
            return (long)mh$.invokeExact(filename, flags, fapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fopen_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fopen_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Fopen_async(const char *app_file, const char *app_func, unsigned int app_line, const char
     * *filename, unsigned int flags, hid_t access_plist, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Fopen_async$descriptor() { return H5Fopen_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Fopen_async(const char *app_file, const char *app_func, unsigned int app_line, const char
     * *filename, unsigned int flags, hid_t access_plist, hid_t es_id)
     * }
     */
    public static MethodHandle H5Fopen_async$handle() { return H5Fopen_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Fopen_async(const char *app_file, const char *app_func, unsigned int app_line, const char
     * *filename, unsigned int flags, hid_t access_plist, hid_t es_id)
     * }
     */
    public static MemorySegment H5Fopen_async$address() { return H5Fopen_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Fopen_async(const char *app_file, const char *app_func, unsigned int app_line, const char
     * *filename, unsigned int flags, hid_t access_plist, hid_t es_id)
     * }
     */
    public static long H5Fopen_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     MemorySegment filename, int flags, long access_plist, long es_id)
    {
        var mh$ = H5Fopen_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fopen_async", app_file, app_func, app_line, filename, flags, access_plist,
                              es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, filename, flags, access_plist, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Freopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Freopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Freopen(hid_t file_id)
     * }
     */
    public static FunctionDescriptor H5Freopen$descriptor() { return H5Freopen.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Freopen(hid_t file_id)
     * }
     */
    public static MethodHandle H5Freopen$handle() { return H5Freopen.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Freopen(hid_t file_id)
     * }
     */
    public static MemorySegment H5Freopen$address() { return H5Freopen.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Freopen(hid_t file_id)
     * }
     */
    public static long H5Freopen(long file_id)
    {
        var mh$ = H5Freopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Freopen", file_id);
            }
            return (long)mh$.invokeExact(file_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Freopen_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Freopen_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Freopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t file_id,
     * hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Freopen_async$descriptor() { return H5Freopen_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Freopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t file_id,
     * hid_t es_id)
     * }
     */
    public static MethodHandle H5Freopen_async$handle() { return H5Freopen_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Freopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t file_id,
     * hid_t es_id)
     * }
     */
    public static MemorySegment H5Freopen_async$address() { return H5Freopen_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Freopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t file_id,
     * hid_t es_id)
     * }
     */
    public static long H5Freopen_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                       long file_id, long es_id)
    {
        var mh$ = H5Freopen_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Freopen_async", app_file, app_func, app_line, file_id, es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, file_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fflush {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fflush(hid_t object_id, H5F_scope_t scope)
     * }
     */
    public static FunctionDescriptor H5Fflush$descriptor() { return H5Fflush.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fflush(hid_t object_id, H5F_scope_t scope)
     * }
     */
    public static MethodHandle H5Fflush$handle() { return H5Fflush.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fflush(hid_t object_id, H5F_scope_t scope)
     * }
     */
    public static MemorySegment H5Fflush$address() { return H5Fflush.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fflush(hid_t object_id, H5F_scope_t scope)
     * }
     */
    public static int H5Fflush(long object_id, int scope)
    {
        var mh$ = H5Fflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fflush", object_id, scope);
            }
            return (int)mh$.invokeExact(object_id, scope);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fflush_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fflush_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fflush_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * object_id, H5F_scope_t scope, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Fflush_async$descriptor() { return H5Fflush_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fflush_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * object_id, H5F_scope_t scope, hid_t es_id)
     * }
     */
    public static MethodHandle H5Fflush_async$handle() { return H5Fflush_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fflush_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * object_id, H5F_scope_t scope, hid_t es_id)
     * }
     */
    public static MemorySegment H5Fflush_async$address() { return H5Fflush_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fflush_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * object_id, H5F_scope_t scope, hid_t es_id)
     * }
     */
    public static int H5Fflush_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     long object_id, int scope, long es_id)
    {
        var mh$ = H5Fflush_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fflush_async", app_file, app_func, app_line, object_id, scope, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, object_id, scope, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fclose(hid_t file_id)
     * }
     */
    public static FunctionDescriptor H5Fclose$descriptor() { return H5Fclose.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fclose(hid_t file_id)
     * }
     */
    public static MethodHandle H5Fclose$handle() { return H5Fclose.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fclose(hid_t file_id)
     * }
     */
    public static MemorySegment H5Fclose$address() { return H5Fclose.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fclose(hid_t file_id)
     * }
     */
    public static int H5Fclose(long file_id)
    {
        var mh$ = H5Fclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fclose", file_id);
            }
            return (int)mh$.invokeExact(file_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fclose_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fclose_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t file_id,
     * hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Fclose_async$descriptor() { return H5Fclose_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t file_id,
     * hid_t es_id)
     * }
     */
    public static MethodHandle H5Fclose_async$handle() { return H5Fclose_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t file_id,
     * hid_t es_id)
     * }
     */
    public static MemorySegment H5Fclose_async$address() { return H5Fclose_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t file_id,
     * hid_t es_id)
     * }
     */
    public static int H5Fclose_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     long file_id, long es_id)
    {
        var mh$ = H5Fclose_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fclose_async", app_file, app_func, app_line, file_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, file_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fdelete {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fdelete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fdelete(const char *filename, hid_t fapl_id)
     * }
     */
    public static FunctionDescriptor H5Fdelete$descriptor() { return H5Fdelete.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fdelete(const char *filename, hid_t fapl_id)
     * }
     */
    public static MethodHandle H5Fdelete$handle() { return H5Fdelete.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fdelete(const char *filename, hid_t fapl_id)
     * }
     */
    public static MemorySegment H5Fdelete$address() { return H5Fdelete.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fdelete(const char *filename, hid_t fapl_id)
     * }
     */
    public static int H5Fdelete(MemorySegment filename, long fapl_id)
    {
        var mh$ = H5Fdelete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fdelete", filename, fapl_id);
            }
            return (int)mh$.invokeExact(filename, fapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_create_plist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_create_plist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Fget_create_plist(hid_t file_id)
     * }
     */
    public static FunctionDescriptor H5Fget_create_plist$descriptor() { return H5Fget_create_plist.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Fget_create_plist(hid_t file_id)
     * }
     */
    public static MethodHandle H5Fget_create_plist$handle() { return H5Fget_create_plist.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Fget_create_plist(hid_t file_id)
     * }
     */
    public static MemorySegment H5Fget_create_plist$address() { return H5Fget_create_plist.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Fget_create_plist(hid_t file_id)
     * }
     */
    public static long H5Fget_create_plist(long file_id)
    {
        var mh$ = H5Fget_create_plist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_create_plist", file_id);
            }
            return (long)mh$.invokeExact(file_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_access_plist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_access_plist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Fget_access_plist(hid_t file_id)
     * }
     */
    public static FunctionDescriptor H5Fget_access_plist$descriptor() { return H5Fget_access_plist.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Fget_access_plist(hid_t file_id)
     * }
     */
    public static MethodHandle H5Fget_access_plist$handle() { return H5Fget_access_plist.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Fget_access_plist(hid_t file_id)
     * }
     */
    public static MemorySegment H5Fget_access_plist$address() { return H5Fget_access_plist.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Fget_access_plist(hid_t file_id)
     * }
     */
    public static long H5Fget_access_plist(long file_id)
    {
        var mh$ = H5Fget_access_plist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_access_plist", file_id);
            }
            return (long)mh$.invokeExact(file_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_intent {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_intent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_intent(hid_t file_id, unsigned int *intent)
     * }
     */
    public static FunctionDescriptor H5Fget_intent$descriptor() { return H5Fget_intent.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_intent(hid_t file_id, unsigned int *intent)
     * }
     */
    public static MethodHandle H5Fget_intent$handle() { return H5Fget_intent.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_intent(hid_t file_id, unsigned int *intent)
     * }
     */
    public static MemorySegment H5Fget_intent$address() { return H5Fget_intent.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_intent(hid_t file_id, unsigned int *intent)
     * }
     */
    public static int H5Fget_intent(long file_id, MemorySegment intent)
    {
        var mh$ = H5Fget_intent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_intent", file_id, intent);
            }
            return (int)mh$.invokeExact(file_id, intent);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_fileno {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_fileno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_fileno(hid_t file_id, unsigned long *fileno)
     * }
     */
    public static FunctionDescriptor H5Fget_fileno$descriptor() { return H5Fget_fileno.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_fileno(hid_t file_id, unsigned long *fileno)
     * }
     */
    public static MethodHandle H5Fget_fileno$handle() { return H5Fget_fileno.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_fileno(hid_t file_id, unsigned long *fileno)
     * }
     */
    public static MemorySegment H5Fget_fileno$address() { return H5Fget_fileno.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_fileno(hid_t file_id, unsigned long *fileno)
     * }
     */
    public static int H5Fget_fileno(long file_id, MemorySegment fileno)
    {
        var mh$ = H5Fget_fileno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_fileno", file_id, fileno);
            }
            return (int)mh$.invokeExact(file_id, fileno);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_obj_count {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_obj_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Fget_obj_count(hid_t file_id, unsigned int types)
     * }
     */
    public static FunctionDescriptor H5Fget_obj_count$descriptor() { return H5Fget_obj_count.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Fget_obj_count(hid_t file_id, unsigned int types)
     * }
     */
    public static MethodHandle H5Fget_obj_count$handle() { return H5Fget_obj_count.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Fget_obj_count(hid_t file_id, unsigned int types)
     * }
     */
    public static MemorySegment H5Fget_obj_count$address() { return H5Fget_obj_count.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Fget_obj_count(hid_t file_id, unsigned int types)
     * }
     */
    public static long H5Fget_obj_count(long file_id, int types)
    {
        var mh$ = H5Fget_obj_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_obj_count", file_id, types);
            }
            return (long)mh$.invokeExact(file_id, types);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_obj_ids {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_obj_ids");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Fget_obj_ids(hid_t file_id, unsigned int types, size_t max_objs, hid_t *obj_id_list)
     * }
     */
    public static FunctionDescriptor H5Fget_obj_ids$descriptor() { return H5Fget_obj_ids.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Fget_obj_ids(hid_t file_id, unsigned int types, size_t max_objs, hid_t *obj_id_list)
     * }
     */
    public static MethodHandle H5Fget_obj_ids$handle() { return H5Fget_obj_ids.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Fget_obj_ids(hid_t file_id, unsigned int types, size_t max_objs, hid_t *obj_id_list)
     * }
     */
    public static MemorySegment H5Fget_obj_ids$address() { return H5Fget_obj_ids.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Fget_obj_ids(hid_t file_id, unsigned int types, size_t max_objs, hid_t *obj_id_list)
     * }
     */
    public static long H5Fget_obj_ids(long file_id, int types, long max_objs, MemorySegment obj_id_list)
    {
        var mh$ = H5Fget_obj_ids.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_obj_ids", file_id, types, max_objs, obj_id_list);
            }
            return (long)mh$.invokeExact(file_id, types, max_objs, obj_id_list);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_vfd_handle {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_vfd_handle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_vfd_handle(hid_t file_id, hid_t fapl, void **file_handle)
     * }
     */
    public static FunctionDescriptor H5Fget_vfd_handle$descriptor() { return H5Fget_vfd_handle.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_vfd_handle(hid_t file_id, hid_t fapl, void **file_handle)
     * }
     */
    public static MethodHandle H5Fget_vfd_handle$handle() { return H5Fget_vfd_handle.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_vfd_handle(hid_t file_id, hid_t fapl, void **file_handle)
     * }
     */
    public static MemorySegment H5Fget_vfd_handle$address() { return H5Fget_vfd_handle.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_vfd_handle(hid_t file_id, hid_t fapl, void **file_handle)
     * }
     */
    public static int H5Fget_vfd_handle(long file_id, long fapl, MemorySegment file_handle)
    {
        var mh$ = H5Fget_vfd_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_vfd_handle", file_id, fapl, file_handle);
            }
            return (int)mh$.invokeExact(file_id, fapl, file_handle);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fmount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fmount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fmount(hid_t loc_id, const char *name, hid_t child, hid_t plist)
     * }
     */
    public static FunctionDescriptor H5Fmount$descriptor() { return H5Fmount.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fmount(hid_t loc_id, const char *name, hid_t child, hid_t plist)
     * }
     */
    public static MethodHandle H5Fmount$handle() { return H5Fmount.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fmount(hid_t loc_id, const char *name, hid_t child, hid_t plist)
     * }
     */
    public static MemorySegment H5Fmount$address() { return H5Fmount.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fmount(hid_t loc_id, const char *name, hid_t child, hid_t plist)
     * }
     */
    public static int H5Fmount(long loc_id, MemorySegment name, long child, long plist)
    {
        var mh$ = H5Fmount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fmount", loc_id, name, child, plist);
            }
            return (int)mh$.invokeExact(loc_id, name, child, plist);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Funmount {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Funmount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Funmount(hid_t loc_id, const char *name)
     * }
     */
    public static FunctionDescriptor H5Funmount$descriptor() { return H5Funmount.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Funmount(hid_t loc_id, const char *name)
     * }
     */
    public static MethodHandle H5Funmount$handle() { return H5Funmount.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Funmount(hid_t loc_id, const char *name)
     * }
     */
    public static MemorySegment H5Funmount$address() { return H5Funmount.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Funmount(hid_t loc_id, const char *name)
     * }
     */
    public static int H5Funmount(long loc_id, MemorySegment name)
    {
        var mh$ = H5Funmount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Funmount", loc_id, name);
            }
            return (int)mh$.invokeExact(loc_id, name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_freespace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_freespace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hssize_t H5Fget_freespace(hid_t file_id)
     * }
     */
    public static FunctionDescriptor H5Fget_freespace$descriptor() { return H5Fget_freespace.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hssize_t H5Fget_freespace(hid_t file_id)
     * }
     */
    public static MethodHandle H5Fget_freespace$handle() { return H5Fget_freespace.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hssize_t H5Fget_freespace(hid_t file_id)
     * }
     */
    public static MemorySegment H5Fget_freespace$address() { return H5Fget_freespace.ADDR; }

    /**
     * {@snippet lang=c :
     * hssize_t H5Fget_freespace(hid_t file_id)
     * }
     */
    public static long H5Fget_freespace(long file_id)
    {
        var mh$ = H5Fget_freespace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_freespace", file_id);
            }
            return (long)mh$.invokeExact(file_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_filesize {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_filesize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_filesize(hid_t file_id, hsize_t *size)
     * }
     */
    public static FunctionDescriptor H5Fget_filesize$descriptor() { return H5Fget_filesize.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_filesize(hid_t file_id, hsize_t *size)
     * }
     */
    public static MethodHandle H5Fget_filesize$handle() { return H5Fget_filesize.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_filesize(hid_t file_id, hsize_t *size)
     * }
     */
    public static MemorySegment H5Fget_filesize$address() { return H5Fget_filesize.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_filesize(hid_t file_id, hsize_t *size)
     * }
     */
    public static int H5Fget_filesize(long file_id, MemorySegment size)
    {
        var mh$ = H5Fget_filesize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_filesize", file_id, size);
            }
            return (int)mh$.invokeExact(file_id, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_eoa {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_eoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_eoa(hid_t file_id, haddr_t *eoa)
     * }
     */
    public static FunctionDescriptor H5Fget_eoa$descriptor() { return H5Fget_eoa.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_eoa(hid_t file_id, haddr_t *eoa)
     * }
     */
    public static MethodHandle H5Fget_eoa$handle() { return H5Fget_eoa.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_eoa(hid_t file_id, haddr_t *eoa)
     * }
     */
    public static MemorySegment H5Fget_eoa$address() { return H5Fget_eoa.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_eoa(hid_t file_id, haddr_t *eoa)
     * }
     */
    public static int H5Fget_eoa(long file_id, MemorySegment eoa)
    {
        var mh$ = H5Fget_eoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_eoa", file_id, eoa);
            }
            return (int)mh$.invokeExact(file_id, eoa);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fincrement_filesize {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fincrement_filesize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fincrement_filesize(hid_t file_id, hsize_t increment)
     * }
     */
    public static FunctionDescriptor H5Fincrement_filesize$descriptor() { return H5Fincrement_filesize.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fincrement_filesize(hid_t file_id, hsize_t increment)
     * }
     */
    public static MethodHandle H5Fincrement_filesize$handle() { return H5Fincrement_filesize.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fincrement_filesize(hid_t file_id, hsize_t increment)
     * }
     */
    public static MemorySegment H5Fincrement_filesize$address() { return H5Fincrement_filesize.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fincrement_filesize(hid_t file_id, hsize_t increment)
     * }
     */
    public static int H5Fincrement_filesize(long file_id, long increment)
    {
        var mh$ = H5Fincrement_filesize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fincrement_filesize", file_id, increment);
            }
            return (int)mh$.invokeExact(file_id, increment);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_file_image {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_file_image");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Fget_file_image(hid_t file_id, void *buf_ptr, size_t buf_len)
     * }
     */
    public static FunctionDescriptor H5Fget_file_image$descriptor() { return H5Fget_file_image.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Fget_file_image(hid_t file_id, void *buf_ptr, size_t buf_len)
     * }
     */
    public static MethodHandle H5Fget_file_image$handle() { return H5Fget_file_image.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Fget_file_image(hid_t file_id, void *buf_ptr, size_t buf_len)
     * }
     */
    public static MemorySegment H5Fget_file_image$address() { return H5Fget_file_image.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Fget_file_image(hid_t file_id, void *buf_ptr, size_t buf_len)
     * }
     */
    public static long H5Fget_file_image(long file_id, MemorySegment buf_ptr, long buf_len)
    {
        var mh$ = H5Fget_file_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_file_image", file_id, buf_ptr, buf_len);
            }
            return (long)mh$.invokeExact(file_id, buf_ptr, buf_len);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_mdc_config {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_mdc_config");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_config(hid_t file_id, H5AC_cache_config_t *config_ptr)
     * }
     */
    public static FunctionDescriptor H5Fget_mdc_config$descriptor() { return H5Fget_mdc_config.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_config(hid_t file_id, H5AC_cache_config_t *config_ptr)
     * }
     */
    public static MethodHandle H5Fget_mdc_config$handle() { return H5Fget_mdc_config.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_config(hid_t file_id, H5AC_cache_config_t *config_ptr)
     * }
     */
    public static MemorySegment H5Fget_mdc_config$address() { return H5Fget_mdc_config.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_config(hid_t file_id, H5AC_cache_config_t *config_ptr)
     * }
     */
    public static int H5Fget_mdc_config(long file_id, MemorySegment config_ptr)
    {
        var mh$ = H5Fget_mdc_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_mdc_config", file_id, config_ptr);
            }
            return (int)mh$.invokeExact(file_id, config_ptr);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fset_mdc_config {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fset_mdc_config");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fset_mdc_config(hid_t file_id, const H5AC_cache_config_t *config_ptr)
     * }
     */
    public static FunctionDescriptor H5Fset_mdc_config$descriptor() { return H5Fset_mdc_config.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fset_mdc_config(hid_t file_id, const H5AC_cache_config_t *config_ptr)
     * }
     */
    public static MethodHandle H5Fset_mdc_config$handle() { return H5Fset_mdc_config.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fset_mdc_config(hid_t file_id, const H5AC_cache_config_t *config_ptr)
     * }
     */
    public static MemorySegment H5Fset_mdc_config$address() { return H5Fset_mdc_config.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fset_mdc_config(hid_t file_id, const H5AC_cache_config_t *config_ptr)
     * }
     */
    public static int H5Fset_mdc_config(long file_id, MemorySegment config_ptr)
    {
        var mh$ = H5Fset_mdc_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fset_mdc_config", file_id, config_ptr);
            }
            return (int)mh$.invokeExact(file_id, config_ptr);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_mdc_hit_rate {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_mdc_hit_rate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_hit_rate(hid_t file_id, double *hit_rate_ptr)
     * }
     */
    public static FunctionDescriptor H5Fget_mdc_hit_rate$descriptor() { return H5Fget_mdc_hit_rate.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_hit_rate(hid_t file_id, double *hit_rate_ptr)
     * }
     */
    public static MethodHandle H5Fget_mdc_hit_rate$handle() { return H5Fget_mdc_hit_rate.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_hit_rate(hid_t file_id, double *hit_rate_ptr)
     * }
     */
    public static MemorySegment H5Fget_mdc_hit_rate$address() { return H5Fget_mdc_hit_rate.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_hit_rate(hid_t file_id, double *hit_rate_ptr)
     * }
     */
    public static int H5Fget_mdc_hit_rate(long file_id, MemorySegment hit_rate_ptr)
    {
        var mh$ = H5Fget_mdc_hit_rate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_mdc_hit_rate", file_id, hit_rate_ptr);
            }
            return (int)mh$.invokeExact(file_id, hit_rate_ptr);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_mdc_size {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_mdc_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_size(hid_t file_id, size_t *max_size_ptr, size_t *min_clean_size_ptr, size_t
     * *cur_size_ptr, int *cur_num_entries_ptr)
     * }
     */
    public static FunctionDescriptor H5Fget_mdc_size$descriptor() { return H5Fget_mdc_size.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_size(hid_t file_id, size_t *max_size_ptr, size_t *min_clean_size_ptr, size_t
     * *cur_size_ptr, int *cur_num_entries_ptr)
     * }
     */
    public static MethodHandle H5Fget_mdc_size$handle() { return H5Fget_mdc_size.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_size(hid_t file_id, size_t *max_size_ptr, size_t *min_clean_size_ptr, size_t
     * *cur_size_ptr, int *cur_num_entries_ptr)
     * }
     */
    public static MemorySegment H5Fget_mdc_size$address() { return H5Fget_mdc_size.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_size(hid_t file_id, size_t *max_size_ptr, size_t *min_clean_size_ptr, size_t
     * *cur_size_ptr, int *cur_num_entries_ptr)
     * }
     */
    public static int H5Fget_mdc_size(long file_id, MemorySegment max_size_ptr,
                                      MemorySegment min_clean_size_ptr, MemorySegment cur_size_ptr,
                                      MemorySegment cur_num_entries_ptr)
    {
        var mh$ = H5Fget_mdc_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_mdc_size", file_id, max_size_ptr, min_clean_size_ptr, cur_size_ptr,
                              cur_num_entries_ptr);
            }
            return (int)mh$.invokeExact(file_id, max_size_ptr, min_clean_size_ptr, cur_size_ptr,
                                        cur_num_entries_ptr);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Freset_mdc_hit_rate_stats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Freset_mdc_hit_rate_stats");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Freset_mdc_hit_rate_stats(hid_t file_id)
     * }
     */
    public static FunctionDescriptor H5Freset_mdc_hit_rate_stats$descriptor()
    {
        return H5Freset_mdc_hit_rate_stats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Freset_mdc_hit_rate_stats(hid_t file_id)
     * }
     */
    public static MethodHandle H5Freset_mdc_hit_rate_stats$handle()
    {
        return H5Freset_mdc_hit_rate_stats.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Freset_mdc_hit_rate_stats(hid_t file_id)
     * }
     */
    public static MemorySegment H5Freset_mdc_hit_rate_stats$address()
    {
        return H5Freset_mdc_hit_rate_stats.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Freset_mdc_hit_rate_stats(hid_t file_id)
     * }
     */
    public static int H5Freset_mdc_hit_rate_stats(long file_id)
    {
        var mh$ = H5Freset_mdc_hit_rate_stats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Freset_mdc_hit_rate_stats", file_id);
            }
            return (int)mh$.invokeExact(file_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_name {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Fget_name(hid_t obj_id, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor H5Fget_name$descriptor() { return H5Fget_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Fget_name(hid_t obj_id, char *name, size_t size)
     * }
     */
    public static MethodHandle H5Fget_name$handle() { return H5Fget_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Fget_name(hid_t obj_id, char *name, size_t size)
     * }
     */
    public static MemorySegment H5Fget_name$address() { return H5Fget_name.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Fget_name(hid_t obj_id, char *name, size_t size)
     * }
     */
    public static long H5Fget_name(long obj_id, MemorySegment name, long size)
    {
        var mh$ = H5Fget_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_name", obj_id, name, size);
            }
            return (long)mh$.invokeExact(obj_id, name, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_info2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_info2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_info2(hid_t obj_id, H5F_info2_t *file_info)
     * }
     */
    public static FunctionDescriptor H5Fget_info2$descriptor() { return H5Fget_info2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_info2(hid_t obj_id, H5F_info2_t *file_info)
     * }
     */
    public static MethodHandle H5Fget_info2$handle() { return H5Fget_info2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_info2(hid_t obj_id, H5F_info2_t *file_info)
     * }
     */
    public static MemorySegment H5Fget_info2$address() { return H5Fget_info2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_info2(hid_t obj_id, H5F_info2_t *file_info)
     * }
     */
    public static int H5Fget_info2(long obj_id, MemorySegment file_info)
    {
        var mh$ = H5Fget_info2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_info2", obj_id, file_info);
            }
            return (int)mh$.invokeExact(obj_id, file_info);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_metadata_read_retry_info {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_metadata_read_retry_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_metadata_read_retry_info(hid_t file_id, H5F_retry_info_t *info)
     * }
     */
    public static FunctionDescriptor H5Fget_metadata_read_retry_info$descriptor()
    {
        return H5Fget_metadata_read_retry_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_metadata_read_retry_info(hid_t file_id, H5F_retry_info_t *info)
     * }
     */
    public static MethodHandle H5Fget_metadata_read_retry_info$handle()
    {
        return H5Fget_metadata_read_retry_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_metadata_read_retry_info(hid_t file_id, H5F_retry_info_t *info)
     * }
     */
    public static MemorySegment H5Fget_metadata_read_retry_info$address()
    {
        return H5Fget_metadata_read_retry_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_metadata_read_retry_info(hid_t file_id, H5F_retry_info_t *info)
     * }
     */
    public static int H5Fget_metadata_read_retry_info(long file_id, MemorySegment info)
    {
        var mh$ = H5Fget_metadata_read_retry_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_metadata_read_retry_info", file_id, info);
            }
            return (int)mh$.invokeExact(file_id, info);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fstart_swmr_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fstart_swmr_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fstart_swmr_write(hid_t file_id)
     * }
     */
    public static FunctionDescriptor H5Fstart_swmr_write$descriptor() { return H5Fstart_swmr_write.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fstart_swmr_write(hid_t file_id)
     * }
     */
    public static MethodHandle H5Fstart_swmr_write$handle() { return H5Fstart_swmr_write.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fstart_swmr_write(hid_t file_id)
     * }
     */
    public static MemorySegment H5Fstart_swmr_write$address() { return H5Fstart_swmr_write.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fstart_swmr_write(hid_t file_id)
     * }
     */
    public static int H5Fstart_swmr_write(long file_id)
    {
        var mh$ = H5Fstart_swmr_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fstart_swmr_write", file_id);
            }
            return (int)mh$.invokeExact(file_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_free_sections {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_free_sections");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Fget_free_sections(hid_t file_id, H5F_mem_t type, size_t nsects, H5F_sect_info_t *sect_info)
     * }
     */
    public static FunctionDescriptor H5Fget_free_sections$descriptor() { return H5Fget_free_sections.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Fget_free_sections(hid_t file_id, H5F_mem_t type, size_t nsects, H5F_sect_info_t *sect_info)
     * }
     */
    public static MethodHandle H5Fget_free_sections$handle() { return H5Fget_free_sections.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Fget_free_sections(hid_t file_id, H5F_mem_t type, size_t nsects, H5F_sect_info_t *sect_info)
     * }
     */
    public static MemorySegment H5Fget_free_sections$address() { return H5Fget_free_sections.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Fget_free_sections(hid_t file_id, H5F_mem_t type, size_t nsects, H5F_sect_info_t *sect_info)
     * }
     */
    public static long H5Fget_free_sections(long file_id, int type, long nsects, MemorySegment sect_info)
    {
        var mh$ = H5Fget_free_sections.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_free_sections", file_id, type, nsects, sect_info);
            }
            return (long)mh$.invokeExact(file_id, type, nsects, sect_info);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fclear_elink_file_cache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fclear_elink_file_cache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fclear_elink_file_cache(hid_t file_id)
     * }
     */
    public static FunctionDescriptor H5Fclear_elink_file_cache$descriptor()
    {
        return H5Fclear_elink_file_cache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fclear_elink_file_cache(hid_t file_id)
     * }
     */
    public static MethodHandle H5Fclear_elink_file_cache$handle() { return H5Fclear_elink_file_cache.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fclear_elink_file_cache(hid_t file_id)
     * }
     */
    public static MemorySegment H5Fclear_elink_file_cache$address() { return H5Fclear_elink_file_cache.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fclear_elink_file_cache(hid_t file_id)
     * }
     */
    public static int H5Fclear_elink_file_cache(long file_id)
    {
        var mh$ = H5Fclear_elink_file_cache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fclear_elink_file_cache", file_id);
            }
            return (int)mh$.invokeExact(file_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fset_libver_bounds {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fset_libver_bounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fset_libver_bounds(hid_t file_id, H5F_libver_t low, H5F_libver_t high)
     * }
     */
    public static FunctionDescriptor H5Fset_libver_bounds$descriptor() { return H5Fset_libver_bounds.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fset_libver_bounds(hid_t file_id, H5F_libver_t low, H5F_libver_t high)
     * }
     */
    public static MethodHandle H5Fset_libver_bounds$handle() { return H5Fset_libver_bounds.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fset_libver_bounds(hid_t file_id, H5F_libver_t low, H5F_libver_t high)
     * }
     */
    public static MemorySegment H5Fset_libver_bounds$address() { return H5Fset_libver_bounds.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fset_libver_bounds(hid_t file_id, H5F_libver_t low, H5F_libver_t high)
     * }
     */
    public static int H5Fset_libver_bounds(long file_id, int low, int high)
    {
        var mh$ = H5Fset_libver_bounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fset_libver_bounds", file_id, low, high);
            }
            return (int)mh$.invokeExact(file_id, low, high);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fstart_mdc_logging {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fstart_mdc_logging");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fstart_mdc_logging(hid_t file_id)
     * }
     */
    public static FunctionDescriptor H5Fstart_mdc_logging$descriptor() { return H5Fstart_mdc_logging.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fstart_mdc_logging(hid_t file_id)
     * }
     */
    public static MethodHandle H5Fstart_mdc_logging$handle() { return H5Fstart_mdc_logging.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fstart_mdc_logging(hid_t file_id)
     * }
     */
    public static MemorySegment H5Fstart_mdc_logging$address() { return H5Fstart_mdc_logging.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fstart_mdc_logging(hid_t file_id)
     * }
     */
    public static int H5Fstart_mdc_logging(long file_id)
    {
        var mh$ = H5Fstart_mdc_logging.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fstart_mdc_logging", file_id);
            }
            return (int)mh$.invokeExact(file_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fstop_mdc_logging {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fstop_mdc_logging");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fstop_mdc_logging(hid_t file_id)
     * }
     */
    public static FunctionDescriptor H5Fstop_mdc_logging$descriptor() { return H5Fstop_mdc_logging.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fstop_mdc_logging(hid_t file_id)
     * }
     */
    public static MethodHandle H5Fstop_mdc_logging$handle() { return H5Fstop_mdc_logging.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fstop_mdc_logging(hid_t file_id)
     * }
     */
    public static MemorySegment H5Fstop_mdc_logging$address() { return H5Fstop_mdc_logging.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fstop_mdc_logging(hid_t file_id)
     * }
     */
    public static int H5Fstop_mdc_logging(long file_id)
    {
        var mh$ = H5Fstop_mdc_logging.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fstop_mdc_logging", file_id);
            }
            return (int)mh$.invokeExact(file_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_mdc_logging_status {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_mdc_logging_status");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_logging_status(hid_t file_id, hbool_t *is_enabled, hbool_t *is_currently_logging)
     * }
     */
    public static FunctionDescriptor H5Fget_mdc_logging_status$descriptor()
    {
        return H5Fget_mdc_logging_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_logging_status(hid_t file_id, hbool_t *is_enabled, hbool_t *is_currently_logging)
     * }
     */
    public static MethodHandle H5Fget_mdc_logging_status$handle() { return H5Fget_mdc_logging_status.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_logging_status(hid_t file_id, hbool_t *is_enabled, hbool_t *is_currently_logging)
     * }
     */
    public static MemorySegment H5Fget_mdc_logging_status$address() { return H5Fget_mdc_logging_status.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_logging_status(hid_t file_id, hbool_t *is_enabled, hbool_t *is_currently_logging)
     * }
     */
    public static int H5Fget_mdc_logging_status(long file_id, MemorySegment is_enabled,
                                                MemorySegment is_currently_logging)
    {
        var mh$ = H5Fget_mdc_logging_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_mdc_logging_status", file_id, is_enabled, is_currently_logging);
            }
            return (int)mh$.invokeExact(file_id, is_enabled, is_currently_logging);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Freset_page_buffering_stats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Freset_page_buffering_stats");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Freset_page_buffering_stats(hid_t file_id)
     * }
     */
    public static FunctionDescriptor H5Freset_page_buffering_stats$descriptor()
    {
        return H5Freset_page_buffering_stats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Freset_page_buffering_stats(hid_t file_id)
     * }
     */
    public static MethodHandle H5Freset_page_buffering_stats$handle()
    {
        return H5Freset_page_buffering_stats.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Freset_page_buffering_stats(hid_t file_id)
     * }
     */
    public static MemorySegment H5Freset_page_buffering_stats$address()
    {
        return H5Freset_page_buffering_stats.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Freset_page_buffering_stats(hid_t file_id)
     * }
     */
    public static int H5Freset_page_buffering_stats(long file_id)
    {
        var mh$ = H5Freset_page_buffering_stats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Freset_page_buffering_stats", file_id);
            }
            return (int)mh$.invokeExact(file_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_page_buffering_stats {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_page_buffering_stats");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_page_buffering_stats(hid_t file_id, unsigned int accesses[2], unsigned int hits[2],
     * unsigned int misses[2], unsigned int evictions[2], unsigned int bypasses[2])
     * }
     */
    public static FunctionDescriptor H5Fget_page_buffering_stats$descriptor()
    {
        return H5Fget_page_buffering_stats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_page_buffering_stats(hid_t file_id, unsigned int accesses[2], unsigned int hits[2],
     * unsigned int misses[2], unsigned int evictions[2], unsigned int bypasses[2])
     * }
     */
    public static MethodHandle H5Fget_page_buffering_stats$handle()
    {
        return H5Fget_page_buffering_stats.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_page_buffering_stats(hid_t file_id, unsigned int accesses[2], unsigned int hits[2],
     * unsigned int misses[2], unsigned int evictions[2], unsigned int bypasses[2])
     * }
     */
    public static MemorySegment H5Fget_page_buffering_stats$address()
    {
        return H5Fget_page_buffering_stats.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_page_buffering_stats(hid_t file_id, unsigned int accesses[2], unsigned int hits[2],
     * unsigned int misses[2], unsigned int evictions[2], unsigned int bypasses[2])
     * }
     */
    public static int H5Fget_page_buffering_stats(long file_id, MemorySegment accesses, MemorySegment hits,
                                                  MemorySegment misses, MemorySegment evictions,
                                                  MemorySegment bypasses)
    {
        var mh$ = H5Fget_page_buffering_stats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_page_buffering_stats", file_id, accesses, hits, misses, evictions,
                              bypasses);
            }
            return (int)mh$.invokeExact(file_id, accesses, hits, misses, evictions, bypasses);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_mdc_image_info {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_mdc_image_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_image_info(hid_t file_id, haddr_t *image_addr, hsize_t *image_size)
     * }
     */
    public static FunctionDescriptor H5Fget_mdc_image_info$descriptor() { return H5Fget_mdc_image_info.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_image_info(hid_t file_id, haddr_t *image_addr, hsize_t *image_size)
     * }
     */
    public static MethodHandle H5Fget_mdc_image_info$handle() { return H5Fget_mdc_image_info.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_image_info(hid_t file_id, haddr_t *image_addr, hsize_t *image_size)
     * }
     */
    public static MemorySegment H5Fget_mdc_image_info$address() { return H5Fget_mdc_image_info.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_mdc_image_info(hid_t file_id, haddr_t *image_addr, hsize_t *image_size)
     * }
     */
    public static int H5Fget_mdc_image_info(long file_id, MemorySegment image_addr, MemorySegment image_size)
    {
        var mh$ = H5Fget_mdc_image_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_mdc_image_info", file_id, image_addr, image_size);
            }
            return (int)mh$.invokeExact(file_id, image_addr, image_size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_dset_no_attrs_hint {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_dset_no_attrs_hint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_dset_no_attrs_hint(hid_t file_id, hbool_t *minimize)
     * }
     */
    public static FunctionDescriptor H5Fget_dset_no_attrs_hint$descriptor()
    {
        return H5Fget_dset_no_attrs_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_dset_no_attrs_hint(hid_t file_id, hbool_t *minimize)
     * }
     */
    public static MethodHandle H5Fget_dset_no_attrs_hint$handle() { return H5Fget_dset_no_attrs_hint.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_dset_no_attrs_hint(hid_t file_id, hbool_t *minimize)
     * }
     */
    public static MemorySegment H5Fget_dset_no_attrs_hint$address() { return H5Fget_dset_no_attrs_hint.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_dset_no_attrs_hint(hid_t file_id, hbool_t *minimize)
     * }
     */
    public static int H5Fget_dset_no_attrs_hint(long file_id, MemorySegment minimize)
    {
        var mh$ = H5Fget_dset_no_attrs_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_dset_no_attrs_hint", file_id, minimize);
            }
            return (int)mh$.invokeExact(file_id, minimize);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fset_dset_no_attrs_hint {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_BOOL);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fset_dset_no_attrs_hint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fset_dset_no_attrs_hint(hid_t file_id, hbool_t minimize)
     * }
     */
    public static FunctionDescriptor H5Fset_dset_no_attrs_hint$descriptor()
    {
        return H5Fset_dset_no_attrs_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fset_dset_no_attrs_hint(hid_t file_id, hbool_t minimize)
     * }
     */
    public static MethodHandle H5Fset_dset_no_attrs_hint$handle() { return H5Fset_dset_no_attrs_hint.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fset_dset_no_attrs_hint(hid_t file_id, hbool_t minimize)
     * }
     */
    public static MemorySegment H5Fset_dset_no_attrs_hint$address() { return H5Fset_dset_no_attrs_hint.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fset_dset_no_attrs_hint(hid_t file_id, hbool_t minimize)
     * }
     */
    public static int H5Fset_dset_no_attrs_hint(long file_id, boolean minimize)
    {
        var mh$ = H5Fset_dset_no_attrs_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fset_dset_no_attrs_hint", file_id, minimize);
            }
            return (int)mh$.invokeExact(file_id, minimize);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fformat_convert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fformat_convert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fformat_convert(hid_t fid)
     * }
     */
    public static FunctionDescriptor H5Fformat_convert$descriptor() { return H5Fformat_convert.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fformat_convert(hid_t fid)
     * }
     */
    public static MethodHandle H5Fformat_convert$handle() { return H5Fformat_convert.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fformat_convert(hid_t fid)
     * }
     */
    public static MemorySegment H5Fformat_convert$address() { return H5Fformat_convert.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fformat_convert(hid_t fid)
     * }
     */
    public static int H5Fformat_convert(long fid)
    {
        var mh$ = H5Fformat_convert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fformat_convert", fid);
            }
            return (int)mh$.invokeExact(fid);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fget_info1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fget_info1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fget_info1(hid_t obj_id, H5F_info1_t *file_info)
     * }
     */
    public static FunctionDescriptor H5Fget_info1$descriptor() { return H5Fget_info1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fget_info1(hid_t obj_id, H5F_info1_t *file_info)
     * }
     */
    public static MethodHandle H5Fget_info1$handle() { return H5Fget_info1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fget_info1(hid_t obj_id, H5F_info1_t *file_info)
     * }
     */
    public static MemorySegment H5Fget_info1$address() { return H5Fget_info1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fget_info1(hid_t obj_id, H5F_info1_t *file_info)
     * }
     */
    public static int H5Fget_info1(long obj_id, MemorySegment file_info)
    {
        var mh$ = H5Fget_info1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fget_info1", obj_id, file_info);
            }
            return (int)mh$.invokeExact(obj_id, file_info);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fset_latest_format {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_BOOL);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fset_latest_format");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Fset_latest_format(hid_t file_id, hbool_t latest_format)
     * }
     */
    public static FunctionDescriptor H5Fset_latest_format$descriptor() { return H5Fset_latest_format.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Fset_latest_format(hid_t file_id, hbool_t latest_format)
     * }
     */
    public static MethodHandle H5Fset_latest_format$handle() { return H5Fset_latest_format.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Fset_latest_format(hid_t file_id, hbool_t latest_format)
     * }
     */
    public static MemorySegment H5Fset_latest_format$address() { return H5Fset_latest_format.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Fset_latest_format(hid_t file_id, hbool_t latest_format)
     * }
     */
    public static int H5Fset_latest_format(long file_id, boolean latest_format)
    {
        var mh$ = H5Fset_latest_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fset_latest_format", file_id, latest_format);
            }
            return (int)mh$.invokeExact(file_id, latest_format);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Fis_hdf5 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Fis_hdf5");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Fis_hdf5(const char *file_name)
     * }
     */
    public static FunctionDescriptor H5Fis_hdf5$descriptor() { return H5Fis_hdf5.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Fis_hdf5(const char *file_name)
     * }
     */
    public static MethodHandle H5Fis_hdf5$handle() { return H5Fis_hdf5.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Fis_hdf5(const char *file_name)
     * }
     */
    public static MemorySegment H5Fis_hdf5$address() { return H5Fis_hdf5.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Fis_hdf5(const char *file_name)
     * }
     */
    public static int H5Fis_hdf5(MemorySegment file_name)
    {
        var mh$ = H5Fis_hdf5.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Fis_hdf5", file_name);
            }
            return (int)mh$.invokeExact(file_name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef int H5FD_class_value_t
     * }
     */
    public static final OfInt H5FD_class_value_t      = hdf5_h.C_INT;
    private static final int H5FD_FILE_IMAGE_OP_NO_OP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5FD_FILE_IMAGE_OP_NO_OP = 0
     * }
     */
    public static int H5FD_FILE_IMAGE_OP_NO_OP() { return H5FD_FILE_IMAGE_OP_NO_OP; }
    private static final int H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET = 1
     * }
     */
    public static int H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET() { return H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET; }
    private static final int H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY = 2
     * }
     */
    public static int H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY()
    {
        return H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY;
    }
    private static final int H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET = 3
     * }
     */
    public static int H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET() { return H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET; }
    private static final int H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE = 4
     * }
     */
    public static int H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE()
    {
        return H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE;
    }
    private static final int H5FD_FILE_IMAGE_OP_FILE_OPEN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5FD_FILE_IMAGE_OP_FILE_OPEN = 5
     * }
     */
    public static int H5FD_FILE_IMAGE_OP_FILE_OPEN() { return H5FD_FILE_IMAGE_OP_FILE_OPEN; }
    private static final int H5FD_FILE_IMAGE_OP_FILE_RESIZE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5FD_FILE_IMAGE_OP_FILE_RESIZE = 6
     * }
     */
    public static int H5FD_FILE_IMAGE_OP_FILE_RESIZE() { return H5FD_FILE_IMAGE_OP_FILE_RESIZE; }
    private static final int H5FD_FILE_IMAGE_OP_FILE_CLOSE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5FD_FILE_IMAGE_OP_FILE_CLOSE = 7
     * }
     */
    public static int H5FD_FILE_IMAGE_OP_FILE_CLOSE() { return H5FD_FILE_IMAGE_OP_FILE_CLOSE; }

    private static class H5FDdriver_query {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5FDdriver_query");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5FDdriver_query(hid_t driver_id, unsigned long *flags)
     * }
     */
    public static FunctionDescriptor H5FDdriver_query$descriptor() { return H5FDdriver_query.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5FDdriver_query(hid_t driver_id, unsigned long *flags)
     * }
     */
    public static MethodHandle H5FDdriver_query$handle() { return H5FDdriver_query.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5FDdriver_query(hid_t driver_id, unsigned long *flags)
     * }
     */
    public static MemorySegment H5FDdriver_query$address() { return H5FDdriver_query.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5FDdriver_query(hid_t driver_id, unsigned long *flags)
     * }
     */
    public static int H5FDdriver_query(long driver_id, MemorySegment flags)
    {
        var mh$ = H5FDdriver_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5FDdriver_query", driver_id, flags);
            }
            return (int)mh$.invokeExact(driver_id, flags);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5L_TYPE_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5L_TYPE_ERROR = -1
     * }
     */
    public static int H5L_TYPE_ERROR() { return H5L_TYPE_ERROR; }
    private static final int H5L_TYPE_HARD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5L_TYPE_HARD = 0
     * }
     */
    public static int H5L_TYPE_HARD() { return H5L_TYPE_HARD; }
    private static final int H5L_TYPE_SOFT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5L_TYPE_SOFT = 1
     * }
     */
    public static int H5L_TYPE_SOFT() { return H5L_TYPE_SOFT; }
    private static final int H5L_TYPE_EXTERNAL = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5L_TYPE_EXTERNAL = 64
     * }
     */
    public static int H5L_TYPE_EXTERNAL() { return H5L_TYPE_EXTERNAL; }
    private static final int H5L_TYPE_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5L_TYPE_MAX = 255
     * }
     */
    public static int H5L_TYPE_MAX() { return H5L_TYPE_MAX; }

    private static class H5Lmove {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG,
                                  hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lmove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lmove(hid_t src_loc, const char *src_name, hid_t dst_loc, const char *dst_name, hid_t lcpl_id,
     * hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lmove$descriptor() { return H5Lmove.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lmove(hid_t src_loc, const char *src_name, hid_t dst_loc, const char *dst_name, hid_t lcpl_id,
     * hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lmove$handle() { return H5Lmove.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lmove(hid_t src_loc, const char *src_name, hid_t dst_loc, const char *dst_name, hid_t lcpl_id,
     * hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lmove$address() { return H5Lmove.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lmove(hid_t src_loc, const char *src_name, hid_t dst_loc, const char *dst_name, hid_t lcpl_id,
     * hid_t lapl_id)
     * }
     */
    public static int H5Lmove(long src_loc, MemorySegment src_name, long dst_loc, MemorySegment dst_name,
                              long lcpl_id, long lapl_id)
    {
        var mh$ = H5Lmove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lmove", src_loc, src_name, dst_loc, dst_name, lcpl_id, lapl_id);
            }
            return (int)mh$.invokeExact(src_loc, src_name, dst_loc, dst_name, lcpl_id, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lcopy {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG,
                                  hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lcopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lcopy(hid_t src_loc, const char *src_name, hid_t dst_loc, const char *dst_name, hid_t lcpl_id,
     * hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lcopy$descriptor() { return H5Lcopy.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lcopy(hid_t src_loc, const char *src_name, hid_t dst_loc, const char *dst_name, hid_t lcpl_id,
     * hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lcopy$handle() { return H5Lcopy.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lcopy(hid_t src_loc, const char *src_name, hid_t dst_loc, const char *dst_name, hid_t lcpl_id,
     * hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lcopy$address() { return H5Lcopy.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lcopy(hid_t src_loc, const char *src_name, hid_t dst_loc, const char *dst_name, hid_t lcpl_id,
     * hid_t lapl_id)
     * }
     */
    public static int H5Lcopy(long src_loc, MemorySegment src_name, long dst_loc, MemorySegment dst_name,
                              long lcpl_id, long lapl_id)
    {
        var mh$ = H5Lcopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lcopy", src_loc, src_name, dst_loc, dst_name, lcpl_id, lapl_id);
            }
            return (int)mh$.invokeExact(src_loc, src_name, dst_loc, dst_name, lcpl_id, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lcreate_hard {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG,
                                  hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lcreate_hard");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_hard(hid_t cur_loc, const char *cur_name, hid_t dst_loc, const char *dst_name, hid_t
     * lcpl_id, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lcreate_hard$descriptor() { return H5Lcreate_hard.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_hard(hid_t cur_loc, const char *cur_name, hid_t dst_loc, const char *dst_name, hid_t
     * lcpl_id, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lcreate_hard$handle() { return H5Lcreate_hard.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_hard(hid_t cur_loc, const char *cur_name, hid_t dst_loc, const char *dst_name, hid_t
     * lcpl_id, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lcreate_hard$address() { return H5Lcreate_hard.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lcreate_hard(hid_t cur_loc, const char *cur_name, hid_t dst_loc, const char *dst_name, hid_t
     * lcpl_id, hid_t lapl_id)
     * }
     */
    public static int H5Lcreate_hard(long cur_loc, MemorySegment cur_name, long dst_loc,
                                     MemorySegment dst_name, long lcpl_id, long lapl_id)
    {
        var mh$ = H5Lcreate_hard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lcreate_hard", cur_loc, cur_name, dst_loc, dst_name, lcpl_id, lapl_id);
            }
            return (int)mh$.invokeExact(cur_loc, cur_name, dst_loc, dst_name, lcpl_id, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lcreate_hard_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lcreate_hard_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_hard_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * cur_loc_id, const char *cur_name, hid_t new_loc_id, const char *new_name, hid_t lcpl_id, hid_t lapl_id,
     * hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Lcreate_hard_async$descriptor() { return H5Lcreate_hard_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_hard_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * cur_loc_id, const char *cur_name, hid_t new_loc_id, const char *new_name, hid_t lcpl_id, hid_t lapl_id,
     * hid_t es_id)
     * }
     */
    public static MethodHandle H5Lcreate_hard_async$handle() { return H5Lcreate_hard_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_hard_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * cur_loc_id, const char *cur_name, hid_t new_loc_id, const char *new_name, hid_t lcpl_id, hid_t lapl_id,
     * hid_t es_id)
     * }
     */
    public static MemorySegment H5Lcreate_hard_async$address() { return H5Lcreate_hard_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lcreate_hard_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * cur_loc_id, const char *cur_name, hid_t new_loc_id, const char *new_name, hid_t lcpl_id, hid_t lapl_id,
     * hid_t es_id)
     * }
     */
    public static int H5Lcreate_hard_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                           long cur_loc_id, MemorySegment cur_name, long new_loc_id,
                                           MemorySegment new_name, long lcpl_id, long lapl_id, long es_id)
    {
        var mh$ = H5Lcreate_hard_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lcreate_hard_async", app_file, app_func, app_line, cur_loc_id, cur_name,
                              new_loc_id, new_name, lcpl_id, lapl_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, cur_loc_id, cur_name, new_loc_id,
                                        new_name, lcpl_id, lapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lcreate_soft {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lcreate_soft");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_soft(const char *link_target, hid_t link_loc_id, const char *link_name, hid_t lcpl_id,
     * hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lcreate_soft$descriptor() { return H5Lcreate_soft.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_soft(const char *link_target, hid_t link_loc_id, const char *link_name, hid_t lcpl_id,
     * hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lcreate_soft$handle() { return H5Lcreate_soft.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_soft(const char *link_target, hid_t link_loc_id, const char *link_name, hid_t lcpl_id,
     * hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lcreate_soft$address() { return H5Lcreate_soft.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lcreate_soft(const char *link_target, hid_t link_loc_id, const char *link_name, hid_t lcpl_id,
     * hid_t lapl_id)
     * }
     */
    public static int H5Lcreate_soft(MemorySegment link_target, long link_loc_id, MemorySegment link_name,
                                     long lcpl_id, long lapl_id)
    {
        var mh$ = H5Lcreate_soft.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lcreate_soft", link_target, link_loc_id, link_name, lcpl_id, lapl_id);
            }
            return (int)mh$.invokeExact(link_target, link_loc_id, link_name, lcpl_id, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lcreate_soft_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG,
            hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lcreate_soft_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_soft_async(const char *app_file, const char *app_func, unsigned int app_line, const
     * char *link_target, hid_t link_loc_id, const char *link_name, hid_t lcpl_id, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Lcreate_soft_async$descriptor() { return H5Lcreate_soft_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_soft_async(const char *app_file, const char *app_func, unsigned int app_line, const
     * char *link_target, hid_t link_loc_id, const char *link_name, hid_t lcpl_id, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Lcreate_soft_async$handle() { return H5Lcreate_soft_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_soft_async(const char *app_file, const char *app_func, unsigned int app_line, const
     * char *link_target, hid_t link_loc_id, const char *link_name, hid_t lcpl_id, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Lcreate_soft_async$address() { return H5Lcreate_soft_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lcreate_soft_async(const char *app_file, const char *app_func, unsigned int app_line, const
     * char *link_target, hid_t link_loc_id, const char *link_name, hid_t lcpl_id, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static int H5Lcreate_soft_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                           MemorySegment link_target, long link_loc_id,
                                           MemorySegment link_name, long lcpl_id, long lapl_id, long es_id)
    {
        var mh$ = H5Lcreate_soft_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lcreate_soft_async", app_file, app_func, app_line, link_target, link_loc_id,
                              link_name, lcpl_id, lapl_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, link_target, link_loc_id, link_name,
                                        lcpl_id, lapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ldelete {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ldelete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Ldelete(hid_t loc_id, const char *name, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Ldelete$descriptor() { return H5Ldelete.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Ldelete(hid_t loc_id, const char *name, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Ldelete$handle() { return H5Ldelete.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Ldelete(hid_t loc_id, const char *name, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Ldelete$address() { return H5Ldelete.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Ldelete(hid_t loc_id, const char *name, hid_t lapl_id)
     * }
     */
    public static int H5Ldelete(long loc_id, MemorySegment name, long lapl_id)
    {
        var mh$ = H5Ldelete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ldelete", loc_id, name, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, name, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ldelete_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ldelete_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Ldelete_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Ldelete_async$descriptor() { return H5Ldelete_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Ldelete_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Ldelete_async$handle() { return H5Ldelete_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Ldelete_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Ldelete_async$address() { return H5Ldelete_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Ldelete_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static int H5Ldelete_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                      long loc_id, MemorySegment name, long lapl_id, long es_id)
    {
        var mh$ = H5Ldelete_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ldelete_async", app_file, app_func, app_line, loc_id, name, lapl_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, loc_id, name, lapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ldelete_by_idx {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ldelete_by_idx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Ldelete_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Ldelete_by_idx$descriptor() { return H5Ldelete_by_idx.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Ldelete_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Ldelete_by_idx$handle() { return H5Ldelete_by_idx.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Ldelete_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Ldelete_by_idx$address() { return H5Ldelete_by_idx.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Ldelete_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, hid_t lapl_id)
     * }
     */
    public static int H5Ldelete_by_idx(long loc_id, MemorySegment group_name, int idx_type, int order, long n,
                                       long lapl_id)
    {
        var mh$ = H5Ldelete_by_idx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ldelete_by_idx", loc_id, group_name, idx_type, order, n, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, group_name, idx_type, order, n, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ldelete_by_idx_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ldelete_by_idx_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Ldelete_by_idx_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, hid_t lapl_id,
     * hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Ldelete_by_idx_async$descriptor()
    {
        return H5Ldelete_by_idx_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Ldelete_by_idx_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, hid_t lapl_id,
     * hid_t es_id)
     * }
     */
    public static MethodHandle H5Ldelete_by_idx_async$handle() { return H5Ldelete_by_idx_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Ldelete_by_idx_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, hid_t lapl_id,
     * hid_t es_id)
     * }
     */
    public static MemorySegment H5Ldelete_by_idx_async$address() { return H5Ldelete_by_idx_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Ldelete_by_idx_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, hid_t lapl_id,
     * hid_t es_id)
     * }
     */
    public static int H5Ldelete_by_idx_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                             long loc_id, MemorySegment group_name, int idx_type, int order,
                                             long n, long lapl_id, long es_id)
    {
        var mh$ = H5Ldelete_by_idx_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ldelete_by_idx_async", app_file, app_func, app_line, loc_id, group_name,
                              idx_type, order, n, lapl_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, loc_id, group_name, idx_type, order, n,
                                        lapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lget_val {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lget_val");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lget_val(hid_t loc_id, const char *name, void *buf, size_t size, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lget_val$descriptor() { return H5Lget_val.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lget_val(hid_t loc_id, const char *name, void *buf, size_t size, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lget_val$handle() { return H5Lget_val.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lget_val(hid_t loc_id, const char *name, void *buf, size_t size, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lget_val$address() { return H5Lget_val.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lget_val(hid_t loc_id, const char *name, void *buf, size_t size, hid_t lapl_id)
     * }
     */
    public static int H5Lget_val(long loc_id, MemorySegment name, MemorySegment buf, long size, long lapl_id)
    {
        var mh$ = H5Lget_val.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lget_val", loc_id, name, buf, size, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, name, buf, size, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lget_val_by_idx {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lget_val_by_idx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lget_val_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, void *buf, size_t size, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lget_val_by_idx$descriptor() { return H5Lget_val_by_idx.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lget_val_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, void *buf, size_t size, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lget_val_by_idx$handle() { return H5Lget_val_by_idx.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lget_val_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, void *buf, size_t size, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lget_val_by_idx$address() { return H5Lget_val_by_idx.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lget_val_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, void *buf, size_t size, hid_t lapl_id)
     * }
     */
    public static int H5Lget_val_by_idx(long loc_id, MemorySegment group_name, int idx_type, int order,
                                        long n, MemorySegment buf, long size, long lapl_id)
    {
        var mh$ = H5Lget_val_by_idx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lget_val_by_idx", loc_id, group_name, idx_type, order, n, buf, size,
                              lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, group_name, idx_type, order, n, buf, size, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lexists {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lexists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Lexists(hid_t loc_id, const char *name, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lexists$descriptor() { return H5Lexists.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Lexists(hid_t loc_id, const char *name, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lexists$handle() { return H5Lexists.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Lexists(hid_t loc_id, const char *name, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lexists$address() { return H5Lexists.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Lexists(hid_t loc_id, const char *name, hid_t lapl_id)
     * }
     */
    public static int H5Lexists(long loc_id, MemorySegment name, long lapl_id)
    {
        var mh$ = H5Lexists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lexists", loc_id, name, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, name, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lexists_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lexists_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lexists_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hbool_t *exists, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Lexists_async$descriptor() { return H5Lexists_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lexists_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hbool_t *exists, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Lexists_async$handle() { return H5Lexists_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lexists_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hbool_t *exists, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Lexists_async$address() { return H5Lexists_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lexists_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hbool_t *exists, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static int H5Lexists_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                      long loc_id, MemorySegment name, MemorySegment exists, long lapl_id,
                                      long es_id)
    {
        var mh$ = H5Lexists_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lexists_async", app_file, app_func, app_line, loc_id, name, exists, lapl_id,
                              es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, loc_id, name, exists, lapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lget_info2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lget_info2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lget_info2(hid_t loc_id, const char *name, H5L_info2_t *linfo, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lget_info2$descriptor() { return H5Lget_info2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lget_info2(hid_t loc_id, const char *name, H5L_info2_t *linfo, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lget_info2$handle() { return H5Lget_info2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lget_info2(hid_t loc_id, const char *name, H5L_info2_t *linfo, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lget_info2$address() { return H5Lget_info2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lget_info2(hid_t loc_id, const char *name, H5L_info2_t *linfo, hid_t lapl_id)
     * }
     */
    public static int H5Lget_info2(long loc_id, MemorySegment name, MemorySegment linfo, long lapl_id)
    {
        var mh$ = H5Lget_info2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lget_info2", loc_id, name, linfo, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, name, linfo, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lget_info_by_idx2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lget_info_by_idx2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lget_info_by_idx2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5L_info2_t *linfo, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lget_info_by_idx2$descriptor() { return H5Lget_info_by_idx2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lget_info_by_idx2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5L_info2_t *linfo, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lget_info_by_idx2$handle() { return H5Lget_info_by_idx2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lget_info_by_idx2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5L_info2_t *linfo, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lget_info_by_idx2$address() { return H5Lget_info_by_idx2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lget_info_by_idx2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5L_info2_t *linfo, hid_t lapl_id)
     * }
     */
    public static int H5Lget_info_by_idx2(long loc_id, MemorySegment group_name, int idx_type, int order,
                                          long n, MemorySegment linfo, long lapl_id)
    {
        var mh$ = H5Lget_info_by_idx2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lget_info_by_idx2", loc_id, group_name, idx_type, order, n, linfo, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, group_name, idx_type, order, n, linfo, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lget_name_by_idx {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lget_name_by_idx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Lget_name_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, char *name, size_t size, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lget_name_by_idx$descriptor() { return H5Lget_name_by_idx.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Lget_name_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, char *name, size_t size, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lget_name_by_idx$handle() { return H5Lget_name_by_idx.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Lget_name_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, char *name, size_t size, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lget_name_by_idx$address() { return H5Lget_name_by_idx.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Lget_name_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, char *name, size_t size, hid_t lapl_id)
     * }
     */
    public static long H5Lget_name_by_idx(long loc_id, MemorySegment group_name, int idx_type, int order,
                                          long n, MemorySegment name, long size, long lapl_id)
    {
        var mh$ = H5Lget_name_by_idx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lget_name_by_idx", loc_id, group_name, idx_type, order, n, name, size,
                              lapl_id);
            }
            return (long)mh$.invokeExact(loc_id, group_name, idx_type, order, n, name, size, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Literate2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Literate2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Literate2(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx,
     * H5L_iterate2_t op, void *op_data)
     * }
     */
    public static FunctionDescriptor H5Literate2$descriptor() { return H5Literate2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Literate2(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx,
     * H5L_iterate2_t op, void *op_data)
     * }
     */
    public static MethodHandle H5Literate2$handle() { return H5Literate2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Literate2(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx,
     * H5L_iterate2_t op, void *op_data)
     * }
     */
    public static MemorySegment H5Literate2$address() { return H5Literate2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Literate2(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx,
     * H5L_iterate2_t op, void *op_data)
     * }
     */
    public static int H5Literate2(long grp_id, int idx_type, int order, MemorySegment idx, MemorySegment op,
                                  MemorySegment op_data)
    {
        var mh$ = H5Literate2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Literate2", grp_id, idx_type, order, idx, op, op_data);
            }
            return (int)mh$.invokeExact(grp_id, idx_type, order, idx, op, op_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Literate_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT,
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Literate_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Literate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * group_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx_p, H5L_iterate2_t op, void *op_data,
     * hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Literate_async$descriptor() { return H5Literate_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Literate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * group_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx_p, H5L_iterate2_t op, void *op_data,
     * hid_t es_id)
     * }
     */
    public static MethodHandle H5Literate_async$handle() { return H5Literate_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Literate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * group_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx_p, H5L_iterate2_t op, void *op_data,
     * hid_t es_id)
     * }
     */
    public static MemorySegment H5Literate_async$address() { return H5Literate_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Literate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * group_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx_p, H5L_iterate2_t op, void *op_data,
     * hid_t es_id)
     * }
     */
    public static int H5Literate_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                       long group_id, int idx_type, int order, MemorySegment idx_p,
                                       MemorySegment op, MemorySegment op_data, long es_id)
    {
        var mh$ = H5Literate_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Literate_async", app_file, app_func, app_line, group_id, idx_type, order,
                              idx_p, op, op_data, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, group_id, idx_type, order, idx_p, op,
                                        op_data, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Literate_by_name2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Literate_by_name2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Literate_by_name2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t *idx, H5L_iterate2_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Literate_by_name2$descriptor() { return H5Literate_by_name2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Literate_by_name2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t *idx, H5L_iterate2_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Literate_by_name2$handle() { return H5Literate_by_name2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Literate_by_name2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t *idx, H5L_iterate2_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Literate_by_name2$address() { return H5Literate_by_name2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Literate_by_name2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t *idx, H5L_iterate2_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static int H5Literate_by_name2(long loc_id, MemorySegment group_name, int idx_type, int order,
                                          MemorySegment idx, MemorySegment op, MemorySegment op_data,
                                          long lapl_id)
    {
        var mh$ = H5Literate_by_name2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Literate_by_name2", loc_id, group_name, idx_type, order, idx, op, op_data,
                              lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, group_name, idx_type, order, idx, op, op_data, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lvisit2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lvisit2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lvisit2(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, H5L_iterate2_t op, void
     * *op_data)
     * }
     */
    public static FunctionDescriptor H5Lvisit2$descriptor() { return H5Lvisit2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lvisit2(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, H5L_iterate2_t op, void
     * *op_data)
     * }
     */
    public static MethodHandle H5Lvisit2$handle() { return H5Lvisit2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lvisit2(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, H5L_iterate2_t op, void
     * *op_data)
     * }
     */
    public static MemorySegment H5Lvisit2$address() { return H5Lvisit2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lvisit2(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, H5L_iterate2_t op, void
     * *op_data)
     * }
     */
    public static int H5Lvisit2(long grp_id, int idx_type, int order, MemorySegment op, MemorySegment op_data)
    {
        var mh$ = H5Lvisit2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lvisit2", grp_id, idx_type, order, op, op_data);
            }
            return (int)mh$.invokeExact(grp_id, idx_type, order, op, op_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lvisit_by_name2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lvisit_by_name2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lvisit_by_name2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, H5L_iterate2_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lvisit_by_name2$descriptor() { return H5Lvisit_by_name2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lvisit_by_name2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, H5L_iterate2_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lvisit_by_name2$handle() { return H5Lvisit_by_name2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lvisit_by_name2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, H5L_iterate2_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lvisit_by_name2$address() { return H5Lvisit_by_name2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lvisit_by_name2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, H5L_iterate2_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static int H5Lvisit_by_name2(long loc_id, MemorySegment group_name, int idx_type, int order,
                                        MemorySegment op, MemorySegment op_data, long lapl_id)
    {
        var mh$ = H5Lvisit_by_name2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lvisit_by_name2", loc_id, group_name, idx_type, order, op, op_data, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, group_name, idx_type, order, op, op_data, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lcreate_ud {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lcreate_ud");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_ud(hid_t link_loc_id, const char *link_name, H5L_type_t link_type, const void *udata,
     * size_t udata_size, hid_t lcpl_id, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lcreate_ud$descriptor() { return H5Lcreate_ud.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_ud(hid_t link_loc_id, const char *link_name, H5L_type_t link_type, const void *udata,
     * size_t udata_size, hid_t lcpl_id, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lcreate_ud$handle() { return H5Lcreate_ud.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_ud(hid_t link_loc_id, const char *link_name, H5L_type_t link_type, const void *udata,
     * size_t udata_size, hid_t lcpl_id, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lcreate_ud$address() { return H5Lcreate_ud.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lcreate_ud(hid_t link_loc_id, const char *link_name, H5L_type_t link_type, const void *udata,
     * size_t udata_size, hid_t lcpl_id, hid_t lapl_id)
     * }
     */
    public static int H5Lcreate_ud(long link_loc_id, MemorySegment link_name, int link_type,
                                   MemorySegment udata, long udata_size, long lcpl_id, long lapl_id)
    {
        var mh$ = H5Lcreate_ud.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lcreate_ud", link_loc_id, link_name, link_type, udata, udata_size, lcpl_id,
                              lapl_id);
            }
            return (int)mh$.invokeExact(link_loc_id, link_name, link_type, udata, udata_size, lcpl_id,
                                        lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lis_registered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lis_registered");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Lis_registered(H5L_type_t id)
     * }
     */
    public static FunctionDescriptor H5Lis_registered$descriptor() { return H5Lis_registered.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Lis_registered(H5L_type_t id)
     * }
     */
    public static MethodHandle H5Lis_registered$handle() { return H5Lis_registered.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Lis_registered(H5L_type_t id)
     * }
     */
    public static MemorySegment H5Lis_registered$address() { return H5Lis_registered.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Lis_registered(H5L_type_t id)
     * }
     */
    public static int H5Lis_registered(int id)
    {
        var mh$ = H5Lis_registered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lis_registered", id);
            }
            return (int)mh$.invokeExact(id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lunpack_elink_val {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lunpack_elink_val");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lunpack_elink_val(const void *ext_linkval, size_t link_size, unsigned int *flags, const char
     * **filename, const char **obj_path)
     * }
     */
    public static FunctionDescriptor H5Lunpack_elink_val$descriptor() { return H5Lunpack_elink_val.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lunpack_elink_val(const void *ext_linkval, size_t link_size, unsigned int *flags, const char
     * **filename, const char **obj_path)
     * }
     */
    public static MethodHandle H5Lunpack_elink_val$handle() { return H5Lunpack_elink_val.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lunpack_elink_val(const void *ext_linkval, size_t link_size, unsigned int *flags, const char
     * **filename, const char **obj_path)
     * }
     */
    public static MemorySegment H5Lunpack_elink_val$address() { return H5Lunpack_elink_val.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lunpack_elink_val(const void *ext_linkval, size_t link_size, unsigned int *flags, const char
     * **filename, const char **obj_path)
     * }
     */
    public static int H5Lunpack_elink_val(MemorySegment ext_linkval, long link_size, MemorySegment flags,
                                          MemorySegment filename, MemorySegment obj_path)
    {
        var mh$ = H5Lunpack_elink_val.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lunpack_elink_val", ext_linkval, link_size, flags, filename, obj_path);
            }
            return (int)mh$.invokeExact(ext_linkval, link_size, flags, filename, obj_path);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lcreate_external {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG,
                                  hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lcreate_external");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_external(const char *file_name, const char *obj_name, hid_t link_loc_id, const char
     * *link_name, hid_t lcpl_id, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lcreate_external$descriptor() { return H5Lcreate_external.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_external(const char *file_name, const char *obj_name, hid_t link_loc_id, const char
     * *link_name, hid_t lcpl_id, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lcreate_external$handle() { return H5Lcreate_external.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lcreate_external(const char *file_name, const char *obj_name, hid_t link_loc_id, const char
     * *link_name, hid_t lcpl_id, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lcreate_external$address() { return H5Lcreate_external.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lcreate_external(const char *file_name, const char *obj_name, hid_t link_loc_id, const char
     * *link_name, hid_t lcpl_id, hid_t lapl_id)
     * }
     */
    public static int H5Lcreate_external(MemorySegment file_name, MemorySegment obj_name, long link_loc_id,
                                         MemorySegment link_name, long lcpl_id, long lapl_id)
    {
        var mh$ = H5Lcreate_external.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lcreate_external", file_name, obj_name, link_loc_id, link_name, lcpl_id,
                              lapl_id);
            }
            return (int)mh$.invokeExact(file_name, obj_name, link_loc_id, link_name, lcpl_id, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lget_info1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lget_info1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lget_info1(hid_t loc_id, const char *name, H5L_info1_t *linfo, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lget_info1$descriptor() { return H5Lget_info1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lget_info1(hid_t loc_id, const char *name, H5L_info1_t *linfo, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lget_info1$handle() { return H5Lget_info1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lget_info1(hid_t loc_id, const char *name, H5L_info1_t *linfo, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lget_info1$address() { return H5Lget_info1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lget_info1(hid_t loc_id, const char *name, H5L_info1_t *linfo, hid_t lapl_id)
     * }
     */
    public static int H5Lget_info1(long loc_id, MemorySegment name, MemorySegment linfo, long lapl_id)
    {
        var mh$ = H5Lget_info1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lget_info1", loc_id, name, linfo, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, name, linfo, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lget_info_by_idx1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lget_info_by_idx1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lget_info_by_idx1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5L_info1_t *linfo, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lget_info_by_idx1$descriptor() { return H5Lget_info_by_idx1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lget_info_by_idx1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5L_info1_t *linfo, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lget_info_by_idx1$handle() { return H5Lget_info_by_idx1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lget_info_by_idx1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5L_info1_t *linfo, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lget_info_by_idx1$address() { return H5Lget_info_by_idx1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lget_info_by_idx1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5L_info1_t *linfo, hid_t lapl_id)
     * }
     */
    public static int H5Lget_info_by_idx1(long loc_id, MemorySegment group_name, int idx_type, int order,
                                          long n, MemorySegment linfo, long lapl_id)
    {
        var mh$ = H5Lget_info_by_idx1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lget_info_by_idx1", loc_id, group_name, idx_type, order, n, linfo, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, group_name, idx_type, order, n, linfo, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Literate1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Literate1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Literate1(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx,
     * H5L_iterate1_t op, void *op_data)
     * }
     */
    public static FunctionDescriptor H5Literate1$descriptor() { return H5Literate1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Literate1(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx,
     * H5L_iterate1_t op, void *op_data)
     * }
     */
    public static MethodHandle H5Literate1$handle() { return H5Literate1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Literate1(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx,
     * H5L_iterate1_t op, void *op_data)
     * }
     */
    public static MemorySegment H5Literate1$address() { return H5Literate1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Literate1(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx,
     * H5L_iterate1_t op, void *op_data)
     * }
     */
    public static int H5Literate1(long grp_id, int idx_type, int order, MemorySegment idx, MemorySegment op,
                                  MemorySegment op_data)
    {
        var mh$ = H5Literate1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Literate1", grp_id, idx_type, order, idx, op, op_data);
            }
            return (int)mh$.invokeExact(grp_id, idx_type, order, idx, op, op_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Literate_by_name1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Literate_by_name1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Literate_by_name1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t *idx, H5L_iterate1_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Literate_by_name1$descriptor() { return H5Literate_by_name1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Literate_by_name1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t *idx, H5L_iterate1_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Literate_by_name1$handle() { return H5Literate_by_name1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Literate_by_name1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t *idx, H5L_iterate1_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Literate_by_name1$address() { return H5Literate_by_name1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Literate_by_name1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t *idx, H5L_iterate1_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static int H5Literate_by_name1(long loc_id, MemorySegment group_name, int idx_type, int order,
                                          MemorySegment idx, MemorySegment op, MemorySegment op_data,
                                          long lapl_id)
    {
        var mh$ = H5Literate_by_name1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Literate_by_name1", loc_id, group_name, idx_type, order, idx, op, op_data,
                              lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, group_name, idx_type, order, idx, op, op_data, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lvisit1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lvisit1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lvisit1(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, H5L_iterate1_t op, void
     * *op_data)
     * }
     */
    public static FunctionDescriptor H5Lvisit1$descriptor() { return H5Lvisit1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lvisit1(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, H5L_iterate1_t op, void
     * *op_data)
     * }
     */
    public static MethodHandle H5Lvisit1$handle() { return H5Lvisit1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lvisit1(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, H5L_iterate1_t op, void
     * *op_data)
     * }
     */
    public static MemorySegment H5Lvisit1$address() { return H5Lvisit1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lvisit1(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, H5L_iterate1_t op, void
     * *op_data)
     * }
     */
    public static int H5Lvisit1(long grp_id, int idx_type, int order, MemorySegment op, MemorySegment op_data)
    {
        var mh$ = H5Lvisit1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lvisit1", grp_id, idx_type, order, op, op_data);
            }
            return (int)mh$.invokeExact(grp_id, idx_type, order, op, op_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Lvisit_by_name1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Lvisit_by_name1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Lvisit_by_name1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, H5L_iterate1_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Lvisit_by_name1$descriptor() { return H5Lvisit_by_name1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Lvisit_by_name1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, H5L_iterate1_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Lvisit_by_name1$handle() { return H5Lvisit_by_name1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Lvisit_by_name1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, H5L_iterate1_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Lvisit_by_name1$address() { return H5Lvisit_by_name1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Lvisit_by_name1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, H5L_iterate1_t op, void *op_data, hid_t lapl_id)
     * }
     */
    public static int H5Lvisit_by_name1(long loc_id, MemorySegment group_name, int idx_type, int order,
                                        MemorySegment op, MemorySegment op_data, long lapl_id)
    {
        var mh$ = H5Lvisit_by_name1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Lvisit_by_name1", loc_id, group_name, idx_type, order, op, op_data, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, group_name, idx_type, order, op, op_data, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5G_STORAGE_TYPE_UNKNOWN = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5G_storage_type_t.H5G_STORAGE_TYPE_UNKNOWN = -1
     * }
     */
    public static int H5G_STORAGE_TYPE_UNKNOWN() { return H5G_STORAGE_TYPE_UNKNOWN; }
    private static final int H5G_STORAGE_TYPE_SYMBOL_TABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5G_storage_type_t.H5G_STORAGE_TYPE_SYMBOL_TABLE = 0
     * }
     */
    public static int H5G_STORAGE_TYPE_SYMBOL_TABLE() { return H5G_STORAGE_TYPE_SYMBOL_TABLE; }
    private static final int H5G_STORAGE_TYPE_COMPACT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5G_storage_type_t.H5G_STORAGE_TYPE_COMPACT = 1
     * }
     */
    public static int H5G_STORAGE_TYPE_COMPACT() { return H5G_STORAGE_TYPE_COMPACT; }
    private static final int H5G_STORAGE_TYPE_DENSE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5G_storage_type_t.H5G_STORAGE_TYPE_DENSE = 2
     * }
     */
    public static int H5G_STORAGE_TYPE_DENSE() { return H5G_STORAGE_TYPE_DENSE; }

    private static class H5Gcreate2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gcreate2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Gcreate2(hid_t loc_id, const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id)
     * }
     */
    public static FunctionDescriptor H5Gcreate2$descriptor() { return H5Gcreate2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Gcreate2(hid_t loc_id, const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id)
     * }
     */
    public static MethodHandle H5Gcreate2$handle() { return H5Gcreate2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Gcreate2(hid_t loc_id, const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id)
     * }
     */
    public static MemorySegment H5Gcreate2$address() { return H5Gcreate2.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Gcreate2(hid_t loc_id, const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id)
     * }
     */
    public static long H5Gcreate2(long loc_id, MemorySegment name, long lcpl_id, long gcpl_id, long gapl_id)
    {
        var mh$ = H5Gcreate2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gcreate2", loc_id, name, lcpl_id, gcpl_id, gapl_id);
            }
            return (long)mh$.invokeExact(loc_id, name, lcpl_id, gcpl_id, gapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gcreate_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gcreate_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Gcreate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Gcreate_async$descriptor() { return H5Gcreate_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Gcreate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Gcreate_async$handle() { return H5Gcreate_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Gcreate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Gcreate_async$address() { return H5Gcreate_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Gcreate_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id, hid_t es_id)
     * }
     */
    public static long H5Gcreate_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                       long loc_id, MemorySegment name, long lcpl_id, long gcpl_id,
                                       long gapl_id, long es_id)
    {
        var mh$ = H5Gcreate_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gcreate_async", app_file, app_func, app_line, loc_id, name, lcpl_id, gcpl_id,
                              gapl_id, es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, loc_id, name, lcpl_id, gcpl_id,
                                         gapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gcreate_anon {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gcreate_anon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Gcreate_anon(hid_t loc_id, hid_t gcpl_id, hid_t gapl_id)
     * }
     */
    public static FunctionDescriptor H5Gcreate_anon$descriptor() { return H5Gcreate_anon.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Gcreate_anon(hid_t loc_id, hid_t gcpl_id, hid_t gapl_id)
     * }
     */
    public static MethodHandle H5Gcreate_anon$handle() { return H5Gcreate_anon.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Gcreate_anon(hid_t loc_id, hid_t gcpl_id, hid_t gapl_id)
     * }
     */
    public static MemorySegment H5Gcreate_anon$address() { return H5Gcreate_anon.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Gcreate_anon(hid_t loc_id, hid_t gcpl_id, hid_t gapl_id)
     * }
     */
    public static long H5Gcreate_anon(long loc_id, long gcpl_id, long gapl_id)
    {
        var mh$ = H5Gcreate_anon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gcreate_anon", loc_id, gcpl_id, gapl_id);
            }
            return (long)mh$.invokeExact(loc_id, gcpl_id, gapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gopen2 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gopen2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Gopen2(hid_t loc_id, const char *name, hid_t gapl_id)
     * }
     */
    public static FunctionDescriptor H5Gopen2$descriptor() { return H5Gopen2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Gopen2(hid_t loc_id, const char *name, hid_t gapl_id)
     * }
     */
    public static MethodHandle H5Gopen2$handle() { return H5Gopen2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Gopen2(hid_t loc_id, const char *name, hid_t gapl_id)
     * }
     */
    public static MemorySegment H5Gopen2$address() { return H5Gopen2.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Gopen2(hid_t loc_id, const char *name, hid_t gapl_id)
     * }
     */
    public static long H5Gopen2(long loc_id, MemorySegment name, long gapl_id)
    {
        var mh$ = H5Gopen2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gopen2", loc_id, name, gapl_id);
            }
            return (long)mh$.invokeExact(loc_id, name, gapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gopen_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gopen_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Gopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t gapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Gopen_async$descriptor() { return H5Gopen_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Gopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t gapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Gopen_async$handle() { return H5Gopen_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Gopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t gapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Gopen_async$address() { return H5Gopen_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Gopen_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t loc_id,
     * const char *name, hid_t gapl_id, hid_t es_id)
     * }
     */
    public static long H5Gopen_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     long loc_id, MemorySegment name, long gapl_id, long es_id)
    {
        var mh$ = H5Gopen_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gopen_async", app_file, app_func, app_line, loc_id, name, gapl_id, es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, loc_id, name, gapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_create_plist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_create_plist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Gget_create_plist(hid_t group_id)
     * }
     */
    public static FunctionDescriptor H5Gget_create_plist$descriptor() { return H5Gget_create_plist.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Gget_create_plist(hid_t group_id)
     * }
     */
    public static MethodHandle H5Gget_create_plist$handle() { return H5Gget_create_plist.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Gget_create_plist(hid_t group_id)
     * }
     */
    public static MemorySegment H5Gget_create_plist$address() { return H5Gget_create_plist.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Gget_create_plist(hid_t group_id)
     * }
     */
    public static long H5Gget_create_plist(long group_id)
    {
        var mh$ = H5Gget_create_plist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_create_plist", group_id);
            }
            return (long)mh$.invokeExact(group_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_info {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gget_info(hid_t loc_id, H5G_info_t *ginfo)
     * }
     */
    public static FunctionDescriptor H5Gget_info$descriptor() { return H5Gget_info.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gget_info(hid_t loc_id, H5G_info_t *ginfo)
     * }
     */
    public static MethodHandle H5Gget_info$handle() { return H5Gget_info.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gget_info(hid_t loc_id, H5G_info_t *ginfo)
     * }
     */
    public static MemorySegment H5Gget_info$address() { return H5Gget_info.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gget_info(hid_t loc_id, H5G_info_t *ginfo)
     * }
     */
    public static int H5Gget_info(long loc_id, MemorySegment ginfo)
    {
        var mh$ = H5Gget_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_info", loc_id, ginfo);
            }
            return (int)mh$.invokeExact(loc_id, ginfo);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_info_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_info_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, H5G_info_t *ginfo, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Gget_info_async$descriptor() { return H5Gget_info_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, H5G_info_t *ginfo, hid_t es_id)
     * }
     */
    public static MethodHandle H5Gget_info_async$handle() { return H5Gget_info_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, H5G_info_t *ginfo, hid_t es_id)
     * }
     */
    public static MemorySegment H5Gget_info_async$address() { return H5Gget_info_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gget_info_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, H5G_info_t *ginfo, hid_t es_id)
     * }
     */
    public static int H5Gget_info_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                        long loc_id, MemorySegment ginfo, long es_id)
    {
        var mh$ = H5Gget_info_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_info_async", app_file, app_func, app_line, loc_id, ginfo, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, loc_id, ginfo, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_info_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_info_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_name(hid_t loc_id, const char *name, H5G_info_t *ginfo, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Gget_info_by_name$descriptor() { return H5Gget_info_by_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_name(hid_t loc_id, const char *name, H5G_info_t *ginfo, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Gget_info_by_name$handle() { return H5Gget_info_by_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_name(hid_t loc_id, const char *name, H5G_info_t *ginfo, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Gget_info_by_name$address() { return H5Gget_info_by_name.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_name(hid_t loc_id, const char *name, H5G_info_t *ginfo, hid_t lapl_id)
     * }
     */
    public static int H5Gget_info_by_name(long loc_id, MemorySegment name, MemorySegment ginfo, long lapl_id)
    {
        var mh$ = H5Gget_info_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_info_by_name", loc_id, name, ginfo, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, name, ginfo, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_info_by_name_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_info_by_name_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_name_async(const char *app_file, const char *app_func, unsigned int app_line,
     * hid_t loc_id, const char *name, H5G_info_t *ginfo, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Gget_info_by_name_async$descriptor()
    {
        return H5Gget_info_by_name_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_name_async(const char *app_file, const char *app_func, unsigned int app_line,
     * hid_t loc_id, const char *name, H5G_info_t *ginfo, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Gget_info_by_name_async$handle() { return H5Gget_info_by_name_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_name_async(const char *app_file, const char *app_func, unsigned int app_line,
     * hid_t loc_id, const char *name, H5G_info_t *ginfo, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Gget_info_by_name_async$address() { return H5Gget_info_by_name_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_name_async(const char *app_file, const char *app_func, unsigned int app_line,
     * hid_t loc_id, const char *name, H5G_info_t *ginfo, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static int H5Gget_info_by_name_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                                long loc_id, MemorySegment name, MemorySegment ginfo,
                                                long lapl_id, long es_id)
    {
        var mh$ = H5Gget_info_by_name_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_info_by_name_async", app_file, app_func, app_line, loc_id, name, ginfo,
                              lapl_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, loc_id, name, ginfo, lapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_info_by_idx {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_info_by_idx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5G_info_t *ginfo, hid_t lapl_id)
     * }
     */
    public static FunctionDescriptor H5Gget_info_by_idx$descriptor() { return H5Gget_info_by_idx.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5G_info_t *ginfo, hid_t lapl_id)
     * }
     */
    public static MethodHandle H5Gget_info_by_idx$handle() { return H5Gget_info_by_idx.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5G_info_t *ginfo, hid_t lapl_id)
     * }
     */
    public static MemorySegment H5Gget_info_by_idx$address() { return H5Gget_info_by_idx.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t
     * order, hsize_t n, H5G_info_t *ginfo, hid_t lapl_id)
     * }
     */
    public static int H5Gget_info_by_idx(long loc_id, MemorySegment group_name, int idx_type, int order,
                                         long n, MemorySegment ginfo, long lapl_id)
    {
        var mh$ = H5Gget_info_by_idx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_info_by_idx", loc_id, group_name, idx_type, order, n, ginfo, lapl_id);
            }
            return (int)mh$.invokeExact(loc_id, group_name, idx_type, order, n, ginfo, lapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_info_by_idx_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_info_by_idx_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_idx_async(const char *app_file, const char *app_func, unsigned int app_line,
     * hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, H5G_info_t
     * *ginfo, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Gget_info_by_idx_async$descriptor()
    {
        return H5Gget_info_by_idx_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_idx_async(const char *app_file, const char *app_func, unsigned int app_line,
     * hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, H5G_info_t
     * *ginfo, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Gget_info_by_idx_async$handle() { return H5Gget_info_by_idx_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_idx_async(const char *app_file, const char *app_func, unsigned int app_line,
     * hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, H5G_info_t
     * *ginfo, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Gget_info_by_idx_async$address() { return H5Gget_info_by_idx_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gget_info_by_idx_async(const char *app_file, const char *app_func, unsigned int app_line,
     * hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, H5G_info_t
     * *ginfo, hid_t lapl_id, hid_t es_id)
     * }
     */
    public static int H5Gget_info_by_idx_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                               long loc_id, MemorySegment group_name, int idx_type, int order,
                                               long n, MemorySegment ginfo, long lapl_id, long es_id)
    {
        var mh$ = H5Gget_info_by_idx_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_info_by_idx_async", app_file, app_func, app_line, loc_id, group_name,
                              idx_type, order, n, ginfo, lapl_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, loc_id, group_name, idx_type, order, n,
                                        ginfo, lapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gflush(hid_t group_id)
     * }
     */
    public static FunctionDescriptor H5Gflush$descriptor() { return H5Gflush.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gflush(hid_t group_id)
     * }
     */
    public static MethodHandle H5Gflush$handle() { return H5Gflush.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gflush(hid_t group_id)
     * }
     */
    public static MemorySegment H5Gflush$address() { return H5Gflush.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gflush(hid_t group_id)
     * }
     */
    public static int H5Gflush(long group_id)
    {
        var mh$ = H5Gflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gflush", group_id);
            }
            return (int)mh$.invokeExact(group_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Grefresh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Grefresh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Grefresh(hid_t group_id)
     * }
     */
    public static FunctionDescriptor H5Grefresh$descriptor() { return H5Grefresh.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Grefresh(hid_t group_id)
     * }
     */
    public static MethodHandle H5Grefresh$handle() { return H5Grefresh.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Grefresh(hid_t group_id)
     * }
     */
    public static MemorySegment H5Grefresh$address() { return H5Grefresh.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Grefresh(hid_t group_id)
     * }
     */
    public static int H5Grefresh(long group_id)
    {
        var mh$ = H5Grefresh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Grefresh", group_id);
            }
            return (int)mh$.invokeExact(group_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gclose(hid_t group_id)
     * }
     */
    public static FunctionDescriptor H5Gclose$descriptor() { return H5Gclose.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gclose(hid_t group_id)
     * }
     */
    public static MethodHandle H5Gclose$handle() { return H5Gclose.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gclose(hid_t group_id)
     * }
     */
    public static MemorySegment H5Gclose$address() { return H5Gclose.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gclose(hid_t group_id)
     * }
     */
    public static int H5Gclose(long group_id)
    {
        var mh$ = H5Gclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gclose", group_id);
            }
            return (int)mh$.invokeExact(group_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gclose_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gclose_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * group_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Gclose_async$descriptor() { return H5Gclose_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * group_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Gclose_async$handle() { return H5Gclose_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * group_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Gclose_async$address() { return H5Gclose_async.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gclose_async(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * group_id, hid_t es_id)
     * }
     */
    public static int H5Gclose_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                     long group_id, long es_id)
    {
        var mh$ = H5Gclose_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gclose_async", app_file, app_func, app_line, group_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, group_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5G_UNKNOWN = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5G_obj_t.H5G_UNKNOWN = -1
     * }
     */
    public static int H5G_UNKNOWN() { return H5G_UNKNOWN; }
    private static final int H5G_GROUP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5G_obj_t.H5G_GROUP = 0
     * }
     */
    public static int H5G_GROUP() { return H5G_GROUP; }
    private static final int H5G_DATASET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5G_obj_t.H5G_DATASET = 1
     * }
     */
    public static int H5G_DATASET() { return H5G_DATASET; }
    private static final int H5G_TYPE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5G_obj_t.H5G_TYPE = 2
     * }
     */
    public static int H5G_TYPE() { return H5G_TYPE; }
    private static final int H5G_LINK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5G_obj_t.H5G_LINK = 3
     * }
     */
    public static int H5G_LINK() { return H5G_LINK; }
    private static final int H5G_UDLINK = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5G_obj_t.H5G_UDLINK = 4
     * }
     */
    public static int H5G_UDLINK() { return H5G_UDLINK; }
    private static final int H5G_RESERVED_5 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum H5G_obj_t.H5G_RESERVED_5 = 5
     * }
     */
    public static int H5G_RESERVED_5() { return H5G_RESERVED_5; }
    private static final int H5G_RESERVED_6 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum H5G_obj_t.H5G_RESERVED_6 = 6
     * }
     */
    public static int H5G_RESERVED_6() { return H5G_RESERVED_6; }
    private static final int H5G_RESERVED_7 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum H5G_obj_t.H5G_RESERVED_7 = 7
     * }
     */
    public static int H5G_RESERVED_7() { return H5G_RESERVED_7; }

    private static class H5Gcreate1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gcreate1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Gcreate1(hid_t loc_id, const char *name, size_t size_hint)
     * }
     */
    public static FunctionDescriptor H5Gcreate1$descriptor() { return H5Gcreate1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Gcreate1(hid_t loc_id, const char *name, size_t size_hint)
     * }
     */
    public static MethodHandle H5Gcreate1$handle() { return H5Gcreate1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Gcreate1(hid_t loc_id, const char *name, size_t size_hint)
     * }
     */
    public static MemorySegment H5Gcreate1$address() { return H5Gcreate1.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Gcreate1(hid_t loc_id, const char *name, size_t size_hint)
     * }
     */
    public static long H5Gcreate1(long loc_id, MemorySegment name, long size_hint)
    {
        var mh$ = H5Gcreate1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gcreate1", loc_id, name, size_hint);
            }
            return (long)mh$.invokeExact(loc_id, name, size_hint);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gopen1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gopen1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Gopen1(hid_t loc_id, const char *name)
     * }
     */
    public static FunctionDescriptor H5Gopen1$descriptor() { return H5Gopen1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Gopen1(hid_t loc_id, const char *name)
     * }
     */
    public static MethodHandle H5Gopen1$handle() { return H5Gopen1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Gopen1(hid_t loc_id, const char *name)
     * }
     */
    public static MemorySegment H5Gopen1$address() { return H5Gopen1.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Gopen1(hid_t loc_id, const char *name)
     * }
     */
    public static long H5Gopen1(long loc_id, MemorySegment name)
    {
        var mh$ = H5Gopen1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gopen1", loc_id, name);
            }
            return (long)mh$.invokeExact(loc_id, name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Glink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Glink");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Glink(hid_t cur_loc_id, H5L_type_t type, const char *cur_name, const char *new_name)
     * }
     */
    public static FunctionDescriptor H5Glink$descriptor() { return H5Glink.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Glink(hid_t cur_loc_id, H5L_type_t type, const char *cur_name, const char *new_name)
     * }
     */
    public static MethodHandle H5Glink$handle() { return H5Glink.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Glink(hid_t cur_loc_id, H5L_type_t type, const char *cur_name, const char *new_name)
     * }
     */
    public static MemorySegment H5Glink$address() { return H5Glink.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Glink(hid_t cur_loc_id, H5L_type_t type, const char *cur_name, const char *new_name)
     * }
     */
    public static int H5Glink(long cur_loc_id, int type, MemorySegment cur_name, MemorySegment new_name)
    {
        var mh$ = H5Glink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Glink", cur_loc_id, type, cur_name, new_name);
            }
            return (int)mh$.invokeExact(cur_loc_id, type, cur_name, new_name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Glink2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Glink2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Glink2(hid_t cur_loc_id, const char *cur_name, H5L_type_t type, hid_t new_loc_id, const char
     * *new_name)
     * }
     */
    public static FunctionDescriptor H5Glink2$descriptor() { return H5Glink2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Glink2(hid_t cur_loc_id, const char *cur_name, H5L_type_t type, hid_t new_loc_id, const char
     * *new_name)
     * }
     */
    public static MethodHandle H5Glink2$handle() { return H5Glink2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Glink2(hid_t cur_loc_id, const char *cur_name, H5L_type_t type, hid_t new_loc_id, const char
     * *new_name)
     * }
     */
    public static MemorySegment H5Glink2$address() { return H5Glink2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Glink2(hid_t cur_loc_id, const char *cur_name, H5L_type_t type, hid_t new_loc_id, const char
     * *new_name)
     * }
     */
    public static int H5Glink2(long cur_loc_id, MemorySegment cur_name, int type, long new_loc_id,
                               MemorySegment new_name)
    {
        var mh$ = H5Glink2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Glink2", cur_loc_id, cur_name, type, new_loc_id, new_name);
            }
            return (int)mh$.invokeExact(cur_loc_id, cur_name, type, new_loc_id, new_name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gmove {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gmove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gmove(hid_t src_loc_id, const char *src_name, const char *dst_name)
     * }
     */
    public static FunctionDescriptor H5Gmove$descriptor() { return H5Gmove.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gmove(hid_t src_loc_id, const char *src_name, const char *dst_name)
     * }
     */
    public static MethodHandle H5Gmove$handle() { return H5Gmove.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gmove(hid_t src_loc_id, const char *src_name, const char *dst_name)
     * }
     */
    public static MemorySegment H5Gmove$address() { return H5Gmove.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gmove(hid_t src_loc_id, const char *src_name, const char *dst_name)
     * }
     */
    public static int H5Gmove(long src_loc_id, MemorySegment src_name, MemorySegment dst_name)
    {
        var mh$ = H5Gmove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gmove", src_loc_id, src_name, dst_name);
            }
            return (int)mh$.invokeExact(src_loc_id, src_name, dst_name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gmove2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gmove2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gmove2(hid_t src_loc_id, const char *src_name, hid_t dst_loc_id, const char *dst_name)
     * }
     */
    public static FunctionDescriptor H5Gmove2$descriptor() { return H5Gmove2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gmove2(hid_t src_loc_id, const char *src_name, hid_t dst_loc_id, const char *dst_name)
     * }
     */
    public static MethodHandle H5Gmove2$handle() { return H5Gmove2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gmove2(hid_t src_loc_id, const char *src_name, hid_t dst_loc_id, const char *dst_name)
     * }
     */
    public static MemorySegment H5Gmove2$address() { return H5Gmove2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gmove2(hid_t src_loc_id, const char *src_name, hid_t dst_loc_id, const char *dst_name)
     * }
     */
    public static int H5Gmove2(long src_loc_id, MemorySegment src_name, long dst_loc_id,
                               MemorySegment dst_name)
    {
        var mh$ = H5Gmove2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gmove2", src_loc_id, src_name, dst_loc_id, dst_name);
            }
            return (int)mh$.invokeExact(src_loc_id, src_name, dst_loc_id, dst_name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gunlink {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gunlink");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gunlink(hid_t loc_id, const char *name)
     * }
     */
    public static FunctionDescriptor H5Gunlink$descriptor() { return H5Gunlink.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gunlink(hid_t loc_id, const char *name)
     * }
     */
    public static MethodHandle H5Gunlink$handle() { return H5Gunlink.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gunlink(hid_t loc_id, const char *name)
     * }
     */
    public static MemorySegment H5Gunlink$address() { return H5Gunlink.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gunlink(hid_t loc_id, const char *name)
     * }
     */
    public static int H5Gunlink(long loc_id, MemorySegment name)
    {
        var mh$ = H5Gunlink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gunlink", loc_id, name);
            }
            return (int)mh$.invokeExact(loc_id, name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_linkval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_linkval");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gget_linkval(hid_t loc_id, const char *name, size_t size, char *buf)
     * }
     */
    public static FunctionDescriptor H5Gget_linkval$descriptor() { return H5Gget_linkval.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gget_linkval(hid_t loc_id, const char *name, size_t size, char *buf)
     * }
     */
    public static MethodHandle H5Gget_linkval$handle() { return H5Gget_linkval.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gget_linkval(hid_t loc_id, const char *name, size_t size, char *buf)
     * }
     */
    public static MemorySegment H5Gget_linkval$address() { return H5Gget_linkval.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gget_linkval(hid_t loc_id, const char *name, size_t size, char *buf)
     * }
     */
    public static int H5Gget_linkval(long loc_id, MemorySegment name, long size, MemorySegment buf)
    {
        var mh$ = H5Gget_linkval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_linkval", loc_id, name, size, buf);
            }
            return (int)mh$.invokeExact(loc_id, name, size, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gset_comment {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gset_comment");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gset_comment(hid_t loc_id, const char *name, const char *comment)
     * }
     */
    public static FunctionDescriptor H5Gset_comment$descriptor() { return H5Gset_comment.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gset_comment(hid_t loc_id, const char *name, const char *comment)
     * }
     */
    public static MethodHandle H5Gset_comment$handle() { return H5Gset_comment.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gset_comment(hid_t loc_id, const char *name, const char *comment)
     * }
     */
    public static MemorySegment H5Gset_comment$address() { return H5Gset_comment.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gset_comment(hid_t loc_id, const char *name, const char *comment)
     * }
     */
    public static int H5Gset_comment(long loc_id, MemorySegment name, MemorySegment comment)
    {
        var mh$ = H5Gset_comment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gset_comment", loc_id, name, comment);
            }
            return (int)mh$.invokeExact(loc_id, name, comment);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_comment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_comment");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Gget_comment(hid_t loc_id, const char *name, size_t bufsize, char *buf)
     * }
     */
    public static FunctionDescriptor H5Gget_comment$descriptor() { return H5Gget_comment.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Gget_comment(hid_t loc_id, const char *name, size_t bufsize, char *buf)
     * }
     */
    public static MethodHandle H5Gget_comment$handle() { return H5Gget_comment.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Gget_comment(hid_t loc_id, const char *name, size_t bufsize, char *buf)
     * }
     */
    public static MemorySegment H5Gget_comment$address() { return H5Gget_comment.ADDR; }

    /**
     * {@snippet lang=c :
     * int H5Gget_comment(hid_t loc_id, const char *name, size_t bufsize, char *buf)
     * }
     */
    public static int H5Gget_comment(long loc_id, MemorySegment name, long bufsize, MemorySegment buf)
    {
        var mh$ = H5Gget_comment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_comment", loc_id, name, bufsize, buf);
            }
            return (int)mh$.invokeExact(loc_id, name, bufsize, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Giterate {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Giterate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Giterate(hid_t loc_id, const char *name, int *idx, H5G_iterate_t op, void *op_data)
     * }
     */
    public static FunctionDescriptor H5Giterate$descriptor() { return H5Giterate.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Giterate(hid_t loc_id, const char *name, int *idx, H5G_iterate_t op, void *op_data)
     * }
     */
    public static MethodHandle H5Giterate$handle() { return H5Giterate.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Giterate(hid_t loc_id, const char *name, int *idx, H5G_iterate_t op, void *op_data)
     * }
     */
    public static MemorySegment H5Giterate$address() { return H5Giterate.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Giterate(hid_t loc_id, const char *name, int *idx, H5G_iterate_t op, void *op_data)
     * }
     */
    public static int H5Giterate(long loc_id, MemorySegment name, MemorySegment idx, MemorySegment op,
                                 MemorySegment op_data)
    {
        var mh$ = H5Giterate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Giterate", loc_id, name, idx, op, op_data);
            }
            return (int)mh$.invokeExact(loc_id, name, idx, op, op_data);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_num_objs {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_num_objs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gget_num_objs(hid_t loc_id, hsize_t *num_objs)
     * }
     */
    public static FunctionDescriptor H5Gget_num_objs$descriptor() { return H5Gget_num_objs.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gget_num_objs(hid_t loc_id, hsize_t *num_objs)
     * }
     */
    public static MethodHandle H5Gget_num_objs$handle() { return H5Gget_num_objs.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gget_num_objs(hid_t loc_id, hsize_t *num_objs)
     * }
     */
    public static MemorySegment H5Gget_num_objs$address() { return H5Gget_num_objs.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gget_num_objs(hid_t loc_id, hsize_t *num_objs)
     * }
     */
    public static int H5Gget_num_objs(long loc_id, MemorySegment num_objs)
    {
        var mh$ = H5Gget_num_objs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_num_objs", loc_id, num_objs);
            }
            return (int)mh$.invokeExact(loc_id, num_objs);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_objinfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_BOOL, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_objinfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Gget_objinfo(hid_t loc_id, const char *name, hbool_t follow_link, H5G_stat_t *statbuf)
     * }
     */
    public static FunctionDescriptor H5Gget_objinfo$descriptor() { return H5Gget_objinfo.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Gget_objinfo(hid_t loc_id, const char *name, hbool_t follow_link, H5G_stat_t *statbuf)
     * }
     */
    public static MethodHandle H5Gget_objinfo$handle() { return H5Gget_objinfo.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Gget_objinfo(hid_t loc_id, const char *name, hbool_t follow_link, H5G_stat_t *statbuf)
     * }
     */
    public static MemorySegment H5Gget_objinfo$address() { return H5Gget_objinfo.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Gget_objinfo(hid_t loc_id, const char *name, hbool_t follow_link, H5G_stat_t *statbuf)
     * }
     */
    public static int H5Gget_objinfo(long loc_id, MemorySegment name, boolean follow_link,
                                     MemorySegment statbuf)
    {
        var mh$ = H5Gget_objinfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_objinfo", loc_id, name, follow_link, statbuf);
            }
            return (int)mh$.invokeExact(loc_id, name, follow_link, statbuf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_objname_by_idx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_objname_by_idx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Gget_objname_by_idx(hid_t loc_id, hsize_t idx, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor H5Gget_objname_by_idx$descriptor() { return H5Gget_objname_by_idx.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Gget_objname_by_idx(hid_t loc_id, hsize_t idx, char *name, size_t size)
     * }
     */
    public static MethodHandle H5Gget_objname_by_idx$handle() { return H5Gget_objname_by_idx.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Gget_objname_by_idx(hid_t loc_id, hsize_t idx, char *name, size_t size)
     * }
     */
    public static MemorySegment H5Gget_objname_by_idx$address() { return H5Gget_objname_by_idx.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Gget_objname_by_idx(hid_t loc_id, hsize_t idx, char *name, size_t size)
     * }
     */
    public static long H5Gget_objname_by_idx(long loc_id, long idx, MemorySegment name, long size)
    {
        var mh$ = H5Gget_objname_by_idx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_objname_by_idx", loc_id, idx, name, size);
            }
            return (long)mh$.invokeExact(loc_id, idx, name, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Gget_objtype_by_idx {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Gget_objtype_by_idx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5G_obj_t H5Gget_objtype_by_idx(hid_t loc_id, hsize_t idx)
     * }
     */
    public static FunctionDescriptor H5Gget_objtype_by_idx$descriptor() { return H5Gget_objtype_by_idx.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5G_obj_t H5Gget_objtype_by_idx(hid_t loc_id, hsize_t idx)
     * }
     */
    public static MethodHandle H5Gget_objtype_by_idx$handle() { return H5Gget_objtype_by_idx.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5G_obj_t H5Gget_objtype_by_idx(hid_t loc_id, hsize_t idx)
     * }
     */
    public static MemorySegment H5Gget_objtype_by_idx$address() { return H5Gget_objtype_by_idx.ADDR; }

    /**
     * {@snippet lang=c :
     * H5G_obj_t H5Gget_objtype_by_idx(hid_t loc_id, hsize_t idx)
     * }
     */
    public static int H5Gget_objtype_by_idx(long loc_id, long idx)
    {
        var mh$ = H5Gget_objtype_by_idx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Gget_objtype_by_idx", loc_id, idx);
            }
            return (int)mh$.invokeExact(loc_id, idx);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef int H5VL_class_value_t
     * }
     */
    public static final OfInt H5VL_class_value_t = hdf5_h.C_INT;
    private static final int H5VL_SUBCLS_NONE    = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_NONE = 0
     * }
     */
    public static int H5VL_SUBCLS_NONE() { return H5VL_SUBCLS_NONE; }
    private static final int H5VL_SUBCLS_INFO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_INFO = 1
     * }
     */
    public static int H5VL_SUBCLS_INFO() { return H5VL_SUBCLS_INFO; }
    private static final int H5VL_SUBCLS_WRAP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_WRAP = 2
     * }
     */
    public static int H5VL_SUBCLS_WRAP() { return H5VL_SUBCLS_WRAP; }
    private static final int H5VL_SUBCLS_ATTR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_ATTR = 3
     * }
     */
    public static int H5VL_SUBCLS_ATTR() { return H5VL_SUBCLS_ATTR; }
    private static final int H5VL_SUBCLS_DATASET = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_DATASET = 4
     * }
     */
    public static int H5VL_SUBCLS_DATASET() { return H5VL_SUBCLS_DATASET; }
    private static final int H5VL_SUBCLS_DATATYPE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_DATATYPE = 5
     * }
     */
    public static int H5VL_SUBCLS_DATATYPE() { return H5VL_SUBCLS_DATATYPE; }
    private static final int H5VL_SUBCLS_FILE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_FILE = 6
     * }
     */
    public static int H5VL_SUBCLS_FILE() { return H5VL_SUBCLS_FILE; }
    private static final int H5VL_SUBCLS_GROUP = (int)7L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_GROUP = 7
     * }
     */
    public static int H5VL_SUBCLS_GROUP() { return H5VL_SUBCLS_GROUP; }
    private static final int H5VL_SUBCLS_LINK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_LINK = 8
     * }
     */
    public static int H5VL_SUBCLS_LINK() { return H5VL_SUBCLS_LINK; }
    private static final int H5VL_SUBCLS_OBJECT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_OBJECT = 9
     * }
     */
    public static int H5VL_SUBCLS_OBJECT() { return H5VL_SUBCLS_OBJECT; }
    private static final int H5VL_SUBCLS_REQUEST = (int)10L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_REQUEST = 10
     * }
     */
    public static int H5VL_SUBCLS_REQUEST() { return H5VL_SUBCLS_REQUEST; }
    private static final int H5VL_SUBCLS_BLOB = (int)11L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_BLOB = 11
     * }
     */
    public static int H5VL_SUBCLS_BLOB() { return H5VL_SUBCLS_BLOB; }
    private static final int H5VL_SUBCLS_TOKEN = (int)12L;
    /**
     * {@snippet lang=c :
     * enum H5VL_subclass_t.H5VL_SUBCLS_TOKEN = 12
     * }
     */
    public static int H5VL_SUBCLS_TOKEN() { return H5VL_SUBCLS_TOKEN; }

    private static class H5VLregister_connector_by_name {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLregister_connector_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5VLregister_connector_by_name(const char *connector_name, hid_t vipl_id)
     * }
     */
    public static FunctionDescriptor H5VLregister_connector_by_name$descriptor()
    {
        return H5VLregister_connector_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5VLregister_connector_by_name(const char *connector_name, hid_t vipl_id)
     * }
     */
    public static MethodHandle H5VLregister_connector_by_name$handle()
    {
        return H5VLregister_connector_by_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5VLregister_connector_by_name(const char *connector_name, hid_t vipl_id)
     * }
     */
    public static MemorySegment H5VLregister_connector_by_name$address()
    {
        return H5VLregister_connector_by_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5VLregister_connector_by_name(const char *connector_name, hid_t vipl_id)
     * }
     */
    public static long H5VLregister_connector_by_name(MemorySegment connector_name, long vipl_id)
    {
        var mh$ = H5VLregister_connector_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLregister_connector_by_name", connector_name, vipl_id);
            }
            return (long)mh$.invokeExact(connector_name, vipl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLregister_connector_by_value {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLregister_connector_by_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5VLregister_connector_by_value(H5VL_class_value_t connector_value, hid_t vipl_id)
     * }
     */
    public static FunctionDescriptor H5VLregister_connector_by_value$descriptor()
    {
        return H5VLregister_connector_by_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5VLregister_connector_by_value(H5VL_class_value_t connector_value, hid_t vipl_id)
     * }
     */
    public static MethodHandle H5VLregister_connector_by_value$handle()
    {
        return H5VLregister_connector_by_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5VLregister_connector_by_value(H5VL_class_value_t connector_value, hid_t vipl_id)
     * }
     */
    public static MemorySegment H5VLregister_connector_by_value$address()
    {
        return H5VLregister_connector_by_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5VLregister_connector_by_value(H5VL_class_value_t connector_value, hid_t vipl_id)
     * }
     */
    public static long H5VLregister_connector_by_value(int connector_value, long vipl_id)
    {
        var mh$ = H5VLregister_connector_by_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLregister_connector_by_value", connector_value, vipl_id);
            }
            return (long)mh$.invokeExact(connector_value, vipl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLis_connector_registered_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLis_connector_registered_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5VLis_connector_registered_by_name(const char *name)
     * }
     */
    public static FunctionDescriptor H5VLis_connector_registered_by_name$descriptor()
    {
        return H5VLis_connector_registered_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5VLis_connector_registered_by_name(const char *name)
     * }
     */
    public static MethodHandle H5VLis_connector_registered_by_name$handle()
    {
        return H5VLis_connector_registered_by_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5VLis_connector_registered_by_name(const char *name)
     * }
     */
    public static MemorySegment H5VLis_connector_registered_by_name$address()
    {
        return H5VLis_connector_registered_by_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * htri_t H5VLis_connector_registered_by_name(const char *name)
     * }
     */
    public static int H5VLis_connector_registered_by_name(MemorySegment name)
    {
        var mh$ = H5VLis_connector_registered_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLis_connector_registered_by_name", name);
            }
            return (int)mh$.invokeExact(name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLis_connector_registered_by_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLis_connector_registered_by_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5VLis_connector_registered_by_value(H5VL_class_value_t connector_value)
     * }
     */
    public static FunctionDescriptor H5VLis_connector_registered_by_value$descriptor()
    {
        return H5VLis_connector_registered_by_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5VLis_connector_registered_by_value(H5VL_class_value_t connector_value)
     * }
     */
    public static MethodHandle H5VLis_connector_registered_by_value$handle()
    {
        return H5VLis_connector_registered_by_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5VLis_connector_registered_by_value(H5VL_class_value_t connector_value)
     * }
     */
    public static MemorySegment H5VLis_connector_registered_by_value$address()
    {
        return H5VLis_connector_registered_by_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * htri_t H5VLis_connector_registered_by_value(H5VL_class_value_t connector_value)
     * }
     */
    public static int H5VLis_connector_registered_by_value(int connector_value)
    {
        var mh$ = H5VLis_connector_registered_by_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLis_connector_registered_by_value", connector_value);
            }
            return (int)mh$.invokeExact(connector_value);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLget_connector_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLget_connector_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5VLget_connector_id(hid_t obj_id)
     * }
     */
    public static FunctionDescriptor H5VLget_connector_id$descriptor() { return H5VLget_connector_id.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5VLget_connector_id(hid_t obj_id)
     * }
     */
    public static MethodHandle H5VLget_connector_id$handle() { return H5VLget_connector_id.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5VLget_connector_id(hid_t obj_id)
     * }
     */
    public static MemorySegment H5VLget_connector_id$address() { return H5VLget_connector_id.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5VLget_connector_id(hid_t obj_id)
     * }
     */
    public static long H5VLget_connector_id(long obj_id)
    {
        var mh$ = H5VLget_connector_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLget_connector_id", obj_id);
            }
            return (long)mh$.invokeExact(obj_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLget_connector_id_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLget_connector_id_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5VLget_connector_id_by_name(const char *name)
     * }
     */
    public static FunctionDescriptor H5VLget_connector_id_by_name$descriptor()
    {
        return H5VLget_connector_id_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5VLget_connector_id_by_name(const char *name)
     * }
     */
    public static MethodHandle H5VLget_connector_id_by_name$handle()
    {
        return H5VLget_connector_id_by_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5VLget_connector_id_by_name(const char *name)
     * }
     */
    public static MemorySegment H5VLget_connector_id_by_name$address()
    {
        return H5VLget_connector_id_by_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5VLget_connector_id_by_name(const char *name)
     * }
     */
    public static long H5VLget_connector_id_by_name(MemorySegment name)
    {
        var mh$ = H5VLget_connector_id_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLget_connector_id_by_name", name);
            }
            return (long)mh$.invokeExact(name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLget_connector_id_by_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLget_connector_id_by_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5VLget_connector_id_by_value(H5VL_class_value_t connector_value)
     * }
     */
    public static FunctionDescriptor H5VLget_connector_id_by_value$descriptor()
    {
        return H5VLget_connector_id_by_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5VLget_connector_id_by_value(H5VL_class_value_t connector_value)
     * }
     */
    public static MethodHandle H5VLget_connector_id_by_value$handle()
    {
        return H5VLget_connector_id_by_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5VLget_connector_id_by_value(H5VL_class_value_t connector_value)
     * }
     */
    public static MemorySegment H5VLget_connector_id_by_value$address()
    {
        return H5VLget_connector_id_by_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5VLget_connector_id_by_value(H5VL_class_value_t connector_value)
     * }
     */
    public static long H5VLget_connector_id_by_value(int connector_value)
    {
        var mh$ = H5VLget_connector_id_by_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLget_connector_id_by_value", connector_value);
            }
            return (long)mh$.invokeExact(connector_value);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLget_connector_name {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLget_connector_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5VLget_connector_name(hid_t id, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor H5VLget_connector_name$descriptor()
    {
        return H5VLget_connector_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5VLget_connector_name(hid_t id, char *name, size_t size)
     * }
     */
    public static MethodHandle H5VLget_connector_name$handle() { return H5VLget_connector_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5VLget_connector_name(hid_t id, char *name, size_t size)
     * }
     */
    public static MemorySegment H5VLget_connector_name$address() { return H5VLget_connector_name.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5VLget_connector_name(hid_t id, char *name, size_t size)
     * }
     */
    public static long H5VLget_connector_name(long id, MemorySegment name, long size)
    {
        var mh$ = H5VLget_connector_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLget_connector_name", id, name, size);
            }
            return (long)mh$.invokeExact(id, name, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLclose(hid_t connector_id)
     * }
     */
    public static FunctionDescriptor H5VLclose$descriptor() { return H5VLclose.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLclose(hid_t connector_id)
     * }
     */
    public static MethodHandle H5VLclose$handle() { return H5VLclose.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLclose(hid_t connector_id)
     * }
     */
    public static MemorySegment H5VLclose$address() { return H5VLclose.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLclose(hid_t connector_id)
     * }
     */
    public static int H5VLclose(long connector_id)
    {
        var mh$ = H5VLclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLclose", connector_id);
            }
            return (int)mh$.invokeExact(connector_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLunregister_connector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLunregister_connector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLunregister_connector(hid_t connector_id)
     * }
     */
    public static FunctionDescriptor H5VLunregister_connector$descriptor()
    {
        return H5VLunregister_connector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLunregister_connector(hid_t connector_id)
     * }
     */
    public static MethodHandle H5VLunregister_connector$handle() { return H5VLunregister_connector.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLunregister_connector(hid_t connector_id)
     * }
     */
    public static MemorySegment H5VLunregister_connector$address() { return H5VLunregister_connector.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLunregister_connector(hid_t connector_id)
     * }
     */
    public static int H5VLunregister_connector(long connector_id)
    {
        var mh$ = H5VLunregister_connector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLunregister_connector", connector_id);
            }
            return (int)mh$.invokeExact(connector_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLquery_optional {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLquery_optional");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLquery_optional(hid_t obj_id, H5VL_subclass_t subcls, int opt_type, uint64_t *flags)
     * }
     */
    public static FunctionDescriptor H5VLquery_optional$descriptor() { return H5VLquery_optional.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLquery_optional(hid_t obj_id, H5VL_subclass_t subcls, int opt_type, uint64_t *flags)
     * }
     */
    public static MethodHandle H5VLquery_optional$handle() { return H5VLquery_optional.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLquery_optional(hid_t obj_id, H5VL_subclass_t subcls, int opt_type, uint64_t *flags)
     * }
     */
    public static MemorySegment H5VLquery_optional$address() { return H5VLquery_optional.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLquery_optional(hid_t obj_id, H5VL_subclass_t subcls, int opt_type, uint64_t *flags)
     * }
     */
    public static int H5VLquery_optional(long obj_id, int subcls, int opt_type, MemorySegment flags)
    {
        var mh$ = H5VLquery_optional.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLquery_optional", obj_id, subcls, opt_type, flags);
            }
            return (int)mh$.invokeExact(obj_id, subcls, opt_type, flags);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLobject_is_native {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLobject_is_native");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLobject_is_native(hid_t obj_id, hbool_t *is_native)
     * }
     */
    public static FunctionDescriptor H5VLobject_is_native$descriptor() { return H5VLobject_is_native.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLobject_is_native(hid_t obj_id, hbool_t *is_native)
     * }
     */
    public static MethodHandle H5VLobject_is_native$handle() { return H5VLobject_is_native.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLobject_is_native(hid_t obj_id, hbool_t *is_native)
     * }
     */
    public static MemorySegment H5VLobject_is_native$address() { return H5VLobject_is_native.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLobject_is_native(hid_t obj_id, hbool_t *is_native)
     * }
     */
    public static int H5VLobject_is_native(long obj_id, MemorySegment is_native)
    {
        var mh$ = H5VLobject_is_native.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLobject_is_native", obj_id, is_native);
            }
            return (int)mh$.invokeExact(obj_id, is_native);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5R_BADTYPE = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5R_BADTYPE = -1
     * }
     */
    public static int H5R_BADTYPE() { return H5R_BADTYPE; }
    private static final int H5R_OBJECT1 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5R_OBJECT1 = 0
     * }
     */
    public static int H5R_OBJECT1() { return H5R_OBJECT1; }
    private static final int H5R_DATASET_REGION1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5R_DATASET_REGION1 = 1
     * }
     */
    public static int H5R_DATASET_REGION1() { return H5R_DATASET_REGION1; }
    private static final int H5R_OBJECT2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5R_OBJECT2 = 2
     * }
     */
    public static int H5R_OBJECT2() { return H5R_OBJECT2; }
    private static final int H5R_DATASET_REGION2 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5R_DATASET_REGION2 = 3
     * }
     */
    public static int H5R_DATASET_REGION2() { return H5R_DATASET_REGION2; }
    private static final int H5R_ATTR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5R_ATTR = 4
     * }
     */
    public static int H5R_ATTR() { return H5R_ATTR; }
    private static final int H5R_MAXTYPE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5R_MAXTYPE = 5
     * }
     */
    public static int H5R_MAXTYPE() { return H5R_MAXTYPE; }
    /**
     * {@snippet lang=c :
     * typedef haddr_t hobj_ref_t
     * }
     */
    public static final OfLong hobj_ref_t = hdf5_h.C_LONG;

    private static class H5Rcreate_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rcreate_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Rcreate_object(hid_t loc_id, const char *name, hid_t oapl_id, H5R_ref_t *ref_ptr)
     * }
     */
    public static FunctionDescriptor H5Rcreate_object$descriptor() { return H5Rcreate_object.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Rcreate_object(hid_t loc_id, const char *name, hid_t oapl_id, H5R_ref_t *ref_ptr)
     * }
     */
    public static MethodHandle H5Rcreate_object$handle() { return H5Rcreate_object.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Rcreate_object(hid_t loc_id, const char *name, hid_t oapl_id, H5R_ref_t *ref_ptr)
     * }
     */
    public static MemorySegment H5Rcreate_object$address() { return H5Rcreate_object.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Rcreate_object(hid_t loc_id, const char *name, hid_t oapl_id, H5R_ref_t *ref_ptr)
     * }
     */
    public static int H5Rcreate_object(long loc_id, MemorySegment name, long oapl_id, MemorySegment ref_ptr)
    {
        var mh$ = H5Rcreate_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rcreate_object", loc_id, name, oapl_id, ref_ptr);
            }
            return (int)mh$.invokeExact(loc_id, name, oapl_id, ref_ptr);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rcreate_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rcreate_region");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Rcreate_region(hid_t loc_id, const char *name, hid_t space_id, hid_t oapl_id, H5R_ref_t
     * *ref_ptr)
     * }
     */
    public static FunctionDescriptor H5Rcreate_region$descriptor() { return H5Rcreate_region.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Rcreate_region(hid_t loc_id, const char *name, hid_t space_id, hid_t oapl_id, H5R_ref_t
     * *ref_ptr)
     * }
     */
    public static MethodHandle H5Rcreate_region$handle() { return H5Rcreate_region.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Rcreate_region(hid_t loc_id, const char *name, hid_t space_id, hid_t oapl_id, H5R_ref_t
     * *ref_ptr)
     * }
     */
    public static MemorySegment H5Rcreate_region$address() { return H5Rcreate_region.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Rcreate_region(hid_t loc_id, const char *name, hid_t space_id, hid_t oapl_id, H5R_ref_t
     * *ref_ptr)
     * }
     */
    public static int H5Rcreate_region(long loc_id, MemorySegment name, long space_id, long oapl_id,
                                       MemorySegment ref_ptr)
    {
        var mh$ = H5Rcreate_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rcreate_region", loc_id, name, space_id, oapl_id, ref_ptr);
            }
            return (int)mh$.invokeExact(loc_id, name, space_id, oapl_id, ref_ptr);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rcreate_attr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rcreate_attr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Rcreate_attr(hid_t loc_id, const char *name, const char *attr_name, hid_t oapl_id, H5R_ref_t
     * *ref_ptr)
     * }
     */
    public static FunctionDescriptor H5Rcreate_attr$descriptor() { return H5Rcreate_attr.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Rcreate_attr(hid_t loc_id, const char *name, const char *attr_name, hid_t oapl_id, H5R_ref_t
     * *ref_ptr)
     * }
     */
    public static MethodHandle H5Rcreate_attr$handle() { return H5Rcreate_attr.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Rcreate_attr(hid_t loc_id, const char *name, const char *attr_name, hid_t oapl_id, H5R_ref_t
     * *ref_ptr)
     * }
     */
    public static MemorySegment H5Rcreate_attr$address() { return H5Rcreate_attr.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Rcreate_attr(hid_t loc_id, const char *name, const char *attr_name, hid_t oapl_id, H5R_ref_t
     * *ref_ptr)
     * }
     */
    public static int H5Rcreate_attr(long loc_id, MemorySegment name, MemorySegment attr_name, long oapl_id,
                                     MemorySegment ref_ptr)
    {
        var mh$ = H5Rcreate_attr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rcreate_attr", loc_id, name, attr_name, oapl_id, ref_ptr);
            }
            return (int)mh$.invokeExact(loc_id, name, attr_name, oapl_id, ref_ptr);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rdestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rdestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Rdestroy(H5R_ref_t *ref_ptr)
     * }
     */
    public static FunctionDescriptor H5Rdestroy$descriptor() { return H5Rdestroy.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Rdestroy(H5R_ref_t *ref_ptr)
     * }
     */
    public static MethodHandle H5Rdestroy$handle() { return H5Rdestroy.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Rdestroy(H5R_ref_t *ref_ptr)
     * }
     */
    public static MemorySegment H5Rdestroy$address() { return H5Rdestroy.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Rdestroy(H5R_ref_t *ref_ptr)
     * }
     */
    public static int H5Rdestroy(MemorySegment ref_ptr)
    {
        var mh$ = H5Rdestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rdestroy", ref_ptr);
            }
            return (int)mh$.invokeExact(ref_ptr);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rget_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rget_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5R_type_t H5Rget_type(const H5R_ref_t *ref_ptr)
     * }
     */
    public static FunctionDescriptor H5Rget_type$descriptor() { return H5Rget_type.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5R_type_t H5Rget_type(const H5R_ref_t *ref_ptr)
     * }
     */
    public static MethodHandle H5Rget_type$handle() { return H5Rget_type.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5R_type_t H5Rget_type(const H5R_ref_t *ref_ptr)
     * }
     */
    public static MemorySegment H5Rget_type$address() { return H5Rget_type.ADDR; }

    /**
     * {@snippet lang=c :
     * H5R_type_t H5Rget_type(const H5R_ref_t *ref_ptr)
     * }
     */
    public static int H5Rget_type(MemorySegment ref_ptr)
    {
        var mh$ = H5Rget_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rget_type", ref_ptr);
            }
            return (int)mh$.invokeExact(ref_ptr);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Requal {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Requal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Requal(const H5R_ref_t *ref1_ptr, const H5R_ref_t *ref2_ptr)
     * }
     */
    public static FunctionDescriptor H5Requal$descriptor() { return H5Requal.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Requal(const H5R_ref_t *ref1_ptr, const H5R_ref_t *ref2_ptr)
     * }
     */
    public static MethodHandle H5Requal$handle() { return H5Requal.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Requal(const H5R_ref_t *ref1_ptr, const H5R_ref_t *ref2_ptr)
     * }
     */
    public static MemorySegment H5Requal$address() { return H5Requal.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Requal(const H5R_ref_t *ref1_ptr, const H5R_ref_t *ref2_ptr)
     * }
     */
    public static int H5Requal(MemorySegment ref1_ptr, MemorySegment ref2_ptr)
    {
        var mh$ = H5Requal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Requal", ref1_ptr, ref2_ptr);
            }
            return (int)mh$.invokeExact(ref1_ptr, ref2_ptr);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rcopy {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rcopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Rcopy(const H5R_ref_t *src_ref_ptr, H5R_ref_t *dst_ref_ptr)
     * }
     */
    public static FunctionDescriptor H5Rcopy$descriptor() { return H5Rcopy.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Rcopy(const H5R_ref_t *src_ref_ptr, H5R_ref_t *dst_ref_ptr)
     * }
     */
    public static MethodHandle H5Rcopy$handle() { return H5Rcopy.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Rcopy(const H5R_ref_t *src_ref_ptr, H5R_ref_t *dst_ref_ptr)
     * }
     */
    public static MemorySegment H5Rcopy$address() { return H5Rcopy.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Rcopy(const H5R_ref_t *src_ref_ptr, H5R_ref_t *dst_ref_ptr)
     * }
     */
    public static int H5Rcopy(MemorySegment src_ref_ptr, MemorySegment dst_ref_ptr)
    {
        var mh$ = H5Rcopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rcopy", src_ref_ptr, dst_ref_ptr);
            }
            return (int)mh$.invokeExact(src_ref_ptr, dst_ref_ptr);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ropen_object {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ropen_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Ropen_object(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t oapl_id)
     * }
     */
    public static FunctionDescriptor H5Ropen_object$descriptor() { return H5Ropen_object.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Ropen_object(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t oapl_id)
     * }
     */
    public static MethodHandle H5Ropen_object$handle() { return H5Ropen_object.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Ropen_object(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t oapl_id)
     * }
     */
    public static MemorySegment H5Ropen_object$address() { return H5Ropen_object.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Ropen_object(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t oapl_id)
     * }
     */
    public static long H5Ropen_object(MemorySegment ref_ptr, long rapl_id, long oapl_id)
    {
        var mh$ = H5Ropen_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ropen_object", ref_ptr, rapl_id, oapl_id);
            }
            return (long)mh$.invokeExact(ref_ptr, rapl_id, oapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ropen_object_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ropen_object_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Ropen_object_async(const char *app_file, const char *app_func, unsigned int app_line, H5R_ref_t
     * *ref_ptr, hid_t rapl_id, hid_t oapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Ropen_object_async$descriptor() { return H5Ropen_object_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Ropen_object_async(const char *app_file, const char *app_func, unsigned int app_line, H5R_ref_t
     * *ref_ptr, hid_t rapl_id, hid_t oapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Ropen_object_async$handle() { return H5Ropen_object_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Ropen_object_async(const char *app_file, const char *app_func, unsigned int app_line, H5R_ref_t
     * *ref_ptr, hid_t rapl_id, hid_t oapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Ropen_object_async$address() { return H5Ropen_object_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Ropen_object_async(const char *app_file, const char *app_func, unsigned int app_line, H5R_ref_t
     * *ref_ptr, hid_t rapl_id, hid_t oapl_id, hid_t es_id)
     * }
     */
    public static long H5Ropen_object_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                            MemorySegment ref_ptr, long rapl_id, long oapl_id, long es_id)
    {
        var mh$ = H5Ropen_object_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ropen_object_async", app_file, app_func, app_line, ref_ptr, rapl_id, oapl_id,
                              es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, ref_ptr, rapl_id, oapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ropen_region {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ropen_region");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Ropen_region(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t oapl_id)
     * }
     */
    public static FunctionDescriptor H5Ropen_region$descriptor() { return H5Ropen_region.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Ropen_region(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t oapl_id)
     * }
     */
    public static MethodHandle H5Ropen_region$handle() { return H5Ropen_region.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Ropen_region(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t oapl_id)
     * }
     */
    public static MemorySegment H5Ropen_region$address() { return H5Ropen_region.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Ropen_region(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t oapl_id)
     * }
     */
    public static long H5Ropen_region(MemorySegment ref_ptr, long rapl_id, long oapl_id)
    {
        var mh$ = H5Ropen_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ropen_region", ref_ptr, rapl_id, oapl_id);
            }
            return (long)mh$.invokeExact(ref_ptr, rapl_id, oapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ropen_region_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ropen_region_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Ropen_region_async(const char *app_file, const char *app_func, unsigned int app_line, H5R_ref_t
     * *ref_ptr, hid_t rapl_id, hid_t oapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Ropen_region_async$descriptor() { return H5Ropen_region_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Ropen_region_async(const char *app_file, const char *app_func, unsigned int app_line, H5R_ref_t
     * *ref_ptr, hid_t rapl_id, hid_t oapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Ropen_region_async$handle() { return H5Ropen_region_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Ropen_region_async(const char *app_file, const char *app_func, unsigned int app_line, H5R_ref_t
     * *ref_ptr, hid_t rapl_id, hid_t oapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Ropen_region_async$address() { return H5Ropen_region_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Ropen_region_async(const char *app_file, const char *app_func, unsigned int app_line, H5R_ref_t
     * *ref_ptr, hid_t rapl_id, hid_t oapl_id, hid_t es_id)
     * }
     */
    public static long H5Ropen_region_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                            MemorySegment ref_ptr, long rapl_id, long oapl_id, long es_id)
    {
        var mh$ = H5Ropen_region_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ropen_region_async", app_file, app_func, app_line, ref_ptr, rapl_id, oapl_id,
                              es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, ref_ptr, rapl_id, oapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ropen_attr {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ropen_attr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Ropen_attr(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t aapl_id)
     * }
     */
    public static FunctionDescriptor H5Ropen_attr$descriptor() { return H5Ropen_attr.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Ropen_attr(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t aapl_id)
     * }
     */
    public static MethodHandle H5Ropen_attr$handle() { return H5Ropen_attr.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Ropen_attr(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t aapl_id)
     * }
     */
    public static MemorySegment H5Ropen_attr$address() { return H5Ropen_attr.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Ropen_attr(H5R_ref_t *ref_ptr, hid_t rapl_id, hid_t aapl_id)
     * }
     */
    public static long H5Ropen_attr(MemorySegment ref_ptr, long rapl_id, long aapl_id)
    {
        var mh$ = H5Ropen_attr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ropen_attr", ref_ptr, rapl_id, aapl_id);
            }
            return (long)mh$.invokeExact(ref_ptr, rapl_id, aapl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ropen_attr_async {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ropen_attr_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Ropen_attr_async(const char *app_file, const char *app_func, unsigned int app_line, H5R_ref_t
     * *ref_ptr, hid_t rapl_id, hid_t aapl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5Ropen_attr_async$descriptor() { return H5Ropen_attr_async.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Ropen_attr_async(const char *app_file, const char *app_func, unsigned int app_line, H5R_ref_t
     * *ref_ptr, hid_t rapl_id, hid_t aapl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5Ropen_attr_async$handle() { return H5Ropen_attr_async.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Ropen_attr_async(const char *app_file, const char *app_func, unsigned int app_line, H5R_ref_t
     * *ref_ptr, hid_t rapl_id, hid_t aapl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5Ropen_attr_async$address() { return H5Ropen_attr_async.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Ropen_attr_async(const char *app_file, const char *app_func, unsigned int app_line, H5R_ref_t
     * *ref_ptr, hid_t rapl_id, hid_t aapl_id, hid_t es_id)
     * }
     */
    public static long H5Ropen_attr_async(MemorySegment app_file, MemorySegment app_func, int app_line,
                                          MemorySegment ref_ptr, long rapl_id, long aapl_id, long es_id)
    {
        var mh$ = H5Ropen_attr_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ropen_attr_async", app_file, app_func, app_line, ref_ptr, rapl_id, aapl_id,
                              es_id);
            }
            return (long)mh$.invokeExact(app_file, app_func, app_line, ref_ptr, rapl_id, aapl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rget_obj_type3 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rget_obj_type3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Rget_obj_type3(H5R_ref_t *ref_ptr, hid_t rapl_id, H5O_type_t *obj_type)
     * }
     */
    public static FunctionDescriptor H5Rget_obj_type3$descriptor() { return H5Rget_obj_type3.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Rget_obj_type3(H5R_ref_t *ref_ptr, hid_t rapl_id, H5O_type_t *obj_type)
     * }
     */
    public static MethodHandle H5Rget_obj_type3$handle() { return H5Rget_obj_type3.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Rget_obj_type3(H5R_ref_t *ref_ptr, hid_t rapl_id, H5O_type_t *obj_type)
     * }
     */
    public static MemorySegment H5Rget_obj_type3$address() { return H5Rget_obj_type3.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Rget_obj_type3(H5R_ref_t *ref_ptr, hid_t rapl_id, H5O_type_t *obj_type)
     * }
     */
    public static int H5Rget_obj_type3(MemorySegment ref_ptr, long rapl_id, MemorySegment obj_type)
    {
        var mh$ = H5Rget_obj_type3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rget_obj_type3", ref_ptr, rapl_id, obj_type);
            }
            return (int)mh$.invokeExact(ref_ptr, rapl_id, obj_type);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rget_file_name {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rget_file_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Rget_file_name(const H5R_ref_t *ref_ptr, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor H5Rget_file_name$descriptor() { return H5Rget_file_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Rget_file_name(const H5R_ref_t *ref_ptr, char *name, size_t size)
     * }
     */
    public static MethodHandle H5Rget_file_name$handle() { return H5Rget_file_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Rget_file_name(const H5R_ref_t *ref_ptr, char *name, size_t size)
     * }
     */
    public static MemorySegment H5Rget_file_name$address() { return H5Rget_file_name.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Rget_file_name(const H5R_ref_t *ref_ptr, char *name, size_t size)
     * }
     */
    public static long H5Rget_file_name(MemorySegment ref_ptr, MemorySegment name, long size)
    {
        var mh$ = H5Rget_file_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rget_file_name", ref_ptr, name, size);
            }
            return (long)mh$.invokeExact(ref_ptr, name, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rget_obj_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rget_obj_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Rget_obj_name(H5R_ref_t *ref_ptr, hid_t rapl_id, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor H5Rget_obj_name$descriptor() { return H5Rget_obj_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Rget_obj_name(H5R_ref_t *ref_ptr, hid_t rapl_id, char *name, size_t size)
     * }
     */
    public static MethodHandle H5Rget_obj_name$handle() { return H5Rget_obj_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Rget_obj_name(H5R_ref_t *ref_ptr, hid_t rapl_id, char *name, size_t size)
     * }
     */
    public static MemorySegment H5Rget_obj_name$address() { return H5Rget_obj_name.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Rget_obj_name(H5R_ref_t *ref_ptr, hid_t rapl_id, char *name, size_t size)
     * }
     */
    public static long H5Rget_obj_name(MemorySegment ref_ptr, long rapl_id, MemorySegment name, long size)
    {
        var mh$ = H5Rget_obj_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rget_obj_name", ref_ptr, rapl_id, name, size);
            }
            return (long)mh$.invokeExact(ref_ptr, rapl_id, name, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rget_attr_name {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rget_attr_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Rget_attr_name(const H5R_ref_t *ref_ptr, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor H5Rget_attr_name$descriptor() { return H5Rget_attr_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Rget_attr_name(const H5R_ref_t *ref_ptr, char *name, size_t size)
     * }
     */
    public static MethodHandle H5Rget_attr_name$handle() { return H5Rget_attr_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Rget_attr_name(const H5R_ref_t *ref_ptr, char *name, size_t size)
     * }
     */
    public static MemorySegment H5Rget_attr_name$address() { return H5Rget_attr_name.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Rget_attr_name(const H5R_ref_t *ref_ptr, char *name, size_t size)
     * }
     */
    public static long H5Rget_attr_name(MemorySegment ref_ptr, MemorySegment name, long size)
    {
        var mh$ = H5Rget_attr_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rget_attr_name", ref_ptr, name, size);
            }
            return (long)mh$.invokeExact(ref_ptr, name, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rget_obj_type1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rget_obj_type1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5G_obj_t H5Rget_obj_type1(hid_t id, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static FunctionDescriptor H5Rget_obj_type1$descriptor() { return H5Rget_obj_type1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5G_obj_t H5Rget_obj_type1(hid_t id, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static MethodHandle H5Rget_obj_type1$handle() { return H5Rget_obj_type1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5G_obj_t H5Rget_obj_type1(hid_t id, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static MemorySegment H5Rget_obj_type1$address() { return H5Rget_obj_type1.ADDR; }

    /**
     * {@snippet lang=c :
     * H5G_obj_t H5Rget_obj_type1(hid_t id, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static int H5Rget_obj_type1(long id, int ref_type, MemorySegment ref)
    {
        var mh$ = H5Rget_obj_type1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rget_obj_type1", id, ref_type, ref);
            }
            return (int)mh$.invokeExact(id, ref_type, ref);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rdereference1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rdereference1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Rdereference1(hid_t obj_id, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static FunctionDescriptor H5Rdereference1$descriptor() { return H5Rdereference1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Rdereference1(hid_t obj_id, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static MethodHandle H5Rdereference1$handle() { return H5Rdereference1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Rdereference1(hid_t obj_id, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static MemorySegment H5Rdereference1$address() { return H5Rdereference1.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Rdereference1(hid_t obj_id, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static long H5Rdereference1(long obj_id, int ref_type, MemorySegment ref)
    {
        var mh$ = H5Rdereference1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rdereference1", obj_id, ref_type, ref);
            }
            return (long)mh$.invokeExact(obj_id, ref_type, ref);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rcreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rcreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Rcreate(void *ref, hid_t loc_id, const char *name, H5R_type_t ref_type, hid_t space_id)
     * }
     */
    public static FunctionDescriptor H5Rcreate$descriptor() { return H5Rcreate.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Rcreate(void *ref, hid_t loc_id, const char *name, H5R_type_t ref_type, hid_t space_id)
     * }
     */
    public static MethodHandle H5Rcreate$handle() { return H5Rcreate.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Rcreate(void *ref, hid_t loc_id, const char *name, H5R_type_t ref_type, hid_t space_id)
     * }
     */
    public static MemorySegment H5Rcreate$address() { return H5Rcreate.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Rcreate(void *ref, hid_t loc_id, const char *name, H5R_type_t ref_type, hid_t space_id)
     * }
     */
    public static int H5Rcreate(MemorySegment ref, long loc_id, MemorySegment name, int ref_type,
                                long space_id)
    {
        var mh$ = H5Rcreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rcreate", ref, loc_id, name, ref_type, space_id);
            }
            return (int)mh$.invokeExact(ref, loc_id, name, ref_type, space_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rget_obj_type2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rget_obj_type2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Rget_obj_type2(hid_t id, H5R_type_t ref_type, const void *ref, H5O_type_t *obj_type)
     * }
     */
    public static FunctionDescriptor H5Rget_obj_type2$descriptor() { return H5Rget_obj_type2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Rget_obj_type2(hid_t id, H5R_type_t ref_type, const void *ref, H5O_type_t *obj_type)
     * }
     */
    public static MethodHandle H5Rget_obj_type2$handle() { return H5Rget_obj_type2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Rget_obj_type2(hid_t id, H5R_type_t ref_type, const void *ref, H5O_type_t *obj_type)
     * }
     */
    public static MemorySegment H5Rget_obj_type2$address() { return H5Rget_obj_type2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Rget_obj_type2(hid_t id, H5R_type_t ref_type, const void *ref, H5O_type_t *obj_type)
     * }
     */
    public static int H5Rget_obj_type2(long id, int ref_type, MemorySegment ref, MemorySegment obj_type)
    {
        var mh$ = H5Rget_obj_type2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rget_obj_type2", id, ref_type, ref, obj_type);
            }
            return (int)mh$.invokeExact(id, ref_type, ref, obj_type);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rdereference2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rdereference2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Rdereference2(hid_t obj_id, hid_t oapl_id, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static FunctionDescriptor H5Rdereference2$descriptor() { return H5Rdereference2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Rdereference2(hid_t obj_id, hid_t oapl_id, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static MethodHandle H5Rdereference2$handle() { return H5Rdereference2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Rdereference2(hid_t obj_id, hid_t oapl_id, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static MemorySegment H5Rdereference2$address() { return H5Rdereference2.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Rdereference2(hid_t obj_id, hid_t oapl_id, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static long H5Rdereference2(long obj_id, long oapl_id, int ref_type, MemorySegment ref)
    {
        var mh$ = H5Rdereference2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rdereference2", obj_id, oapl_id, ref_type, ref);
            }
            return (long)mh$.invokeExact(obj_id, oapl_id, ref_type, ref);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rget_region {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rget_region");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Rget_region(hid_t dataset, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static FunctionDescriptor H5Rget_region$descriptor() { return H5Rget_region.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Rget_region(hid_t dataset, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static MethodHandle H5Rget_region$handle() { return H5Rget_region.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Rget_region(hid_t dataset, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static MemorySegment H5Rget_region$address() { return H5Rget_region.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Rget_region(hid_t dataset, H5R_type_t ref_type, const void *ref)
     * }
     */
    public static long H5Rget_region(long dataset, int ref_type, MemorySegment ref)
    {
        var mh$ = H5Rget_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rget_region", dataset, ref_type, ref);
            }
            return (long)mh$.invokeExact(dataset, ref_type, ref);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Rget_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Rget_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t H5Rget_name(hid_t loc_id, H5R_type_t ref_type, const void *ref, char *name, size_t size)
     * }
     */
    public static FunctionDescriptor H5Rget_name$descriptor() { return H5Rget_name.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t H5Rget_name(hid_t loc_id, H5R_type_t ref_type, const void *ref, char *name, size_t size)
     * }
     */
    public static MethodHandle H5Rget_name$handle() { return H5Rget_name.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t H5Rget_name(hid_t loc_id, H5R_type_t ref_type, const void *ref, char *name, size_t size)
     * }
     */
    public static MemorySegment H5Rget_name$address() { return H5Rget_name.ADDR; }

    /**
     * {@snippet lang=c :
     * ssize_t H5Rget_name(hid_t loc_id, H5R_type_t ref_type, const void *ref, char *name, size_t size)
     * }
     */
    public static long H5Rget_name(long loc_id, int ref_type, MemorySegment ref, MemorySegment name,
                                   long size)
    {
        var mh$ = H5Rget_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Rget_name", loc_id, ref_type, ref, name, size);
            }
            return (long)mh$.invokeExact(loc_id, ref_type, ref, name, size);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5VL_OBJECT_BY_SELF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_loc_type_t.H5VL_OBJECT_BY_SELF = 0
     * }
     */
    public static int H5VL_OBJECT_BY_SELF() { return H5VL_OBJECT_BY_SELF; }
    private static final int H5VL_OBJECT_BY_NAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_loc_type_t.H5VL_OBJECT_BY_NAME = 1
     * }
     */
    public static int H5VL_OBJECT_BY_NAME() { return H5VL_OBJECT_BY_NAME; }
    private static final int H5VL_OBJECT_BY_IDX = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_loc_type_t.H5VL_OBJECT_BY_IDX = 2
     * }
     */
    public static int H5VL_OBJECT_BY_IDX() { return H5VL_OBJECT_BY_IDX; }
    private static final int H5VL_OBJECT_BY_TOKEN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5VL_loc_type_t.H5VL_OBJECT_BY_TOKEN = 3
     * }
     */
    public static int H5VL_OBJECT_BY_TOKEN() { return H5VL_OBJECT_BY_TOKEN; }
    private static final int H5VL_ATTR_GET_ACPL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_attr_get_t.H5VL_ATTR_GET_ACPL = 0
     * }
     */
    public static int H5VL_ATTR_GET_ACPL() { return H5VL_ATTR_GET_ACPL; }
    private static final int H5VL_ATTR_GET_INFO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_attr_get_t.H5VL_ATTR_GET_INFO = 1
     * }
     */
    public static int H5VL_ATTR_GET_INFO() { return H5VL_ATTR_GET_INFO; }
    private static final int H5VL_ATTR_GET_NAME = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_attr_get_t.H5VL_ATTR_GET_NAME = 2
     * }
     */
    public static int H5VL_ATTR_GET_NAME() { return H5VL_ATTR_GET_NAME; }
    private static final int H5VL_ATTR_GET_SPACE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5VL_attr_get_t.H5VL_ATTR_GET_SPACE = 3
     * }
     */
    public static int H5VL_ATTR_GET_SPACE() { return H5VL_ATTR_GET_SPACE; }
    private static final int H5VL_ATTR_GET_STORAGE_SIZE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5VL_attr_get_t.H5VL_ATTR_GET_STORAGE_SIZE = 4
     * }
     */
    public static int H5VL_ATTR_GET_STORAGE_SIZE() { return H5VL_ATTR_GET_STORAGE_SIZE; }
    private static final int H5VL_ATTR_GET_TYPE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum H5VL_attr_get_t.H5VL_ATTR_GET_TYPE = 5
     * }
     */
    public static int H5VL_ATTR_GET_TYPE() { return H5VL_ATTR_GET_TYPE; }
    private static final int H5VL_ATTR_DELETE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_attr_specific_t.H5VL_ATTR_DELETE = 0
     * }
     */
    public static int H5VL_ATTR_DELETE() { return H5VL_ATTR_DELETE; }
    private static final int H5VL_ATTR_DELETE_BY_IDX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_attr_specific_t.H5VL_ATTR_DELETE_BY_IDX = 1
     * }
     */
    public static int H5VL_ATTR_DELETE_BY_IDX() { return H5VL_ATTR_DELETE_BY_IDX; }
    private static final int H5VL_ATTR_EXISTS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_attr_specific_t.H5VL_ATTR_EXISTS = 2
     * }
     */
    public static int H5VL_ATTR_EXISTS() { return H5VL_ATTR_EXISTS; }
    private static final int H5VL_ATTR_ITER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5VL_attr_specific_t.H5VL_ATTR_ITER = 3
     * }
     */
    public static int H5VL_ATTR_ITER() { return H5VL_ATTR_ITER; }
    private static final int H5VL_ATTR_RENAME = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5VL_attr_specific_t.H5VL_ATTR_RENAME = 4
     * }
     */
    public static int H5VL_ATTR_RENAME() { return H5VL_ATTR_RENAME; }
    /**
     * {@snippet lang=c :
     * typedef int H5VL_attr_optional_t
     * }
     */
    public static final OfInt H5VL_attr_optional_t = hdf5_h.C_INT;
    private static final int H5VL_DATASET_GET_DAPL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_dataset_get_t.H5VL_DATASET_GET_DAPL = 0
     * }
     */
    public static int H5VL_DATASET_GET_DAPL() { return H5VL_DATASET_GET_DAPL; }
    private static final int H5VL_DATASET_GET_DCPL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_dataset_get_t.H5VL_DATASET_GET_DCPL = 1
     * }
     */
    public static int H5VL_DATASET_GET_DCPL() { return H5VL_DATASET_GET_DCPL; }
    private static final int H5VL_DATASET_GET_SPACE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_dataset_get_t.H5VL_DATASET_GET_SPACE = 2
     * }
     */
    public static int H5VL_DATASET_GET_SPACE() { return H5VL_DATASET_GET_SPACE; }
    private static final int H5VL_DATASET_GET_SPACE_STATUS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5VL_dataset_get_t.H5VL_DATASET_GET_SPACE_STATUS = 3
     * }
     */
    public static int H5VL_DATASET_GET_SPACE_STATUS() { return H5VL_DATASET_GET_SPACE_STATUS; }
    private static final int H5VL_DATASET_GET_STORAGE_SIZE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5VL_dataset_get_t.H5VL_DATASET_GET_STORAGE_SIZE = 4
     * }
     */
    public static int H5VL_DATASET_GET_STORAGE_SIZE() { return H5VL_DATASET_GET_STORAGE_SIZE; }
    private static final int H5VL_DATASET_GET_TYPE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum H5VL_dataset_get_t.H5VL_DATASET_GET_TYPE = 5
     * }
     */
    public static int H5VL_DATASET_GET_TYPE() { return H5VL_DATASET_GET_TYPE; }
    private static final int H5VL_DATASET_SET_EXTENT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_dataset_specific_t.H5VL_DATASET_SET_EXTENT = 0
     * }
     */
    public static int H5VL_DATASET_SET_EXTENT() { return H5VL_DATASET_SET_EXTENT; }
    private static final int H5VL_DATASET_FLUSH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_dataset_specific_t.H5VL_DATASET_FLUSH = 1
     * }
     */
    public static int H5VL_DATASET_FLUSH() { return H5VL_DATASET_FLUSH; }
    private static final int H5VL_DATASET_REFRESH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_dataset_specific_t.H5VL_DATASET_REFRESH = 2
     * }
     */
    public static int H5VL_DATASET_REFRESH() { return H5VL_DATASET_REFRESH; }
    /**
     * {@snippet lang=c :
     * typedef int H5VL_dataset_optional_t
     * }
     */
    public static final OfInt H5VL_dataset_optional_t      = hdf5_h.C_INT;
    private static final int H5VL_DATATYPE_GET_BINARY_SIZE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_datatype_get_t.H5VL_DATATYPE_GET_BINARY_SIZE = 0
     * }
     */
    public static int H5VL_DATATYPE_GET_BINARY_SIZE() { return H5VL_DATATYPE_GET_BINARY_SIZE; }
    private static final int H5VL_DATATYPE_GET_BINARY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_datatype_get_t.H5VL_DATATYPE_GET_BINARY = 1
     * }
     */
    public static int H5VL_DATATYPE_GET_BINARY() { return H5VL_DATATYPE_GET_BINARY; }
    private static final int H5VL_DATATYPE_GET_TCPL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_datatype_get_t.H5VL_DATATYPE_GET_TCPL = 2
     * }
     */
    public static int H5VL_DATATYPE_GET_TCPL() { return H5VL_DATATYPE_GET_TCPL; }
    private static final int H5VL_DATATYPE_FLUSH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_datatype_specific_t.H5VL_DATATYPE_FLUSH = 0
     * }
     */
    public static int H5VL_DATATYPE_FLUSH() { return H5VL_DATATYPE_FLUSH; }
    private static final int H5VL_DATATYPE_REFRESH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_datatype_specific_t.H5VL_DATATYPE_REFRESH = 1
     * }
     */
    public static int H5VL_DATATYPE_REFRESH() { return H5VL_DATATYPE_REFRESH; }
    /**
     * {@snippet lang=c :
     * typedef int H5VL_datatype_optional_t
     * }
     */
    public static final OfInt H5VL_datatype_optional_t = hdf5_h.C_INT;
    private static final int H5VL_FILE_GET_CONT_INFO   = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_get_t.H5VL_FILE_GET_CONT_INFO = 0
     * }
     */
    public static int H5VL_FILE_GET_CONT_INFO() { return H5VL_FILE_GET_CONT_INFO; }
    private static final int H5VL_FILE_GET_FAPL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_get_t.H5VL_FILE_GET_FAPL = 1
     * }
     */
    public static int H5VL_FILE_GET_FAPL() { return H5VL_FILE_GET_FAPL; }
    private static final int H5VL_FILE_GET_FCPL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_get_t.H5VL_FILE_GET_FCPL = 2
     * }
     */
    public static int H5VL_FILE_GET_FCPL() { return H5VL_FILE_GET_FCPL; }
    private static final int H5VL_FILE_GET_FILENO = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_get_t.H5VL_FILE_GET_FILENO = 3
     * }
     */
    public static int H5VL_FILE_GET_FILENO() { return H5VL_FILE_GET_FILENO; }
    private static final int H5VL_FILE_GET_INTENT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_get_t.H5VL_FILE_GET_INTENT = 4
     * }
     */
    public static int H5VL_FILE_GET_INTENT() { return H5VL_FILE_GET_INTENT; }
    private static final int H5VL_FILE_GET_NAME = (int)5L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_get_t.H5VL_FILE_GET_NAME = 5
     * }
     */
    public static int H5VL_FILE_GET_NAME() { return H5VL_FILE_GET_NAME; }
    private static final int H5VL_FILE_GET_OBJ_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_get_t.H5VL_FILE_GET_OBJ_COUNT = 6
     * }
     */
    public static int H5VL_FILE_GET_OBJ_COUNT() { return H5VL_FILE_GET_OBJ_COUNT; }
    private static final int H5VL_FILE_GET_OBJ_IDS = (int)7L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_get_t.H5VL_FILE_GET_OBJ_IDS = 7
     * }
     */
    public static int H5VL_FILE_GET_OBJ_IDS() { return H5VL_FILE_GET_OBJ_IDS; }
    private static final int H5VL_FILE_FLUSH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_specific_t.H5VL_FILE_FLUSH = 0
     * }
     */
    public static int H5VL_FILE_FLUSH() { return H5VL_FILE_FLUSH; }
    private static final int H5VL_FILE_REOPEN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_specific_t.H5VL_FILE_REOPEN = 1
     * }
     */
    public static int H5VL_FILE_REOPEN() { return H5VL_FILE_REOPEN; }
    private static final int H5VL_FILE_IS_ACCESSIBLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_specific_t.H5VL_FILE_IS_ACCESSIBLE = 2
     * }
     */
    public static int H5VL_FILE_IS_ACCESSIBLE() { return H5VL_FILE_IS_ACCESSIBLE; }
    private static final int H5VL_FILE_DELETE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_specific_t.H5VL_FILE_DELETE = 3
     * }
     */
    public static int H5VL_FILE_DELETE() { return H5VL_FILE_DELETE; }
    private static final int H5VL_FILE_IS_EQUAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5VL_file_specific_t.H5VL_FILE_IS_EQUAL = 4
     * }
     */
    public static int H5VL_FILE_IS_EQUAL() { return H5VL_FILE_IS_EQUAL; }
    /**
     * {@snippet lang=c :
     * typedef int H5VL_file_optional_t
     * }
     */
    public static final OfInt H5VL_file_optional_t = hdf5_h.C_INT;
    private static final int H5VL_GROUP_GET_GCPL   = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_group_get_t.H5VL_GROUP_GET_GCPL = 0
     * }
     */
    public static int H5VL_GROUP_GET_GCPL() { return H5VL_GROUP_GET_GCPL; }
    private static final int H5VL_GROUP_GET_INFO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_group_get_t.H5VL_GROUP_GET_INFO = 1
     * }
     */
    public static int H5VL_GROUP_GET_INFO() { return H5VL_GROUP_GET_INFO; }
    private static final int H5VL_GROUP_MOUNT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_group_specific_t.H5VL_GROUP_MOUNT = 0
     * }
     */
    public static int H5VL_GROUP_MOUNT() { return H5VL_GROUP_MOUNT; }
    private static final int H5VL_GROUP_UNMOUNT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_group_specific_t.H5VL_GROUP_UNMOUNT = 1
     * }
     */
    public static int H5VL_GROUP_UNMOUNT() { return H5VL_GROUP_UNMOUNT; }
    private static final int H5VL_GROUP_FLUSH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_group_specific_t.H5VL_GROUP_FLUSH = 2
     * }
     */
    public static int H5VL_GROUP_FLUSH() { return H5VL_GROUP_FLUSH; }
    private static final int H5VL_GROUP_REFRESH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5VL_group_specific_t.H5VL_GROUP_REFRESH = 3
     * }
     */
    public static int H5VL_GROUP_REFRESH() { return H5VL_GROUP_REFRESH; }
    /**
     * {@snippet lang=c :
     * typedef int H5VL_group_optional_t
     * }
     */
    public static final OfInt H5VL_group_optional_t = hdf5_h.C_INT;
    private static final int H5VL_LINK_CREATE_HARD  = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_link_create_t.H5VL_LINK_CREATE_HARD = 0
     * }
     */
    public static int H5VL_LINK_CREATE_HARD() { return H5VL_LINK_CREATE_HARD; }
    private static final int H5VL_LINK_CREATE_SOFT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_link_create_t.H5VL_LINK_CREATE_SOFT = 1
     * }
     */
    public static int H5VL_LINK_CREATE_SOFT() { return H5VL_LINK_CREATE_SOFT; }
    private static final int H5VL_LINK_CREATE_UD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_link_create_t.H5VL_LINK_CREATE_UD = 2
     * }
     */
    public static int H5VL_LINK_CREATE_UD() { return H5VL_LINK_CREATE_UD; }
    private static final int H5VL_LINK_GET_INFO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_link_get_t.H5VL_LINK_GET_INFO = 0
     * }
     */
    public static int H5VL_LINK_GET_INFO() { return H5VL_LINK_GET_INFO; }
    private static final int H5VL_LINK_GET_NAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_link_get_t.H5VL_LINK_GET_NAME = 1
     * }
     */
    public static int H5VL_LINK_GET_NAME() { return H5VL_LINK_GET_NAME; }
    private static final int H5VL_LINK_GET_VAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_link_get_t.H5VL_LINK_GET_VAL = 2
     * }
     */
    public static int H5VL_LINK_GET_VAL() { return H5VL_LINK_GET_VAL; }
    private static final int H5VL_LINK_DELETE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_link_specific_t.H5VL_LINK_DELETE = 0
     * }
     */
    public static int H5VL_LINK_DELETE() { return H5VL_LINK_DELETE; }
    private static final int H5VL_LINK_EXISTS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_link_specific_t.H5VL_LINK_EXISTS = 1
     * }
     */
    public static int H5VL_LINK_EXISTS() { return H5VL_LINK_EXISTS; }
    private static final int H5VL_LINK_ITER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_link_specific_t.H5VL_LINK_ITER = 2
     * }
     */
    public static int H5VL_LINK_ITER() { return H5VL_LINK_ITER; }
    /**
     * {@snippet lang=c :
     * typedef int H5VL_link_optional_t
     * }
     */
    public static final OfInt H5VL_link_optional_t = hdf5_h.C_INT;
    private static final int H5VL_OBJECT_GET_FILE  = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_object_get_t.H5VL_OBJECT_GET_FILE = 0
     * }
     */
    public static int H5VL_OBJECT_GET_FILE() { return H5VL_OBJECT_GET_FILE; }
    private static final int H5VL_OBJECT_GET_NAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_object_get_t.H5VL_OBJECT_GET_NAME = 1
     * }
     */
    public static int H5VL_OBJECT_GET_NAME() { return H5VL_OBJECT_GET_NAME; }
    private static final int H5VL_OBJECT_GET_TYPE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_object_get_t.H5VL_OBJECT_GET_TYPE = 2
     * }
     */
    public static int H5VL_OBJECT_GET_TYPE() { return H5VL_OBJECT_GET_TYPE; }
    private static final int H5VL_OBJECT_GET_INFO = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5VL_object_get_t.H5VL_OBJECT_GET_INFO = 3
     * }
     */
    public static int H5VL_OBJECT_GET_INFO() { return H5VL_OBJECT_GET_INFO; }
    private static final int H5VL_OBJECT_CHANGE_REF_COUNT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_object_specific_t.H5VL_OBJECT_CHANGE_REF_COUNT = 0
     * }
     */
    public static int H5VL_OBJECT_CHANGE_REF_COUNT() { return H5VL_OBJECT_CHANGE_REF_COUNT; }
    private static final int H5VL_OBJECT_EXISTS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_object_specific_t.H5VL_OBJECT_EXISTS = 1
     * }
     */
    public static int H5VL_OBJECT_EXISTS() { return H5VL_OBJECT_EXISTS; }
    private static final int H5VL_OBJECT_LOOKUP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_object_specific_t.H5VL_OBJECT_LOOKUP = 2
     * }
     */
    public static int H5VL_OBJECT_LOOKUP() { return H5VL_OBJECT_LOOKUP; }
    private static final int H5VL_OBJECT_VISIT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5VL_object_specific_t.H5VL_OBJECT_VISIT = 3
     * }
     */
    public static int H5VL_OBJECT_VISIT() { return H5VL_OBJECT_VISIT; }
    private static final int H5VL_OBJECT_FLUSH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5VL_object_specific_t.H5VL_OBJECT_FLUSH = 4
     * }
     */
    public static int H5VL_OBJECT_FLUSH() { return H5VL_OBJECT_FLUSH; }
    private static final int H5VL_OBJECT_REFRESH = (int)5L;
    /**
     * {@snippet lang=c :
     * enum H5VL_object_specific_t.H5VL_OBJECT_REFRESH = 5
     * }
     */
    public static int H5VL_OBJECT_REFRESH() { return H5VL_OBJECT_REFRESH; }
    /**
     * {@snippet lang=c :
     * typedef int H5VL_object_optional_t
     * }
     */
    public static final OfInt H5VL_object_optional_t         = hdf5_h.C_INT;
    private static final int H5VL_REQUEST_STATUS_IN_PROGRESS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_request_status_t.H5VL_REQUEST_STATUS_IN_PROGRESS = 0
     * }
     */
    public static int H5VL_REQUEST_STATUS_IN_PROGRESS() { return H5VL_REQUEST_STATUS_IN_PROGRESS; }
    private static final int H5VL_REQUEST_STATUS_SUCCEED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_request_status_t.H5VL_REQUEST_STATUS_SUCCEED = 1
     * }
     */
    public static int H5VL_REQUEST_STATUS_SUCCEED() { return H5VL_REQUEST_STATUS_SUCCEED; }
    private static final int H5VL_REQUEST_STATUS_FAIL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_request_status_t.H5VL_REQUEST_STATUS_FAIL = 2
     * }
     */
    public static int H5VL_REQUEST_STATUS_FAIL() { return H5VL_REQUEST_STATUS_FAIL; }
    private static final int H5VL_REQUEST_STATUS_CANT_CANCEL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5VL_request_status_t.H5VL_REQUEST_STATUS_CANT_CANCEL = 3
     * }
     */
    public static int H5VL_REQUEST_STATUS_CANT_CANCEL() { return H5VL_REQUEST_STATUS_CANT_CANCEL; }
    private static final int H5VL_REQUEST_STATUS_CANCELED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5VL_request_status_t.H5VL_REQUEST_STATUS_CANCELED = 4
     * }
     */
    public static int H5VL_REQUEST_STATUS_CANCELED() { return H5VL_REQUEST_STATUS_CANCELED; }
    private static final int H5VL_REQUEST_GET_ERR_STACK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_request_specific_t.H5VL_REQUEST_GET_ERR_STACK = 0
     * }
     */
    public static int H5VL_REQUEST_GET_ERR_STACK() { return H5VL_REQUEST_GET_ERR_STACK; }
    private static final int H5VL_REQUEST_GET_EXEC_TIME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_request_specific_t.H5VL_REQUEST_GET_EXEC_TIME = 1
     * }
     */
    public static int H5VL_REQUEST_GET_EXEC_TIME() { return H5VL_REQUEST_GET_EXEC_TIME; }
    /**
     * {@snippet lang=c :
     * typedef int H5VL_request_optional_t
     * }
     */
    public static final OfInt H5VL_request_optional_t = hdf5_h.C_INT;
    private static final int H5VL_BLOB_DELETE         = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_blob_specific_t.H5VL_BLOB_DELETE = 0
     * }
     */
    public static int H5VL_BLOB_DELETE() { return H5VL_BLOB_DELETE; }
    private static final int H5VL_BLOB_ISNULL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_blob_specific_t.H5VL_BLOB_ISNULL = 1
     * }
     */
    public static int H5VL_BLOB_ISNULL() { return H5VL_BLOB_ISNULL; }
    private static final int H5VL_BLOB_SETNULL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_blob_specific_t.H5VL_BLOB_SETNULL = 2
     * }
     */
    public static int H5VL_BLOB_SETNULL() { return H5VL_BLOB_SETNULL; }
    /**
     * {@snippet lang=c :
     * typedef int H5VL_blob_optional_t
     * }
     */
    public static final OfInt H5VL_blob_optional_t  = hdf5_h.C_INT;
    private static final int H5VL_GET_CONN_LVL_CURR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_get_conn_lvl_t.H5VL_GET_CONN_LVL_CURR = 0
     * }
     */
    public static int H5VL_GET_CONN_LVL_CURR() { return H5VL_GET_CONN_LVL_CURR; }
    private static final int H5VL_GET_CONN_LVL_TERM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_get_conn_lvl_t.H5VL_GET_CONN_LVL_TERM = 1
     * }
     */
    public static int H5VL_GET_CONN_LVL_TERM() { return H5VL_GET_CONN_LVL_TERM; }

    private static class H5VLregister_connector {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLregister_connector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5VLregister_connector(const H5VL_class_t *cls, hid_t vipl_id)
     * }
     */
    public static FunctionDescriptor H5VLregister_connector$descriptor()
    {
        return H5VLregister_connector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5VLregister_connector(const H5VL_class_t *cls, hid_t vipl_id)
     * }
     */
    public static MethodHandle H5VLregister_connector$handle() { return H5VLregister_connector.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5VLregister_connector(const H5VL_class_t *cls, hid_t vipl_id)
     * }
     */
    public static MemorySegment H5VLregister_connector$address() { return H5VLregister_connector.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5VLregister_connector(const H5VL_class_t *cls, hid_t vipl_id)
     * }
     */
    public static long H5VLregister_connector(MemorySegment cls, long vipl_id)
    {
        var mh$ = H5VLregister_connector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLregister_connector", cls, vipl_id);
            }
            return (long)mh$.invokeExact(cls, vipl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLobject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLobject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *H5VLobject(hid_t obj_id)
     * }
     */
    public static FunctionDescriptor H5VLobject$descriptor() { return H5VLobject.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *H5VLobject(hid_t obj_id)
     * }
     */
    public static MethodHandle H5VLobject$handle() { return H5VLobject.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *H5VLobject(hid_t obj_id)
     * }
     */
    public static MemorySegment H5VLobject$address() { return H5VLobject.ADDR; }

    /**
     * {@snippet lang=c :
     * void *H5VLobject(hid_t obj_id)
     * }
     */
    public static MemorySegment H5VLobject(long obj_id)
    {
        var mh$ = H5VLobject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLobject", obj_id);
            }
            return (MemorySegment)mh$.invokeExact(obj_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLget_file_type {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLget_file_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5VLget_file_type(void *file_obj, hid_t connector_id, hid_t dtype_id)
     * }
     */
    public static FunctionDescriptor H5VLget_file_type$descriptor() { return H5VLget_file_type.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5VLget_file_type(void *file_obj, hid_t connector_id, hid_t dtype_id)
     * }
     */
    public static MethodHandle H5VLget_file_type$handle() { return H5VLget_file_type.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5VLget_file_type(void *file_obj, hid_t connector_id, hid_t dtype_id)
     * }
     */
    public static MemorySegment H5VLget_file_type$address() { return H5VLget_file_type.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5VLget_file_type(void *file_obj, hid_t connector_id, hid_t dtype_id)
     * }
     */
    public static long H5VLget_file_type(MemorySegment file_obj, long connector_id, long dtype_id)
    {
        var mh$ = H5VLget_file_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLget_file_type", file_obj, connector_id, dtype_id);
            }
            return (long)mh$.invokeExact(file_obj, connector_id, dtype_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLregister_opt_operation {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLregister_opt_operation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLregister_opt_operation(H5VL_subclass_t subcls, const char *op_name, int *op_val)
     * }
     */
    public static FunctionDescriptor H5VLregister_opt_operation$descriptor()
    {
        return H5VLregister_opt_operation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLregister_opt_operation(H5VL_subclass_t subcls, const char *op_name, int *op_val)
     * }
     */
    public static MethodHandle H5VLregister_opt_operation$handle()
    {
        return H5VLregister_opt_operation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLregister_opt_operation(H5VL_subclass_t subcls, const char *op_name, int *op_val)
     * }
     */
    public static MemorySegment H5VLregister_opt_operation$address()
    {
        return H5VLregister_opt_operation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLregister_opt_operation(H5VL_subclass_t subcls, const char *op_name, int *op_val)
     * }
     */
    public static int H5VLregister_opt_operation(int subcls, MemorySegment op_name, MemorySegment op_val)
    {
        var mh$ = H5VLregister_opt_operation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLregister_opt_operation", subcls, op_name, op_val);
            }
            return (int)mh$.invokeExact(subcls, op_name, op_val);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLfind_opt_operation {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLfind_opt_operation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLfind_opt_operation(H5VL_subclass_t subcls, const char *op_name, int *op_val)
     * }
     */
    public static FunctionDescriptor H5VLfind_opt_operation$descriptor()
    {
        return H5VLfind_opt_operation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLfind_opt_operation(H5VL_subclass_t subcls, const char *op_name, int *op_val)
     * }
     */
    public static MethodHandle H5VLfind_opt_operation$handle() { return H5VLfind_opt_operation.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLfind_opt_operation(H5VL_subclass_t subcls, const char *op_name, int *op_val)
     * }
     */
    public static MemorySegment H5VLfind_opt_operation$address() { return H5VLfind_opt_operation.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLfind_opt_operation(H5VL_subclass_t subcls, const char *op_name, int *op_val)
     * }
     */
    public static int H5VLfind_opt_operation(int subcls, MemorySegment op_name, MemorySegment op_val)
    {
        var mh$ = H5VLfind_opt_operation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLfind_opt_operation", subcls, op_name, op_val);
            }
            return (int)mh$.invokeExact(subcls, op_name, op_val);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLunregister_opt_operation {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLunregister_opt_operation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLunregister_opt_operation(H5VL_subclass_t subcls, const char *op_name)
     * }
     */
    public static FunctionDescriptor H5VLunregister_opt_operation$descriptor()
    {
        return H5VLunregister_opt_operation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLunregister_opt_operation(H5VL_subclass_t subcls, const char *op_name)
     * }
     */
    public static MethodHandle H5VLunregister_opt_operation$handle()
    {
        return H5VLunregister_opt_operation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLunregister_opt_operation(H5VL_subclass_t subcls, const char *op_name)
     * }
     */
    public static MemorySegment H5VLunregister_opt_operation$address()
    {
        return H5VLunregister_opt_operation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5VLunregister_opt_operation(H5VL_subclass_t subcls, const char *op_name)
     * }
     */
    public static int H5VLunregister_opt_operation(int subcls, MemorySegment op_name)
    {
        var mh$ = H5VLunregister_opt_operation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLunregister_opt_operation", subcls, op_name);
            }
            return (int)mh$.invokeExact(subcls, op_name);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLattr_optional_op {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLattr_optional_op");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLattr_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * attr_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5VLattr_optional_op$descriptor() { return H5VLattr_optional_op.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLattr_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * attr_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5VLattr_optional_op$handle() { return H5VLattr_optional_op.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLattr_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * attr_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5VLattr_optional_op$address() { return H5VLattr_optional_op.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLattr_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * attr_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static int H5VLattr_optional_op(MemorySegment app_file, MemorySegment app_func, int app_line,
                                           long attr_id, MemorySegment args, long dxpl_id, long es_id)
    {
        var mh$ = H5VLattr_optional_op.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLattr_optional_op", app_file, app_func, app_line, attr_id, args, dxpl_id,
                              es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, attr_id, args, dxpl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdataset_optional_op {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdataset_optional_op");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * dset_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5VLdataset_optional_op$descriptor()
    {
        return H5VLdataset_optional_op.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * dset_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5VLdataset_optional_op$handle() { return H5VLdataset_optional_op.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLdataset_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * dset_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5VLdataset_optional_op$address() { return H5VLdataset_optional_op.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLdataset_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * dset_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static int H5VLdataset_optional_op(MemorySegment app_file, MemorySegment app_func, int app_line,
                                              long dset_id, MemorySegment args, long dxpl_id, long es_id)
    {
        var mh$ = H5VLdataset_optional_op.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdataset_optional_op", app_file, app_func, app_line, dset_id, args, dxpl_id,
                              es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, dset_id, args, dxpl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLdatatype_optional_op {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLdatatype_optional_op");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_optional_op(const char *app_file, const char *app_func, unsigned int app_line,
     * hid_t type_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5VLdatatype_optional_op$descriptor()
    {
        return H5VLdatatype_optional_op.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_optional_op(const char *app_file, const char *app_func, unsigned int app_line,
     * hid_t type_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5VLdatatype_optional_op$handle() { return H5VLdatatype_optional_op.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLdatatype_optional_op(const char *app_file, const char *app_func, unsigned int app_line,
     * hid_t type_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5VLdatatype_optional_op$address() { return H5VLdatatype_optional_op.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLdatatype_optional_op(const char *app_file, const char *app_func, unsigned int app_line,
     * hid_t type_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static int H5VLdatatype_optional_op(MemorySegment app_file, MemorySegment app_func, int app_line,
                                               long type_id, MemorySegment args, long dxpl_id, long es_id)
    {
        var mh$ = H5VLdatatype_optional_op.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLdatatype_optional_op", app_file, app_func, app_line, type_id, args,
                              dxpl_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, type_id, args, dxpl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLfile_optional_op {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLfile_optional_op");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLfile_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * file_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5VLfile_optional_op$descriptor() { return H5VLfile_optional_op.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLfile_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * file_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5VLfile_optional_op$handle() { return H5VLfile_optional_op.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLfile_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * file_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5VLfile_optional_op$address() { return H5VLfile_optional_op.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLfile_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * file_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static int H5VLfile_optional_op(MemorySegment app_file, MemorySegment app_func, int app_line,
                                           long file_id, MemorySegment args, long dxpl_id, long es_id)
    {
        var mh$ = H5VLfile_optional_op.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLfile_optional_op", app_file, app_func, app_line, file_id, args, dxpl_id,
                              es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, file_id, args, dxpl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLgroup_optional_op {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT,
                                  hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLgroup_optional_op");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * group_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5VLgroup_optional_op$descriptor() { return H5VLgroup_optional_op.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * group_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5VLgroup_optional_op$handle() { return H5VLgroup_optional_op.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLgroup_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * group_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5VLgroup_optional_op$address() { return H5VLgroup_optional_op.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLgroup_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * group_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static int H5VLgroup_optional_op(MemorySegment app_file, MemorySegment app_func, int app_line,
                                            long group_id, MemorySegment args, long dxpl_id, long es_id)
    {
        var mh$ = H5VLgroup_optional_op.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLgroup_optional_op", app_file, app_func, app_line, group_id, args, dxpl_id,
                              es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, group_id, args, dxpl_id, es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLlink_optional_op {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLlink_optional_op");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLlink_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *name, hid_t lapl_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5VLlink_optional_op$descriptor() { return H5VLlink_optional_op.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLlink_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *name, hid_t lapl_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5VLlink_optional_op$handle() { return H5VLlink_optional_op.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLlink_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *name, hid_t lapl_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5VLlink_optional_op$address() { return H5VLlink_optional_op.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLlink_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *name, hid_t lapl_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static int H5VLlink_optional_op(MemorySegment app_file, MemorySegment app_func, int app_line,
                                           long loc_id, MemorySegment name, long lapl_id, MemorySegment args,
                                           long dxpl_id, long es_id)
    {
        var mh$ = H5VLlink_optional_op.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLlink_optional_op", app_file, app_func, app_line, loc_id, name, lapl_id,
                              args, dxpl_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, loc_id, name, lapl_id, args, dxpl_id,
                                        es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLobject_optional_op {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER,
            hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLobject_optional_op");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLobject_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *name, hid_t lapl_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static FunctionDescriptor H5VLobject_optional_op$descriptor()
    {
        return H5VLobject_optional_op.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLobject_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *name, hid_t lapl_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MethodHandle H5VLobject_optional_op$handle() { return H5VLobject_optional_op.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLobject_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *name, hid_t lapl_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static MemorySegment H5VLobject_optional_op$address() { return H5VLobject_optional_op.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLobject_optional_op(const char *app_file, const char *app_func, unsigned int app_line, hid_t
     * loc_id, const char *name, hid_t lapl_id, H5VL_optional_args_t *args, hid_t dxpl_id, hid_t es_id)
     * }
     */
    public static int H5VLobject_optional_op(MemorySegment app_file, MemorySegment app_func, int app_line,
                                             long loc_id, MemorySegment name, long lapl_id,
                                             MemorySegment args, long dxpl_id, long es_id)
    {
        var mh$ = H5VLobject_optional_op.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLobject_optional_op", app_file, app_func, app_line, loc_id, name, lapl_id,
                              args, dxpl_id, es_id);
            }
            return (int)mh$.invokeExact(app_file, app_func, app_line, loc_id, name, lapl_id, args, dxpl_id,
                                        es_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5VLrequest_optional_op {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5VLrequest_optional_op");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_optional_op(void *req, hid_t connector_id, H5VL_optional_args_t *args)
     * }
     */
    public static FunctionDescriptor H5VLrequest_optional_op$descriptor()
    {
        return H5VLrequest_optional_op.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_optional_op(void *req, hid_t connector_id, H5VL_optional_args_t *args)
     * }
     */
    public static MethodHandle H5VLrequest_optional_op$handle() { return H5VLrequest_optional_op.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5VLrequest_optional_op(void *req, hid_t connector_id, H5VL_optional_args_t *args)
     * }
     */
    public static MemorySegment H5VLrequest_optional_op$address() { return H5VLrequest_optional_op.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5VLrequest_optional_op(void *req, hid_t connector_id, H5VL_optional_args_t *args)
     * }
     */
    public static int H5VLrequest_optional_op(MemorySegment req, long connector_id, MemorySegment args)
    {
        var mh$ = H5VLrequest_optional_op.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5VLrequest_optional_op", req, connector_id, args);
            }
            return (int)mh$.invokeExact(req, connector_id, args);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5VL_MAP_GET_MAPL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_map_get_t.H5VL_MAP_GET_MAPL = 0
     * }
     */
    public static int H5VL_MAP_GET_MAPL() { return H5VL_MAP_GET_MAPL; }
    private static final int H5VL_MAP_GET_MCPL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_map_get_t.H5VL_MAP_GET_MCPL = 1
     * }
     */
    public static int H5VL_MAP_GET_MCPL() { return H5VL_MAP_GET_MCPL; }
    private static final int H5VL_MAP_GET_KEY_TYPE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5VL_map_get_t.H5VL_MAP_GET_KEY_TYPE = 2
     * }
     */
    public static int H5VL_MAP_GET_KEY_TYPE() { return H5VL_MAP_GET_KEY_TYPE; }
    private static final int H5VL_MAP_GET_VAL_TYPE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5VL_map_get_t.H5VL_MAP_GET_VAL_TYPE = 3
     * }
     */
    public static int H5VL_MAP_GET_VAL_TYPE() { return H5VL_MAP_GET_VAL_TYPE; }
    private static final int H5VL_MAP_GET_COUNT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5VL_map_get_t.H5VL_MAP_GET_COUNT = 4
     * }
     */
    public static int H5VL_MAP_GET_COUNT() { return H5VL_MAP_GET_COUNT; }
    private static final int H5VL_MAP_ITER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5VL_map_specific_t.H5VL_MAP_ITER = 0
     * }
     */
    public static int H5VL_MAP_ITER() { return H5VL_MAP_ITER; }
    private static final int H5VL_MAP_DELETE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5VL_map_specific_t.H5VL_MAP_DELETE = 1
     * }
     */
    public static int H5VL_MAP_DELETE() { return H5VL_MAP_DELETE; }
    private static final int H5S_NO_CLASS = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5S_class_t.H5S_NO_CLASS = -1
     * }
     */
    public static int H5S_NO_CLASS() { return H5S_NO_CLASS; }
    private static final int H5S_SCALAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5S_class_t.H5S_SCALAR = 0
     * }
     */
    public static int H5S_SCALAR() { return H5S_SCALAR; }
    private static final int H5S_SIMPLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5S_class_t.H5S_SIMPLE = 1
     * }
     */
    public static int H5S_SIMPLE() { return H5S_SIMPLE; }
    private static final int H5S_NULL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5S_class_t.H5S_NULL = 2
     * }
     */
    public static int H5S_NULL() { return H5S_NULL; }
    private static final int H5S_SELECT_NOOP = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5S_seloper_t.H5S_SELECT_NOOP = -1
     * }
     */
    public static int H5S_SELECT_NOOP() { return H5S_SELECT_NOOP; }
    private static final int H5S_SELECT_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5S_seloper_t.H5S_SELECT_SET = 0
     * }
     */
    public static int H5S_SELECT_SET() { return H5S_SELECT_SET; }
    private static final int H5S_SELECT_OR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5S_seloper_t.H5S_SELECT_OR = 1
     * }
     */
    public static int H5S_SELECT_OR() { return H5S_SELECT_OR; }
    private static final int H5S_SELECT_AND = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5S_seloper_t.H5S_SELECT_AND = 2
     * }
     */
    public static int H5S_SELECT_AND() { return H5S_SELECT_AND; }
    private static final int H5S_SELECT_XOR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum H5S_seloper_t.H5S_SELECT_XOR = 3
     * }
     */
    public static int H5S_SELECT_XOR() { return H5S_SELECT_XOR; }
    private static final int H5S_SELECT_NOTB = (int)4L;
    /**
     * {@snippet lang=c :
     * enum H5S_seloper_t.H5S_SELECT_NOTB = 4
     * }
     */
    public static int H5S_SELECT_NOTB() { return H5S_SELECT_NOTB; }
    private static final int H5S_SELECT_NOTA = (int)5L;
    /**
     * {@snippet lang=c :
     * enum H5S_seloper_t.H5S_SELECT_NOTA = 5
     * }
     */
    public static int H5S_SELECT_NOTA() { return H5S_SELECT_NOTA; }
    private static final int H5S_SELECT_APPEND = (int)6L;
    /**
     * {@snippet lang=c :
     * enum H5S_seloper_t.H5S_SELECT_APPEND = 6
     * }
     */
    public static int H5S_SELECT_APPEND() { return H5S_SELECT_APPEND; }
    private static final int H5S_SELECT_PREPEND = (int)7L;
    /**
     * {@snippet lang=c :
     * enum H5S_seloper_t.H5S_SELECT_PREPEND = 7
     * }
     */
    public static int H5S_SELECT_PREPEND() { return H5S_SELECT_PREPEND; }
    private static final int H5S_SELECT_INVALID = (int)8L;
    /**
     * {@snippet lang=c :
     * enum H5S_seloper_t.H5S_SELECT_INVALID = 8
     * }
     */
    public static int H5S_SELECT_INVALID() { return H5S_SELECT_INVALID; }
    private static final int H5S_SEL_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5S_SEL_ERROR = -1
     * }
     */
    public static int H5S_SEL_ERROR() { return H5S_SEL_ERROR; }
    private static final int H5S_SEL_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5S_SEL_NONE = 0
     * }
     */
    public static int H5S_SEL_NONE() { return H5S_SEL_NONE; }
    private static final int H5S_SEL_POINTS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5S_SEL_POINTS = 1
     * }
     */
    public static int H5S_SEL_POINTS() { return H5S_SEL_POINTS; }
    private static final int H5S_SEL_HYPERSLABS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5S_SEL_HYPERSLABS = 2
     * }
     */
    public static int H5S_SEL_HYPERSLABS() { return H5S_SEL_HYPERSLABS; }
    private static final int H5S_SEL_ALL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5S_SEL_ALL = 3
     * }
     */
    public static int H5S_SEL_ALL() { return H5S_SEL_ALL; }
    private static final int H5S_SEL_N = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.H5S_SEL_N = 4
     * }
     */
    public static int H5S_SEL_N() { return H5S_SEL_N; }

    private static class H5Sclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sclose(hid_t space_id)
     * }
     */
    public static FunctionDescriptor H5Sclose$descriptor() { return H5Sclose.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sclose(hid_t space_id)
     * }
     */
    public static MethodHandle H5Sclose$handle() { return H5Sclose.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sclose(hid_t space_id)
     * }
     */
    public static MemorySegment H5Sclose$address() { return H5Sclose.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sclose(hid_t space_id)
     * }
     */
    public static int H5Sclose(long space_id)
    {
        var mh$ = H5Sclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sclose", space_id);
            }
            return (int)mh$.invokeExact(space_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Scombine_hyperslab {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Scombine_hyperslab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Scombine_hyperslab(hid_t space_id, H5S_seloper_t op, const hsize_t start[], const hsize_t
     * stride[], const hsize_t count[], const hsize_t block[])
     * }
     */
    public static FunctionDescriptor H5Scombine_hyperslab$descriptor() { return H5Scombine_hyperslab.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Scombine_hyperslab(hid_t space_id, H5S_seloper_t op, const hsize_t start[], const hsize_t
     * stride[], const hsize_t count[], const hsize_t block[])
     * }
     */
    public static MethodHandle H5Scombine_hyperslab$handle() { return H5Scombine_hyperslab.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Scombine_hyperslab(hid_t space_id, H5S_seloper_t op, const hsize_t start[], const hsize_t
     * stride[], const hsize_t count[], const hsize_t block[])
     * }
     */
    public static MemorySegment H5Scombine_hyperslab$address() { return H5Scombine_hyperslab.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Scombine_hyperslab(hid_t space_id, H5S_seloper_t op, const hsize_t start[], const hsize_t
     * stride[], const hsize_t count[], const hsize_t block[])
     * }
     */
    public static long H5Scombine_hyperslab(long space_id, int op, MemorySegment start, MemorySegment stride,
                                            MemorySegment count, MemorySegment block)
    {
        var mh$ = H5Scombine_hyperslab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Scombine_hyperslab", space_id, op, start, stride, count, block);
            }
            return (long)mh$.invokeExact(space_id, op, start, stride, count, block);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Scombine_select {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Scombine_select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Scombine_select(hid_t space1_id, H5S_seloper_t op, hid_t space2_id)
     * }
     */
    public static FunctionDescriptor H5Scombine_select$descriptor() { return H5Scombine_select.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Scombine_select(hid_t space1_id, H5S_seloper_t op, hid_t space2_id)
     * }
     */
    public static MethodHandle H5Scombine_select$handle() { return H5Scombine_select.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Scombine_select(hid_t space1_id, H5S_seloper_t op, hid_t space2_id)
     * }
     */
    public static MemorySegment H5Scombine_select$address() { return H5Scombine_select.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Scombine_select(hid_t space1_id, H5S_seloper_t op, hid_t space2_id)
     * }
     */
    public static long H5Scombine_select(long space1_id, int op, long space2_id)
    {
        var mh$ = H5Scombine_select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Scombine_select", space1_id, op, space2_id);
            }
            return (long)mh$.invokeExact(space1_id, op, space2_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Scopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Scopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Scopy(hid_t space_id)
     * }
     */
    public static FunctionDescriptor H5Scopy$descriptor() { return H5Scopy.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Scopy(hid_t space_id)
     * }
     */
    public static MethodHandle H5Scopy$handle() { return H5Scopy.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Scopy(hid_t space_id)
     * }
     */
    public static MemorySegment H5Scopy$address() { return H5Scopy.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Scopy(hid_t space_id)
     * }
     */
    public static long H5Scopy(long space_id)
    {
        var mh$ = H5Scopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Scopy", space_id);
            }
            return (long)mh$.invokeExact(space_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Screate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Screate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Screate(H5S_class_t type)
     * }
     */
    public static FunctionDescriptor H5Screate$descriptor() { return H5Screate.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Screate(H5S_class_t type)
     * }
     */
    public static MethodHandle H5Screate$handle() { return H5Screate.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Screate(H5S_class_t type)
     * }
     */
    public static MemorySegment H5Screate$address() { return H5Screate.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Screate(H5S_class_t type)
     * }
     */
    public static long H5Screate(int type)
    {
        var mh$ = H5Screate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Screate", type);
            }
            return (long)mh$.invokeExact(type);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Screate_simple {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Screate_simple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Screate_simple(int rank, const hsize_t dims[], const hsize_t maxdims[])
     * }
     */
    public static FunctionDescriptor H5Screate_simple$descriptor() { return H5Screate_simple.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Screate_simple(int rank, const hsize_t dims[], const hsize_t maxdims[])
     * }
     */
    public static MethodHandle H5Screate_simple$handle() { return H5Screate_simple.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Screate_simple(int rank, const hsize_t dims[], const hsize_t maxdims[])
     * }
     */
    public static MemorySegment H5Screate_simple$address() { return H5Screate_simple.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Screate_simple(int rank, const hsize_t dims[], const hsize_t maxdims[])
     * }
     */
    public static long H5Screate_simple(int rank, MemorySegment dims, MemorySegment maxdims)
    {
        var mh$ = H5Screate_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Screate_simple", rank, dims, maxdims);
            }
            return (long)mh$.invokeExact(rank, dims, maxdims);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sdecode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sdecode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Sdecode(const void *buf)
     * }
     */
    public static FunctionDescriptor H5Sdecode$descriptor() { return H5Sdecode.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Sdecode(const void *buf)
     * }
     */
    public static MethodHandle H5Sdecode$handle() { return H5Sdecode.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Sdecode(const void *buf)
     * }
     */
    public static MemorySegment H5Sdecode$address() { return H5Sdecode.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Sdecode(const void *buf)
     * }
     */
    public static long H5Sdecode(MemorySegment buf)
    {
        var mh$ = H5Sdecode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sdecode", buf);
            }
            return (long)mh$.invokeExact(buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sencode2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sencode2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sencode2(hid_t obj_id, void *buf, size_t *nalloc, hid_t fapl)
     * }
     */
    public static FunctionDescriptor H5Sencode2$descriptor() { return H5Sencode2.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sencode2(hid_t obj_id, void *buf, size_t *nalloc, hid_t fapl)
     * }
     */
    public static MethodHandle H5Sencode2$handle() { return H5Sencode2.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sencode2(hid_t obj_id, void *buf, size_t *nalloc, hid_t fapl)
     * }
     */
    public static MemorySegment H5Sencode2$address() { return H5Sencode2.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sencode2(hid_t obj_id, void *buf, size_t *nalloc, hid_t fapl)
     * }
     */
    public static int H5Sencode2(long obj_id, MemorySegment buf, MemorySegment nalloc, long fapl)
    {
        var mh$ = H5Sencode2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sencode2", obj_id, buf, nalloc, fapl);
            }
            return (int)mh$.invokeExact(obj_id, buf, nalloc, fapl);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sextent_copy {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sextent_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sextent_copy(hid_t dst_id, hid_t src_id)
     * }
     */
    public static FunctionDescriptor H5Sextent_copy$descriptor() { return H5Sextent_copy.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sextent_copy(hid_t dst_id, hid_t src_id)
     * }
     */
    public static MethodHandle H5Sextent_copy$handle() { return H5Sextent_copy.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sextent_copy(hid_t dst_id, hid_t src_id)
     * }
     */
    public static MemorySegment H5Sextent_copy$address() { return H5Sextent_copy.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sextent_copy(hid_t dst_id, hid_t src_id)
     * }
     */
    public static int H5Sextent_copy(long dst_id, long src_id)
    {
        var mh$ = H5Sextent_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sextent_copy", dst_id, src_id);
            }
            return (int)mh$.invokeExact(dst_id, src_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sextent_equal {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sextent_equal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Sextent_equal(hid_t space1_id, hid_t space2_id)
     * }
     */
    public static FunctionDescriptor H5Sextent_equal$descriptor() { return H5Sextent_equal.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Sextent_equal(hid_t space1_id, hid_t space2_id)
     * }
     */
    public static MethodHandle H5Sextent_equal$handle() { return H5Sextent_equal.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Sextent_equal(hid_t space1_id, hid_t space2_id)
     * }
     */
    public static MemorySegment H5Sextent_equal$address() { return H5Sextent_equal.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Sextent_equal(hid_t space1_id, hid_t space2_id)
     * }
     */
    public static int H5Sextent_equal(long space1_id, long space2_id)
    {
        var mh$ = H5Sextent_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sextent_equal", space1_id, space2_id);
            }
            return (int)mh$.invokeExact(space1_id, space2_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sget_regular_hyperslab {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sget_regular_hyperslab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Sget_regular_hyperslab(hid_t spaceid, hsize_t start[], hsize_t stride[], hsize_t count[],
     * hsize_t block[])
     * }
     */
    public static FunctionDescriptor H5Sget_regular_hyperslab$descriptor()
    {
        return H5Sget_regular_hyperslab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Sget_regular_hyperslab(hid_t spaceid, hsize_t start[], hsize_t stride[], hsize_t count[],
     * hsize_t block[])
     * }
     */
    public static MethodHandle H5Sget_regular_hyperslab$handle() { return H5Sget_regular_hyperslab.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Sget_regular_hyperslab(hid_t spaceid, hsize_t start[], hsize_t stride[], hsize_t count[],
     * hsize_t block[])
     * }
     */
    public static MemorySegment H5Sget_regular_hyperslab$address() { return H5Sget_regular_hyperslab.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Sget_regular_hyperslab(hid_t spaceid, hsize_t start[], hsize_t stride[], hsize_t count[],
     * hsize_t block[])
     * }
     */
    public static int H5Sget_regular_hyperslab(long spaceid, MemorySegment start, MemorySegment stride,
                                               MemorySegment count, MemorySegment block)
    {
        var mh$ = H5Sget_regular_hyperslab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sget_regular_hyperslab", spaceid, start, stride, count, block);
            }
            return (int)mh$.invokeExact(spaceid, start, stride, count, block);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sget_select_bounds {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sget_select_bounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sget_select_bounds(hid_t spaceid, hsize_t start[], hsize_t end[])
     * }
     */
    public static FunctionDescriptor H5Sget_select_bounds$descriptor() { return H5Sget_select_bounds.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sget_select_bounds(hid_t spaceid, hsize_t start[], hsize_t end[])
     * }
     */
    public static MethodHandle H5Sget_select_bounds$handle() { return H5Sget_select_bounds.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sget_select_bounds(hid_t spaceid, hsize_t start[], hsize_t end[])
     * }
     */
    public static MemorySegment H5Sget_select_bounds$address() { return H5Sget_select_bounds.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sget_select_bounds(hid_t spaceid, hsize_t start[], hsize_t end[])
     * }
     */
    public static int H5Sget_select_bounds(long spaceid, MemorySegment start, MemorySegment end)
    {
        var mh$ = H5Sget_select_bounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sget_select_bounds", spaceid, start, end);
            }
            return (int)mh$.invokeExact(spaceid, start, end);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sget_select_elem_npoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sget_select_elem_npoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hssize_t H5Sget_select_elem_npoints(hid_t spaceid)
     * }
     */
    public static FunctionDescriptor H5Sget_select_elem_npoints$descriptor()
    {
        return H5Sget_select_elem_npoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hssize_t H5Sget_select_elem_npoints(hid_t spaceid)
     * }
     */
    public static MethodHandle H5Sget_select_elem_npoints$handle()
    {
        return H5Sget_select_elem_npoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hssize_t H5Sget_select_elem_npoints(hid_t spaceid)
     * }
     */
    public static MemorySegment H5Sget_select_elem_npoints$address()
    {
        return H5Sget_select_elem_npoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hssize_t H5Sget_select_elem_npoints(hid_t spaceid)
     * }
     */
    public static long H5Sget_select_elem_npoints(long spaceid)
    {
        var mh$ = H5Sget_select_elem_npoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sget_select_elem_npoints", spaceid);
            }
            return (long)mh$.invokeExact(spaceid);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sget_select_elem_pointlist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sget_select_elem_pointlist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sget_select_elem_pointlist(hid_t spaceid, hsize_t startpoint, hsize_t numpoints, hsize_t
     * buf[])
     * }
     */
    public static FunctionDescriptor H5Sget_select_elem_pointlist$descriptor()
    {
        return H5Sget_select_elem_pointlist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sget_select_elem_pointlist(hid_t spaceid, hsize_t startpoint, hsize_t numpoints, hsize_t
     * buf[])
     * }
     */
    public static MethodHandle H5Sget_select_elem_pointlist$handle()
    {
        return H5Sget_select_elem_pointlist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sget_select_elem_pointlist(hid_t spaceid, hsize_t startpoint, hsize_t numpoints, hsize_t
     * buf[])
     * }
     */
    public static MemorySegment H5Sget_select_elem_pointlist$address()
    {
        return H5Sget_select_elem_pointlist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Sget_select_elem_pointlist(hid_t spaceid, hsize_t startpoint, hsize_t numpoints, hsize_t
     * buf[])
     * }
     */
    public static int H5Sget_select_elem_pointlist(long spaceid, long startpoint, long numpoints,
                                                   MemorySegment buf)
    {
        var mh$ = H5Sget_select_elem_pointlist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sget_select_elem_pointlist", spaceid, startpoint, numpoints, buf);
            }
            return (int)mh$.invokeExact(spaceid, startpoint, numpoints, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sget_select_hyper_blocklist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sget_select_hyper_blocklist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sget_select_hyper_blocklist(hid_t spaceid, hsize_t startblock, hsize_t numblocks, hsize_t
     * buf[])
     * }
     */
    public static FunctionDescriptor H5Sget_select_hyper_blocklist$descriptor()
    {
        return H5Sget_select_hyper_blocklist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sget_select_hyper_blocklist(hid_t spaceid, hsize_t startblock, hsize_t numblocks, hsize_t
     * buf[])
     * }
     */
    public static MethodHandle H5Sget_select_hyper_blocklist$handle()
    {
        return H5Sget_select_hyper_blocklist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sget_select_hyper_blocklist(hid_t spaceid, hsize_t startblock, hsize_t numblocks, hsize_t
     * buf[])
     * }
     */
    public static MemorySegment H5Sget_select_hyper_blocklist$address()
    {
        return H5Sget_select_hyper_blocklist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * herr_t H5Sget_select_hyper_blocklist(hid_t spaceid, hsize_t startblock, hsize_t numblocks, hsize_t
     * buf[])
     * }
     */
    public static int H5Sget_select_hyper_blocklist(long spaceid, long startblock, long numblocks,
                                                    MemorySegment buf)
    {
        var mh$ = H5Sget_select_hyper_blocklist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sget_select_hyper_blocklist", spaceid, startblock, numblocks, buf);
            }
            return (int)mh$.invokeExact(spaceid, startblock, numblocks, buf);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sget_select_hyper_nblocks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sget_select_hyper_nblocks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hssize_t H5Sget_select_hyper_nblocks(hid_t spaceid)
     * }
     */
    public static FunctionDescriptor H5Sget_select_hyper_nblocks$descriptor()
    {
        return H5Sget_select_hyper_nblocks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hssize_t H5Sget_select_hyper_nblocks(hid_t spaceid)
     * }
     */
    public static MethodHandle H5Sget_select_hyper_nblocks$handle()
    {
        return H5Sget_select_hyper_nblocks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hssize_t H5Sget_select_hyper_nblocks(hid_t spaceid)
     * }
     */
    public static MemorySegment H5Sget_select_hyper_nblocks$address()
    {
        return H5Sget_select_hyper_nblocks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hssize_t H5Sget_select_hyper_nblocks(hid_t spaceid)
     * }
     */
    public static long H5Sget_select_hyper_nblocks(long spaceid)
    {
        var mh$ = H5Sget_select_hyper_nblocks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sget_select_hyper_nblocks", spaceid);
            }
            return (long)mh$.invokeExact(spaceid);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sget_select_npoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sget_select_npoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hssize_t H5Sget_select_npoints(hid_t spaceid)
     * }
     */
    public static FunctionDescriptor H5Sget_select_npoints$descriptor() { return H5Sget_select_npoints.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hssize_t H5Sget_select_npoints(hid_t spaceid)
     * }
     */
    public static MethodHandle H5Sget_select_npoints$handle() { return H5Sget_select_npoints.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hssize_t H5Sget_select_npoints(hid_t spaceid)
     * }
     */
    public static MemorySegment H5Sget_select_npoints$address() { return H5Sget_select_npoints.ADDR; }

    /**
     * {@snippet lang=c :
     * hssize_t H5Sget_select_npoints(hid_t spaceid)
     * }
     */
    public static long H5Sget_select_npoints(long spaceid)
    {
        var mh$ = H5Sget_select_npoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sget_select_npoints", spaceid);
            }
            return (long)mh$.invokeExact(spaceid);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sget_select_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sget_select_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5S_sel_type H5Sget_select_type(hid_t spaceid)
     * }
     */
    public static FunctionDescriptor H5Sget_select_type$descriptor() { return H5Sget_select_type.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5S_sel_type H5Sget_select_type(hid_t spaceid)
     * }
     */
    public static MethodHandle H5Sget_select_type$handle() { return H5Sget_select_type.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5S_sel_type H5Sget_select_type(hid_t spaceid)
     * }
     */
    public static MemorySegment H5Sget_select_type$address() { return H5Sget_select_type.ADDR; }

    /**
     * {@snippet lang=c :
     * H5S_sel_type H5Sget_select_type(hid_t spaceid)
     * }
     */
    public static int H5Sget_select_type(long spaceid)
    {
        var mh$ = H5Sget_select_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sget_select_type", spaceid);
            }
            return (int)mh$.invokeExact(spaceid);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sget_simple_extent_dims {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sget_simple_extent_dims");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Sget_simple_extent_dims(hid_t space_id, hsize_t dims[], hsize_t maxdims[])
     * }
     */
    public static FunctionDescriptor H5Sget_simple_extent_dims$descriptor()
    {
        return H5Sget_simple_extent_dims.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Sget_simple_extent_dims(hid_t space_id, hsize_t dims[], hsize_t maxdims[])
     * }
     */
    public static MethodHandle H5Sget_simple_extent_dims$handle() { return H5Sget_simple_extent_dims.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Sget_simple_extent_dims(hid_t space_id, hsize_t dims[], hsize_t maxdims[])
     * }
     */
    public static MemorySegment H5Sget_simple_extent_dims$address() { return H5Sget_simple_extent_dims.ADDR; }

    /**
     * {@snippet lang=c :
     * int H5Sget_simple_extent_dims(hid_t space_id, hsize_t dims[], hsize_t maxdims[])
     * }
     */
    public static int H5Sget_simple_extent_dims(long space_id, MemorySegment dims, MemorySegment maxdims)
    {
        var mh$ = H5Sget_simple_extent_dims.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sget_simple_extent_dims", space_id, dims, maxdims);
            }
            return (int)mh$.invokeExact(space_id, dims, maxdims);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sget_simple_extent_ndims {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sget_simple_extent_ndims");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int H5Sget_simple_extent_ndims(hid_t space_id)
     * }
     */
    public static FunctionDescriptor H5Sget_simple_extent_ndims$descriptor()
    {
        return H5Sget_simple_extent_ndims.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int H5Sget_simple_extent_ndims(hid_t space_id)
     * }
     */
    public static MethodHandle H5Sget_simple_extent_ndims$handle()
    {
        return H5Sget_simple_extent_ndims.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int H5Sget_simple_extent_ndims(hid_t space_id)
     * }
     */
    public static MemorySegment H5Sget_simple_extent_ndims$address()
    {
        return H5Sget_simple_extent_ndims.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int H5Sget_simple_extent_ndims(hid_t space_id)
     * }
     */
    public static int H5Sget_simple_extent_ndims(long space_id)
    {
        var mh$ = H5Sget_simple_extent_ndims.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sget_simple_extent_ndims", space_id);
            }
            return (int)mh$.invokeExact(space_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sget_simple_extent_npoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sget_simple_extent_npoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hssize_t H5Sget_simple_extent_npoints(hid_t space_id)
     * }
     */
    public static FunctionDescriptor H5Sget_simple_extent_npoints$descriptor()
    {
        return H5Sget_simple_extent_npoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hssize_t H5Sget_simple_extent_npoints(hid_t space_id)
     * }
     */
    public static MethodHandle H5Sget_simple_extent_npoints$handle()
    {
        return H5Sget_simple_extent_npoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hssize_t H5Sget_simple_extent_npoints(hid_t space_id)
     * }
     */
    public static MemorySegment H5Sget_simple_extent_npoints$address()
    {
        return H5Sget_simple_extent_npoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hssize_t H5Sget_simple_extent_npoints(hid_t space_id)
     * }
     */
    public static long H5Sget_simple_extent_npoints(long space_id)
    {
        var mh$ = H5Sget_simple_extent_npoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sget_simple_extent_npoints", space_id);
            }
            return (long)mh$.invokeExact(space_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sget_simple_extent_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sget_simple_extent_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * H5S_class_t H5Sget_simple_extent_type(hid_t space_id)
     * }
     */
    public static FunctionDescriptor H5Sget_simple_extent_type$descriptor()
    {
        return H5Sget_simple_extent_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * H5S_class_t H5Sget_simple_extent_type(hid_t space_id)
     * }
     */
    public static MethodHandle H5Sget_simple_extent_type$handle() { return H5Sget_simple_extent_type.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * H5S_class_t H5Sget_simple_extent_type(hid_t space_id)
     * }
     */
    public static MemorySegment H5Sget_simple_extent_type$address() { return H5Sget_simple_extent_type.ADDR; }

    /**
     * {@snippet lang=c :
     * H5S_class_t H5Sget_simple_extent_type(hid_t space_id)
     * }
     */
    public static int H5Sget_simple_extent_type(long space_id)
    {
        var mh$ = H5Sget_simple_extent_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sget_simple_extent_type", space_id);
            }
            return (int)mh$.invokeExact(space_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sis_regular_hyperslab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sis_regular_hyperslab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Sis_regular_hyperslab(hid_t spaceid)
     * }
     */
    public static FunctionDescriptor H5Sis_regular_hyperslab$descriptor()
    {
        return H5Sis_regular_hyperslab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Sis_regular_hyperslab(hid_t spaceid)
     * }
     */
    public static MethodHandle H5Sis_regular_hyperslab$handle() { return H5Sis_regular_hyperslab.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Sis_regular_hyperslab(hid_t spaceid)
     * }
     */
    public static MemorySegment H5Sis_regular_hyperslab$address() { return H5Sis_regular_hyperslab.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Sis_regular_hyperslab(hid_t spaceid)
     * }
     */
    public static int H5Sis_regular_hyperslab(long spaceid)
    {
        var mh$ = H5Sis_regular_hyperslab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sis_regular_hyperslab", spaceid);
            }
            return (int)mh$.invokeExact(spaceid);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sis_simple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sis_simple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Sis_simple(hid_t space_id)
     * }
     */
    public static FunctionDescriptor H5Sis_simple$descriptor() { return H5Sis_simple.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Sis_simple(hid_t space_id)
     * }
     */
    public static MethodHandle H5Sis_simple$handle() { return H5Sis_simple.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Sis_simple(hid_t space_id)
     * }
     */
    public static MemorySegment H5Sis_simple$address() { return H5Sis_simple.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Sis_simple(hid_t space_id)
     * }
     */
    public static int H5Sis_simple(long space_id)
    {
        var mh$ = H5Sis_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sis_simple", space_id);
            }
            return (int)mh$.invokeExact(space_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Smodify_select {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Smodify_select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Smodify_select(hid_t space1_id, H5S_seloper_t op, hid_t space2_id)
     * }
     */
    public static FunctionDescriptor H5Smodify_select$descriptor() { return H5Smodify_select.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Smodify_select(hid_t space1_id, H5S_seloper_t op, hid_t space2_id)
     * }
     */
    public static MethodHandle H5Smodify_select$handle() { return H5Smodify_select.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Smodify_select(hid_t space1_id, H5S_seloper_t op, hid_t space2_id)
     * }
     */
    public static MemorySegment H5Smodify_select$address() { return H5Smodify_select.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Smodify_select(hid_t space1_id, H5S_seloper_t op, hid_t space2_id)
     * }
     */
    public static int H5Smodify_select(long space1_id, int op, long space2_id)
    {
        var mh$ = H5Smodify_select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Smodify_select", space1_id, op, space2_id);
            }
            return (int)mh$.invokeExact(space1_id, op, space2_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Soffset_simple {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Soffset_simple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Soffset_simple(hid_t space_id, const hssize_t *offset)
     * }
     */
    public static FunctionDescriptor H5Soffset_simple$descriptor() { return H5Soffset_simple.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Soffset_simple(hid_t space_id, const hssize_t *offset)
     * }
     */
    public static MethodHandle H5Soffset_simple$handle() { return H5Soffset_simple.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Soffset_simple(hid_t space_id, const hssize_t *offset)
     * }
     */
    public static MemorySegment H5Soffset_simple$address() { return H5Soffset_simple.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Soffset_simple(hid_t space_id, const hssize_t *offset)
     * }
     */
    public static int H5Soffset_simple(long space_id, MemorySegment offset)
    {
        var mh$ = H5Soffset_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Soffset_simple", space_id, offset);
            }
            return (int)mh$.invokeExact(space_id, offset);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ssel_iter_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ssel_iter_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Ssel_iter_close(hid_t sel_iter_id)
     * }
     */
    public static FunctionDescriptor H5Ssel_iter_close$descriptor() { return H5Ssel_iter_close.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Ssel_iter_close(hid_t sel_iter_id)
     * }
     */
    public static MethodHandle H5Ssel_iter_close$handle() { return H5Ssel_iter_close.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Ssel_iter_close(hid_t sel_iter_id)
     * }
     */
    public static MemorySegment H5Ssel_iter_close$address() { return H5Ssel_iter_close.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Ssel_iter_close(hid_t sel_iter_id)
     * }
     */
    public static int H5Ssel_iter_close(long sel_iter_id)
    {
        var mh$ = H5Ssel_iter_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ssel_iter_close", sel_iter_id);
            }
            return (int)mh$.invokeExact(sel_iter_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ssel_iter_create {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ssel_iter_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Ssel_iter_create(hid_t spaceid, size_t elmt_size, unsigned int flags)
     * }
     */
    public static FunctionDescriptor H5Ssel_iter_create$descriptor() { return H5Ssel_iter_create.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Ssel_iter_create(hid_t spaceid, size_t elmt_size, unsigned int flags)
     * }
     */
    public static MethodHandle H5Ssel_iter_create$handle() { return H5Ssel_iter_create.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Ssel_iter_create(hid_t spaceid, size_t elmt_size, unsigned int flags)
     * }
     */
    public static MemorySegment H5Ssel_iter_create$address() { return H5Ssel_iter_create.ADDR; }

    /**
     * {@snippet lang=c :
     * hid_t H5Ssel_iter_create(hid_t spaceid, size_t elmt_size, unsigned int flags)
     * }
     */
    public static long H5Ssel_iter_create(long spaceid, long elmt_size, int flags)
    {
        var mh$ = H5Ssel_iter_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ssel_iter_create", spaceid, elmt_size, flags);
            }
            return (long)mh$.invokeExact(spaceid, elmt_size, flags);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ssel_iter_get_seq_list {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ssel_iter_get_seq_list");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Ssel_iter_get_seq_list(hid_t sel_iter_id, size_t maxseq, size_t maxelmts, size_t *nseq, size_t
     * *nelmts, hsize_t *off, size_t *len)
     * }
     */
    public static FunctionDescriptor H5Ssel_iter_get_seq_list$descriptor()
    {
        return H5Ssel_iter_get_seq_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Ssel_iter_get_seq_list(hid_t sel_iter_id, size_t maxseq, size_t maxelmts, size_t *nseq, size_t
     * *nelmts, hsize_t *off, size_t *len)
     * }
     */
    public static MethodHandle H5Ssel_iter_get_seq_list$handle() { return H5Ssel_iter_get_seq_list.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Ssel_iter_get_seq_list(hid_t sel_iter_id, size_t maxseq, size_t maxelmts, size_t *nseq, size_t
     * *nelmts, hsize_t *off, size_t *len)
     * }
     */
    public static MemorySegment H5Ssel_iter_get_seq_list$address() { return H5Ssel_iter_get_seq_list.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Ssel_iter_get_seq_list(hid_t sel_iter_id, size_t maxseq, size_t maxelmts, size_t *nseq, size_t
     * *nelmts, hsize_t *off, size_t *len)
     * }
     */
    public static int H5Ssel_iter_get_seq_list(long sel_iter_id, long maxseq, long maxelmts,
                                               MemorySegment nseq, MemorySegment nelmts, MemorySegment off,
                                               MemorySegment len)
    {
        var mh$ = H5Ssel_iter_get_seq_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ssel_iter_get_seq_list", sel_iter_id, maxseq, maxelmts, nseq, nelmts, off,
                              len);
            }
            return (int)mh$.invokeExact(sel_iter_id, maxseq, maxelmts, nseq, nelmts, off, len);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Ssel_iter_reset {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Ssel_iter_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Ssel_iter_reset(hid_t sel_iter_id, hid_t space_id)
     * }
     */
    public static FunctionDescriptor H5Ssel_iter_reset$descriptor() { return H5Ssel_iter_reset.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Ssel_iter_reset(hid_t sel_iter_id, hid_t space_id)
     * }
     */
    public static MethodHandle H5Ssel_iter_reset$handle() { return H5Ssel_iter_reset.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Ssel_iter_reset(hid_t sel_iter_id, hid_t space_id)
     * }
     */
    public static MemorySegment H5Ssel_iter_reset$address() { return H5Ssel_iter_reset.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Ssel_iter_reset(hid_t sel_iter_id, hid_t space_id)
     * }
     */
    public static int H5Ssel_iter_reset(long sel_iter_id, long space_id)
    {
        var mh$ = H5Ssel_iter_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Ssel_iter_reset", sel_iter_id, space_id);
            }
            return (int)mh$.invokeExact(sel_iter_id, space_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sselect_adjust {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sselect_adjust");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sselect_adjust(hid_t spaceid, const hssize_t *offset)
     * }
     */
    public static FunctionDescriptor H5Sselect_adjust$descriptor() { return H5Sselect_adjust.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sselect_adjust(hid_t spaceid, const hssize_t *offset)
     * }
     */
    public static MethodHandle H5Sselect_adjust$handle() { return H5Sselect_adjust.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sselect_adjust(hid_t spaceid, const hssize_t *offset)
     * }
     */
    public static MemorySegment H5Sselect_adjust$address() { return H5Sselect_adjust.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sselect_adjust(hid_t spaceid, const hssize_t *offset)
     * }
     */
    public static int H5Sselect_adjust(long spaceid, MemorySegment offset)
    {
        var mh$ = H5Sselect_adjust.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sselect_adjust", spaceid, offset);
            }
            return (int)mh$.invokeExact(spaceid, offset);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sselect_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sselect_all");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sselect_all(hid_t spaceid)
     * }
     */
    public static FunctionDescriptor H5Sselect_all$descriptor() { return H5Sselect_all.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sselect_all(hid_t spaceid)
     * }
     */
    public static MethodHandle H5Sselect_all$handle() { return H5Sselect_all.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sselect_all(hid_t spaceid)
     * }
     */
    public static MemorySegment H5Sselect_all$address() { return H5Sselect_all.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sselect_all(hid_t spaceid)
     * }
     */
    public static int H5Sselect_all(long spaceid)
    {
        var mh$ = H5Sselect_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sselect_all", spaceid);
            }
            return (int)mh$.invokeExact(spaceid);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sselect_copy {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sselect_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sselect_copy(hid_t dst_id, hid_t src_id)
     * }
     */
    public static FunctionDescriptor H5Sselect_copy$descriptor() { return H5Sselect_copy.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sselect_copy(hid_t dst_id, hid_t src_id)
     * }
     */
    public static MethodHandle H5Sselect_copy$handle() { return H5Sselect_copy.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sselect_copy(hid_t dst_id, hid_t src_id)
     * }
     */
    public static MemorySegment H5Sselect_copy$address() { return H5Sselect_copy.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sselect_copy(hid_t dst_id, hid_t src_id)
     * }
     */
    public static int H5Sselect_copy(long dst_id, long src_id)
    {
        var mh$ = H5Sselect_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sselect_copy", dst_id, src_id);
            }
            return (int)mh$.invokeExact(dst_id, src_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sselect_elements {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sselect_elements");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sselect_elements(hid_t space_id, H5S_seloper_t op, size_t num_elem, const hsize_t *coord)
     * }
     */
    public static FunctionDescriptor H5Sselect_elements$descriptor() { return H5Sselect_elements.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sselect_elements(hid_t space_id, H5S_seloper_t op, size_t num_elem, const hsize_t *coord)
     * }
     */
    public static MethodHandle H5Sselect_elements$handle() { return H5Sselect_elements.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sselect_elements(hid_t space_id, H5S_seloper_t op, size_t num_elem, const hsize_t *coord)
     * }
     */
    public static MemorySegment H5Sselect_elements$address() { return H5Sselect_elements.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sselect_elements(hid_t space_id, H5S_seloper_t op, size_t num_elem, const hsize_t *coord)
     * }
     */
    public static int H5Sselect_elements(long space_id, int op, long num_elem, MemorySegment coord)
    {
        var mh$ = H5Sselect_elements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sselect_elements", space_id, op, num_elem, coord);
            }
            return (int)mh$.invokeExact(space_id, op, num_elem, coord);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sselect_hyperslab {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER,
                                  hdf5_h.C_POINTER, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sselect_hyperslab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sselect_hyperslab(hid_t space_id, H5S_seloper_t op, const hsize_t start[], const hsize_t
     * stride[], const hsize_t count[], const hsize_t block[])
     * }
     */
    public static FunctionDescriptor H5Sselect_hyperslab$descriptor() { return H5Sselect_hyperslab.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sselect_hyperslab(hid_t space_id, H5S_seloper_t op, const hsize_t start[], const hsize_t
     * stride[], const hsize_t count[], const hsize_t block[])
     * }
     */
    public static MethodHandle H5Sselect_hyperslab$handle() { return H5Sselect_hyperslab.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sselect_hyperslab(hid_t space_id, H5S_seloper_t op, const hsize_t start[], const hsize_t
     * stride[], const hsize_t count[], const hsize_t block[])
     * }
     */
    public static MemorySegment H5Sselect_hyperslab$address() { return H5Sselect_hyperslab.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sselect_hyperslab(hid_t space_id, H5S_seloper_t op, const hsize_t start[], const hsize_t
     * stride[], const hsize_t count[], const hsize_t block[])
     * }
     */
    public static int H5Sselect_hyperslab(long space_id, int op, MemorySegment start, MemorySegment stride,
                                          MemorySegment count, MemorySegment block)
    {
        var mh$ = H5Sselect_hyperslab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sselect_hyperslab", space_id, op, start, stride, count, block);
            }
            return (int)mh$.invokeExact(space_id, op, start, stride, count, block);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sselect_intersect_block {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sselect_intersect_block");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Sselect_intersect_block(hid_t space_id, const hsize_t *start, const hsize_t *end)
     * }
     */
    public static FunctionDescriptor H5Sselect_intersect_block$descriptor()
    {
        return H5Sselect_intersect_block.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Sselect_intersect_block(hid_t space_id, const hsize_t *start, const hsize_t *end)
     * }
     */
    public static MethodHandle H5Sselect_intersect_block$handle() { return H5Sselect_intersect_block.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Sselect_intersect_block(hid_t space_id, const hsize_t *start, const hsize_t *end)
     * }
     */
    public static MemorySegment H5Sselect_intersect_block$address() { return H5Sselect_intersect_block.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Sselect_intersect_block(hid_t space_id, const hsize_t *start, const hsize_t *end)
     * }
     */
    public static int H5Sselect_intersect_block(long space_id, MemorySegment start, MemorySegment end)
    {
        var mh$ = H5Sselect_intersect_block.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sselect_intersect_block", space_id, start, end);
            }
            return (int)mh$.invokeExact(space_id, start, end);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sselect_none {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sselect_none");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sselect_none(hid_t spaceid)
     * }
     */
    public static FunctionDescriptor H5Sselect_none$descriptor() { return H5Sselect_none.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sselect_none(hid_t spaceid)
     * }
     */
    public static MethodHandle H5Sselect_none$handle() { return H5Sselect_none.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sselect_none(hid_t spaceid)
     * }
     */
    public static MemorySegment H5Sselect_none$address() { return H5Sselect_none.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sselect_none(hid_t spaceid)
     * }
     */
    public static int H5Sselect_none(long spaceid)
    {
        var mh$ = H5Sselect_none.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sselect_none", spaceid);
            }
            return (int)mh$.invokeExact(spaceid);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sselect_project_intersection {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sselect_project_intersection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * hid_t H5Sselect_project_intersection(hid_t src_space_id, hid_t dst_space_id, hid_t
     * src_intersect_space_id)
     * }
     */
    public static FunctionDescriptor H5Sselect_project_intersection$descriptor()
    {
        return H5Sselect_project_intersection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * hid_t H5Sselect_project_intersection(hid_t src_space_id, hid_t dst_space_id, hid_t
     * src_intersect_space_id)
     * }
     */
    public static MethodHandle H5Sselect_project_intersection$handle()
    {
        return H5Sselect_project_intersection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * hid_t H5Sselect_project_intersection(hid_t src_space_id, hid_t dst_space_id, hid_t
     * src_intersect_space_id)
     * }
     */
    public static MemorySegment H5Sselect_project_intersection$address()
    {
        return H5Sselect_project_intersection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * hid_t H5Sselect_project_intersection(hid_t src_space_id, hid_t dst_space_id, hid_t
     * src_intersect_space_id)
     * }
     */
    public static long H5Sselect_project_intersection(long src_space_id, long dst_space_id,
                                                      long src_intersect_space_id)
    {
        var mh$ = H5Sselect_project_intersection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sselect_project_intersection", src_space_id, dst_space_id,
                              src_intersect_space_id);
            }
            return (long)mh$.invokeExact(src_space_id, dst_space_id, src_intersect_space_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sselect_shape_same {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sselect_shape_same");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Sselect_shape_same(hid_t space1_id, hid_t space2_id)
     * }
     */
    public static FunctionDescriptor H5Sselect_shape_same$descriptor() { return H5Sselect_shape_same.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Sselect_shape_same(hid_t space1_id, hid_t space2_id)
     * }
     */
    public static MethodHandle H5Sselect_shape_same$handle() { return H5Sselect_shape_same.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Sselect_shape_same(hid_t space1_id, hid_t space2_id)
     * }
     */
    public static MemorySegment H5Sselect_shape_same$address() { return H5Sselect_shape_same.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Sselect_shape_same(hid_t space1_id, hid_t space2_id)
     * }
     */
    public static int H5Sselect_shape_same(long space1_id, long space2_id)
    {
        var mh$ = H5Sselect_shape_same.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sselect_shape_same", space1_id, space2_id);
            }
            return (int)mh$.invokeExact(space1_id, space2_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sselect_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sselect_valid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Sselect_valid(hid_t spaceid)
     * }
     */
    public static FunctionDescriptor H5Sselect_valid$descriptor() { return H5Sselect_valid.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Sselect_valid(hid_t spaceid)
     * }
     */
    public static MethodHandle H5Sselect_valid$handle() { return H5Sselect_valid.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Sselect_valid(hid_t spaceid)
     * }
     */
    public static MemorySegment H5Sselect_valid$address() { return H5Sselect_valid.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Sselect_valid(hid_t spaceid)
     * }
     */
    public static int H5Sselect_valid(long spaceid)
    {
        var mh$ = H5Sselect_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sselect_valid", spaceid);
            }
            return (int)mh$.invokeExact(spaceid);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sset_extent_none {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sset_extent_none");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sset_extent_none(hid_t space_id)
     * }
     */
    public static FunctionDescriptor H5Sset_extent_none$descriptor() { return H5Sset_extent_none.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sset_extent_none(hid_t space_id)
     * }
     */
    public static MethodHandle H5Sset_extent_none$handle() { return H5Sset_extent_none.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sset_extent_none(hid_t space_id)
     * }
     */
    public static MemorySegment H5Sset_extent_none$address() { return H5Sset_extent_none.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sset_extent_none(hid_t space_id)
     * }
     */
    public static int H5Sset_extent_none(long space_id)
    {
        var mh$ = H5Sset_extent_none.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sset_extent_none", space_id);
            }
            return (int)mh$.invokeExact(space_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sset_extent_simple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sset_extent_simple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sset_extent_simple(hid_t space_id, int rank, const hsize_t dims[], const hsize_t max[])
     * }
     */
    public static FunctionDescriptor H5Sset_extent_simple$descriptor() { return H5Sset_extent_simple.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sset_extent_simple(hid_t space_id, int rank, const hsize_t dims[], const hsize_t max[])
     * }
     */
    public static MethodHandle H5Sset_extent_simple$handle() { return H5Sset_extent_simple.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sset_extent_simple(hid_t space_id, int rank, const hsize_t dims[], const hsize_t max[])
     * }
     */
    public static MemorySegment H5Sset_extent_simple$address() { return H5Sset_extent_simple.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sset_extent_simple(hid_t space_id, int rank, const hsize_t dims[], const hsize_t max[])
     * }
     */
    public static int H5Sset_extent_simple(long space_id, int rank, MemorySegment dims, MemorySegment max)
    {
        var mh$ = H5Sset_extent_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sset_extent_simple", space_id, rank, dims, max);
            }
            return (int)mh$.invokeExact(space_id, rank, dims, max);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Sencode1 {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Sencode1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Sencode1(hid_t obj_id, void *buf, size_t *nalloc)
     * }
     */
    public static FunctionDescriptor H5Sencode1$descriptor() { return H5Sencode1.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Sencode1(hid_t obj_id, void *buf, size_t *nalloc)
     * }
     */
    public static MethodHandle H5Sencode1$handle() { return H5Sencode1.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Sencode1(hid_t obj_id, void *buf, size_t *nalloc)
     * }
     */
    public static MemorySegment H5Sencode1$address() { return H5Sencode1.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Sencode1(hid_t obj_id, void *buf, size_t *nalloc)
     * }
     */
    public static int H5Sencode1(long obj_id, MemorySegment buf, MemorySegment nalloc)
    {
        var mh$ = H5Sencode1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Sencode1", obj_id, buf, nalloc);
            }
            return (int)mh$.invokeExact(obj_id, buf, nalloc);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef int H5Z_filter_t
     * }
     */
    public static final OfInt H5Z_filter_t       = hdf5_h.C_INT;
    private static final int H5Z_SO_FLOAT_DSCALE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5Z_SO_scale_type_t.H5Z_SO_FLOAT_DSCALE = 0
     * }
     */
    public static int H5Z_SO_FLOAT_DSCALE() { return H5Z_SO_FLOAT_DSCALE; }
    private static final int H5Z_SO_FLOAT_ESCALE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5Z_SO_scale_type_t.H5Z_SO_FLOAT_ESCALE = 1
     * }
     */
    public static int H5Z_SO_FLOAT_ESCALE() { return H5Z_SO_FLOAT_ESCALE; }
    private static final int H5Z_SO_INT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5Z_SO_scale_type_t.H5Z_SO_INT = 2
     * }
     */
    public static int H5Z_SO_INT() { return H5Z_SO_INT; }
    private static final int H5Z_ERROR_EDC = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5Z_EDC_t.H5Z_ERROR_EDC = -1
     * }
     */
    public static int H5Z_ERROR_EDC() { return H5Z_ERROR_EDC; }
    private static final int H5Z_DISABLE_EDC = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5Z_EDC_t.H5Z_DISABLE_EDC = 0
     * }
     */
    public static int H5Z_DISABLE_EDC() { return H5Z_DISABLE_EDC; }
    private static final int H5Z_ENABLE_EDC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5Z_EDC_t.H5Z_ENABLE_EDC = 1
     * }
     */
    public static int H5Z_ENABLE_EDC() { return H5Z_ENABLE_EDC; }
    private static final int H5Z_NO_EDC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5Z_EDC_t.H5Z_NO_EDC = 2
     * }
     */
    public static int H5Z_NO_EDC() { return H5Z_NO_EDC; }
    private static final int H5Z_CB_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum H5Z_cb_return_t.H5Z_CB_ERROR = -1
     * }
     */
    public static int H5Z_CB_ERROR() { return H5Z_CB_ERROR; }
    private static final int H5Z_CB_FAIL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5Z_cb_return_t.H5Z_CB_FAIL = 0
     * }
     */
    public static int H5Z_CB_FAIL() { return H5Z_CB_FAIL; }
    private static final int H5Z_CB_CONT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5Z_cb_return_t.H5Z_CB_CONT = 1
     * }
     */
    public static int H5Z_CB_CONT() { return H5Z_CB_CONT; }
    private static final int H5Z_CB_NO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5Z_cb_return_t.H5Z_CB_NO = 2
     * }
     */
    public static int H5Z_CB_NO() { return H5Z_CB_NO; }

    private static class H5Zfilter_avail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Zfilter_avail");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * htri_t H5Zfilter_avail(H5Z_filter_t id)
     * }
     */
    public static FunctionDescriptor H5Zfilter_avail$descriptor() { return H5Zfilter_avail.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * htri_t H5Zfilter_avail(H5Z_filter_t id)
     * }
     */
    public static MethodHandle H5Zfilter_avail$handle() { return H5Zfilter_avail.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * htri_t H5Zfilter_avail(H5Z_filter_t id)
     * }
     */
    public static MemorySegment H5Zfilter_avail$address() { return H5Zfilter_avail.ADDR; }

    /**
     * {@snippet lang=c :
     * htri_t H5Zfilter_avail(H5Z_filter_t id)
     * }
     */
    public static int H5Zfilter_avail(int id)
    {
        var mh$ = H5Zfilter_avail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Zfilter_avail", id);
            }
            return (int)mh$.invokeExact(id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class H5Zget_filter_info {
        public static final FunctionDescriptor DESC =
            FunctionDescriptor.of(hdf5_h.C_INT, hdf5_h.C_INT, hdf5_h.C_POINTER);

        public static final MemorySegment ADDR = hdf5_h.findOrThrow("H5Zget_filter_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * herr_t H5Zget_filter_info(H5Z_filter_t filter, unsigned int *filter_config_flags)
     * }
     */
    public static FunctionDescriptor H5Zget_filter_info$descriptor() { return H5Zget_filter_info.DESC; }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * herr_t H5Zget_filter_info(H5Z_filter_t filter, unsigned int *filter_config_flags)
     * }
     */
    public static MethodHandle H5Zget_filter_info$handle() { return H5Zget_filter_info.HANDLE; }

    /**
     * Address for:
     * {@snippet lang=c :
     * herr_t H5Zget_filter_info(H5Z_filter_t filter, unsigned int *filter_config_flags)
     * }
     */
    public static MemorySegment H5Zget_filter_info$address() { return H5Zget_filter_info.ADDR; }

    /**
     * {@snippet lang=c :
     * herr_t H5Zget_filter_info(H5Z_filter_t filter, unsigned int *filter_config_flags)
     * }
     */
    public static int H5Zget_filter_info(int filter, MemorySegment filter_config_flags)
    {
        var mh$ = H5Zget_filter_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("H5Zget_filter_info", filter, filter_config_flags);
            }
            return (int)mh$.invokeExact(filter, filter_config_flags);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int H5D_MPIO_NO_CHUNK_OPTIMIZATION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_actual_chunk_opt_mode_t.H5D_MPIO_NO_CHUNK_OPTIMIZATION = 0
     * }
     */
    public static int H5D_MPIO_NO_CHUNK_OPTIMIZATION() { return H5D_MPIO_NO_CHUNK_OPTIMIZATION; }
    private static final int H5D_MPIO_LINK_CHUNK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_actual_chunk_opt_mode_t.H5D_MPIO_LINK_CHUNK = 1
     * }
     */
    public static int H5D_MPIO_LINK_CHUNK() { return H5D_MPIO_LINK_CHUNK; }
    private static final int H5D_MPIO_MULTI_CHUNK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_actual_chunk_opt_mode_t.H5D_MPIO_MULTI_CHUNK = 2
     * }
     */
    public static int H5D_MPIO_MULTI_CHUNK() { return H5D_MPIO_MULTI_CHUNK; }
    private static final int H5D_MPIO_NO_COLLECTIVE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_actual_io_mode_t.H5D_MPIO_NO_COLLECTIVE = 0
     * }
     */
    public static int H5D_MPIO_NO_COLLECTIVE() { return H5D_MPIO_NO_COLLECTIVE; }
    private static final int H5D_MPIO_CHUNK_INDEPENDENT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_actual_io_mode_t.H5D_MPIO_CHUNK_INDEPENDENT = 1
     * }
     */
    public static int H5D_MPIO_CHUNK_INDEPENDENT() { return H5D_MPIO_CHUNK_INDEPENDENT; }
    private static final int H5D_MPIO_CHUNK_COLLECTIVE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum H5D_mpio_actual_io_mode_t.H5D_MPIO_CHUNK_COLLECTIVE = 2
     * }
     */
    public static int H5D_MPIO_CHUNK_COLLECTIVE() { return H5D_MPIO_CHUNK_COLLECTIVE; }
}
