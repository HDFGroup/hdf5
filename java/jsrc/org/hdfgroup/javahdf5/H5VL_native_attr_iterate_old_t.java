// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5VL_native_attr_iterate_old_t {
 *     hid_t loc_id;
 *     unsigned int *attr_num;
 *     H5A_operator1_t op;
 *     void *op_data;
 * }
 * }
 */
public class H5VL_native_attr_iterate_old_t {

    H5VL_native_attr_iterate_old_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_LONG.withName("loc_id"),
        hdf5_h.C_POINTER.withName("attr_num"),
        hdf5_h.C_POINTER.withName("op"),
        hdf5_h.C_POINTER.withName("op_data")
    ).withName("H5VL_native_attr_iterate_old_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong loc_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("loc_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hid_t loc_id
     * }
     */
    public static final OfLong loc_id$layout() {
        return loc_id$LAYOUT;
    }

    private static final long loc_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hid_t loc_id
     * }
     */
    public static final long loc_id$offset() {
        return loc_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hid_t loc_id
     * }
     */
    public static long loc_id(MemorySegment struct) {
        return struct.get(loc_id$LAYOUT, loc_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hid_t loc_id
     * }
     */
    public static void loc_id(MemorySegment struct, long fieldValue) {
        struct.set(loc_id$LAYOUT, loc_id$OFFSET, fieldValue);
    }

    private static final AddressLayout attr_num$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("attr_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *attr_num
     * }
     */
    public static final AddressLayout attr_num$layout() {
        return attr_num$LAYOUT;
    }

    private static final long attr_num$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *attr_num
     * }
     */
    public static final long attr_num$offset() {
        return attr_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *attr_num
     * }
     */
    public static MemorySegment attr_num(MemorySegment struct) {
        return struct.get(attr_num$LAYOUT, attr_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *attr_num
     * }
     */
    public static void attr_num(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(attr_num$LAYOUT, attr_num$OFFSET, fieldValue);
    }

    private static final AddressLayout op$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("op"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5A_operator1_t op
     * }
     */
    public static final AddressLayout op$layout() {
        return op$LAYOUT;
    }

    private static final long op$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5A_operator1_t op
     * }
     */
    public static final long op$offset() {
        return op$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5A_operator1_t op
     * }
     */
    public static MemorySegment op(MemorySegment struct) {
        return struct.get(op$LAYOUT, op$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5A_operator1_t op
     * }
     */
    public static void op(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(op$LAYOUT, op$OFFSET, fieldValue);
    }

    private static final AddressLayout op_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("op_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *op_data
     * }
     */
    public static final AddressLayout op_data$layout() {
        return op_data$LAYOUT;
    }

    private static final long op_data$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *op_data
     * }
     */
    public static final long op_data$offset() {
        return op_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *op_data
     * }
     */
    public static MemorySegment op_data(MemorySegment struct) {
        return struct.get(op_data$LAYOUT, op_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *op_data
     * }
     */
    public static void op_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(op_data$LAYOUT, op_data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

