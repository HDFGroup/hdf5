// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5Z_class2_t {
 *     int version;
 *     H5Z_filter_t id;
 *     unsigned int encoder_present;
 *     unsigned int decoder_present;
 *     const char *name;
 *     H5Z_can_apply_func_t can_apply;
 *     H5Z_set_local_func_t set_local;
 *     H5Z_func_t filter;
 * }
 * }
 */
public class H5Z_class2_t {

    H5Z_class2_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_INT.withName("version"),
        hdf5_h.C_INT.withName("id"),
        hdf5_h.C_INT.withName("encoder_present"),
        hdf5_h.C_INT.withName("decoder_present"),
        hdf5_h.C_POINTER.withName("name"),
        hdf5_h.C_POINTER.withName("can_apply"),
        hdf5_h.C_POINTER.withName("set_local"),
        hdf5_h.C_POINTER.withName("filter")
    ).withName("H5Z_class2_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5Z_filter_t id
     * }
     */
    public static final OfInt id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5Z_filter_t id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5Z_filter_t id
     * }
     */
    public static int id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5Z_filter_t id
     * }
     */
    public static void id(MemorySegment struct, int fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final OfInt encoder_present$LAYOUT = (OfInt)$LAYOUT.select(groupElement("encoder_present"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int encoder_present
     * }
     */
    public static final OfInt encoder_present$layout() {
        return encoder_present$LAYOUT;
    }

    private static final long encoder_present$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int encoder_present
     * }
     */
    public static final long encoder_present$offset() {
        return encoder_present$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int encoder_present
     * }
     */
    public static int encoder_present(MemorySegment struct) {
        return struct.get(encoder_present$LAYOUT, encoder_present$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int encoder_present
     * }
     */
    public static void encoder_present(MemorySegment struct, int fieldValue) {
        struct.set(encoder_present$LAYOUT, encoder_present$OFFSET, fieldValue);
    }

    private static final OfInt decoder_present$LAYOUT = (OfInt)$LAYOUT.select(groupElement("decoder_present"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int decoder_present
     * }
     */
    public static final OfInt decoder_present$layout() {
        return decoder_present$LAYOUT;
    }

    private static final long decoder_present$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int decoder_present
     * }
     */
    public static final long decoder_present$offset() {
        return decoder_present$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int decoder_present
     * }
     */
    public static int decoder_present(MemorySegment struct) {
        return struct.get(decoder_present$LAYOUT, decoder_present$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int decoder_present
     * }
     */
    public static void decoder_present(MemorySegment struct, int fieldValue) {
        struct.set(decoder_present$LAYOUT, decoder_present$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout can_apply$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("can_apply"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5Z_can_apply_func_t can_apply
     * }
     */
    public static final AddressLayout can_apply$layout() {
        return can_apply$LAYOUT;
    }

    private static final long can_apply$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5Z_can_apply_func_t can_apply
     * }
     */
    public static final long can_apply$offset() {
        return can_apply$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5Z_can_apply_func_t can_apply
     * }
     */
    public static MemorySegment can_apply(MemorySegment struct) {
        return struct.get(can_apply$LAYOUT, can_apply$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5Z_can_apply_func_t can_apply
     * }
     */
    public static void can_apply(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(can_apply$LAYOUT, can_apply$OFFSET, fieldValue);
    }

    private static final AddressLayout set_local$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_local"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5Z_set_local_func_t set_local
     * }
     */
    public static final AddressLayout set_local$layout() {
        return set_local$LAYOUT;
    }

    private static final long set_local$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5Z_set_local_func_t set_local
     * }
     */
    public static final long set_local$offset() {
        return set_local$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5Z_set_local_func_t set_local
     * }
     */
    public static MemorySegment set_local(MemorySegment struct) {
        return struct.get(set_local$LAYOUT, set_local$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5Z_set_local_func_t set_local
     * }
     */
    public static void set_local(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_local$LAYOUT, set_local$OFFSET, fieldValue);
    }

    private static final AddressLayout filter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("filter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5Z_func_t filter
     * }
     */
    public static final AddressLayout filter$layout() {
        return filter$LAYOUT;
    }

    private static final long filter$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5Z_func_t filter
     * }
     */
    public static final long filter$offset() {
        return filter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5Z_func_t filter
     * }
     */
    public static MemorySegment filter(MemorySegment struct) {
        return struct.get(filter$LAYOUT, filter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5Z_func_t filter
     * }
     */
    public static void filter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(filter$LAYOUT, filter$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

