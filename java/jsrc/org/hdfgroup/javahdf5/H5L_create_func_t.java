// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * typedef herr_t (*H5L_create_func_t)(const char *, hid_t, const void *, size_t, hid_t)
 * }
 */
public class H5L_create_func_t {

    H5L_create_func_t()
    {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        int apply(MemorySegment link_name, long loc_group, MemorySegment lnkdata, long lnkdata_size,
                  long lcpl_id);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
        hdf5_h.C_INT, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_POINTER, hdf5_h.C_LONG, hdf5_h.C_LONG);

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() { return $DESC; }

    private static final MethodHandle UP$MH =
        hdf5_h.upcallHandle(H5L_create_func_t.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(H5L_create_func_t.Function fi, Arena arena)
    {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static int invoke(MemorySegment funcPtr, MemorySegment link_name, long loc_group,
                             MemorySegment lnkdata, long lnkdata_size, long lcpl_id)
    {
        try {
            return (int)DOWN$MH.invokeExact(funcPtr, link_name, loc_group, lnkdata, lnkdata_size, lcpl_id);
        }
        catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}
