// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5VL_dataset_get_args_t {
 *     H5VL_dataset_get_t op_type;
 *     union {
 *         struct {
 *             hid_t dapl_id;
 *         } get_dapl;
 *         struct {
 *             hid_t dcpl_id;
 *         } get_dcpl;
 *         struct {
 *             hid_t space_id;
 *         } get_space;
 *         struct {
 *             H5D_space_status_t *status;
 *         } get_space_status;
 *         struct {
 *             hsize_t *storage_size;
 *         } get_storage_size;
 *         struct {
 *             hid_t type_id;
 *         } get_type;
 *     } args;
 * }
 * }
 */
public class H5VL_dataset_get_args_t {

    H5VL_dataset_get_args_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(hdf5_h.C_INT.withName("op_type"), MemoryLayout.paddingLayout(4),
                          H5VL_dataset_get_args_t.args.layout().withName("args"))
            .withName("H5VL_dataset_get_args_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfInt op_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("op_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_dataset_get_t op_type
     * }
     */
    public static final OfInt op_type$layout() { return op_type$LAYOUT; }

    private static final long op_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_dataset_get_t op_type
     * }
     */
    public static final long op_type$offset() { return op_type$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_dataset_get_t op_type
     * }
     */
    public static int op_type(MemorySegment struct) { return struct.get(op_type$LAYOUT, op_type$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_dataset_get_t op_type
     * }
     */
    public static void op_type(MemorySegment struct, int fieldValue)
    {
        struct.set(op_type$LAYOUT, op_type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct {
     *         hid_t dapl_id;
     *     } get_dapl;
     *     struct {
     *         hid_t dcpl_id;
     *     } get_dcpl;
     *     struct {
     *         hid_t space_id;
     *     } get_space;
     *     struct {
     *         H5D_space_status_t *status;
     *     } get_space_status;
     *     struct {
     *         hsize_t *storage_size;
     *     } get_storage_size;
     *     struct {
     *         hid_t type_id;
     *     } get_type;
     * }
     * }
     */
    public static class args {

        args()
        {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT =
            MemoryLayout
                .unionLayout(
                    H5VL_dataset_get_args_t.args.get_dapl.layout().withName("get_dapl"),
                    H5VL_dataset_get_args_t.args.get_dcpl.layout().withName("get_dcpl"),
                    H5VL_dataset_get_args_t.args.get_space.layout().withName("get_space"),
                    H5VL_dataset_get_args_t.args.get_space_status.layout().withName("get_space_status"),
                    H5VL_dataset_get_args_t.args.get_storage_size.layout().withName("get_storage_size"),
                    H5VL_dataset_get_args_t.args.get_type.layout().withName("get_type"))
                .withName("$anon$232:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() { return $LAYOUT; }

        /**
         * {@snippet lang=c :
         * struct {
         *     hid_t dapl_id;
         * }
         * }
         */
        public static class get_dapl {

            get_dapl()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_LONG.withName("dapl_id")).withName("$anon$234:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final OfLong dapl_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dapl_id"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hid_t dapl_id
             * }
             */
            public static final OfLong dapl_id$layout() { return dapl_id$LAYOUT; }

            private static final long dapl_id$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hid_t dapl_id
             * }
             */
            public static final long dapl_id$offset() { return dapl_id$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hid_t dapl_id
             * }
             */
            public static long dapl_id(MemorySegment struct)
            {
                return struct.get(dapl_id$LAYOUT, dapl_id$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hid_t dapl_id
             * }
             */
            public static void dapl_id(MemorySegment struct, long fieldValue)
            {
                struct.set(dapl_id$LAYOUT, dapl_id$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout get_dapl$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("get_dapl"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t dapl_id;
         * } get_dapl
         * }
         */
        public static final GroupLayout get_dapl$layout() { return get_dapl$LAYOUT; }

        private static final long get_dapl$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t dapl_id;
         * } get_dapl
         * }
         */
        public static final long get_dapl$offset() { return get_dapl$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t dapl_id;
         * } get_dapl
         * }
         */
        public static MemorySegment get_dapl(MemorySegment union)
        {
            return union.asSlice(get_dapl$OFFSET, get_dapl$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t dapl_id;
         * } get_dapl
         * }
         */
        public static void get_dapl(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, get_dapl$OFFSET, get_dapl$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     hid_t dcpl_id;
         * }
         * }
         */
        public static class get_dcpl {

            get_dcpl()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_LONG.withName("dcpl_id")).withName("$anon$239:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final OfLong dcpl_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dcpl_id"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hid_t dcpl_id
             * }
             */
            public static final OfLong dcpl_id$layout() { return dcpl_id$LAYOUT; }

            private static final long dcpl_id$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hid_t dcpl_id
             * }
             */
            public static final long dcpl_id$offset() { return dcpl_id$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hid_t dcpl_id
             * }
             */
            public static long dcpl_id(MemorySegment struct)
            {
                return struct.get(dcpl_id$LAYOUT, dcpl_id$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hid_t dcpl_id
             * }
             */
            public static void dcpl_id(MemorySegment struct, long fieldValue)
            {
                struct.set(dcpl_id$LAYOUT, dcpl_id$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout get_dcpl$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("get_dcpl"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t dcpl_id;
         * } get_dcpl
         * }
         */
        public static final GroupLayout get_dcpl$layout() { return get_dcpl$LAYOUT; }

        private static final long get_dcpl$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t dcpl_id;
         * } get_dcpl
         * }
         */
        public static final long get_dcpl$offset() { return get_dcpl$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t dcpl_id;
         * } get_dcpl
         * }
         */
        public static MemorySegment get_dcpl(MemorySegment union)
        {
            return union.asSlice(get_dcpl$OFFSET, get_dcpl$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t dcpl_id;
         * } get_dcpl
         * }
         */
        public static void get_dcpl(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, get_dcpl$OFFSET, get_dcpl$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     hid_t space_id;
         * }
         * }
         */
        public static class get_space {

            get_space()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_LONG.withName("space_id")).withName("$anon$244:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final OfLong space_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("space_id"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hid_t space_id
             * }
             */
            public static final OfLong space_id$layout() { return space_id$LAYOUT; }

            private static final long space_id$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hid_t space_id
             * }
             */
            public static final long space_id$offset() { return space_id$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hid_t space_id
             * }
             */
            public static long space_id(MemorySegment struct)
            {
                return struct.get(space_id$LAYOUT, space_id$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hid_t space_id
             * }
             */
            public static void space_id(MemorySegment struct, long fieldValue)
            {
                struct.set(space_id$LAYOUT, space_id$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout get_space$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("get_space"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t space_id;
         * } get_space
         * }
         */
        public static final GroupLayout get_space$layout() { return get_space$LAYOUT; }

        private static final long get_space$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t space_id;
         * } get_space
         * }
         */
        public static final long get_space$offset() { return get_space$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t space_id;
         * } get_space
         * }
         */
        public static MemorySegment get_space(MemorySegment union)
        {
            return union.asSlice(get_space$OFFSET, get_space$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t space_id;
         * } get_space
         * }
         */
        public static void get_space(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, get_space$OFFSET, get_space$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     H5D_space_status_t *status;
         * }
         * }
         */
        public static class get_space_status {

            get_space_status()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_POINTER.withName("status")).withName("$anon$249:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final AddressLayout status$LAYOUT =
                (AddressLayout)$LAYOUT.select(groupElement("status"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * H5D_space_status_t *status
             * }
             */
            public static final AddressLayout status$layout() { return status$LAYOUT; }

            private static final long status$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * H5D_space_status_t *status
             * }
             */
            public static final long status$offset() { return status$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * H5D_space_status_t *status
             * }
             */
            public static MemorySegment status(MemorySegment struct)
            {
                return struct.get(status$LAYOUT, status$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * H5D_space_status_t *status
             * }
             */
            public static void status(MemorySegment struct, MemorySegment fieldValue)
            {
                struct.set(status$LAYOUT, status$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout get_space_status$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("get_space_status"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     H5D_space_status_t *status;
         * } get_space_status
         * }
         */
        public static final GroupLayout get_space_status$layout() { return get_space_status$LAYOUT; }

        private static final long get_space_status$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     H5D_space_status_t *status;
         * } get_space_status
         * }
         */
        public static final long get_space_status$offset() { return get_space_status$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     H5D_space_status_t *status;
         * } get_space_status
         * }
         */
        public static MemorySegment get_space_status(MemorySegment union)
        {
            return union.asSlice(get_space_status$OFFSET, get_space_status$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     H5D_space_status_t *status;
         * } get_space_status
         * }
         */
        public static void get_space_status(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, get_space_status$OFFSET,
                               get_space_status$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     hsize_t *storage_size;
         * }
         * }
         */
        public static class get_storage_size {

            get_storage_size()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_POINTER.withName("storage_size")).withName("$anon$254:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final AddressLayout storage_size$LAYOUT =
                (AddressLayout)$LAYOUT.select(groupElement("storage_size"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hsize_t *storage_size
             * }
             */
            public static final AddressLayout storage_size$layout() { return storage_size$LAYOUT; }

            private static final long storage_size$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hsize_t *storage_size
             * }
             */
            public static final long storage_size$offset() { return storage_size$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hsize_t *storage_size
             * }
             */
            public static MemorySegment storage_size(MemorySegment struct)
            {
                return struct.get(storage_size$LAYOUT, storage_size$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hsize_t *storage_size
             * }
             */
            public static void storage_size(MemorySegment struct, MemorySegment fieldValue)
            {
                struct.set(storage_size$LAYOUT, storage_size$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout get_storage_size$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("get_storage_size"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     hsize_t *storage_size;
         * } get_storage_size
         * }
         */
        public static final GroupLayout get_storage_size$layout() { return get_storage_size$LAYOUT; }

        private static final long get_storage_size$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     hsize_t *storage_size;
         * } get_storage_size
         * }
         */
        public static final long get_storage_size$offset() { return get_storage_size$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     hsize_t *storage_size;
         * } get_storage_size
         * }
         */
        public static MemorySegment get_storage_size(MemorySegment union)
        {
            return union.asSlice(get_storage_size$OFFSET, get_storage_size$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     hsize_t *storage_size;
         * } get_storage_size
         * }
         */
        public static void get_storage_size(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, get_storage_size$OFFSET,
                               get_storage_size$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     hid_t type_id;
         * }
         * }
         */
        public static class get_type {

            get_type()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_LONG.withName("type_id")).withName("$anon$259:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final OfLong type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("type_id"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hid_t type_id
             * }
             */
            public static final OfLong type_id$layout() { return type_id$LAYOUT; }

            private static final long type_id$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hid_t type_id
             * }
             */
            public static final long type_id$offset() { return type_id$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hid_t type_id
             * }
             */
            public static long type_id(MemorySegment struct)
            {
                return struct.get(type_id$LAYOUT, type_id$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hid_t type_id
             * }
             */
            public static void type_id(MemorySegment struct, long fieldValue)
            {
                struct.set(type_id$LAYOUT, type_id$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout get_type$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("get_type"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t type_id;
         * } get_type
         * }
         */
        public static final GroupLayout get_type$layout() { return get_type$LAYOUT; }

        private static final long get_type$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t type_id;
         * } get_type
         * }
         */
        public static final long get_type$offset() { return get_type$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t type_id;
         * } get_type
         * }
         */
        public static MemorySegment get_type(MemorySegment union)
        {
            return union.asSlice(get_type$OFFSET, get_type$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t type_id;
         * } get_type
         * }
         */
        public static void get_type(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, get_type$OFFSET, get_type$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index)
        {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator)
        {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
        {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout args$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("args"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         hid_t dapl_id;
     *     } get_dapl;
     *     struct {
     *         hid_t dcpl_id;
     *     } get_dcpl;
     *     struct {
     *         hid_t space_id;
     *     } get_space;
     *     struct {
     *         H5D_space_status_t *status;
     *     } get_space_status;
     *     struct {
     *         hsize_t *storage_size;
     *     } get_storage_size;
     *     struct {
     *         hid_t type_id;
     *     } get_type;
     * } args
     * }
     */
    public static final GroupLayout args$layout() { return args$LAYOUT; }

    private static final long args$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         hid_t dapl_id;
     *     } get_dapl;
     *     struct {
     *         hid_t dcpl_id;
     *     } get_dcpl;
     *     struct {
     *         hid_t space_id;
     *     } get_space;
     *     struct {
     *         H5D_space_status_t *status;
     *     } get_space_status;
     *     struct {
     *         hsize_t *storage_size;
     *     } get_storage_size;
     *     struct {
     *         hid_t type_id;
     *     } get_type;
     * } args
     * }
     */
    public static final long args$offset() { return args$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         hid_t dapl_id;
     *     } get_dapl;
     *     struct {
     *         hid_t dcpl_id;
     *     } get_dcpl;
     *     struct {
     *         hid_t space_id;
     *     } get_space;
     *     struct {
     *         H5D_space_status_t *status;
     *     } get_space_status;
     *     struct {
     *         hsize_t *storage_size;
     *     } get_storage_size;
     *     struct {
     *         hid_t type_id;
     *     } get_type;
     * } args
     * }
     */
    public static MemorySegment args(MemorySegment struct)
    {
        return struct.asSlice(args$OFFSET, args$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         hid_t dapl_id;
     *     } get_dapl;
     *     struct {
     *         hid_t dcpl_id;
     *     } get_dcpl;
     *     struct {
     *         hid_t space_id;
     *     } get_space;
     *     struct {
     *         H5D_space_status_t *status;
     *     } get_space_status;
     *     struct {
     *         hsize_t *storage_size;
     *     } get_storage_size;
     *     struct {
     *         hid_t type_id;
     *     } get_type;
     * } args
     * }
     */
    public static void args(MemorySegment struct, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, struct, args$OFFSET, args$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
