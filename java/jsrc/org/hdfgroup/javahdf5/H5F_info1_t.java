// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5F_info1_t {
 *     hsize_t super_ext_size;
 *     struct {
 *         hsize_t hdr_size;
 *         H5_ih_info_t msgs_info;
 *     } sohm;
 * }
 * }
 */
public class H5F_info1_t {

    H5F_info1_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout
                                                   .structLayout(hdf5_h.C_LONG.withName("super_ext_size"),
                                                                 H5F_info1_t.sohm.layout().withName("sohm"))
                                                   .withName("H5F_info1_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfLong super_ext_size$LAYOUT =
        (OfLong)$LAYOUT.select(groupElement("super_ext_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t super_ext_size
     * }
     */
    public static final OfLong super_ext_size$layout() { return super_ext_size$LAYOUT; }

    private static final long super_ext_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t super_ext_size
     * }
     */
    public static final long super_ext_size$offset() { return super_ext_size$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t super_ext_size
     * }
     */
    public static long super_ext_size(MemorySegment struct)
    {
        return struct.get(super_ext_size$LAYOUT, super_ext_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t super_ext_size
     * }
     */
    public static void super_ext_size(MemorySegment struct, long fieldValue)
    {
        struct.set(super_ext_size$LAYOUT, super_ext_size$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     hsize_t hdr_size;
     *     H5_ih_info_t msgs_info;
     * }
     * }
     */
    public static class sohm {

        sohm()
        {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT =
            MemoryLayout
                .structLayout(hdf5_h.C_LONG.withName("hdr_size"), H5_ih_info_t.layout().withName("msgs_info"))
                .withName("$anon$1892:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() { return $LAYOUT; }

        private static final OfLong hdr_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hdr_size"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hsize_t hdr_size
         * }
         */
        public static final OfLong hdr_size$layout() { return hdr_size$LAYOUT; }

        private static final long hdr_size$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hsize_t hdr_size
         * }
         */
        public static final long hdr_size$offset() { return hdr_size$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hsize_t hdr_size
         * }
         */
        public static long hdr_size(MemorySegment struct)
        {
            return struct.get(hdr_size$LAYOUT, hdr_size$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hsize_t hdr_size
         * }
         */
        public static void hdr_size(MemorySegment struct, long fieldValue)
        {
            struct.set(hdr_size$LAYOUT, hdr_size$OFFSET, fieldValue);
        }

        private static final GroupLayout msgs_info$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("msgs_info"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * H5_ih_info_t msgs_info
         * }
         */
        public static final GroupLayout msgs_info$layout() { return msgs_info$LAYOUT; }

        private static final long msgs_info$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * H5_ih_info_t msgs_info
         * }
         */
        public static final long msgs_info$offset() { return msgs_info$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * H5_ih_info_t msgs_info
         * }
         */
        public static MemorySegment msgs_info(MemorySegment struct)
        {
            return struct.asSlice(msgs_info$OFFSET, msgs_info$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * H5_ih_info_t msgs_info
         * }
         */
        public static void msgs_info(MemorySegment struct, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, struct, msgs_info$OFFSET, msgs_info$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index)
        {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator)
        {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
        {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout sohm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sohm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     hsize_t hdr_size;
     *     H5_ih_info_t msgs_info;
     * } sohm
     * }
     */
    public static final GroupLayout sohm$layout() { return sohm$LAYOUT; }

    private static final long sohm$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     hsize_t hdr_size;
     *     H5_ih_info_t msgs_info;
     * } sohm
     * }
     */
    public static final long sohm$offset() { return sohm$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     hsize_t hdr_size;
     *     H5_ih_info_t msgs_info;
     * } sohm
     * }
     */
    public static MemorySegment sohm(MemorySegment struct)
    {
        return struct.asSlice(sohm$OFFSET, sohm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     hsize_t hdr_size;
     *     H5_ih_info_t msgs_info;
     * } sohm
     * }
     */
    public static void sohm(MemorySegment struct, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, struct, sohm$OFFSET, sohm$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
