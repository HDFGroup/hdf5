// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5VL_request_class_t {
 *     herr_t (*wait)(void *, uint64_t, H5VL_request_status_t *);
 *     herr_t (*notify)(void *, H5VL_request_notify_t, void *);
 *     herr_t (*cancel)(void *, H5VL_request_status_t *);
 *     herr_t (*specific)(void *, H5VL_request_specific_args_t *);
 *     herr_t (*optional)(void *, H5VL_optional_args_t *);
 *     herr_t (*free)(void *);
 * }
 * }
 */
public class H5VL_request_class_t {

    H5VL_request_class_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_POINTER.withName("wait"),
        hdf5_h.C_POINTER.withName("notify"),
        hdf5_h.C_POINTER.withName("cancel"),
        hdf5_h.C_POINTER.withName("specific"),
        hdf5_h.C_POINTER.withName("optional"),
        hdf5_h.C_POINTER.withName("free")
    ).withName("H5VL_request_class_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * herr_t (*wait)(void *, uint64_t, H5VL_request_status_t *)
     * }
     */
    public static class wait {

        wait() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, long _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(wait.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(wait.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout wait$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wait"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*wait)(void *, uint64_t, H5VL_request_status_t *)
     * }
     */
    public static final AddressLayout wait$layout() {
        return wait$LAYOUT;
    }

    private static final long wait$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*wait)(void *, uint64_t, H5VL_request_status_t *)
     * }
     */
    public static final long wait$offset() {
        return wait$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*wait)(void *, uint64_t, H5VL_request_status_t *)
     * }
     */
    public static MemorySegment wait(MemorySegment struct) {
        return struct.get(wait$LAYOUT, wait$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*wait)(void *, uint64_t, H5VL_request_status_t *)
     * }
     */
    public static void wait(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wait$LAYOUT, wait$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*notify)(void *, H5VL_request_notify_t, void *)
     * }
     */
    public static class notify {

        notify() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(notify.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(notify.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout notify$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("notify"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*notify)(void *, H5VL_request_notify_t, void *)
     * }
     */
    public static final AddressLayout notify$layout() {
        return notify$LAYOUT;
    }

    private static final long notify$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*notify)(void *, H5VL_request_notify_t, void *)
     * }
     */
    public static final long notify$offset() {
        return notify$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*notify)(void *, H5VL_request_notify_t, void *)
     * }
     */
    public static MemorySegment notify(MemorySegment struct) {
        return struct.get(notify$LAYOUT, notify$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*notify)(void *, H5VL_request_notify_t, void *)
     * }
     */
    public static void notify(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(notify$LAYOUT, notify$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*cancel)(void *, H5VL_request_status_t *)
     * }
     */
    public static class cancel {

        cancel() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(cancel.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(cancel.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout cancel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cancel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*cancel)(void *, H5VL_request_status_t *)
     * }
     */
    public static final AddressLayout cancel$layout() {
        return cancel$LAYOUT;
    }

    private static final long cancel$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*cancel)(void *, H5VL_request_status_t *)
     * }
     */
    public static final long cancel$offset() {
        return cancel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*cancel)(void *, H5VL_request_status_t *)
     * }
     */
    public static MemorySegment cancel(MemorySegment struct) {
        return struct.get(cancel$LAYOUT, cancel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*cancel)(void *, H5VL_request_status_t *)
     * }
     */
    public static void cancel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cancel$LAYOUT, cancel$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*specific)(void *, H5VL_request_specific_args_t *)
     * }
     */
    public static class specific {

        specific() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(specific.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(specific.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout specific$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("specific"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*specific)(void *, H5VL_request_specific_args_t *)
     * }
     */
    public static final AddressLayout specific$layout() {
        return specific$LAYOUT;
    }

    private static final long specific$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*specific)(void *, H5VL_request_specific_args_t *)
     * }
     */
    public static final long specific$offset() {
        return specific$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*specific)(void *, H5VL_request_specific_args_t *)
     * }
     */
    public static MemorySegment specific(MemorySegment struct) {
        return struct.get(specific$LAYOUT, specific$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*specific)(void *, H5VL_request_specific_args_t *)
     * }
     */
    public static void specific(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(specific$LAYOUT, specific$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*optional)(void *, H5VL_optional_args_t *)
     * }
     */
    public static class optional {

        optional() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(optional.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(optional.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout optional$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("optional"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*optional)(void *, H5VL_optional_args_t *)
     * }
     */
    public static final AddressLayout optional$layout() {
        return optional$LAYOUT;
    }

    private static final long optional$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*optional)(void *, H5VL_optional_args_t *)
     * }
     */
    public static final long optional$offset() {
        return optional$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*optional)(void *, H5VL_optional_args_t *)
     * }
     */
    public static MemorySegment optional(MemorySegment struct) {
        return struct.get(optional$LAYOUT, optional$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*optional)(void *, H5VL_optional_args_t *)
     * }
     */
    public static void optional(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(optional$LAYOUT, optional$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*free)(void *)
     * }
     */
    public static class free {

        free() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(free.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(free.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*free)(void *)
     * }
     */
    public static final AddressLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*free)(void *)
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*free)(void *)
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.get(free$LAYOUT, free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*free)(void *)
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free$LAYOUT, free$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

