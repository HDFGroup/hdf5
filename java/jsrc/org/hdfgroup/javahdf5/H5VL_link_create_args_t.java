// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5VL_link_create_args_t {
 *     H5VL_link_create_t op_type;
 *     union {
 *         struct {
 *             void *curr_obj;
 *             H5VL_loc_params_t curr_loc_params;
 *         } hard;
 *         struct {
 *             const char *target;
 *         } soft;
 *         struct {
 *             H5L_type_t type;
 *             const void *buf;
 *             size_t buf_size;
 *         } ud;
 *     } args;
 * }
 * }
 */
public class H5VL_link_create_args_t {

    H5VL_link_create_args_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_INT.withName("op_type"),
        MemoryLayout.paddingLayout(4),
        H5VL_link_create_args_t.args.layout().withName("args")
    ).withName("H5VL_link_create_args_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt op_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("op_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_link_create_t op_type
     * }
     */
    public static final OfInt op_type$layout() {
        return op_type$LAYOUT;
    }

    private static final long op_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_link_create_t op_type
     * }
     */
    public static final long op_type$offset() {
        return op_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_link_create_t op_type
     * }
     */
    public static int op_type(MemorySegment struct) {
        return struct.get(op_type$LAYOUT, op_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_link_create_t op_type
     * }
     */
    public static void op_type(MemorySegment struct, int fieldValue) {
        struct.set(op_type$LAYOUT, op_type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct {
     *         void *curr_obj;
     *         H5VL_loc_params_t curr_loc_params;
     *     } hard;
     *     struct {
     *         const char *target;
     *     } soft;
     *     struct {
     *         H5L_type_t type;
     *         const void *buf;
     *         size_t buf_size;
     *     } ud;
     * }
     * }
     */
    public static class args {

        args() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            H5VL_link_create_args_t.args.hard.layout().withName("hard"),
            H5VL_link_create_args_t.args.soft.layout().withName("soft"),
            H5VL_link_create_args_t.args.ud.layout().withName("ud")
        ).withName("$anon$581:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     void *curr_obj;
         *     H5VL_loc_params_t curr_loc_params;
         * }
         * }
         */
        public static class hard {

            hard() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                hdf5_h.C_POINTER.withName("curr_obj"),
                H5VL_loc_params_t.layout().withName("curr_loc_params")
            ).withName("$anon$583:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout curr_obj$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("curr_obj"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * void *curr_obj
             * }
             */
            public static final AddressLayout curr_obj$layout() {
                return curr_obj$LAYOUT;
            }

            private static final long curr_obj$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * void *curr_obj
             * }
             */
            public static final long curr_obj$offset() {
                return curr_obj$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * void *curr_obj
             * }
             */
            public static MemorySegment curr_obj(MemorySegment struct) {
                return struct.get(curr_obj$LAYOUT, curr_obj$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * void *curr_obj
             * }
             */
            public static void curr_obj(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(curr_obj$LAYOUT, curr_obj$OFFSET, fieldValue);
            }

            private static final GroupLayout curr_loc_params$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("curr_loc_params"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * H5VL_loc_params_t curr_loc_params
             * }
             */
            public static final GroupLayout curr_loc_params$layout() {
                return curr_loc_params$LAYOUT;
            }

            private static final long curr_loc_params$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * H5VL_loc_params_t curr_loc_params
             * }
             */
            public static final long curr_loc_params$offset() {
                return curr_loc_params$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * H5VL_loc_params_t curr_loc_params
             * }
             */
            public static MemorySegment curr_loc_params(MemorySegment struct) {
                return struct.asSlice(curr_loc_params$OFFSET, curr_loc_params$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * H5VL_loc_params_t curr_loc_params
             * }
             */
            public static void curr_loc_params(MemorySegment struct, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, struct, curr_loc_params$OFFSET, curr_loc_params$LAYOUT.byteSize());
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout hard$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("hard"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     void *curr_obj;
         *     H5VL_loc_params_t curr_loc_params;
         * } hard
         * }
         */
        public static final GroupLayout hard$layout() {
            return hard$LAYOUT;
        }

        private static final long hard$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     void *curr_obj;
         *     H5VL_loc_params_t curr_loc_params;
         * } hard
         * }
         */
        public static final long hard$offset() {
            return hard$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     void *curr_obj;
         *     H5VL_loc_params_t curr_loc_params;
         * } hard
         * }
         */
        public static MemorySegment hard(MemorySegment union) {
            return union.asSlice(hard$OFFSET, hard$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     void *curr_obj;
         *     H5VL_loc_params_t curr_loc_params;
         * } hard
         * }
         */
        public static void hard(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, hard$OFFSET, hard$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     const char *target;
         * }
         * }
         */
        public static class soft {

            soft() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                hdf5_h.C_POINTER.withName("target")
            ).withName("$anon$589:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout target$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("target"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * const char *target
             * }
             */
            public static final AddressLayout target$layout() {
                return target$LAYOUT;
            }

            private static final long target$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * const char *target
             * }
             */
            public static final long target$offset() {
                return target$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * const char *target
             * }
             */
            public static MemorySegment target(MemorySegment struct) {
                return struct.get(target$LAYOUT, target$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * const char *target
             * }
             */
            public static void target(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(target$LAYOUT, target$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout soft$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("soft"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     const char *target;
         * } soft
         * }
         */
        public static final GroupLayout soft$layout() {
            return soft$LAYOUT;
        }

        private static final long soft$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     const char *target;
         * } soft
         * }
         */
        public static final long soft$offset() {
            return soft$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     const char *target;
         * } soft
         * }
         */
        public static MemorySegment soft(MemorySegment union) {
            return union.asSlice(soft$OFFSET, soft$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     const char *target;
         * } soft
         * }
         */
        public static void soft(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, soft$OFFSET, soft$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     H5L_type_t type;
         *     const void *buf;
         *     size_t buf_size;
         * }
         * }
         */
        public static class ud {

            ud() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                hdf5_h.C_INT.withName("type"),
                MemoryLayout.paddingLayout(4),
                hdf5_h.C_POINTER.withName("buf"),
                hdf5_h.C_LONG.withName("buf_size")
            ).withName("$anon$594:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * H5L_type_t type
             * }
             */
            public static final OfInt type$layout() {
                return type$LAYOUT;
            }

            private static final long type$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * H5L_type_t type
             * }
             */
            public static final long type$offset() {
                return type$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * H5L_type_t type
             * }
             */
            public static int type(MemorySegment struct) {
                return struct.get(type$LAYOUT, type$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * H5L_type_t type
             * }
             */
            public static void type(MemorySegment struct, int fieldValue) {
                struct.set(type$LAYOUT, type$OFFSET, fieldValue);
            }

            private static final AddressLayout buf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buf"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * const void *buf
             * }
             */
            public static final AddressLayout buf$layout() {
                return buf$LAYOUT;
            }

            private static final long buf$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * const void *buf
             * }
             */
            public static final long buf$offset() {
                return buf$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * const void *buf
             * }
             */
            public static MemorySegment buf(MemorySegment struct) {
                return struct.get(buf$LAYOUT, buf$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * const void *buf
             * }
             */
            public static void buf(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(buf$LAYOUT, buf$OFFSET, fieldValue);
            }

            private static final OfLong buf_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("buf_size"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * size_t buf_size
             * }
             */
            public static final OfLong buf_size$layout() {
                return buf_size$LAYOUT;
            }

            private static final long buf_size$OFFSET = 16;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * size_t buf_size
             * }
             */
            public static final long buf_size$offset() {
                return buf_size$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * size_t buf_size
             * }
             */
            public static long buf_size(MemorySegment struct) {
                return struct.get(buf_size$LAYOUT, buf_size$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * size_t buf_size
             * }
             */
            public static void buf_size(MemorySegment struct, long fieldValue) {
                struct.set(buf_size$LAYOUT, buf_size$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout ud$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ud"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     H5L_type_t type;
         *     const void *buf;
         *     size_t buf_size;
         * } ud
         * }
         */
        public static final GroupLayout ud$layout() {
            return ud$LAYOUT;
        }

        private static final long ud$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     H5L_type_t type;
         *     const void *buf;
         *     size_t buf_size;
         * } ud
         * }
         */
        public static final long ud$offset() {
            return ud$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     H5L_type_t type;
         *     const void *buf;
         *     size_t buf_size;
         * } ud
         * }
         */
        public static MemorySegment ud(MemorySegment union) {
            return union.asSlice(ud$OFFSET, ud$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     H5L_type_t type;
         *     const void *buf;
         *     size_t buf_size;
         * } ud
         * }
         */
        public static void ud(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ud$OFFSET, ud$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout args$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("args"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         void *curr_obj;
     *         H5VL_loc_params_t curr_loc_params;
     *     } hard;
     *     struct {
     *         const char *target;
     *     } soft;
     *     struct {
     *         H5L_type_t type;
     *         const void *buf;
     *         size_t buf_size;
     *     } ud;
     * } args
     * }
     */
    public static final GroupLayout args$layout() {
        return args$LAYOUT;
    }

    private static final long args$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         void *curr_obj;
     *         H5VL_loc_params_t curr_loc_params;
     *     } hard;
     *     struct {
     *         const char *target;
     *     } soft;
     *     struct {
     *         H5L_type_t type;
     *         const void *buf;
     *         size_t buf_size;
     *     } ud;
     * } args
     * }
     */
    public static final long args$offset() {
        return args$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         void *curr_obj;
     *         H5VL_loc_params_t curr_loc_params;
     *     } hard;
     *     struct {
     *         const char *target;
     *     } soft;
     *     struct {
     *         H5L_type_t type;
     *         const void *buf;
     *         size_t buf_size;
     *     } ud;
     * } args
     * }
     */
    public static MemorySegment args(MemorySegment struct) {
        return struct.asSlice(args$OFFSET, args$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         void *curr_obj;
     *         H5VL_loc_params_t curr_loc_params;
     *     } hard;
     *     struct {
     *         const char *target;
     *     } soft;
     *     struct {
     *         H5L_type_t type;
     *         const void *buf;
     *         size_t buf_size;
     *     } ud;
     * } args
     * }
     */
    public static void args(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, args$OFFSET, args$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

