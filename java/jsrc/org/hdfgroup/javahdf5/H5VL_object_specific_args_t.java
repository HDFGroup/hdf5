// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5VL_object_specific_args_t {
 *     H5VL_object_specific_t op_type;
 *     union {
 *         struct {
 *             int delta;
 *         } change_rc;
 *         struct {
 *             hbool_t *exists;
 *         } exists;
 *         struct {
 *             H5O_token_t *token_ptr;
 *         } lookup;
 *         H5VL_object_visit_args_t visit;
 *         struct {
 *             hid_t obj_id;
 *         } flush;
 *         struct {
 *             hid_t obj_id;
 *         } refresh;
 *     } args;
 * }
 * }
 */
public class H5VL_object_specific_args_t {

    H5VL_object_specific_args_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(hdf5_h.C_INT.withName("op_type"), MemoryLayout.paddingLayout(4),
                          H5VL_object_specific_args_t.args.layout().withName("args"))
            .withName("H5VL_object_specific_args_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfInt op_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("op_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_object_specific_t op_type
     * }
     */
    public static final OfInt op_type$layout() { return op_type$LAYOUT; }

    private static final long op_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_object_specific_t op_type
     * }
     */
    public static final long op_type$offset() { return op_type$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_object_specific_t op_type
     * }
     */
    public static int op_type(MemorySegment struct) { return struct.get(op_type$LAYOUT, op_type$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_object_specific_t op_type
     * }
     */
    public static void op_type(MemorySegment struct, int fieldValue)
    {
        struct.set(op_type$LAYOUT, op_type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct {
     *         int delta;
     *     } change_rc;
     *     struct {
     *         hbool_t *exists;
     *     } exists;
     *     struct {
     *         H5O_token_t *token_ptr;
     *     } lookup;
     *     H5VL_object_visit_args_t visit;
     *     struct {
     *         hid_t obj_id;
     *     } flush;
     *     struct {
     *         hid_t obj_id;
     *     } refresh;
     * }
     * }
     */
    public static class args {

        args()
        {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT =
            MemoryLayout
                .unionLayout(H5VL_object_specific_args_t.args.change_rc.layout().withName("change_rc"),
                             H5VL_object_specific_args_t.args.exists.layout().withName("exists"),
                             H5VL_object_specific_args_t.args.lookup.layout().withName("lookup"),
                             H5VL_object_visit_args_t.layout().withName("visit"),
                             H5VL_object_specific_args_t.args.flush.layout().withName("flush"),
                             H5VL_object_specific_args_t.args.refresh.layout().withName("refresh"))
                .withName("$anon$738:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() { return $LAYOUT; }

        /**
         * {@snippet lang=c :
         * struct {
         *     int delta;
         * }
         * }
         */
        public static class change_rc {

            change_rc()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_INT.withName("delta")).withName("$anon$740:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final OfInt delta$LAYOUT = (OfInt)$LAYOUT.select(groupElement("delta"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * int delta
             * }
             */
            public static final OfInt delta$layout() { return delta$LAYOUT; }

            private static final long delta$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * int delta
             * }
             */
            public static final long delta$offset() { return delta$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * int delta
             * }
             */
            public static int delta(MemorySegment struct) { return struct.get(delta$LAYOUT, delta$OFFSET); }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * int delta
             * }
             */
            public static void delta(MemorySegment struct, int fieldValue)
            {
                struct.set(delta$LAYOUT, delta$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout change_rc$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("change_rc"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     int delta;
         * } change_rc
         * }
         */
        public static final GroupLayout change_rc$layout() { return change_rc$LAYOUT; }

        private static final long change_rc$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     int delta;
         * } change_rc
         * }
         */
        public static final long change_rc$offset() { return change_rc$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     int delta;
         * } change_rc
         * }
         */
        public static MemorySegment change_rc(MemorySegment union)
        {
            return union.asSlice(change_rc$OFFSET, change_rc$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     int delta;
         * } change_rc
         * }
         */
        public static void change_rc(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, change_rc$OFFSET, change_rc$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     hbool_t *exists;
         * }
         * }
         */
        public static class exists {

            exists()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_POINTER.withName("exists")).withName("$anon$745:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final AddressLayout exists$LAYOUT =
                (AddressLayout)$LAYOUT.select(groupElement("exists"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hbool_t *exists
             * }
             */
            public static final AddressLayout exists$layout() { return exists$LAYOUT; }

            private static final long exists$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hbool_t *exists
             * }
             */
            public static final long exists$offset() { return exists$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hbool_t *exists
             * }
             */
            public static MemorySegment exists(MemorySegment struct)
            {
                return struct.get(exists$LAYOUT, exists$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hbool_t *exists
             * }
             */
            public static void exists(MemorySegment struct, MemorySegment fieldValue)
            {
                struct.set(exists$LAYOUT, exists$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout exists$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("exists"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     hbool_t *exists;
         * } exists
         * }
         */
        public static final GroupLayout exists$layout() { return exists$LAYOUT; }

        private static final long exists$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     hbool_t *exists;
         * } exists
         * }
         */
        public static final long exists$offset() { return exists$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     hbool_t *exists;
         * } exists
         * }
         */
        public static MemorySegment exists(MemorySegment union)
        {
            return union.asSlice(exists$OFFSET, exists$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     hbool_t *exists;
         * } exists
         * }
         */
        public static void exists(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, exists$OFFSET, exists$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     H5O_token_t *token_ptr;
         * }
         * }
         */
        public static class lookup {

            lookup()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_POINTER.withName("token_ptr")).withName("$anon$750:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final AddressLayout token_ptr$LAYOUT =
                (AddressLayout)$LAYOUT.select(groupElement("token_ptr"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * H5O_token_t *token_ptr
             * }
             */
            public static final AddressLayout token_ptr$layout() { return token_ptr$LAYOUT; }

            private static final long token_ptr$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * H5O_token_t *token_ptr
             * }
             */
            public static final long token_ptr$offset() { return token_ptr$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * H5O_token_t *token_ptr
             * }
             */
            public static MemorySegment token_ptr(MemorySegment struct)
            {
                return struct.get(token_ptr$LAYOUT, token_ptr$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * H5O_token_t *token_ptr
             * }
             */
            public static void token_ptr(MemorySegment struct, MemorySegment fieldValue)
            {
                struct.set(token_ptr$LAYOUT, token_ptr$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout lookup$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("lookup"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     H5O_token_t *token_ptr;
         * } lookup
         * }
         */
        public static final GroupLayout lookup$layout() { return lookup$LAYOUT; }

        private static final long lookup$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     H5O_token_t *token_ptr;
         * } lookup
         * }
         */
        public static final long lookup$offset() { return lookup$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     H5O_token_t *token_ptr;
         * } lookup
         * }
         */
        public static MemorySegment lookup(MemorySegment union)
        {
            return union.asSlice(lookup$OFFSET, lookup$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     H5O_token_t *token_ptr;
         * } lookup
         * }
         */
        public static void lookup(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, lookup$OFFSET, lookup$LAYOUT.byteSize());
        }

        private static final GroupLayout visit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("visit"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * H5VL_object_visit_args_t visit
         * }
         */
        public static final GroupLayout visit$layout() { return visit$LAYOUT; }

        private static final long visit$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * H5VL_object_visit_args_t visit
         * }
         */
        public static final long visit$offset() { return visit$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * H5VL_object_visit_args_t visit
         * }
         */
        public static MemorySegment visit(MemorySegment union)
        {
            return union.asSlice(visit$OFFSET, visit$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * H5VL_object_visit_args_t visit
         * }
         */
        public static void visit(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, visit$OFFSET, visit$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     hid_t obj_id;
         * }
         * }
         */
        public static class flush {

            flush()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_LONG.withName("obj_id")).withName("$anon$758:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final OfLong obj_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("obj_id"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hid_t obj_id
             * }
             */
            public static final OfLong obj_id$layout() { return obj_id$LAYOUT; }

            private static final long obj_id$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hid_t obj_id
             * }
             */
            public static final long obj_id$offset() { return obj_id$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hid_t obj_id
             * }
             */
            public static long obj_id(MemorySegment struct)
            {
                return struct.get(obj_id$LAYOUT, obj_id$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hid_t obj_id
             * }
             */
            public static void obj_id(MemorySegment struct, long fieldValue)
            {
                struct.set(obj_id$LAYOUT, obj_id$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout flush$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flush"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t obj_id;
         * } flush
         * }
         */
        public static final GroupLayout flush$layout() { return flush$LAYOUT; }

        private static final long flush$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t obj_id;
         * } flush
         * }
         */
        public static final long flush$offset() { return flush$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t obj_id;
         * } flush
         * }
         */
        public static MemorySegment flush(MemorySegment union)
        {
            return union.asSlice(flush$OFFSET, flush$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t obj_id;
         * } flush
         * }
         */
        public static void flush(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, flush$OFFSET, flush$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     hid_t obj_id;
         * }
         * }
         */
        public static class refresh {

            refresh()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_LONG.withName("obj_id")).withName("$anon$763:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final OfLong obj_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("obj_id"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hid_t obj_id
             * }
             */
            public static final OfLong obj_id$layout() { return obj_id$LAYOUT; }

            private static final long obj_id$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hid_t obj_id
             * }
             */
            public static final long obj_id$offset() { return obj_id$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hid_t obj_id
             * }
             */
            public static long obj_id(MemorySegment struct)
            {
                return struct.get(obj_id$LAYOUT, obj_id$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hid_t obj_id
             * }
             */
            public static void obj_id(MemorySegment struct, long fieldValue)
            {
                struct.set(obj_id$LAYOUT, obj_id$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout refresh$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("refresh"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t obj_id;
         * } refresh
         * }
         */
        public static final GroupLayout refresh$layout() { return refresh$LAYOUT; }

        private static final long refresh$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t obj_id;
         * } refresh
         * }
         */
        public static final long refresh$offset() { return refresh$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t obj_id;
         * } refresh
         * }
         */
        public static MemorySegment refresh(MemorySegment union)
        {
            return union.asSlice(refresh$OFFSET, refresh$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t obj_id;
         * } refresh
         * }
         */
        public static void refresh(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, refresh$OFFSET, refresh$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index)
        {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator)
        {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
        {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout args$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("args"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         int delta;
     *     } change_rc;
     *     struct {
     *         hbool_t *exists;
     *     } exists;
     *     struct {
     *         H5O_token_t *token_ptr;
     *     } lookup;
     *     H5VL_object_visit_args_t visit;
     *     struct {
     *         hid_t obj_id;
     *     } flush;
     *     struct {
     *         hid_t obj_id;
     *     } refresh;
     * } args
     * }
     */
    public static final GroupLayout args$layout() { return args$LAYOUT; }

    private static final long args$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         int delta;
     *     } change_rc;
     *     struct {
     *         hbool_t *exists;
     *     } exists;
     *     struct {
     *         H5O_token_t *token_ptr;
     *     } lookup;
     *     H5VL_object_visit_args_t visit;
     *     struct {
     *         hid_t obj_id;
     *     } flush;
     *     struct {
     *         hid_t obj_id;
     *     } refresh;
     * } args
     * }
     */
    public static final long args$offset() { return args$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         int delta;
     *     } change_rc;
     *     struct {
     *         hbool_t *exists;
     *     } exists;
     *     struct {
     *         H5O_token_t *token_ptr;
     *     } lookup;
     *     H5VL_object_visit_args_t visit;
     *     struct {
     *         hid_t obj_id;
     *     } flush;
     *     struct {
     *         hid_t obj_id;
     *     } refresh;
     * } args
     * }
     */
    public static MemorySegment args(MemorySegment struct)
    {
        return struct.asSlice(args$OFFSET, args$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         int delta;
     *     } change_rc;
     *     struct {
     *         hbool_t *exists;
     *     } exists;
     *     struct {
     *         H5O_token_t *token_ptr;
     *     } lookup;
     *     H5VL_object_visit_args_t visit;
     *     struct {
     *         hid_t obj_id;
     *     } flush;
     *     struct {
     *         hid_t obj_id;
     *     } refresh;
     * } args
     * }
     */
    public static void args(MemorySegment struct, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, struct, args$OFFSET, args$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
