// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5VL_attr_get_info_args_t {
 *     H5VL_loc_params_t loc_params;
 *     const char *attr_name;
 *     H5A_info_t *ainfo;
 * }
 * }
 */
public class H5VL_attr_get_info_args_t {

    H5VL_attr_get_info_args_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(H5VL_loc_params_t.layout().withName("loc_params"),
                          hdf5_h.C_POINTER.withName("attr_name"), hdf5_h.C_POINTER.withName("ainfo"))
            .withName("H5VL_attr_get_info_args_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final GroupLayout loc_params$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("loc_params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_loc_params_t loc_params
     * }
     */
    public static final GroupLayout loc_params$layout() { return loc_params$LAYOUT; }

    private static final long loc_params$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_loc_params_t loc_params
     * }
     */
    public static final long loc_params$offset() { return loc_params$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_loc_params_t loc_params
     * }
     */
    public static MemorySegment loc_params(MemorySegment struct)
    {
        return struct.asSlice(loc_params$OFFSET, loc_params$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_loc_params_t loc_params
     * }
     */
    public static void loc_params(MemorySegment struct, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, struct, loc_params$OFFSET, loc_params$LAYOUT.byteSize());
    }

    private static final AddressLayout attr_name$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("attr_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *attr_name
     * }
     */
    public static final AddressLayout attr_name$layout() { return attr_name$LAYOUT; }

    private static final long attr_name$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *attr_name
     * }
     */
    public static final long attr_name$offset() { return attr_name$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *attr_name
     * }
     */
    public static MemorySegment attr_name(MemorySegment struct)
    {
        return struct.get(attr_name$LAYOUT, attr_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *attr_name
     * }
     */
    public static void attr_name(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(attr_name$LAYOUT, attr_name$OFFSET, fieldValue);
    }

    private static final AddressLayout ainfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ainfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5A_info_t *ainfo
     * }
     */
    public static final AddressLayout ainfo$layout() { return ainfo$LAYOUT; }

    private static final long ainfo$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5A_info_t *ainfo
     * }
     */
    public static final long ainfo$offset() { return ainfo$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5A_info_t *ainfo
     * }
     */
    public static MemorySegment ainfo(MemorySegment struct) { return struct.get(ainfo$LAYOUT, ainfo$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5A_info_t *ainfo
     * }
     */
    public static void ainfo(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(ainfo$LAYOUT, ainfo$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
