// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5AC_cache_image_config_t {
 *     int version;
 *     hbool_t generate_image;
 *     hbool_t save_resize_status;
 *     int entry_ageout;
 * }
 * }
 */
public class H5AC_cache_image_config_t {

    H5AC_cache_image_config_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_INT.withName("version"),
        hdf5_h.C_BOOL.withName("generate_image"),
        hdf5_h.C_BOOL.withName("save_resize_status"),
        MemoryLayout.paddingLayout(2),
        hdf5_h.C_INT.withName("entry_ageout")
    ).withName("H5AC_cache_image_config_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfBoolean generate_image$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("generate_image"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hbool_t generate_image
     * }
     */
    public static final OfBoolean generate_image$layout() {
        return generate_image$LAYOUT;
    }

    private static final long generate_image$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hbool_t generate_image
     * }
     */
    public static final long generate_image$offset() {
        return generate_image$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hbool_t generate_image
     * }
     */
    public static boolean generate_image(MemorySegment struct) {
        return struct.get(generate_image$LAYOUT, generate_image$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hbool_t generate_image
     * }
     */
    public static void generate_image(MemorySegment struct, boolean fieldValue) {
        struct.set(generate_image$LAYOUT, generate_image$OFFSET, fieldValue);
    }

    private static final OfBoolean save_resize_status$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("save_resize_status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hbool_t save_resize_status
     * }
     */
    public static final OfBoolean save_resize_status$layout() {
        return save_resize_status$LAYOUT;
    }

    private static final long save_resize_status$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hbool_t save_resize_status
     * }
     */
    public static final long save_resize_status$offset() {
        return save_resize_status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hbool_t save_resize_status
     * }
     */
    public static boolean save_resize_status(MemorySegment struct) {
        return struct.get(save_resize_status$LAYOUT, save_resize_status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hbool_t save_resize_status
     * }
     */
    public static void save_resize_status(MemorySegment struct, boolean fieldValue) {
        struct.set(save_resize_status$LAYOUT, save_resize_status$OFFSET, fieldValue);
    }

    private static final OfInt entry_ageout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("entry_ageout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int entry_ageout
     * }
     */
    public static final OfInt entry_ageout$layout() {
        return entry_ageout$LAYOUT;
    }

    private static final long entry_ageout$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int entry_ageout
     * }
     */
    public static final long entry_ageout$offset() {
        return entry_ageout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int entry_ageout
     * }
     */
    public static int entry_ageout(MemorySegment struct) {
        return struct.get(entry_ageout$LAYOUT, entry_ageout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int entry_ageout
     * }
     */
    public static void entry_ageout(MemorySegment struct, int fieldValue) {
        struct.set(entry_ageout$LAYOUT, entry_ageout$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

