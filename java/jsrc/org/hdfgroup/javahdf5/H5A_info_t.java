// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     hbool_t corder_valid;
 *     H5O_msg_crt_idx_t corder;
 *     H5T_cset_t cset;
 *     hsize_t data_size;
 * }
 * }
 */
public class H5A_info_t {

    H5A_info_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_BOOL.withName("corder_valid"),
        MemoryLayout.paddingLayout(3),
        hdf5_h.C_INT.withName("corder"),
        hdf5_h.C_INT.withName("cset"),
        MemoryLayout.paddingLayout(4),
        hdf5_h.C_LONG.withName("data_size")
    ).withName("$anon$28:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean corder_valid$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("corder_valid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hbool_t corder_valid
     * }
     */
    public static final OfBoolean corder_valid$layout() {
        return corder_valid$LAYOUT;
    }

    private static final long corder_valid$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hbool_t corder_valid
     * }
     */
    public static final long corder_valid$offset() {
        return corder_valid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hbool_t corder_valid
     * }
     */
    public static boolean corder_valid(MemorySegment struct) {
        return struct.get(corder_valid$LAYOUT, corder_valid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hbool_t corder_valid
     * }
     */
    public static void corder_valid(MemorySegment struct, boolean fieldValue) {
        struct.set(corder_valid$LAYOUT, corder_valid$OFFSET, fieldValue);
    }

    private static final OfInt corder$LAYOUT = (OfInt)$LAYOUT.select(groupElement("corder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5O_msg_crt_idx_t corder
     * }
     */
    public static final OfInt corder$layout() {
        return corder$LAYOUT;
    }

    private static final long corder$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5O_msg_crt_idx_t corder
     * }
     */
    public static final long corder$offset() {
        return corder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5O_msg_crt_idx_t corder
     * }
     */
    public static int corder(MemorySegment struct) {
        return struct.get(corder$LAYOUT, corder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5O_msg_crt_idx_t corder
     * }
     */
    public static void corder(MemorySegment struct, int fieldValue) {
        struct.set(corder$LAYOUT, corder$OFFSET, fieldValue);
    }

    private static final OfInt cset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5T_cset_t cset
     * }
     */
    public static final OfInt cset$layout() {
        return cset$LAYOUT;
    }

    private static final long cset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5T_cset_t cset
     * }
     */
    public static final long cset$offset() {
        return cset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5T_cset_t cset
     * }
     */
    public static int cset(MemorySegment struct) {
        return struct.get(cset$LAYOUT, cset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5T_cset_t cset
     * }
     */
    public static void cset(MemorySegment struct, int fieldValue) {
        struct.set(cset$LAYOUT, cset$OFFSET, fieldValue);
    }

    private static final OfLong data_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("data_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t data_size
     * }
     */
    public static final OfLong data_size$layout() {
        return data_size$LAYOUT;
    }

    private static final long data_size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t data_size
     * }
     */
    public static final long data_size$offset() {
        return data_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t data_size
     * }
     */
    public static long data_size(MemorySegment struct) {
        return struct.get(data_size$LAYOUT, data_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t data_size
     * }
     */
    public static void data_size(MemorySegment struct, long fieldValue) {
        struct.set(data_size$LAYOUT, data_size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

