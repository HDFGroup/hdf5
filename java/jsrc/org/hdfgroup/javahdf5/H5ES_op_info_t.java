// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5ES_op_info_t {
 *     const char *api_name;
 *     char *api_args;
 *     const char *app_file_name;
 *     const char *app_func_name;
 *     unsigned int app_line_num;
 *     uint64_t op_ins_count;
 *     uint64_t op_ins_ts;
 *     uint64_t op_exec_ts;
 *     uint64_t op_exec_time;
 * }
 * }
 */
public class H5ES_op_info_t {

    H5ES_op_info_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(hdf5_h.C_POINTER.withName("api_name"), hdf5_h.C_POINTER.withName("api_args"),
                          hdf5_h.C_POINTER.withName("app_file_name"),
                          hdf5_h.C_POINTER.withName("app_func_name"), hdf5_h.C_INT.withName("app_line_num"),
                          MemoryLayout.paddingLayout(4), hdf5_h.C_LONG.withName("op_ins_count"),
                          hdf5_h.C_LONG.withName("op_ins_ts"), hdf5_h.C_LONG.withName("op_exec_ts"),
                          hdf5_h.C_LONG.withName("op_exec_time"))
            .withName("H5ES_op_info_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final AddressLayout api_name$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("api_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *api_name
     * }
     */
    public static final AddressLayout api_name$layout() { return api_name$LAYOUT; }

    private static final long api_name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *api_name
     * }
     */
    public static final long api_name$offset() { return api_name$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *api_name
     * }
     */
    public static MemorySegment api_name(MemorySegment struct)
    {
        return struct.get(api_name$LAYOUT, api_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *api_name
     * }
     */
    public static void api_name(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(api_name$LAYOUT, api_name$OFFSET, fieldValue);
    }

    private static final AddressLayout api_args$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("api_args"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *api_args
     * }
     */
    public static final AddressLayout api_args$layout() { return api_args$LAYOUT; }

    private static final long api_args$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *api_args
     * }
     */
    public static final long api_args$offset() { return api_args$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *api_args
     * }
     */
    public static MemorySegment api_args(MemorySegment struct)
    {
        return struct.get(api_args$LAYOUT, api_args$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *api_args
     * }
     */
    public static void api_args(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(api_args$LAYOUT, api_args$OFFSET, fieldValue);
    }

    private static final AddressLayout app_file_name$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("app_file_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *app_file_name
     * }
     */
    public static final AddressLayout app_file_name$layout() { return app_file_name$LAYOUT; }

    private static final long app_file_name$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *app_file_name
     * }
     */
    public static final long app_file_name$offset() { return app_file_name$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *app_file_name
     * }
     */
    public static MemorySegment app_file_name(MemorySegment struct)
    {
        return struct.get(app_file_name$LAYOUT, app_file_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *app_file_name
     * }
     */
    public static void app_file_name(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(app_file_name$LAYOUT, app_file_name$OFFSET, fieldValue);
    }

    private static final AddressLayout app_func_name$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("app_func_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *app_func_name
     * }
     */
    public static final AddressLayout app_func_name$layout() { return app_func_name$LAYOUT; }

    private static final long app_func_name$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *app_func_name
     * }
     */
    public static final long app_func_name$offset() { return app_func_name$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *app_func_name
     * }
     */
    public static MemorySegment app_func_name(MemorySegment struct)
    {
        return struct.get(app_func_name$LAYOUT, app_func_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *app_func_name
     * }
     */
    public static void app_func_name(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(app_func_name$LAYOUT, app_func_name$OFFSET, fieldValue);
    }

    private static final OfInt app_line_num$LAYOUT = (OfInt)$LAYOUT.select(groupElement("app_line_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int app_line_num
     * }
     */
    public static final OfInt app_line_num$layout() { return app_line_num$LAYOUT; }

    private static final long app_line_num$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int app_line_num
     * }
     */
    public static final long app_line_num$offset() { return app_line_num$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int app_line_num
     * }
     */
    public static int app_line_num(MemorySegment struct)
    {
        return struct.get(app_line_num$LAYOUT, app_line_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int app_line_num
     * }
     */
    public static void app_line_num(MemorySegment struct, int fieldValue)
    {
        struct.set(app_line_num$LAYOUT, app_line_num$OFFSET, fieldValue);
    }

    private static final OfLong op_ins_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("op_ins_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t op_ins_count
     * }
     */
    public static final OfLong op_ins_count$layout() { return op_ins_count$LAYOUT; }

    private static final long op_ins_count$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t op_ins_count
     * }
     */
    public static final long op_ins_count$offset() { return op_ins_count$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t op_ins_count
     * }
     */
    public static long op_ins_count(MemorySegment struct)
    {
        return struct.get(op_ins_count$LAYOUT, op_ins_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t op_ins_count
     * }
     */
    public static void op_ins_count(MemorySegment struct, long fieldValue)
    {
        struct.set(op_ins_count$LAYOUT, op_ins_count$OFFSET, fieldValue);
    }

    private static final OfLong op_ins_ts$LAYOUT = (OfLong)$LAYOUT.select(groupElement("op_ins_ts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t op_ins_ts
     * }
     */
    public static final OfLong op_ins_ts$layout() { return op_ins_ts$LAYOUT; }

    private static final long op_ins_ts$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t op_ins_ts
     * }
     */
    public static final long op_ins_ts$offset() { return op_ins_ts$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t op_ins_ts
     * }
     */
    public static long op_ins_ts(MemorySegment struct)
    {
        return struct.get(op_ins_ts$LAYOUT, op_ins_ts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t op_ins_ts
     * }
     */
    public static void op_ins_ts(MemorySegment struct, long fieldValue)
    {
        struct.set(op_ins_ts$LAYOUT, op_ins_ts$OFFSET, fieldValue);
    }

    private static final OfLong op_exec_ts$LAYOUT = (OfLong)$LAYOUT.select(groupElement("op_exec_ts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t op_exec_ts
     * }
     */
    public static final OfLong op_exec_ts$layout() { return op_exec_ts$LAYOUT; }

    private static final long op_exec_ts$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t op_exec_ts
     * }
     */
    public static final long op_exec_ts$offset() { return op_exec_ts$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t op_exec_ts
     * }
     */
    public static long op_exec_ts(MemorySegment struct)
    {
        return struct.get(op_exec_ts$LAYOUT, op_exec_ts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t op_exec_ts
     * }
     */
    public static void op_exec_ts(MemorySegment struct, long fieldValue)
    {
        struct.set(op_exec_ts$LAYOUT, op_exec_ts$OFFSET, fieldValue);
    }

    private static final OfLong op_exec_time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("op_exec_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t op_exec_time
     * }
     */
    public static final OfLong op_exec_time$layout() { return op_exec_time$LAYOUT; }

    private static final long op_exec_time$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t op_exec_time
     * }
     */
    public static final long op_exec_time$offset() { return op_exec_time$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t op_exec_time
     * }
     */
    public static long op_exec_time(MemorySegment struct)
    {
        return struct.get(op_exec_time$LAYOUT, op_exec_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t op_exec_time
     * }
     */
    public static void op_exec_time(MemorySegment struct, long fieldValue)
    {
        struct.set(op_exec_time$LAYOUT, op_exec_time$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
