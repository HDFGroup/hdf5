// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5VL_native_file_get_mdc_size_t {
 *     size_t *max_size;
 *     size_t *min_clean_size;
 *     size_t *cur_size;
 *     uint32_t *cur_num_entries;
 * }
 * }
 */
public class H5VL_native_file_get_mdc_size_t {

    H5VL_native_file_get_mdc_size_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_POINTER.withName("max_size"),
        hdf5_h.C_POINTER.withName("min_clean_size"),
        hdf5_h.C_POINTER.withName("cur_size"),
        hdf5_h.C_POINTER.withName("cur_num_entries")
    ).withName("H5VL_native_file_get_mdc_size_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout max_size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("max_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t *max_size
     * }
     */
    public static final AddressLayout max_size$layout() {
        return max_size$LAYOUT;
    }

    private static final long max_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t *max_size
     * }
     */
    public static final long max_size$offset() {
        return max_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t *max_size
     * }
     */
    public static MemorySegment max_size(MemorySegment struct) {
        return struct.get(max_size$LAYOUT, max_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t *max_size
     * }
     */
    public static void max_size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(max_size$LAYOUT, max_size$OFFSET, fieldValue);
    }

    private static final AddressLayout min_clean_size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("min_clean_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t *min_clean_size
     * }
     */
    public static final AddressLayout min_clean_size$layout() {
        return min_clean_size$LAYOUT;
    }

    private static final long min_clean_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t *min_clean_size
     * }
     */
    public static final long min_clean_size$offset() {
        return min_clean_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t *min_clean_size
     * }
     */
    public static MemorySegment min_clean_size(MemorySegment struct) {
        return struct.get(min_clean_size$LAYOUT, min_clean_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t *min_clean_size
     * }
     */
    public static void min_clean_size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(min_clean_size$LAYOUT, min_clean_size$OFFSET, fieldValue);
    }

    private static final AddressLayout cur_size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cur_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t *cur_size
     * }
     */
    public static final AddressLayout cur_size$layout() {
        return cur_size$LAYOUT;
    }

    private static final long cur_size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t *cur_size
     * }
     */
    public static final long cur_size$offset() {
        return cur_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t *cur_size
     * }
     */
    public static MemorySegment cur_size(MemorySegment struct) {
        return struct.get(cur_size$LAYOUT, cur_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t *cur_size
     * }
     */
    public static void cur_size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cur_size$LAYOUT, cur_size$OFFSET, fieldValue);
    }

    private static final AddressLayout cur_num_entries$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cur_num_entries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t *cur_num_entries
     * }
     */
    public static final AddressLayout cur_num_entries$layout() {
        return cur_num_entries$LAYOUT;
    }

    private static final long cur_num_entries$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t *cur_num_entries
     * }
     */
    public static final long cur_num_entries$offset() {
        return cur_num_entries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t *cur_num_entries
     * }
     */
    public static MemorySegment cur_num_entries(MemorySegment struct) {
        return struct.get(cur_num_entries$LAYOUT, cur_num_entries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t *cur_num_entries
     * }
     */
    public static void cur_num_entries(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cur_num_entries$LAYOUT, cur_num_entries$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

