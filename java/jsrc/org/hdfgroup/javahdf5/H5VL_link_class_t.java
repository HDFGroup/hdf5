// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5VL_link_class_t {
 *     herr_t (*create)(H5VL_link_create_args_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **);
 *     herr_t (*copy)(void *, const H5VL_loc_params_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **);
 *     herr_t (*move)(void *, const H5VL_loc_params_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **);
 *     herr_t (*get)(void *, const H5VL_loc_params_t *, H5VL_link_get_args_t *, hid_t, void **);
 *     herr_t (*specific)(void *, const H5VL_loc_params_t *, H5VL_link_specific_args_t *, hid_t, void **);
 *     herr_t (*optional)(void *, const H5VL_loc_params_t *, H5VL_optional_args_t *, hid_t, void **);
 * }
 * }
 */
public class H5VL_link_class_t {

    H5VL_link_class_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_POINTER.withName("create"),
        hdf5_h.C_POINTER.withName("copy"),
        hdf5_h.C_POINTER.withName("move"),
        hdf5_h.C_POINTER.withName("get"),
        hdf5_h.C_POINTER.withName("specific"),
        hdf5_h.C_POINTER.withName("optional")
    ).withName("H5VL_link_class_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * herr_t (*create)(H5VL_link_create_args_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static class create {

        create() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, long _x3, long _x4, long _x5, MemorySegment _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(create.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(create.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, long _x3, long _x4, long _x5, MemorySegment _x6) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout create$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("create"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*create)(H5VL_link_create_args_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static final AddressLayout create$layout() {
        return create$LAYOUT;
    }

    private static final long create$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*create)(H5VL_link_create_args_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static final long create$offset() {
        return create$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*create)(H5VL_link_create_args_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static MemorySegment create(MemorySegment struct) {
        return struct.get(create$LAYOUT, create$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*create)(H5VL_link_create_args_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static void create(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(create$LAYOUT, create$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*copy)(void *, const H5VL_loc_params_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static class copy {

        copy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, long _x4, long _x5, long _x6, MemorySegment _x7);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(copy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(copy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, long _x4, long _x5, long _x6, MemorySegment _x7) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout copy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("copy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*copy)(void *, const H5VL_loc_params_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static final AddressLayout copy$layout() {
        return copy$LAYOUT;
    }

    private static final long copy$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*copy)(void *, const H5VL_loc_params_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static final long copy$offset() {
        return copy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*copy)(void *, const H5VL_loc_params_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static MemorySegment copy(MemorySegment struct) {
        return struct.get(copy$LAYOUT, copy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*copy)(void *, const H5VL_loc_params_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static void copy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(copy$LAYOUT, copy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*move)(void *, const H5VL_loc_params_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static class move {

        move() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, long _x4, long _x5, long _x6, MemorySegment _x7);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(move.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(move.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, long _x4, long _x5, long _x6, MemorySegment _x7) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout move$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("move"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*move)(void *, const H5VL_loc_params_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static final AddressLayout move$layout() {
        return move$LAYOUT;
    }

    private static final long move$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*move)(void *, const H5VL_loc_params_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static final long move$offset() {
        return move$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*move)(void *, const H5VL_loc_params_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static MemorySegment move(MemorySegment struct) {
        return struct.get(move$LAYOUT, move$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*move)(void *, const H5VL_loc_params_t *, void *, const H5VL_loc_params_t *, hid_t, hid_t, hid_t, void **)
     * }
     */
    public static void move(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(move$LAYOUT, move$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*get)(void *, const H5VL_loc_params_t *, H5VL_link_get_args_t *, hid_t, void **)
     * }
     */
    public static class get {

        get() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, long _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(get.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, long _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*get)(void *, const H5VL_loc_params_t *, H5VL_link_get_args_t *, hid_t, void **)
     * }
     */
    public static final AddressLayout get$layout() {
        return get$LAYOUT;
    }

    private static final long get$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*get)(void *, const H5VL_loc_params_t *, H5VL_link_get_args_t *, hid_t, void **)
     * }
     */
    public static final long get$offset() {
        return get$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*get)(void *, const H5VL_loc_params_t *, H5VL_link_get_args_t *, hid_t, void **)
     * }
     */
    public static MemorySegment get(MemorySegment struct) {
        return struct.get(get$LAYOUT, get$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*get)(void *, const H5VL_loc_params_t *, H5VL_link_get_args_t *, hid_t, void **)
     * }
     */
    public static void get(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get$LAYOUT, get$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*specific)(void *, const H5VL_loc_params_t *, H5VL_link_specific_args_t *, hid_t, void **)
     * }
     */
    public static class specific {

        specific() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, long _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(specific.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(specific.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, long _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout specific$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("specific"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*specific)(void *, const H5VL_loc_params_t *, H5VL_link_specific_args_t *, hid_t, void **)
     * }
     */
    public static final AddressLayout specific$layout() {
        return specific$LAYOUT;
    }

    private static final long specific$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*specific)(void *, const H5VL_loc_params_t *, H5VL_link_specific_args_t *, hid_t, void **)
     * }
     */
    public static final long specific$offset() {
        return specific$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*specific)(void *, const H5VL_loc_params_t *, H5VL_link_specific_args_t *, hid_t, void **)
     * }
     */
    public static MemorySegment specific(MemorySegment struct) {
        return struct.get(specific$LAYOUT, specific$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*specific)(void *, const H5VL_loc_params_t *, H5VL_link_specific_args_t *, hid_t, void **)
     * }
     */
    public static void specific(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(specific$LAYOUT, specific$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*optional)(void *, const H5VL_loc_params_t *, H5VL_optional_args_t *, hid_t, void **)
     * }
     */
    public static class optional {

        optional() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, long _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_LONG,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(optional.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(optional.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, long _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout optional$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("optional"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*optional)(void *, const H5VL_loc_params_t *, H5VL_optional_args_t *, hid_t, void **)
     * }
     */
    public static final AddressLayout optional$layout() {
        return optional$LAYOUT;
    }

    private static final long optional$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*optional)(void *, const H5VL_loc_params_t *, H5VL_optional_args_t *, hid_t, void **)
     * }
     */
    public static final long optional$offset() {
        return optional$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*optional)(void *, const H5VL_loc_params_t *, H5VL_optional_args_t *, hid_t, void **)
     * }
     */
    public static MemorySegment optional(MemorySegment struct) {
        return struct.get(optional$LAYOUT, optional$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*optional)(void *, const H5VL_loc_params_t *, H5VL_optional_args_t *, hid_t, void **)
     * }
     */
    public static void optional(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(optional$LAYOUT, optional$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

