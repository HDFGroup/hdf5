// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct {
 *     int version;
 *     H5L_type_t id;
 *     const char *comment;
 *     H5L_create_func_t create_func;
 *     H5L_move_func_t move_func;
 *     H5L_copy_func_t copy_func;
 *     H5L_traverse_0_func_t trav_func;
 *     H5L_delete_func_t del_func;
 *     H5L_query_func_t query_func;
 * }
 * }
 */
public class H5L_class_0_t {

    H5L_class_0_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(hdf5_h.C_INT.withName("version"), hdf5_h.C_INT.withName("id"),
                          hdf5_h.C_POINTER.withName("comment"), hdf5_h.C_POINTER.withName("create_func"),
                          hdf5_h.C_POINTER.withName("move_func"), hdf5_h.C_POINTER.withName("copy_func"),
                          hdf5_h.C_POINTER.withName("trav_func"), hdf5_h.C_POINTER.withName("del_func"),
                          hdf5_h.C_POINTER.withName("query_func"))
            .withName("$anon$310:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static final OfInt version$layout() { return version$LAYOUT; }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static final long version$offset() { return version$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static int version(MemorySegment struct) { return struct.get(version$LAYOUT, version$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue)
    {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5L_type_t id
     * }
     */
    public static final OfInt id$layout() { return id$LAYOUT; }

    private static final long id$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5L_type_t id
     * }
     */
    public static final long id$offset() { return id$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5L_type_t id
     * }
     */
    public static int id(MemorySegment struct) { return struct.get(id$LAYOUT, id$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5L_type_t id
     * }
     */
    public static void id(MemorySegment struct, int fieldValue)
    {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final AddressLayout comment$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("comment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *comment
     * }
     */
    public static final AddressLayout comment$layout() { return comment$LAYOUT; }

    private static final long comment$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *comment
     * }
     */
    public static final long comment$offset() { return comment$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *comment
     * }
     */
    public static MemorySegment comment(MemorySegment struct)
    {
        return struct.get(comment$LAYOUT, comment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *comment
     * }
     */
    public static void comment(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(comment$LAYOUT, comment$OFFSET, fieldValue);
    }

    private static final AddressLayout create_func$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("create_func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5L_create_func_t create_func
     * }
     */
    public static final AddressLayout create_func$layout() { return create_func$LAYOUT; }

    private static final long create_func$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5L_create_func_t create_func
     * }
     */
    public static final long create_func$offset() { return create_func$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5L_create_func_t create_func
     * }
     */
    public static MemorySegment create_func(MemorySegment struct)
    {
        return struct.get(create_func$LAYOUT, create_func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5L_create_func_t create_func
     * }
     */
    public static void create_func(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(create_func$LAYOUT, create_func$OFFSET, fieldValue);
    }

    private static final AddressLayout move_func$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("move_func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5L_move_func_t move_func
     * }
     */
    public static final AddressLayout move_func$layout() { return move_func$LAYOUT; }

    private static final long move_func$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5L_move_func_t move_func
     * }
     */
    public static final long move_func$offset() { return move_func$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5L_move_func_t move_func
     * }
     */
    public static MemorySegment move_func(MemorySegment struct)
    {
        return struct.get(move_func$LAYOUT, move_func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5L_move_func_t move_func
     * }
     */
    public static void move_func(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(move_func$LAYOUT, move_func$OFFSET, fieldValue);
    }

    private static final AddressLayout copy_func$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("copy_func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5L_copy_func_t copy_func
     * }
     */
    public static final AddressLayout copy_func$layout() { return copy_func$LAYOUT; }

    private static final long copy_func$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5L_copy_func_t copy_func
     * }
     */
    public static final long copy_func$offset() { return copy_func$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5L_copy_func_t copy_func
     * }
     */
    public static MemorySegment copy_func(MemorySegment struct)
    {
        return struct.get(copy_func$LAYOUT, copy_func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5L_copy_func_t copy_func
     * }
     */
    public static void copy_func(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(copy_func$LAYOUT, copy_func$OFFSET, fieldValue);
    }

    private static final AddressLayout trav_func$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("trav_func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5L_traverse_0_func_t trav_func
     * }
     */
    public static final AddressLayout trav_func$layout() { return trav_func$LAYOUT; }

    private static final long trav_func$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5L_traverse_0_func_t trav_func
     * }
     */
    public static final long trav_func$offset() { return trav_func$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5L_traverse_0_func_t trav_func
     * }
     */
    public static MemorySegment trav_func(MemorySegment struct)
    {
        return struct.get(trav_func$LAYOUT, trav_func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5L_traverse_0_func_t trav_func
     * }
     */
    public static void trav_func(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(trav_func$LAYOUT, trav_func$OFFSET, fieldValue);
    }

    private static final AddressLayout del_func$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("del_func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5L_delete_func_t del_func
     * }
     */
    public static final AddressLayout del_func$layout() { return del_func$LAYOUT; }

    private static final long del_func$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5L_delete_func_t del_func
     * }
     */
    public static final long del_func$offset() { return del_func$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5L_delete_func_t del_func
     * }
     */
    public static MemorySegment del_func(MemorySegment struct)
    {
        return struct.get(del_func$LAYOUT, del_func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5L_delete_func_t del_func
     * }
     */
    public static void del_func(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(del_func$LAYOUT, del_func$OFFSET, fieldValue);
    }

    private static final AddressLayout query_func$LAYOUT =
        (AddressLayout)$LAYOUT.select(groupElement("query_func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5L_query_func_t query_func
     * }
     */
    public static final AddressLayout query_func$layout() { return query_func$LAYOUT; }

    private static final long query_func$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5L_query_func_t query_func
     * }
     */
    public static final long query_func$offset() { return query_func$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5L_query_func_t query_func
     * }
     */
    public static MemorySegment query_func(MemorySegment struct)
    {
        return struct.get(query_func$LAYOUT, query_func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5L_query_func_t query_func
     * }
     */
    public static void query_func(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(query_func$LAYOUT, query_func$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
