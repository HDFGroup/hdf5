// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5VL_introspect_class_t {
 *     herr_t (*get_conn_cls)(void *, H5VL_get_conn_lvl_t, const struct H5VL_class_t **);
 *     herr_t (*get_cap_flags)(const void *, uint64_t *);
 *     herr_t (*opt_query)(void *, H5VL_subclass_t, int, uint64_t *);
 * }
 * }
 */
public class H5VL_introspect_class_t {

    H5VL_introspect_class_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_POINTER.withName("get_conn_cls"),
        hdf5_h.C_POINTER.withName("get_cap_flags"),
        hdf5_h.C_POINTER.withName("opt_query")
    ).withName("H5VL_introspect_class_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * herr_t (*get_conn_cls)(void *, H5VL_get_conn_lvl_t, const struct H5VL_class_t **)
     * }
     */
    public static class get_conn_cls {

        get_conn_cls() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(get_conn_cls.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_conn_cls.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_conn_cls$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_conn_cls"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*get_conn_cls)(void *, H5VL_get_conn_lvl_t, const struct H5VL_class_t **)
     * }
     */
    public static final AddressLayout get_conn_cls$layout() {
        return get_conn_cls$LAYOUT;
    }

    private static final long get_conn_cls$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*get_conn_cls)(void *, H5VL_get_conn_lvl_t, const struct H5VL_class_t **)
     * }
     */
    public static final long get_conn_cls$offset() {
        return get_conn_cls$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*get_conn_cls)(void *, H5VL_get_conn_lvl_t, const struct H5VL_class_t **)
     * }
     */
    public static MemorySegment get_conn_cls(MemorySegment struct) {
        return struct.get(get_conn_cls$LAYOUT, get_conn_cls$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*get_conn_cls)(void *, H5VL_get_conn_lvl_t, const struct H5VL_class_t **)
     * }
     */
    public static void get_conn_cls(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_conn_cls$LAYOUT, get_conn_cls$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*get_cap_flags)(const void *, uint64_t *)
     * }
     */
    public static class get_cap_flags {

        get_cap_flags() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(get_cap_flags.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_cap_flags.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_cap_flags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_cap_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*get_cap_flags)(const void *, uint64_t *)
     * }
     */
    public static final AddressLayout get_cap_flags$layout() {
        return get_cap_flags$LAYOUT;
    }

    private static final long get_cap_flags$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*get_cap_flags)(const void *, uint64_t *)
     * }
     */
    public static final long get_cap_flags$offset() {
        return get_cap_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*get_cap_flags)(const void *, uint64_t *)
     * }
     */
    public static MemorySegment get_cap_flags(MemorySegment struct) {
        return struct.get(get_cap_flags$LAYOUT, get_cap_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*get_cap_flags)(const void *, uint64_t *)
     * }
     */
    public static void get_cap_flags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_cap_flags$LAYOUT, get_cap_flags$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*opt_query)(void *, H5VL_subclass_t, int, uint64_t *)
     * }
     */
    public static class opt_query {

        opt_query() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(opt_query.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(opt_query.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout opt_query$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("opt_query"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*opt_query)(void *, H5VL_subclass_t, int, uint64_t *)
     * }
     */
    public static final AddressLayout opt_query$layout() {
        return opt_query$LAYOUT;
    }

    private static final long opt_query$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*opt_query)(void *, H5VL_subclass_t, int, uint64_t *)
     * }
     */
    public static final long opt_query$offset() {
        return opt_query$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*opt_query)(void *, H5VL_subclass_t, int, uint64_t *)
     * }
     */
    public static MemorySegment opt_query(MemorySegment struct) {
        return struct.get(opt_query$LAYOUT, opt_query$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*opt_query)(void *, H5VL_subclass_t, int, uint64_t *)
     * }
     */
    public static void opt_query(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(opt_query$LAYOUT, opt_query$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

