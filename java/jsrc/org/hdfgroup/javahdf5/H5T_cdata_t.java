// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5T_cdata_t {
 *     H5T_cmd_t command;
 *     H5T_bkg_t need_bkg;
 *     hbool_t recalc;
 *     void *priv;
 * }
 * }
 */
public class H5T_cdata_t {

    H5T_cdata_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(hdf5_h.C_INT.withName("command"), hdf5_h.C_INT.withName("need_bkg"),
                          hdf5_h.C_BOOL.withName("recalc"), MemoryLayout.paddingLayout(7),
                          hdf5_h.C_POINTER.withName("priv"))
            .withName("H5T_cdata_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfInt command$LAYOUT = (OfInt)$LAYOUT.select(groupElement("command"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5T_cmd_t command
     * }
     */
    public static final OfInt command$layout() { return command$LAYOUT; }

    private static final long command$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5T_cmd_t command
     * }
     */
    public static final long command$offset() { return command$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5T_cmd_t command
     * }
     */
    public static int command(MemorySegment struct) { return struct.get(command$LAYOUT, command$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5T_cmd_t command
     * }
     */
    public static void command(MemorySegment struct, int fieldValue)
    {
        struct.set(command$LAYOUT, command$OFFSET, fieldValue);
    }

    private static final OfInt need_bkg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("need_bkg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5T_bkg_t need_bkg
     * }
     */
    public static final OfInt need_bkg$layout() { return need_bkg$LAYOUT; }

    private static final long need_bkg$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5T_bkg_t need_bkg
     * }
     */
    public static final long need_bkg$offset() { return need_bkg$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5T_bkg_t need_bkg
     * }
     */
    public static int need_bkg(MemorySegment struct) { return struct.get(need_bkg$LAYOUT, need_bkg$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5T_bkg_t need_bkg
     * }
     */
    public static void need_bkg(MemorySegment struct, int fieldValue)
    {
        struct.set(need_bkg$LAYOUT, need_bkg$OFFSET, fieldValue);
    }

    private static final OfBoolean recalc$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("recalc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hbool_t recalc
     * }
     */
    public static final OfBoolean recalc$layout() { return recalc$LAYOUT; }

    private static final long recalc$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hbool_t recalc
     * }
     */
    public static final long recalc$offset() { return recalc$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hbool_t recalc
     * }
     */
    public static boolean recalc(MemorySegment struct) { return struct.get(recalc$LAYOUT, recalc$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hbool_t recalc
     * }
     */
    public static void recalc(MemorySegment struct, boolean fieldValue)
    {
        struct.set(recalc$LAYOUT, recalc$OFFSET, fieldValue);
    }

    private static final AddressLayout priv$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("priv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *priv
     * }
     */
    public static final AddressLayout priv$layout() { return priv$LAYOUT; }

    private static final long priv$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *priv
     * }
     */
    public static final long priv$offset() { return priv$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *priv
     * }
     */
    public static MemorySegment priv(MemorySegment struct) { return struct.get(priv$LAYOUT, priv$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *priv
     * }
     */
    public static void priv(MemorySegment struct, MemorySegment fieldValue)
    {
        struct.set(priv$LAYOUT, priv$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
