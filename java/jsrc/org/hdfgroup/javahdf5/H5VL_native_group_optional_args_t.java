// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * union H5VL_native_group_optional_args_t {
 *     H5VL_native_group_iterate_old_t iterate_old;
 *     H5VL_native_group_get_objinfo_t get_objinfo;
 * }
 * }
 */
public class H5VL_native_group_optional_args_t {

    H5VL_native_group_optional_args_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .unionLayout(H5VL_native_group_iterate_old_t.layout().withName("iterate_old"),
                         H5VL_native_group_get_objinfo_t.layout().withName("get_objinfo"))
            .withName("H5VL_native_group_optional_args_t");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final GroupLayout iterate_old$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("iterate_old"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_native_group_iterate_old_t iterate_old
     * }
     */
    public static final GroupLayout iterate_old$layout() { return iterate_old$LAYOUT; }

    private static final long iterate_old$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_native_group_iterate_old_t iterate_old
     * }
     */
    public static final long iterate_old$offset() { return iterate_old$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_native_group_iterate_old_t iterate_old
     * }
     */
    public static MemorySegment iterate_old(MemorySegment union)
    {
        return union.asSlice(iterate_old$OFFSET, iterate_old$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_native_group_iterate_old_t iterate_old
     * }
     */
    public static void iterate_old(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, iterate_old$OFFSET, iterate_old$LAYOUT.byteSize());
    }

    private static final GroupLayout get_objinfo$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("get_objinfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_native_group_get_objinfo_t get_objinfo
     * }
     */
    public static final GroupLayout get_objinfo$layout() { return get_objinfo$LAYOUT; }

    private static final long get_objinfo$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_native_group_get_objinfo_t get_objinfo
     * }
     */
    public static final long get_objinfo$offset() { return get_objinfo$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_native_group_get_objinfo_t get_objinfo
     * }
     */
    public static MemorySegment get_objinfo(MemorySegment union)
    {
        return union.asSlice(get_objinfo$OFFSET, get_objinfo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_native_group_get_objinfo_t get_objinfo
     * }
     */
    public static void get_objinfo(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, get_objinfo$OFFSET, get_objinfo$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
