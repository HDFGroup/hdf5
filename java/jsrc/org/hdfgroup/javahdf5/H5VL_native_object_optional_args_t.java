// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * union H5VL_native_object_optional_args_t {
 *     H5VL_native_object_get_comment_t get_comment;
 *     struct {
 *         const char *comment;
 *     } set_comment;
 *     struct {
 *         hbool_t *flag;
 *     } are_mdc_flushes_disabled;
 *     H5VL_native_object_get_native_info_t get_native_info;
 * }
 * }
 */
public class H5VL_native_object_optional_args_t {

    H5VL_native_object_optional_args_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .unionLayout(H5VL_native_object_get_comment_t.layout().withName("get_comment"),
                         H5VL_native_object_optional_args_t.set_comment.layout().withName("set_comment"),
                         H5VL_native_object_optional_args_t.are_mdc_flushes_disabled.layout().withName(
                             "are_mdc_flushes_disabled"),
                         H5VL_native_object_get_native_info_t.layout().withName("get_native_info"))
            .withName("H5VL_native_object_optional_args_t");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final GroupLayout get_comment$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("get_comment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_native_object_get_comment_t get_comment
     * }
     */
    public static final GroupLayout get_comment$layout() { return get_comment$LAYOUT; }

    private static final long get_comment$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_native_object_get_comment_t get_comment
     * }
     */
    public static final long get_comment$offset() { return get_comment$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_native_object_get_comment_t get_comment
     * }
     */
    public static MemorySegment get_comment(MemorySegment union)
    {
        return union.asSlice(get_comment$OFFSET, get_comment$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_native_object_get_comment_t get_comment
     * }
     */
    public static void get_comment(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, get_comment$OFFSET, get_comment$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     const char *comment;
     * }
     * }
     */
    public static class set_comment {

        set_comment()
        {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT =
            MemoryLayout.structLayout(hdf5_h.C_POINTER.withName("comment")).withName("$anon$478:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() { return $LAYOUT; }

        private static final AddressLayout comment$LAYOUT =
            (AddressLayout)$LAYOUT.select(groupElement("comment"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * const char *comment
         * }
         */
        public static final AddressLayout comment$layout() { return comment$LAYOUT; }

        private static final long comment$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * const char *comment
         * }
         */
        public static final long comment$offset() { return comment$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * const char *comment
         * }
         */
        public static MemorySegment comment(MemorySegment struct)
        {
            return struct.get(comment$LAYOUT, comment$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * const char *comment
         * }
         */
        public static void comment(MemorySegment struct, MemorySegment fieldValue)
        {
            struct.set(comment$LAYOUT, comment$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index)
        {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator)
        {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
        {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout set_comment$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("set_comment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     const char *comment;
     * } set_comment
     * }
     */
    public static final GroupLayout set_comment$layout() { return set_comment$LAYOUT; }

    private static final long set_comment$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     const char *comment;
     * } set_comment
     * }
     */
    public static final long set_comment$offset() { return set_comment$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     const char *comment;
     * } set_comment
     * }
     */
    public static MemorySegment set_comment(MemorySegment union)
    {
        return union.asSlice(set_comment$OFFSET, set_comment$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     const char *comment;
     * } set_comment
     * }
     */
    public static void set_comment(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, set_comment$OFFSET, set_comment$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     hbool_t *flag;
     * }
     * }
     */
    public static class are_mdc_flushes_disabled {

        are_mdc_flushes_disabled()
        {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT =
            MemoryLayout.structLayout(hdf5_h.C_POINTER.withName("flag")).withName("$anon$489:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() { return $LAYOUT; }

        private static final AddressLayout flag$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("flag"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hbool_t *flag
         * }
         */
        public static final AddressLayout flag$layout() { return flag$LAYOUT; }

        private static final long flag$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hbool_t *flag
         * }
         */
        public static final long flag$offset() { return flag$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hbool_t *flag
         * }
         */
        public static MemorySegment flag(MemorySegment struct)
        {
            return struct.get(flag$LAYOUT, flag$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hbool_t *flag
         * }
         */
        public static void flag(MemorySegment struct, MemorySegment fieldValue)
        {
            struct.set(flag$LAYOUT, flag$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index)
        {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator)
        {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
        {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout are_mdc_flushes_disabled$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("are_mdc_flushes_disabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     hbool_t *flag;
     * } are_mdc_flushes_disabled
     * }
     */
    public static final GroupLayout are_mdc_flushes_disabled$layout()
    {
        return are_mdc_flushes_disabled$LAYOUT;
    }

    private static final long are_mdc_flushes_disabled$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     hbool_t *flag;
     * } are_mdc_flushes_disabled
     * }
     */
    public static final long are_mdc_flushes_disabled$offset() { return are_mdc_flushes_disabled$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     hbool_t *flag;
     * } are_mdc_flushes_disabled
     * }
     */
    public static MemorySegment are_mdc_flushes_disabled(MemorySegment union)
    {
        return union.asSlice(are_mdc_flushes_disabled$OFFSET, are_mdc_flushes_disabled$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     hbool_t *flag;
     * } are_mdc_flushes_disabled
     * }
     */
    public static void are_mdc_flushes_disabled(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, are_mdc_flushes_disabled$OFFSET,
                           are_mdc_flushes_disabled$LAYOUT.byteSize());
    }

    private static final GroupLayout get_native_info$LAYOUT =
        (GroupLayout)$LAYOUT.select(groupElement("get_native_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_native_object_get_native_info_t get_native_info
     * }
     */
    public static final GroupLayout get_native_info$layout() { return get_native_info$LAYOUT; }

    private static final long get_native_info$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_native_object_get_native_info_t get_native_info
     * }
     */
    public static final long get_native_info$offset() { return get_native_info$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_native_object_get_native_info_t get_native_info
     * }
     */
    public static MemorySegment get_native_info(MemorySegment union)
    {
        return union.asSlice(get_native_info$OFFSET, get_native_info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_native_object_get_native_info_t get_native_info
     * }
     */
    public static void get_native_info(MemorySegment union, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, union, get_native_info$OFFSET, get_native_info$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
