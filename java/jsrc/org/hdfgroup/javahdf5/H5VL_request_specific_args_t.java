// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5VL_request_specific_args_t {
 *     H5VL_request_specific_t op_type;
 *     union {
 *         struct {
 *             hid_t err_stack_id;
 *         } get_err_stack;
 *         struct {
 *             uint64_t *exec_ts;
 *             uint64_t *exec_time;
 *         } get_exec_time;
 *     } args;
 * }
 * }
 */
public class H5VL_request_specific_args_t {

    H5VL_request_specific_args_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(hdf5_h.C_INT.withName("op_type"), MemoryLayout.paddingLayout(4),
                          H5VL_request_specific_args_t.args.layout().withName("args"))
            .withName("H5VL_request_specific_args_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfInt op_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("op_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_request_specific_t op_type
     * }
     */
    public static final OfInt op_type$layout() { return op_type$LAYOUT; }

    private static final long op_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_request_specific_t op_type
     * }
     */
    public static final long op_type$offset() { return op_type$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_request_specific_t op_type
     * }
     */
    public static int op_type(MemorySegment struct) { return struct.get(op_type$LAYOUT, op_type$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_request_specific_t op_type
     * }
     */
    public static void op_type(MemorySegment struct, int fieldValue)
    {
        struct.set(op_type$LAYOUT, op_type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct {
     *         hid_t err_stack_id;
     *     } get_err_stack;
     *     struct {
     *         uint64_t *exec_ts;
     *         uint64_t *exec_time;
     *     } get_exec_time;
     * }
     * }
     */
    public static class args {

        args()
        {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT =
            MemoryLayout
                .unionLayout(
                    H5VL_request_specific_args_t.args.get_err_stack.layout().withName("get_err_stack"),
                    H5VL_request_specific_args_t.args.get_exec_time.layout().withName("get_exec_time"))
                .withName("$anon$796:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() { return $LAYOUT; }

        /**
         * {@snippet lang=c :
         * struct {
         *     hid_t err_stack_id;
         * }
         * }
         */
        public static class get_err_stack {

            get_err_stack()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_LONG.withName("err_stack_id")).withName("$anon$798:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final OfLong err_stack_id$LAYOUT =
                (OfLong)$LAYOUT.select(groupElement("err_stack_id"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hid_t err_stack_id
             * }
             */
            public static final OfLong err_stack_id$layout() { return err_stack_id$LAYOUT; }

            private static final long err_stack_id$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hid_t err_stack_id
             * }
             */
            public static final long err_stack_id$offset() { return err_stack_id$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hid_t err_stack_id
             * }
             */
            public static long err_stack_id(MemorySegment struct)
            {
                return struct.get(err_stack_id$LAYOUT, err_stack_id$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hid_t err_stack_id
             * }
             */
            public static void err_stack_id(MemorySegment struct, long fieldValue)
            {
                struct.set(err_stack_id$LAYOUT, err_stack_id$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout get_err_stack$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("get_err_stack"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t err_stack_id;
         * } get_err_stack
         * }
         */
        public static final GroupLayout get_err_stack$layout() { return get_err_stack$LAYOUT; }

        private static final long get_err_stack$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t err_stack_id;
         * } get_err_stack
         * }
         */
        public static final long get_err_stack$offset() { return get_err_stack$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t err_stack_id;
         * } get_err_stack
         * }
         */
        public static MemorySegment get_err_stack(MemorySegment union)
        {
            return union.asSlice(get_err_stack$OFFSET, get_err_stack$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     hid_t err_stack_id;
         * } get_err_stack
         * }
         */
        public static void get_err_stack(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, get_err_stack$OFFSET, get_err_stack$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     uint64_t *exec_ts;
         *     uint64_t *exec_time;
         * }
         * }
         */
        public static class get_exec_time {

            get_exec_time()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout
                    .structLayout(hdf5_h.C_POINTER.withName("exec_ts"),
                                  hdf5_h.C_POINTER.withName("exec_time"))
                    .withName("$anon$803:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final AddressLayout exec_ts$LAYOUT =
                (AddressLayout)$LAYOUT.select(groupElement("exec_ts"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * uint64_t *exec_ts
             * }
             */
            public static final AddressLayout exec_ts$layout() { return exec_ts$LAYOUT; }

            private static final long exec_ts$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * uint64_t *exec_ts
             * }
             */
            public static final long exec_ts$offset() { return exec_ts$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * uint64_t *exec_ts
             * }
             */
            public static MemorySegment exec_ts(MemorySegment struct)
            {
                return struct.get(exec_ts$LAYOUT, exec_ts$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * uint64_t *exec_ts
             * }
             */
            public static void exec_ts(MemorySegment struct, MemorySegment fieldValue)
            {
                struct.set(exec_ts$LAYOUT, exec_ts$OFFSET, fieldValue);
            }

            private static final AddressLayout exec_time$LAYOUT =
                (AddressLayout)$LAYOUT.select(groupElement("exec_time"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * uint64_t *exec_time
             * }
             */
            public static final AddressLayout exec_time$layout() { return exec_time$LAYOUT; }

            private static final long exec_time$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * uint64_t *exec_time
             * }
             */
            public static final long exec_time$offset() { return exec_time$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * uint64_t *exec_time
             * }
             */
            public static MemorySegment exec_time(MemorySegment struct)
            {
                return struct.get(exec_time$LAYOUT, exec_time$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * uint64_t *exec_time
             * }
             */
            public static void exec_time(MemorySegment struct, MemorySegment fieldValue)
            {
                struct.set(exec_time$LAYOUT, exec_time$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout get_exec_time$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("get_exec_time"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     uint64_t *exec_ts;
         *     uint64_t *exec_time;
         * } get_exec_time
         * }
         */
        public static final GroupLayout get_exec_time$layout() { return get_exec_time$LAYOUT; }

        private static final long get_exec_time$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     uint64_t *exec_ts;
         *     uint64_t *exec_time;
         * } get_exec_time
         * }
         */
        public static final long get_exec_time$offset() { return get_exec_time$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     uint64_t *exec_ts;
         *     uint64_t *exec_time;
         * } get_exec_time
         * }
         */
        public static MemorySegment get_exec_time(MemorySegment union)
        {
            return union.asSlice(get_exec_time$OFFSET, get_exec_time$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     uint64_t *exec_ts;
         *     uint64_t *exec_time;
         * } get_exec_time
         * }
         */
        public static void get_exec_time(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, get_exec_time$OFFSET, get_exec_time$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index)
        {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator)
        {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
        {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout args$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("args"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         hid_t err_stack_id;
     *     } get_err_stack;
     *     struct {
     *         uint64_t *exec_ts;
     *         uint64_t *exec_time;
     *     } get_exec_time;
     * } args
     * }
     */
    public static final GroupLayout args$layout() { return args$LAYOUT; }

    private static final long args$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         hid_t err_stack_id;
     *     } get_err_stack;
     *     struct {
     *         uint64_t *exec_ts;
     *         uint64_t *exec_time;
     *     } get_exec_time;
     * } args
     * }
     */
    public static final long args$offset() { return args$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         hid_t err_stack_id;
     *     } get_err_stack;
     *     struct {
     *         uint64_t *exec_ts;
     *         uint64_t *exec_time;
     *     } get_exec_time;
     * } args
     * }
     */
    public static MemorySegment args(MemorySegment struct)
    {
        return struct.asSlice(args$OFFSET, args$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         hid_t err_stack_id;
     *     } get_err_stack;
     *     struct {
     *         uint64_t *exec_ts;
     *         uint64_t *exec_time;
     *     } get_exec_time;
     * } args
     * }
     */
    public static void args(MemorySegment struct, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, struct, args$OFFSET, args$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
