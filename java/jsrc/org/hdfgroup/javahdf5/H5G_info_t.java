// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5G_info_t {
 *     H5G_storage_type_t storage_type;
 *     hsize_t nlinks;
 *     int64_t max_corder;
 *     hbool_t mounted;
 * }
 * }
 */
public class H5G_info_t {

    H5G_info_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_INT.withName("storage_type"),
        MemoryLayout.paddingLayout(4),
        hdf5_h.C_LONG.withName("nlinks"),
        hdf5_h.C_LONG.withName("max_corder"),
        hdf5_h.C_BOOL.withName("mounted"),
        MemoryLayout.paddingLayout(7)
    ).withName("H5G_info_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt storage_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("storage_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5G_storage_type_t storage_type
     * }
     */
    public static final OfInt storage_type$layout() {
        return storage_type$LAYOUT;
    }

    private static final long storage_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5G_storage_type_t storage_type
     * }
     */
    public static final long storage_type$offset() {
        return storage_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5G_storage_type_t storage_type
     * }
     */
    public static int storage_type(MemorySegment struct) {
        return struct.get(storage_type$LAYOUT, storage_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5G_storage_type_t storage_type
     * }
     */
    public static void storage_type(MemorySegment struct, int fieldValue) {
        struct.set(storage_type$LAYOUT, storage_type$OFFSET, fieldValue);
    }

    private static final OfLong nlinks$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nlinks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t nlinks
     * }
     */
    public static final OfLong nlinks$layout() {
        return nlinks$LAYOUT;
    }

    private static final long nlinks$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t nlinks
     * }
     */
    public static final long nlinks$offset() {
        return nlinks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t nlinks
     * }
     */
    public static long nlinks(MemorySegment struct) {
        return struct.get(nlinks$LAYOUT, nlinks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t nlinks
     * }
     */
    public static void nlinks(MemorySegment struct, long fieldValue) {
        struct.set(nlinks$LAYOUT, nlinks$OFFSET, fieldValue);
    }

    private static final OfLong max_corder$LAYOUT = (OfLong)$LAYOUT.select(groupElement("max_corder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t max_corder
     * }
     */
    public static final OfLong max_corder$layout() {
        return max_corder$LAYOUT;
    }

    private static final long max_corder$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t max_corder
     * }
     */
    public static final long max_corder$offset() {
        return max_corder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t max_corder
     * }
     */
    public static long max_corder(MemorySegment struct) {
        return struct.get(max_corder$LAYOUT, max_corder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t max_corder
     * }
     */
    public static void max_corder(MemorySegment struct, long fieldValue) {
        struct.set(max_corder$LAYOUT, max_corder$OFFSET, fieldValue);
    }

    private static final OfBoolean mounted$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("mounted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hbool_t mounted
     * }
     */
    public static final OfBoolean mounted$layout() {
        return mounted$LAYOUT;
    }

    private static final long mounted$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hbool_t mounted
     * }
     */
    public static final long mounted$offset() {
        return mounted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hbool_t mounted
     * }
     */
    public static boolean mounted(MemorySegment struct) {
        return struct.get(mounted$LAYOUT, mounted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hbool_t mounted
     * }
     */
    public static void mounted(MemorySegment struct, boolean fieldValue) {
        struct.set(mounted$LAYOUT, mounted$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

