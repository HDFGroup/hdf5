// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5_ih_info_t {
 *     hsize_t index_size;
 *     hsize_t heap_size;
 * }
 * }
 */
public class H5_ih_info_t {

    H5_ih_info_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout.structLayout(hdf5_h.C_LONG.withName("index_size"), hdf5_h.C_LONG.withName("heap_size"))
            .withName("H5_ih_info_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfLong index_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("index_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t index_size
     * }
     */
    public static final OfLong index_size$layout() { return index_size$LAYOUT; }

    private static final long index_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t index_size
     * }
     */
    public static final long index_size$offset() { return index_size$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t index_size
     * }
     */
    public static long index_size(MemorySegment struct)
    {
        return struct.get(index_size$LAYOUT, index_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t index_size
     * }
     */
    public static void index_size(MemorySegment struct, long fieldValue)
    {
        struct.set(index_size$LAYOUT, index_size$OFFSET, fieldValue);
    }

    private static final OfLong heap_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("heap_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hsize_t heap_size
     * }
     */
    public static final OfLong heap_size$layout() { return heap_size$LAYOUT; }

    private static final long heap_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hsize_t heap_size
     * }
     */
    public static final long heap_size$offset() { return heap_size$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hsize_t heap_size
     * }
     */
    public static long heap_size(MemorySegment struct)
    {
        return struct.get(heap_size$LAYOUT, heap_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hsize_t heap_size
     * }
     */
    public static void heap_size(MemorySegment struct, long fieldValue)
    {
        struct.set(heap_size$LAYOUT, heap_size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
