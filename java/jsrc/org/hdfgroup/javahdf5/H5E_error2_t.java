// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5E_error2_t {
 *     hid_t cls_id;
 *     hid_t maj_num;
 *     hid_t min_num;
 *     unsigned int line;
 *     const char *func_name;
 *     const char *file_name;
 *     const char *desc;
 * }
 * }
 */
public class H5E_error2_t {

    H5E_error2_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_LONG.withName("cls_id"),
        hdf5_h.C_LONG.withName("maj_num"),
        hdf5_h.C_LONG.withName("min_num"),
        hdf5_h.C_INT.withName("line"),
        MemoryLayout.paddingLayout(4),
        hdf5_h.C_POINTER.withName("func_name"),
        hdf5_h.C_POINTER.withName("file_name"),
        hdf5_h.C_POINTER.withName("desc")
    ).withName("H5E_error2_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong cls_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cls_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hid_t cls_id
     * }
     */
    public static final OfLong cls_id$layout() {
        return cls_id$LAYOUT;
    }

    private static final long cls_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hid_t cls_id
     * }
     */
    public static final long cls_id$offset() {
        return cls_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hid_t cls_id
     * }
     */
    public static long cls_id(MemorySegment struct) {
        return struct.get(cls_id$LAYOUT, cls_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hid_t cls_id
     * }
     */
    public static void cls_id(MemorySegment struct, long fieldValue) {
        struct.set(cls_id$LAYOUT, cls_id$OFFSET, fieldValue);
    }

    private static final OfLong maj_num$LAYOUT = (OfLong)$LAYOUT.select(groupElement("maj_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hid_t maj_num
     * }
     */
    public static final OfLong maj_num$layout() {
        return maj_num$LAYOUT;
    }

    private static final long maj_num$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hid_t maj_num
     * }
     */
    public static final long maj_num$offset() {
        return maj_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hid_t maj_num
     * }
     */
    public static long maj_num(MemorySegment struct) {
        return struct.get(maj_num$LAYOUT, maj_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hid_t maj_num
     * }
     */
    public static void maj_num(MemorySegment struct, long fieldValue) {
        struct.set(maj_num$LAYOUT, maj_num$OFFSET, fieldValue);
    }

    private static final OfLong min_num$LAYOUT = (OfLong)$LAYOUT.select(groupElement("min_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hid_t min_num
     * }
     */
    public static final OfLong min_num$layout() {
        return min_num$LAYOUT;
    }

    private static final long min_num$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hid_t min_num
     * }
     */
    public static final long min_num$offset() {
        return min_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hid_t min_num
     * }
     */
    public static long min_num(MemorySegment struct) {
        return struct.get(min_num$LAYOUT, min_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hid_t min_num
     * }
     */
    public static void min_num(MemorySegment struct, long fieldValue) {
        struct.set(min_num$LAYOUT, min_num$OFFSET, fieldValue);
    }

    private static final OfInt line$LAYOUT = (OfInt)$LAYOUT.select(groupElement("line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int line
     * }
     */
    public static final OfInt line$layout() {
        return line$LAYOUT;
    }

    private static final long line$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int line
     * }
     */
    public static final long line$offset() {
        return line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int line
     * }
     */
    public static int line(MemorySegment struct) {
        return struct.get(line$LAYOUT, line$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int line
     * }
     */
    public static void line(MemorySegment struct, int fieldValue) {
        struct.set(line$LAYOUT, line$OFFSET, fieldValue);
    }

    private static final AddressLayout func_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *func_name
     * }
     */
    public static final AddressLayout func_name$layout() {
        return func_name$LAYOUT;
    }

    private static final long func_name$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *func_name
     * }
     */
    public static final long func_name$offset() {
        return func_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *func_name
     * }
     */
    public static MemorySegment func_name(MemorySegment struct) {
        return struct.get(func_name$LAYOUT, func_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *func_name
     * }
     */
    public static void func_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_name$LAYOUT, func_name$OFFSET, fieldValue);
    }

    private static final AddressLayout file_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("file_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *file_name
     * }
     */
    public static final AddressLayout file_name$layout() {
        return file_name$LAYOUT;
    }

    private static final long file_name$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *file_name
     * }
     */
    public static final long file_name$offset() {
        return file_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *file_name
     * }
     */
    public static MemorySegment file_name(MemorySegment struct) {
        return struct.get(file_name$LAYOUT, file_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *file_name
     * }
     */
    public static void file_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(file_name$LAYOUT, file_name$OFFSET, fieldValue);
    }

    private static final AddressLayout desc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("desc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *desc
     * }
     */
    public static final AddressLayout desc$layout() {
        return desc$LAYOUT;
    }

    private static final long desc$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *desc
     * }
     */
    public static final long desc$offset() {
        return desc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *desc
     * }
     */
    public static MemorySegment desc(MemorySegment struct) {
        return struct.get(desc$LAYOUT, desc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *desc
     * }
     */
    public static void desc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(desc$LAYOUT, desc$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

