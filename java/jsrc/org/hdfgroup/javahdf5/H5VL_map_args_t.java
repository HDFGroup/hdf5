// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union H5VL_map_args_t {
 *     struct {
 *         H5VL_loc_params_t loc_params;
 *         const char *name;
 *         hid_t lcpl_id;
 *         hid_t key_type_id;
 *         hid_t val_type_id;
 *         hid_t mcpl_id;
 *         hid_t mapl_id;
 *         void *map;
 *     } create;
 *     struct {
 *         H5VL_loc_params_t loc_params;
 *         const char *name;
 *         hid_t mapl_id;
 *         void *map;
 *     } open;
 *     struct {
 *         hid_t key_mem_type_id;
 *         const void *key;
 *         hid_t value_mem_type_id;
 *         void *value;
 *     } get_val;
 *     struct {
 *         hid_t key_mem_type_id;
 *         const void *key;
 *         hbool_t exists;
 *     } exists;
 *     struct {
 *         hid_t key_mem_type_id;
 *         const void *key;
 *         hid_t value_mem_type_id;
 *         const void *value;
 *     } put;
 *     struct {
 *         H5VL_map_get_t get_type;
 *         union {
 *             struct {
 *                 hid_t mapl_id;
 *             } get_mapl;
 *             struct {
 *                 hid_t mcpl_id;
 *             } get_mcpl;
 *             struct {
 *                 hid_t type_id;
 *             } get_key_type;
 *             struct {
 *                 hid_t type_id;
 *             } get_val_type;
 *             struct {
 *                 hsize_t count;
 *             } get_count;
 *         } args;
 *     } get;
 *     struct {
 *         H5VL_map_specific_t specific_type;
 *         union {
 *             struct {
 *                 H5VL_loc_params_t loc_params;
 *                 hsize_t idx;
 *                 hid_t key_mem_type_id;
 *                 H5M_iterate_t op;
 *                 void *op_data;
 *             } iterate;
 *             struct {
 *                 H5VL_loc_params_t loc_params;
 *                 hid_t key_mem_type_id;
 *                 const void *key;
 *             } del;
 *         } args;
 *     } specific;
 * }
 * }
 */
public class H5VL_map_args_t {

    H5VL_map_args_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        H5VL_map_args_t.create.layout().withName("create"),
        H5VL_map_args_t.open.layout().withName("open"),
        H5VL_map_args_t.get_val.layout().withName("get_val"),
        H5VL_map_args_t.exists.layout().withName("exists"),
        H5VL_map_args_t.put.layout().withName("put"),
        H5VL_map_args_t.get.layout().withName("get"),
        H5VL_map_args_t.specific.layout().withName("specific")
    ).withName("H5VL_map_args_t");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     H5VL_loc_params_t loc_params;
     *     const char *name;
     *     hid_t lcpl_id;
     *     hid_t key_type_id;
     *     hid_t val_type_id;
     *     hid_t mcpl_id;
     *     hid_t mapl_id;
     *     void *map;
     * }
     * }
     */
    public static class create {

        create() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            H5VL_loc_params_t.layout().withName("loc_params"),
            hdf5_h.C_POINTER.withName("name"),
            hdf5_h.C_LONG.withName("lcpl_id"),
            hdf5_h.C_LONG.withName("key_type_id"),
            hdf5_h.C_LONG.withName("val_type_id"),
            hdf5_h.C_LONG.withName("mcpl_id"),
            hdf5_h.C_LONG.withName("mapl_id"),
            hdf5_h.C_POINTER.withName("map")
        ).withName("$anon$81:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout loc_params$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("loc_params"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * H5VL_loc_params_t loc_params
         * }
         */
        public static final GroupLayout loc_params$layout() {
            return loc_params$LAYOUT;
        }

        private static final long loc_params$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * H5VL_loc_params_t loc_params
         * }
         */
        public static final long loc_params$offset() {
            return loc_params$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * H5VL_loc_params_t loc_params
         * }
         */
        public static MemorySegment loc_params(MemorySegment struct) {
            return struct.asSlice(loc_params$OFFSET, loc_params$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * H5VL_loc_params_t loc_params
         * }
         */
        public static void loc_params(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, loc_params$OFFSET, loc_params$LAYOUT.byteSize());
        }

        private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * const char *name
         * }
         */
        public static final AddressLayout name$layout() {
            return name$LAYOUT;
        }

        private static final long name$OFFSET = 40;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * const char *name
         * }
         */
        public static final long name$offset() {
            return name$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * const char *name
         * }
         */
        public static MemorySegment name(MemorySegment struct) {
            return struct.get(name$LAYOUT, name$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * const char *name
         * }
         */
        public static void name(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(name$LAYOUT, name$OFFSET, fieldValue);
        }

        private static final OfLong lcpl_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("lcpl_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hid_t lcpl_id
         * }
         */
        public static final OfLong lcpl_id$layout() {
            return lcpl_id$LAYOUT;
        }

        private static final long lcpl_id$OFFSET = 48;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hid_t lcpl_id
         * }
         */
        public static final long lcpl_id$offset() {
            return lcpl_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hid_t lcpl_id
         * }
         */
        public static long lcpl_id(MemorySegment struct) {
            return struct.get(lcpl_id$LAYOUT, lcpl_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hid_t lcpl_id
         * }
         */
        public static void lcpl_id(MemorySegment struct, long fieldValue) {
            struct.set(lcpl_id$LAYOUT, lcpl_id$OFFSET, fieldValue);
        }

        private static final OfLong key_type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("key_type_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hid_t key_type_id
         * }
         */
        public static final OfLong key_type_id$layout() {
            return key_type_id$LAYOUT;
        }

        private static final long key_type_id$OFFSET = 56;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hid_t key_type_id
         * }
         */
        public static final long key_type_id$offset() {
            return key_type_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hid_t key_type_id
         * }
         */
        public static long key_type_id(MemorySegment struct) {
            return struct.get(key_type_id$LAYOUT, key_type_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hid_t key_type_id
         * }
         */
        public static void key_type_id(MemorySegment struct, long fieldValue) {
            struct.set(key_type_id$LAYOUT, key_type_id$OFFSET, fieldValue);
        }

        private static final OfLong val_type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("val_type_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hid_t val_type_id
         * }
         */
        public static final OfLong val_type_id$layout() {
            return val_type_id$LAYOUT;
        }

        private static final long val_type_id$OFFSET = 64;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hid_t val_type_id
         * }
         */
        public static final long val_type_id$offset() {
            return val_type_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hid_t val_type_id
         * }
         */
        public static long val_type_id(MemorySegment struct) {
            return struct.get(val_type_id$LAYOUT, val_type_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hid_t val_type_id
         * }
         */
        public static void val_type_id(MemorySegment struct, long fieldValue) {
            struct.set(val_type_id$LAYOUT, val_type_id$OFFSET, fieldValue);
        }

        private static final OfLong mcpl_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mcpl_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hid_t mcpl_id
         * }
         */
        public static final OfLong mcpl_id$layout() {
            return mcpl_id$LAYOUT;
        }

        private static final long mcpl_id$OFFSET = 72;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hid_t mcpl_id
         * }
         */
        public static final long mcpl_id$offset() {
            return mcpl_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hid_t mcpl_id
         * }
         */
        public static long mcpl_id(MemorySegment struct) {
            return struct.get(mcpl_id$LAYOUT, mcpl_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hid_t mcpl_id
         * }
         */
        public static void mcpl_id(MemorySegment struct, long fieldValue) {
            struct.set(mcpl_id$LAYOUT, mcpl_id$OFFSET, fieldValue);
        }

        private static final OfLong mapl_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mapl_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hid_t mapl_id
         * }
         */
        public static final OfLong mapl_id$layout() {
            return mapl_id$LAYOUT;
        }

        private static final long mapl_id$OFFSET = 80;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hid_t mapl_id
         * }
         */
        public static final long mapl_id$offset() {
            return mapl_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hid_t mapl_id
         * }
         */
        public static long mapl_id(MemorySegment struct) {
            return struct.get(mapl_id$LAYOUT, mapl_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hid_t mapl_id
         * }
         */
        public static void mapl_id(MemorySegment struct, long fieldValue) {
            struct.set(mapl_id$LAYOUT, mapl_id$OFFSET, fieldValue);
        }

        private static final AddressLayout map$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("map"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *map
         * }
         */
        public static final AddressLayout map$layout() {
            return map$LAYOUT;
        }

        private static final long map$OFFSET = 88;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *map
         * }
         */
        public static final long map$offset() {
            return map$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *map
         * }
         */
        public static MemorySegment map(MemorySegment struct) {
            return struct.get(map$LAYOUT, map$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *map
         * }
         */
        public static void map(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(map$LAYOUT, map$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout create$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("create"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_loc_params_t loc_params;
     *     const char *name;
     *     hid_t lcpl_id;
     *     hid_t key_type_id;
     *     hid_t val_type_id;
     *     hid_t mcpl_id;
     *     hid_t mapl_id;
     *     void *map;
     * } create
     * }
     */
    public static final GroupLayout create$layout() {
        return create$LAYOUT;
    }

    private static final long create$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_loc_params_t loc_params;
     *     const char *name;
     *     hid_t lcpl_id;
     *     hid_t key_type_id;
     *     hid_t val_type_id;
     *     hid_t mcpl_id;
     *     hid_t mapl_id;
     *     void *map;
     * } create
     * }
     */
    public static final long create$offset() {
        return create$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_loc_params_t loc_params;
     *     const char *name;
     *     hid_t lcpl_id;
     *     hid_t key_type_id;
     *     hid_t val_type_id;
     *     hid_t mcpl_id;
     *     hid_t mapl_id;
     *     void *map;
     * } create
     * }
     */
    public static MemorySegment create(MemorySegment union) {
        return union.asSlice(create$OFFSET, create$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_loc_params_t loc_params;
     *     const char *name;
     *     hid_t lcpl_id;
     *     hid_t key_type_id;
     *     hid_t val_type_id;
     *     hid_t mcpl_id;
     *     hid_t mapl_id;
     *     void *map;
     * } create
     * }
     */
    public static void create(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, create$OFFSET, create$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     H5VL_loc_params_t loc_params;
     *     const char *name;
     *     hid_t mapl_id;
     *     void *map;
     * }
     * }
     */
    public static class open {

        open() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            H5VL_loc_params_t.layout().withName("loc_params"),
            hdf5_h.C_POINTER.withName("name"),
            hdf5_h.C_LONG.withName("mapl_id"),
            hdf5_h.C_POINTER.withName("map")
        ).withName("$anon$93:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout loc_params$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("loc_params"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * H5VL_loc_params_t loc_params
         * }
         */
        public static final GroupLayout loc_params$layout() {
            return loc_params$LAYOUT;
        }

        private static final long loc_params$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * H5VL_loc_params_t loc_params
         * }
         */
        public static final long loc_params$offset() {
            return loc_params$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * H5VL_loc_params_t loc_params
         * }
         */
        public static MemorySegment loc_params(MemorySegment struct) {
            return struct.asSlice(loc_params$OFFSET, loc_params$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * H5VL_loc_params_t loc_params
         * }
         */
        public static void loc_params(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, loc_params$OFFSET, loc_params$LAYOUT.byteSize());
        }

        private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * const char *name
         * }
         */
        public static final AddressLayout name$layout() {
            return name$LAYOUT;
        }

        private static final long name$OFFSET = 40;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * const char *name
         * }
         */
        public static final long name$offset() {
            return name$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * const char *name
         * }
         */
        public static MemorySegment name(MemorySegment struct) {
            return struct.get(name$LAYOUT, name$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * const char *name
         * }
         */
        public static void name(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(name$LAYOUT, name$OFFSET, fieldValue);
        }

        private static final OfLong mapl_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mapl_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hid_t mapl_id
         * }
         */
        public static final OfLong mapl_id$layout() {
            return mapl_id$LAYOUT;
        }

        private static final long mapl_id$OFFSET = 48;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hid_t mapl_id
         * }
         */
        public static final long mapl_id$offset() {
            return mapl_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hid_t mapl_id
         * }
         */
        public static long mapl_id(MemorySegment struct) {
            return struct.get(mapl_id$LAYOUT, mapl_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hid_t mapl_id
         * }
         */
        public static void mapl_id(MemorySegment struct, long fieldValue) {
            struct.set(mapl_id$LAYOUT, mapl_id$OFFSET, fieldValue);
        }

        private static final AddressLayout map$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("map"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *map
         * }
         */
        public static final AddressLayout map$layout() {
            return map$LAYOUT;
        }

        private static final long map$OFFSET = 56;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *map
         * }
         */
        public static final long map$offset() {
            return map$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *map
         * }
         */
        public static MemorySegment map(MemorySegment struct) {
            return struct.get(map$LAYOUT, map$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *map
         * }
         */
        public static void map(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(map$LAYOUT, map$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout open$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("open"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_loc_params_t loc_params;
     *     const char *name;
     *     hid_t mapl_id;
     *     void *map;
     * } open
     * }
     */
    public static final GroupLayout open$layout() {
        return open$LAYOUT;
    }

    private static final long open$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_loc_params_t loc_params;
     *     const char *name;
     *     hid_t mapl_id;
     *     void *map;
     * } open
     * }
     */
    public static final long open$offset() {
        return open$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_loc_params_t loc_params;
     *     const char *name;
     *     hid_t mapl_id;
     *     void *map;
     * } open
     * }
     */
    public static MemorySegment open(MemorySegment union) {
        return union.asSlice(open$OFFSET, open$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_loc_params_t loc_params;
     *     const char *name;
     *     hid_t mapl_id;
     *     void *map;
     * } open
     * }
     */
    public static void open(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, open$OFFSET, open$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hid_t value_mem_type_id;
     *     void *value;
     * }
     * }
     */
    public static class get_val {

        get_val() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            hdf5_h.C_LONG.withName("key_mem_type_id"),
            hdf5_h.C_POINTER.withName("key"),
            hdf5_h.C_LONG.withName("value_mem_type_id"),
            hdf5_h.C_POINTER.withName("value")
        ).withName("$anon$101:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfLong key_mem_type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("key_mem_type_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hid_t key_mem_type_id
         * }
         */
        public static final OfLong key_mem_type_id$layout() {
            return key_mem_type_id$LAYOUT;
        }

        private static final long key_mem_type_id$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hid_t key_mem_type_id
         * }
         */
        public static final long key_mem_type_id$offset() {
            return key_mem_type_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hid_t key_mem_type_id
         * }
         */
        public static long key_mem_type_id(MemorySegment struct) {
            return struct.get(key_mem_type_id$LAYOUT, key_mem_type_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hid_t key_mem_type_id
         * }
         */
        public static void key_mem_type_id(MemorySegment struct, long fieldValue) {
            struct.set(key_mem_type_id$LAYOUT, key_mem_type_id$OFFSET, fieldValue);
        }

        private static final AddressLayout key$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("key"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * const void *key
         * }
         */
        public static final AddressLayout key$layout() {
            return key$LAYOUT;
        }

        private static final long key$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * const void *key
         * }
         */
        public static final long key$offset() {
            return key$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * const void *key
         * }
         */
        public static MemorySegment key(MemorySegment struct) {
            return struct.get(key$LAYOUT, key$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * const void *key
         * }
         */
        public static void key(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(key$LAYOUT, key$OFFSET, fieldValue);
        }

        private static final OfLong value_mem_type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("value_mem_type_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hid_t value_mem_type_id
         * }
         */
        public static final OfLong value_mem_type_id$layout() {
            return value_mem_type_id$LAYOUT;
        }

        private static final long value_mem_type_id$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hid_t value_mem_type_id
         * }
         */
        public static final long value_mem_type_id$offset() {
            return value_mem_type_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hid_t value_mem_type_id
         * }
         */
        public static long value_mem_type_id(MemorySegment struct) {
            return struct.get(value_mem_type_id$LAYOUT, value_mem_type_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hid_t value_mem_type_id
         * }
         */
        public static void value_mem_type_id(MemorySegment struct, long fieldValue) {
            struct.set(value_mem_type_id$LAYOUT, value_mem_type_id$OFFSET, fieldValue);
        }

        private static final AddressLayout value$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("value"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *value
         * }
         */
        public static final AddressLayout value$layout() {
            return value$LAYOUT;
        }

        private static final long value$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *value
         * }
         */
        public static final long value$offset() {
            return value$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *value
         * }
         */
        public static MemorySegment value(MemorySegment struct) {
            return struct.get(value$LAYOUT, value$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *value
         * }
         */
        public static void value(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(value$LAYOUT, value$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout get_val$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_val"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hid_t value_mem_type_id;
     *     void *value;
     * } get_val
     * }
     */
    public static final GroupLayout get_val$layout() {
        return get_val$LAYOUT;
    }

    private static final long get_val$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hid_t value_mem_type_id;
     *     void *value;
     * } get_val
     * }
     */
    public static final long get_val$offset() {
        return get_val$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hid_t value_mem_type_id;
     *     void *value;
     * } get_val
     * }
     */
    public static MemorySegment get_val(MemorySegment union) {
        return union.asSlice(get_val$OFFSET, get_val$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hid_t value_mem_type_id;
     *     void *value;
     * } get_val
     * }
     */
    public static void get_val(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, get_val$OFFSET, get_val$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hbool_t exists;
     * }
     * }
     */
    public static class exists {

        exists() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            hdf5_h.C_LONG.withName("key_mem_type_id"),
            hdf5_h.C_POINTER.withName("key"),
            hdf5_h.C_BOOL.withName("exists"),
            MemoryLayout.paddingLayout(7)
        ).withName("$anon$109:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfLong key_mem_type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("key_mem_type_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hid_t key_mem_type_id
         * }
         */
        public static final OfLong key_mem_type_id$layout() {
            return key_mem_type_id$LAYOUT;
        }

        private static final long key_mem_type_id$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hid_t key_mem_type_id
         * }
         */
        public static final long key_mem_type_id$offset() {
            return key_mem_type_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hid_t key_mem_type_id
         * }
         */
        public static long key_mem_type_id(MemorySegment struct) {
            return struct.get(key_mem_type_id$LAYOUT, key_mem_type_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hid_t key_mem_type_id
         * }
         */
        public static void key_mem_type_id(MemorySegment struct, long fieldValue) {
            struct.set(key_mem_type_id$LAYOUT, key_mem_type_id$OFFSET, fieldValue);
        }

        private static final AddressLayout key$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("key"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * const void *key
         * }
         */
        public static final AddressLayout key$layout() {
            return key$LAYOUT;
        }

        private static final long key$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * const void *key
         * }
         */
        public static final long key$offset() {
            return key$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * const void *key
         * }
         */
        public static MemorySegment key(MemorySegment struct) {
            return struct.get(key$LAYOUT, key$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * const void *key
         * }
         */
        public static void key(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(key$LAYOUT, key$OFFSET, fieldValue);
        }

        private static final OfBoolean exists$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("exists"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hbool_t exists
         * }
         */
        public static final OfBoolean exists$layout() {
            return exists$LAYOUT;
        }

        private static final long exists$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hbool_t exists
         * }
         */
        public static final long exists$offset() {
            return exists$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hbool_t exists
         * }
         */
        public static boolean exists(MemorySegment struct) {
            return struct.get(exists$LAYOUT, exists$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hbool_t exists
         * }
         */
        public static void exists(MemorySegment struct, boolean fieldValue) {
            struct.set(exists$LAYOUT, exists$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout exists$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("exists"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hbool_t exists;
     * } exists
     * }
     */
    public static final GroupLayout exists$layout() {
        return exists$LAYOUT;
    }

    private static final long exists$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hbool_t exists;
     * } exists
     * }
     */
    public static final long exists$offset() {
        return exists$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hbool_t exists;
     * } exists
     * }
     */
    public static MemorySegment exists(MemorySegment union) {
        return union.asSlice(exists$OFFSET, exists$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hbool_t exists;
     * } exists
     * }
     */
    public static void exists(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, exists$OFFSET, exists$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hid_t value_mem_type_id;
     *     const void *value;
     * }
     * }
     */
    public static class put {

        put() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            hdf5_h.C_LONG.withName("key_mem_type_id"),
            hdf5_h.C_POINTER.withName("key"),
            hdf5_h.C_LONG.withName("value_mem_type_id"),
            hdf5_h.C_POINTER.withName("value")
        ).withName("$anon$116:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfLong key_mem_type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("key_mem_type_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hid_t key_mem_type_id
         * }
         */
        public static final OfLong key_mem_type_id$layout() {
            return key_mem_type_id$LAYOUT;
        }

        private static final long key_mem_type_id$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hid_t key_mem_type_id
         * }
         */
        public static final long key_mem_type_id$offset() {
            return key_mem_type_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hid_t key_mem_type_id
         * }
         */
        public static long key_mem_type_id(MemorySegment struct) {
            return struct.get(key_mem_type_id$LAYOUT, key_mem_type_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hid_t key_mem_type_id
         * }
         */
        public static void key_mem_type_id(MemorySegment struct, long fieldValue) {
            struct.set(key_mem_type_id$LAYOUT, key_mem_type_id$OFFSET, fieldValue);
        }

        private static final AddressLayout key$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("key"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * const void *key
         * }
         */
        public static final AddressLayout key$layout() {
            return key$LAYOUT;
        }

        private static final long key$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * const void *key
         * }
         */
        public static final long key$offset() {
            return key$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * const void *key
         * }
         */
        public static MemorySegment key(MemorySegment struct) {
            return struct.get(key$LAYOUT, key$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * const void *key
         * }
         */
        public static void key(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(key$LAYOUT, key$OFFSET, fieldValue);
        }

        private static final OfLong value_mem_type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("value_mem_type_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * hid_t value_mem_type_id
         * }
         */
        public static final OfLong value_mem_type_id$layout() {
            return value_mem_type_id$LAYOUT;
        }

        private static final long value_mem_type_id$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * hid_t value_mem_type_id
         * }
         */
        public static final long value_mem_type_id$offset() {
            return value_mem_type_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * hid_t value_mem_type_id
         * }
         */
        public static long value_mem_type_id(MemorySegment struct) {
            return struct.get(value_mem_type_id$LAYOUT, value_mem_type_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * hid_t value_mem_type_id
         * }
         */
        public static void value_mem_type_id(MemorySegment struct, long fieldValue) {
            struct.set(value_mem_type_id$LAYOUT, value_mem_type_id$OFFSET, fieldValue);
        }

        private static final AddressLayout value$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("value"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * const void *value
         * }
         */
        public static final AddressLayout value$layout() {
            return value$LAYOUT;
        }

        private static final long value$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * const void *value
         * }
         */
        public static final long value$offset() {
            return value$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * const void *value
         * }
         */
        public static MemorySegment value(MemorySegment struct) {
            return struct.get(value$LAYOUT, value$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * const void *value
         * }
         */
        public static void value(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(value$LAYOUT, value$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout put$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("put"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hid_t value_mem_type_id;
     *     const void *value;
     * } put
     * }
     */
    public static final GroupLayout put$layout() {
        return put$LAYOUT;
    }

    private static final long put$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hid_t value_mem_type_id;
     *     const void *value;
     * } put
     * }
     */
    public static final long put$offset() {
        return put$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hid_t value_mem_type_id;
     *     const void *value;
     * } put
     * }
     */
    public static MemorySegment put(MemorySegment union) {
        return union.asSlice(put$OFFSET, put$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     hid_t key_mem_type_id;
     *     const void *key;
     *     hid_t value_mem_type_id;
     *     const void *value;
     * } put
     * }
     */
    public static void put(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, put$OFFSET, put$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     H5VL_map_get_t get_type;
     *     union {
     *         struct {
     *             hid_t mapl_id;
     *         } get_mapl;
     *         struct {
     *             hid_t mcpl_id;
     *         } get_mcpl;
     *         struct {
     *             hid_t type_id;
     *         } get_key_type;
     *         struct {
     *             hid_t type_id;
     *         } get_val_type;
     *         struct {
     *             hsize_t count;
     *         } get_count;
     *     } args;
     * }
     * }
     */
    public static class get {

        get() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            hdf5_h.C_INT.withName("get_type"),
            MemoryLayout.paddingLayout(4),
            H5VL_map_args_t.get.args.layout().withName("args")
        ).withName("$anon$124:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt get_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("get_type"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * H5VL_map_get_t get_type
         * }
         */
        public static final OfInt get_type$layout() {
            return get_type$LAYOUT;
        }

        private static final long get_type$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * H5VL_map_get_t get_type
         * }
         */
        public static final long get_type$offset() {
            return get_type$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * H5VL_map_get_t get_type
         * }
         */
        public static int get_type(MemorySegment struct) {
            return struct.get(get_type$LAYOUT, get_type$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * H5VL_map_get_t get_type
         * }
         */
        public static void get_type(MemorySegment struct, int fieldValue) {
            struct.set(get_type$LAYOUT, get_type$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * union {
         *     struct {
         *         hid_t mapl_id;
         *     } get_mapl;
         *     struct {
         *         hid_t mcpl_id;
         *     } get_mcpl;
         *     struct {
         *         hid_t type_id;
         *     } get_key_type;
         *     struct {
         *         hid_t type_id;
         *     } get_val_type;
         *     struct {
         *         hsize_t count;
         *     } get_count;
         * }
         * }
         */
        public static class args {

            args() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
                H5VL_map_args_t.get.args.get_mapl.layout().withName("get_mapl"),
                H5VL_map_args_t.get.args.get_mcpl.layout().withName("get_mcpl"),
                H5VL_map_args_t.get.args.get_key_type.layout().withName("get_key_type"),
                H5VL_map_args_t.get.args.get_val_type.layout().withName("get_val_type"),
                H5VL_map_args_t.get.args.get_count.layout().withName("get_count")
            ).withName("$anon$128:9");

            /**
             * The layout of this union
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            /**
             * {@snippet lang=c :
             * struct {
             *     hid_t mapl_id;
             * }
             * }
             */
            public static class get_mapl {

                get_mapl() {
                    // Should not be called directly
                }

                private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                    hdf5_h.C_LONG.withName("mapl_id")
                ).withName("$anon$130:13");

                /**
                 * The layout of this struct
                 */
                public static final GroupLayout layout() {
                    return $LAYOUT;
                }

                private static final OfLong mapl_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mapl_id"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * hid_t mapl_id
                 * }
                 */
                public static final OfLong mapl_id$layout() {
                    return mapl_id$LAYOUT;
                }

                private static final long mapl_id$OFFSET = 0;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * hid_t mapl_id
                 * }
                 */
                public static final long mapl_id$offset() {
                    return mapl_id$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * hid_t mapl_id
                 * }
                 */
                public static long mapl_id(MemorySegment struct) {
                    return struct.get(mapl_id$LAYOUT, mapl_id$OFFSET);
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * hid_t mapl_id
                 * }
                 */
                public static void mapl_id(MemorySegment struct, long fieldValue) {
                    struct.set(mapl_id$LAYOUT, mapl_id$OFFSET, fieldValue);
                }

                /**
                 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
                 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
                 */
                public static MemorySegment asSlice(MemorySegment array, long index) {
                    return array.asSlice(layout().byteSize() * index);
                }

                /**
                 * The size (in bytes) of this struct
                 */
                public static long sizeof() { return layout().byteSize(); }

                /**
                 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
                 */
                public static MemorySegment allocate(SegmentAllocator allocator) {
                    return allocator.allocate(layout());
                }

                /**
                 * Allocate an array of size {@code elementCount} using {@code allocator}.
                 * The returned segment has size {@code elementCount * layout().byteSize()}.
                 */
                public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                    return reinterpret(addr, 1, arena, cleanup);
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code elementCount * layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                    return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
                }
            }

            private static final GroupLayout get_mapl$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_mapl"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t mapl_id;
             * } get_mapl
             * }
             */
            public static final GroupLayout get_mapl$layout() {
                return get_mapl$LAYOUT;
            }

            private static final long get_mapl$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t mapl_id;
             * } get_mapl
             * }
             */
            public static final long get_mapl$offset() {
                return get_mapl$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t mapl_id;
             * } get_mapl
             * }
             */
            public static MemorySegment get_mapl(MemorySegment union) {
                return union.asSlice(get_mapl$OFFSET, get_mapl$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t mapl_id;
             * } get_mapl
             * }
             */
            public static void get_mapl(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, get_mapl$OFFSET, get_mapl$LAYOUT.byteSize());
            }

            /**
             * {@snippet lang=c :
             * struct {
             *     hid_t mcpl_id;
             * }
             * }
             */
            public static class get_mcpl {

                get_mcpl() {
                    // Should not be called directly
                }

                private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                    hdf5_h.C_LONG.withName("mcpl_id")
                ).withName("$anon$135:13");

                /**
                 * The layout of this struct
                 */
                public static final GroupLayout layout() {
                    return $LAYOUT;
                }

                private static final OfLong mcpl_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mcpl_id"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * hid_t mcpl_id
                 * }
                 */
                public static final OfLong mcpl_id$layout() {
                    return mcpl_id$LAYOUT;
                }

                private static final long mcpl_id$OFFSET = 0;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * hid_t mcpl_id
                 * }
                 */
                public static final long mcpl_id$offset() {
                    return mcpl_id$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * hid_t mcpl_id
                 * }
                 */
                public static long mcpl_id(MemorySegment struct) {
                    return struct.get(mcpl_id$LAYOUT, mcpl_id$OFFSET);
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * hid_t mcpl_id
                 * }
                 */
                public static void mcpl_id(MemorySegment struct, long fieldValue) {
                    struct.set(mcpl_id$LAYOUT, mcpl_id$OFFSET, fieldValue);
                }

                /**
                 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
                 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
                 */
                public static MemorySegment asSlice(MemorySegment array, long index) {
                    return array.asSlice(layout().byteSize() * index);
                }

                /**
                 * The size (in bytes) of this struct
                 */
                public static long sizeof() { return layout().byteSize(); }

                /**
                 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
                 */
                public static MemorySegment allocate(SegmentAllocator allocator) {
                    return allocator.allocate(layout());
                }

                /**
                 * Allocate an array of size {@code elementCount} using {@code allocator}.
                 * The returned segment has size {@code elementCount * layout().byteSize()}.
                 */
                public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                    return reinterpret(addr, 1, arena, cleanup);
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code elementCount * layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                    return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
                }
            }

            private static final GroupLayout get_mcpl$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_mcpl"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t mcpl_id;
             * } get_mcpl
             * }
             */
            public static final GroupLayout get_mcpl$layout() {
                return get_mcpl$LAYOUT;
            }

            private static final long get_mcpl$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t mcpl_id;
             * } get_mcpl
             * }
             */
            public static final long get_mcpl$offset() {
                return get_mcpl$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t mcpl_id;
             * } get_mcpl
             * }
             */
            public static MemorySegment get_mcpl(MemorySegment union) {
                return union.asSlice(get_mcpl$OFFSET, get_mcpl$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t mcpl_id;
             * } get_mcpl
             * }
             */
            public static void get_mcpl(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, get_mcpl$OFFSET, get_mcpl$LAYOUT.byteSize());
            }

            /**
             * {@snippet lang=c :
             * struct {
             *     hid_t type_id;
             * }
             * }
             */
            public static class get_key_type {

                get_key_type() {
                    // Should not be called directly
                }

                private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                    hdf5_h.C_LONG.withName("type_id")
                ).withName("$anon$140:13");

                /**
                 * The layout of this struct
                 */
                public static final GroupLayout layout() {
                    return $LAYOUT;
                }

                private static final OfLong type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("type_id"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * hid_t type_id
                 * }
                 */
                public static final OfLong type_id$layout() {
                    return type_id$LAYOUT;
                }

                private static final long type_id$OFFSET = 0;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * hid_t type_id
                 * }
                 */
                public static final long type_id$offset() {
                    return type_id$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * hid_t type_id
                 * }
                 */
                public static long type_id(MemorySegment struct) {
                    return struct.get(type_id$LAYOUT, type_id$OFFSET);
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * hid_t type_id
                 * }
                 */
                public static void type_id(MemorySegment struct, long fieldValue) {
                    struct.set(type_id$LAYOUT, type_id$OFFSET, fieldValue);
                }

                /**
                 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
                 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
                 */
                public static MemorySegment asSlice(MemorySegment array, long index) {
                    return array.asSlice(layout().byteSize() * index);
                }

                /**
                 * The size (in bytes) of this struct
                 */
                public static long sizeof() { return layout().byteSize(); }

                /**
                 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
                 */
                public static MemorySegment allocate(SegmentAllocator allocator) {
                    return allocator.allocate(layout());
                }

                /**
                 * Allocate an array of size {@code elementCount} using {@code allocator}.
                 * The returned segment has size {@code elementCount * layout().byteSize()}.
                 */
                public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                    return reinterpret(addr, 1, arena, cleanup);
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code elementCount * layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                    return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
                }
            }

            private static final GroupLayout get_key_type$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_key_type"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t type_id;
             * } get_key_type
             * }
             */
            public static final GroupLayout get_key_type$layout() {
                return get_key_type$LAYOUT;
            }

            private static final long get_key_type$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t type_id;
             * } get_key_type
             * }
             */
            public static final long get_key_type$offset() {
                return get_key_type$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t type_id;
             * } get_key_type
             * }
             */
            public static MemorySegment get_key_type(MemorySegment union) {
                return union.asSlice(get_key_type$OFFSET, get_key_type$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t type_id;
             * } get_key_type
             * }
             */
            public static void get_key_type(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, get_key_type$OFFSET, get_key_type$LAYOUT.byteSize());
            }

            /**
             * {@snippet lang=c :
             * struct {
             *     hid_t type_id;
             * }
             * }
             */
            public static class get_val_type {

                get_val_type() {
                    // Should not be called directly
                }

                private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                    hdf5_h.C_LONG.withName("type_id")
                ).withName("$anon$145:13");

                /**
                 * The layout of this struct
                 */
                public static final GroupLayout layout() {
                    return $LAYOUT;
                }

                private static final OfLong type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("type_id"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * hid_t type_id
                 * }
                 */
                public static final OfLong type_id$layout() {
                    return type_id$LAYOUT;
                }

                private static final long type_id$OFFSET = 0;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * hid_t type_id
                 * }
                 */
                public static final long type_id$offset() {
                    return type_id$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * hid_t type_id
                 * }
                 */
                public static long type_id(MemorySegment struct) {
                    return struct.get(type_id$LAYOUT, type_id$OFFSET);
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * hid_t type_id
                 * }
                 */
                public static void type_id(MemorySegment struct, long fieldValue) {
                    struct.set(type_id$LAYOUT, type_id$OFFSET, fieldValue);
                }

                /**
                 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
                 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
                 */
                public static MemorySegment asSlice(MemorySegment array, long index) {
                    return array.asSlice(layout().byteSize() * index);
                }

                /**
                 * The size (in bytes) of this struct
                 */
                public static long sizeof() { return layout().byteSize(); }

                /**
                 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
                 */
                public static MemorySegment allocate(SegmentAllocator allocator) {
                    return allocator.allocate(layout());
                }

                /**
                 * Allocate an array of size {@code elementCount} using {@code allocator}.
                 * The returned segment has size {@code elementCount * layout().byteSize()}.
                 */
                public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                    return reinterpret(addr, 1, arena, cleanup);
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code elementCount * layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                    return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
                }
            }

            private static final GroupLayout get_val_type$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_val_type"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t type_id;
             * } get_val_type
             * }
             */
            public static final GroupLayout get_val_type$layout() {
                return get_val_type$LAYOUT;
            }

            private static final long get_val_type$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t type_id;
             * } get_val_type
             * }
             */
            public static final long get_val_type$offset() {
                return get_val_type$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t type_id;
             * } get_val_type
             * }
             */
            public static MemorySegment get_val_type(MemorySegment union) {
                return union.asSlice(get_val_type$OFFSET, get_val_type$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct {
             *     hid_t type_id;
             * } get_val_type
             * }
             */
            public static void get_val_type(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, get_val_type$OFFSET, get_val_type$LAYOUT.byteSize());
            }

            /**
             * {@snippet lang=c :
             * struct {
             *     hsize_t count;
             * }
             * }
             */
            public static class get_count {

                get_count() {
                    // Should not be called directly
                }

                private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                    hdf5_h.C_LONG.withName("count")
                ).withName("$anon$150:13");

                /**
                 * The layout of this struct
                 */
                public static final GroupLayout layout() {
                    return $LAYOUT;
                }

                private static final OfLong count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("count"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * hsize_t count
                 * }
                 */
                public static final OfLong count$layout() {
                    return count$LAYOUT;
                }

                private static final long count$OFFSET = 0;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * hsize_t count
                 * }
                 */
                public static final long count$offset() {
                    return count$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * hsize_t count
                 * }
                 */
                public static long count(MemorySegment struct) {
                    return struct.get(count$LAYOUT, count$OFFSET);
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * hsize_t count
                 * }
                 */
                public static void count(MemorySegment struct, long fieldValue) {
                    struct.set(count$LAYOUT, count$OFFSET, fieldValue);
                }

                /**
                 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
                 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
                 */
                public static MemorySegment asSlice(MemorySegment array, long index) {
                    return array.asSlice(layout().byteSize() * index);
                }

                /**
                 * The size (in bytes) of this struct
                 */
                public static long sizeof() { return layout().byteSize(); }

                /**
                 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
                 */
                public static MemorySegment allocate(SegmentAllocator allocator) {
                    return allocator.allocate(layout());
                }

                /**
                 * Allocate an array of size {@code elementCount} using {@code allocator}.
                 * The returned segment has size {@code elementCount * layout().byteSize()}.
                 */
                public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                    return reinterpret(addr, 1, arena, cleanup);
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code elementCount * layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                    return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
                }
            }

            private static final GroupLayout get_count$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get_count"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct {
             *     hsize_t count;
             * } get_count
             * }
             */
            public static final GroupLayout get_count$layout() {
                return get_count$LAYOUT;
            }

            private static final long get_count$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct {
             *     hsize_t count;
             * } get_count
             * }
             */
            public static final long get_count$offset() {
                return get_count$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct {
             *     hsize_t count;
             * } get_count
             * }
             */
            public static MemorySegment get_count(MemorySegment union) {
                return union.asSlice(get_count$OFFSET, get_count$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct {
             *     hsize_t count;
             * } get_count
             * }
             */
            public static void get_count(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, get_count$OFFSET, get_count$LAYOUT.byteSize());
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this union
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout args$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("args"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * union {
         *     struct {
         *         hid_t mapl_id;
         *     } get_mapl;
         *     struct {
         *         hid_t mcpl_id;
         *     } get_mcpl;
         *     struct {
         *         hid_t type_id;
         *     } get_key_type;
         *     struct {
         *         hid_t type_id;
         *     } get_val_type;
         *     struct {
         *         hsize_t count;
         *     } get_count;
         * } args
         * }
         */
        public static final GroupLayout args$layout() {
            return args$LAYOUT;
        }

        private static final long args$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * union {
         *     struct {
         *         hid_t mapl_id;
         *     } get_mapl;
         *     struct {
         *         hid_t mcpl_id;
         *     } get_mcpl;
         *     struct {
         *         hid_t type_id;
         *     } get_key_type;
         *     struct {
         *         hid_t type_id;
         *     } get_val_type;
         *     struct {
         *         hsize_t count;
         *     } get_count;
         * } args
         * }
         */
        public static final long args$offset() {
            return args$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * union {
         *     struct {
         *         hid_t mapl_id;
         *     } get_mapl;
         *     struct {
         *         hid_t mcpl_id;
         *     } get_mcpl;
         *     struct {
         *         hid_t type_id;
         *     } get_key_type;
         *     struct {
         *         hid_t type_id;
         *     } get_val_type;
         *     struct {
         *         hsize_t count;
         *     } get_count;
         * } args
         * }
         */
        public static MemorySegment args(MemorySegment struct) {
            return struct.asSlice(args$OFFSET, args$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * union {
         *     struct {
         *         hid_t mapl_id;
         *     } get_mapl;
         *     struct {
         *         hid_t mcpl_id;
         *     } get_mcpl;
         *     struct {
         *         hid_t type_id;
         *     } get_key_type;
         *     struct {
         *         hid_t type_id;
         *     } get_val_type;
         *     struct {
         *         hsize_t count;
         *     } get_count;
         * } args
         * }
         */
        public static void args(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, args$OFFSET, args$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout get$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("get"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_map_get_t get_type;
     *     union {
     *         struct {
     *             hid_t mapl_id;
     *         } get_mapl;
     *         struct {
     *             hid_t mcpl_id;
     *         } get_mcpl;
     *         struct {
     *             hid_t type_id;
     *         } get_key_type;
     *         struct {
     *             hid_t type_id;
     *         } get_val_type;
     *         struct {
     *             hsize_t count;
     *         } get_count;
     *     } args;
     * } get
     * }
     */
    public static final GroupLayout get$layout() {
        return get$LAYOUT;
    }

    private static final long get$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_map_get_t get_type;
     *     union {
     *         struct {
     *             hid_t mapl_id;
     *         } get_mapl;
     *         struct {
     *             hid_t mcpl_id;
     *         } get_mcpl;
     *         struct {
     *             hid_t type_id;
     *         } get_key_type;
     *         struct {
     *             hid_t type_id;
     *         } get_val_type;
     *         struct {
     *             hsize_t count;
     *         } get_count;
     *     } args;
     * } get
     * }
     */
    public static final long get$offset() {
        return get$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_map_get_t get_type;
     *     union {
     *         struct {
     *             hid_t mapl_id;
     *         } get_mapl;
     *         struct {
     *             hid_t mcpl_id;
     *         } get_mcpl;
     *         struct {
     *             hid_t type_id;
     *         } get_key_type;
     *         struct {
     *             hid_t type_id;
     *         } get_val_type;
     *         struct {
     *             hsize_t count;
     *         } get_count;
     *     } args;
     * } get
     * }
     */
    public static MemorySegment get(MemorySegment union) {
        return union.asSlice(get$OFFSET, get$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_map_get_t get_type;
     *     union {
     *         struct {
     *             hid_t mapl_id;
     *         } get_mapl;
     *         struct {
     *             hid_t mcpl_id;
     *         } get_mcpl;
     *         struct {
     *             hid_t type_id;
     *         } get_key_type;
     *         struct {
     *             hid_t type_id;
     *         } get_val_type;
     *         struct {
     *             hsize_t count;
     *         } get_count;
     *     } args;
     * } get
     * }
     */
    public static void get(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, get$OFFSET, get$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     H5VL_map_specific_t specific_type;
     *     union {
     *         struct {
     *             H5VL_loc_params_t loc_params;
     *             hsize_t idx;
     *             hid_t key_mem_type_id;
     *             H5M_iterate_t op;
     *             void *op_data;
     *         } iterate;
     *         struct {
     *             H5VL_loc_params_t loc_params;
     *             hid_t key_mem_type_id;
     *             const void *key;
     *         } del;
     *     } args;
     * }
     * }
     */
    public static class specific {

        specific() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            hdf5_h.C_INT.withName("specific_type"),
            MemoryLayout.paddingLayout(4),
            H5VL_map_args_t.specific.args.layout().withName("args")
        ).withName("$anon$157:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt specific_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("specific_type"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * H5VL_map_specific_t specific_type
         * }
         */
        public static final OfInt specific_type$layout() {
            return specific_type$LAYOUT;
        }

        private static final long specific_type$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * H5VL_map_specific_t specific_type
         * }
         */
        public static final long specific_type$offset() {
            return specific_type$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * H5VL_map_specific_t specific_type
         * }
         */
        public static int specific_type(MemorySegment struct) {
            return struct.get(specific_type$LAYOUT, specific_type$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * H5VL_map_specific_t specific_type
         * }
         */
        public static void specific_type(MemorySegment struct, int fieldValue) {
            struct.set(specific_type$LAYOUT, specific_type$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * union {
         *     struct {
         *         H5VL_loc_params_t loc_params;
         *         hsize_t idx;
         *         hid_t key_mem_type_id;
         *         H5M_iterate_t op;
         *         void *op_data;
         *     } iterate;
         *     struct {
         *         H5VL_loc_params_t loc_params;
         *         hid_t key_mem_type_id;
         *         const void *key;
         *     } del;
         * }
         * }
         */
        public static class args {

            args() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
                H5VL_map_args_t.specific.args.iterate.layout().withName("iterate"),
                H5VL_map_args_t.specific.args.del.layout().withName("del")
            ).withName("$anon$162:9");

            /**
             * The layout of this union
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            /**
             * {@snippet lang=c :
             * struct {
             *     H5VL_loc_params_t loc_params;
             *     hsize_t idx;
             *     hid_t key_mem_type_id;
             *     H5M_iterate_t op;
             *     void *op_data;
             * }
             * }
             */
            public static class iterate {

                iterate() {
                    // Should not be called directly
                }

                private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                    H5VL_loc_params_t.layout().withName("loc_params"),
                    hdf5_h.C_LONG.withName("idx"),
                    hdf5_h.C_LONG.withName("key_mem_type_id"),
                    hdf5_h.C_POINTER.withName("op"),
                    hdf5_h.C_POINTER.withName("op_data")
                ).withName("$anon$164:13");

                /**
                 * The layout of this struct
                 */
                public static final GroupLayout layout() {
                    return $LAYOUT;
                }

                private static final GroupLayout loc_params$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("loc_params"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * H5VL_loc_params_t loc_params
                 * }
                 */
                public static final GroupLayout loc_params$layout() {
                    return loc_params$LAYOUT;
                }

                private static final long loc_params$OFFSET = 0;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * H5VL_loc_params_t loc_params
                 * }
                 */
                public static final long loc_params$offset() {
                    return loc_params$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * H5VL_loc_params_t loc_params
                 * }
                 */
                public static MemorySegment loc_params(MemorySegment struct) {
                    return struct.asSlice(loc_params$OFFSET, loc_params$LAYOUT.byteSize());
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * H5VL_loc_params_t loc_params
                 * }
                 */
                public static void loc_params(MemorySegment struct, MemorySegment fieldValue) {
                    MemorySegment.copy(fieldValue, 0L, struct, loc_params$OFFSET, loc_params$LAYOUT.byteSize());
                }

                private static final OfLong idx$LAYOUT = (OfLong)$LAYOUT.select(groupElement("idx"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * hsize_t idx
                 * }
                 */
                public static final OfLong idx$layout() {
                    return idx$LAYOUT;
                }

                private static final long idx$OFFSET = 40;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * hsize_t idx
                 * }
                 */
                public static final long idx$offset() {
                    return idx$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * hsize_t idx
                 * }
                 */
                public static long idx(MemorySegment struct) {
                    return struct.get(idx$LAYOUT, idx$OFFSET);
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * hsize_t idx
                 * }
                 */
                public static void idx(MemorySegment struct, long fieldValue) {
                    struct.set(idx$LAYOUT, idx$OFFSET, fieldValue);
                }

                private static final OfLong key_mem_type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("key_mem_type_id"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * hid_t key_mem_type_id
                 * }
                 */
                public static final OfLong key_mem_type_id$layout() {
                    return key_mem_type_id$LAYOUT;
                }

                private static final long key_mem_type_id$OFFSET = 48;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * hid_t key_mem_type_id
                 * }
                 */
                public static final long key_mem_type_id$offset() {
                    return key_mem_type_id$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * hid_t key_mem_type_id
                 * }
                 */
                public static long key_mem_type_id(MemorySegment struct) {
                    return struct.get(key_mem_type_id$LAYOUT, key_mem_type_id$OFFSET);
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * hid_t key_mem_type_id
                 * }
                 */
                public static void key_mem_type_id(MemorySegment struct, long fieldValue) {
                    struct.set(key_mem_type_id$LAYOUT, key_mem_type_id$OFFSET, fieldValue);
                }

                private static final AddressLayout op$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("op"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * H5M_iterate_t op
                 * }
                 */
                public static final AddressLayout op$layout() {
                    return op$LAYOUT;
                }

                private static final long op$OFFSET = 56;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * H5M_iterate_t op
                 * }
                 */
                public static final long op$offset() {
                    return op$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * H5M_iterate_t op
                 * }
                 */
                public static MemorySegment op(MemorySegment struct) {
                    return struct.get(op$LAYOUT, op$OFFSET);
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * H5M_iterate_t op
                 * }
                 */
                public static void op(MemorySegment struct, MemorySegment fieldValue) {
                    struct.set(op$LAYOUT, op$OFFSET, fieldValue);
                }

                private static final AddressLayout op_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("op_data"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * void *op_data
                 * }
                 */
                public static final AddressLayout op_data$layout() {
                    return op_data$LAYOUT;
                }

                private static final long op_data$OFFSET = 64;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * void *op_data
                 * }
                 */
                public static final long op_data$offset() {
                    return op_data$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * void *op_data
                 * }
                 */
                public static MemorySegment op_data(MemorySegment struct) {
                    return struct.get(op_data$LAYOUT, op_data$OFFSET);
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * void *op_data
                 * }
                 */
                public static void op_data(MemorySegment struct, MemorySegment fieldValue) {
                    struct.set(op_data$LAYOUT, op_data$OFFSET, fieldValue);
                }

                /**
                 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
                 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
                 */
                public static MemorySegment asSlice(MemorySegment array, long index) {
                    return array.asSlice(layout().byteSize() * index);
                }

                /**
                 * The size (in bytes) of this struct
                 */
                public static long sizeof() { return layout().byteSize(); }

                /**
                 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
                 */
                public static MemorySegment allocate(SegmentAllocator allocator) {
                    return allocator.allocate(layout());
                }

                /**
                 * Allocate an array of size {@code elementCount} using {@code allocator}.
                 * The returned segment has size {@code elementCount * layout().byteSize()}.
                 */
                public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                    return reinterpret(addr, 1, arena, cleanup);
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code elementCount * layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                    return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
                }
            }

            private static final GroupLayout iterate$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("iterate"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct {
             *     H5VL_loc_params_t loc_params;
             *     hsize_t idx;
             *     hid_t key_mem_type_id;
             *     H5M_iterate_t op;
             *     void *op_data;
             * } iterate
             * }
             */
            public static final GroupLayout iterate$layout() {
                return iterate$LAYOUT;
            }

            private static final long iterate$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct {
             *     H5VL_loc_params_t loc_params;
             *     hsize_t idx;
             *     hid_t key_mem_type_id;
             *     H5M_iterate_t op;
             *     void *op_data;
             * } iterate
             * }
             */
            public static final long iterate$offset() {
                return iterate$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct {
             *     H5VL_loc_params_t loc_params;
             *     hsize_t idx;
             *     hid_t key_mem_type_id;
             *     H5M_iterate_t op;
             *     void *op_data;
             * } iterate
             * }
             */
            public static MemorySegment iterate(MemorySegment union) {
                return union.asSlice(iterate$OFFSET, iterate$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct {
             *     H5VL_loc_params_t loc_params;
             *     hsize_t idx;
             *     hid_t key_mem_type_id;
             *     H5M_iterate_t op;
             *     void *op_data;
             * } iterate
             * }
             */
            public static void iterate(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, iterate$OFFSET, iterate$LAYOUT.byteSize());
            }

            /**
             * {@snippet lang=c :
             * struct {
             *     H5VL_loc_params_t loc_params;
             *     hid_t key_mem_type_id;
             *     const void *key;
             * }
             * }
             */
            public static class del {

                del() {
                    // Should not be called directly
                }

                private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                    H5VL_loc_params_t.layout().withName("loc_params"),
                    hdf5_h.C_LONG.withName("key_mem_type_id"),
                    hdf5_h.C_POINTER.withName("key")
                ).withName("$anon$173:13");

                /**
                 * The layout of this struct
                 */
                public static final GroupLayout layout() {
                    return $LAYOUT;
                }

                private static final GroupLayout loc_params$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("loc_params"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * H5VL_loc_params_t loc_params
                 * }
                 */
                public static final GroupLayout loc_params$layout() {
                    return loc_params$LAYOUT;
                }

                private static final long loc_params$OFFSET = 0;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * H5VL_loc_params_t loc_params
                 * }
                 */
                public static final long loc_params$offset() {
                    return loc_params$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * H5VL_loc_params_t loc_params
                 * }
                 */
                public static MemorySegment loc_params(MemorySegment struct) {
                    return struct.asSlice(loc_params$OFFSET, loc_params$LAYOUT.byteSize());
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * H5VL_loc_params_t loc_params
                 * }
                 */
                public static void loc_params(MemorySegment struct, MemorySegment fieldValue) {
                    MemorySegment.copy(fieldValue, 0L, struct, loc_params$OFFSET, loc_params$LAYOUT.byteSize());
                }

                private static final OfLong key_mem_type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("key_mem_type_id"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * hid_t key_mem_type_id
                 * }
                 */
                public static final OfLong key_mem_type_id$layout() {
                    return key_mem_type_id$LAYOUT;
                }

                private static final long key_mem_type_id$OFFSET = 40;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * hid_t key_mem_type_id
                 * }
                 */
                public static final long key_mem_type_id$offset() {
                    return key_mem_type_id$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * hid_t key_mem_type_id
                 * }
                 */
                public static long key_mem_type_id(MemorySegment struct) {
                    return struct.get(key_mem_type_id$LAYOUT, key_mem_type_id$OFFSET);
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * hid_t key_mem_type_id
                 * }
                 */
                public static void key_mem_type_id(MemorySegment struct, long fieldValue) {
                    struct.set(key_mem_type_id$LAYOUT, key_mem_type_id$OFFSET, fieldValue);
                }

                private static final AddressLayout key$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("key"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * const void *key
                 * }
                 */
                public static final AddressLayout key$layout() {
                    return key$LAYOUT;
                }

                private static final long key$OFFSET = 48;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * const void *key
                 * }
                 */
                public static final long key$offset() {
                    return key$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * const void *key
                 * }
                 */
                public static MemorySegment key(MemorySegment struct) {
                    return struct.get(key$LAYOUT, key$OFFSET);
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * const void *key
                 * }
                 */
                public static void key(MemorySegment struct, MemorySegment fieldValue) {
                    struct.set(key$LAYOUT, key$OFFSET, fieldValue);
                }

                /**
                 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
                 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
                 */
                public static MemorySegment asSlice(MemorySegment array, long index) {
                    return array.asSlice(layout().byteSize() * index);
                }

                /**
                 * The size (in bytes) of this struct
                 */
                public static long sizeof() { return layout().byteSize(); }

                /**
                 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
                 */
                public static MemorySegment allocate(SegmentAllocator allocator) {
                    return allocator.allocate(layout());
                }

                /**
                 * Allocate an array of size {@code elementCount} using {@code allocator}.
                 * The returned segment has size {@code elementCount * layout().byteSize()}.
                 */
                public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                    return reinterpret(addr, 1, arena, cleanup);
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code elementCount * layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                    return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
                }
            }

            private static final GroupLayout del$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("del"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct {
             *     H5VL_loc_params_t loc_params;
             *     hid_t key_mem_type_id;
             *     const void *key;
             * } del
             * }
             */
            public static final GroupLayout del$layout() {
                return del$LAYOUT;
            }

            private static final long del$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct {
             *     H5VL_loc_params_t loc_params;
             *     hid_t key_mem_type_id;
             *     const void *key;
             * } del
             * }
             */
            public static final long del$offset() {
                return del$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct {
             *     H5VL_loc_params_t loc_params;
             *     hid_t key_mem_type_id;
             *     const void *key;
             * } del
             * }
             */
            public static MemorySegment del(MemorySegment union) {
                return union.asSlice(del$OFFSET, del$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct {
             *     H5VL_loc_params_t loc_params;
             *     hid_t key_mem_type_id;
             *     const void *key;
             * } del
             * }
             */
            public static void del(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, del$OFFSET, del$LAYOUT.byteSize());
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this union
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout args$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("args"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * union {
         *     struct {
         *         H5VL_loc_params_t loc_params;
         *         hsize_t idx;
         *         hid_t key_mem_type_id;
         *         H5M_iterate_t op;
         *         void *op_data;
         *     } iterate;
         *     struct {
         *         H5VL_loc_params_t loc_params;
         *         hid_t key_mem_type_id;
         *         const void *key;
         *     } del;
         * } args
         * }
         */
        public static final GroupLayout args$layout() {
            return args$LAYOUT;
        }

        private static final long args$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * union {
         *     struct {
         *         H5VL_loc_params_t loc_params;
         *         hsize_t idx;
         *         hid_t key_mem_type_id;
         *         H5M_iterate_t op;
         *         void *op_data;
         *     } iterate;
         *     struct {
         *         H5VL_loc_params_t loc_params;
         *         hid_t key_mem_type_id;
         *         const void *key;
         *     } del;
         * } args
         * }
         */
        public static final long args$offset() {
            return args$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * union {
         *     struct {
         *         H5VL_loc_params_t loc_params;
         *         hsize_t idx;
         *         hid_t key_mem_type_id;
         *         H5M_iterate_t op;
         *         void *op_data;
         *     } iterate;
         *     struct {
         *         H5VL_loc_params_t loc_params;
         *         hid_t key_mem_type_id;
         *         const void *key;
         *     } del;
         * } args
         * }
         */
        public static MemorySegment args(MemorySegment struct) {
            return struct.asSlice(args$OFFSET, args$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * union {
         *     struct {
         *         H5VL_loc_params_t loc_params;
         *         hsize_t idx;
         *         hid_t key_mem_type_id;
         *         H5M_iterate_t op;
         *         void *op_data;
         *     } iterate;
         *     struct {
         *         H5VL_loc_params_t loc_params;
         *         hid_t key_mem_type_id;
         *         const void *key;
         *     } del;
         * } args
         * }
         */
        public static void args(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, args$OFFSET, args$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout specific$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("specific"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_map_specific_t specific_type;
     *     union {
     *         struct {
     *             H5VL_loc_params_t loc_params;
     *             hsize_t idx;
     *             hid_t key_mem_type_id;
     *             H5M_iterate_t op;
     *             void *op_data;
     *         } iterate;
     *         struct {
     *             H5VL_loc_params_t loc_params;
     *             hid_t key_mem_type_id;
     *             const void *key;
     *         } del;
     *     } args;
     * } specific
     * }
     */
    public static final GroupLayout specific$layout() {
        return specific$LAYOUT;
    }

    private static final long specific$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_map_specific_t specific_type;
     *     union {
     *         struct {
     *             H5VL_loc_params_t loc_params;
     *             hsize_t idx;
     *             hid_t key_mem_type_id;
     *             H5M_iterate_t op;
     *             void *op_data;
     *         } iterate;
     *         struct {
     *             H5VL_loc_params_t loc_params;
     *             hid_t key_mem_type_id;
     *             const void *key;
     *         } del;
     *     } args;
     * } specific
     * }
     */
    public static final long specific$offset() {
        return specific$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_map_specific_t specific_type;
     *     union {
     *         struct {
     *             H5VL_loc_params_t loc_params;
     *             hsize_t idx;
     *             hid_t key_mem_type_id;
     *             H5M_iterate_t op;
     *             void *op_data;
     *         } iterate;
     *         struct {
     *             H5VL_loc_params_t loc_params;
     *             hid_t key_mem_type_id;
     *             const void *key;
     *         } del;
     *     } args;
     * } specific
     * }
     */
    public static MemorySegment specific(MemorySegment union) {
        return union.asSlice(specific$OFFSET, specific$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     H5VL_map_specific_t specific_type;
     *     union {
     *         struct {
     *             H5VL_loc_params_t loc_params;
     *             hsize_t idx;
     *             hid_t key_mem_type_id;
     *             H5M_iterate_t op;
     *             void *op_data;
     *         } iterate;
     *         struct {
     *             H5VL_loc_params_t loc_params;
     *             hid_t key_mem_type_id;
     *             const void *key;
     *         } del;
     *     } args;
     * } specific
     * }
     */
    public static void specific(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, specific$OFFSET, specific$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

