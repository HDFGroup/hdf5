// Generated by jextract

package org.hdfgroup.javahdf5;

import static java.lang.foreign.MemoryLayout.PathElement.*;
import static java.lang.foreign.ValueLayout.*;

import java.lang.foreign.*;
import java.lang.invoke.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

/**
 * {@snippet lang=c :
 * struct H5VL_file_specific_args_t {
 *     H5VL_file_specific_t op_type;
 *     union {
 *         struct {
 *             H5I_type_t obj_type;
 *             H5F_scope_t scope;
 *         } flush;
 *         struct {
 *             void **file;
 *         } reopen;
 *         struct {
 *             const char *filename;
 *             hid_t fapl_id;
 *             hbool_t *accessible;
 *         } is_accessible;
 *         struct {
 *             const char *filename;
 *             hid_t fapl_id;
 *         } del;
 *         struct {
 *             void *obj2;
 *             hbool_t *same_file;
 *         } is_equal;
 *     } args;
 * }
 * }
 */
public class H5VL_file_specific_args_t {

    H5VL_file_specific_args_t()
    {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT =
        MemoryLayout
            .structLayout(hdf5_h.C_INT.withName("op_type"), MemoryLayout.paddingLayout(4),
                          H5VL_file_specific_args_t.args.layout().withName("args"))
            .withName("H5VL_file_specific_args_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() { return $LAYOUT; }

    private static final OfInt op_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("op_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * H5VL_file_specific_t op_type
     * }
     */
    public static final OfInt op_type$layout() { return op_type$LAYOUT; }

    private static final long op_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * H5VL_file_specific_t op_type
     * }
     */
    public static final long op_type$offset() { return op_type$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * H5VL_file_specific_t op_type
     * }
     */
    public static int op_type(MemorySegment struct) { return struct.get(op_type$LAYOUT, op_type$OFFSET); }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * H5VL_file_specific_t op_type
     * }
     */
    public static void op_type(MemorySegment struct, int fieldValue)
    {
        struct.set(op_type$LAYOUT, op_type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct {
     *         H5I_type_t obj_type;
     *         H5F_scope_t scope;
     *     } flush;
     *     struct {
     *         void **file;
     *     } reopen;
     *     struct {
     *         const char *filename;
     *         hid_t fapl_id;
     *         hbool_t *accessible;
     *     } is_accessible;
     *     struct {
     *         const char *filename;
     *         hid_t fapl_id;
     *     } del;
     *     struct {
     *         void *obj2;
     *         hbool_t *same_file;
     *     } is_equal;
     * }
     * }
     */
    public static class args {

        args()
        {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT =
            MemoryLayout
                .unionLayout(H5VL_file_specific_args_t.args.flush.layout().withName("flush"),
                             H5VL_file_specific_args_t.args.reopen.layout().withName("reopen"),
                             H5VL_file_specific_args_t.args.is_accessible.layout().withName("is_accessible"),
                             H5VL_file_specific_args_t.args.del.layout().withName("del"),
                             H5VL_file_specific_args_t.args.is_equal.layout().withName("is_equal"))
                .withName("$anon$461:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() { return $LAYOUT; }

        /**
         * {@snippet lang=c :
         * struct {
         *     H5I_type_t obj_type;
         *     H5F_scope_t scope;
         * }
         * }
         */
        public static class flush {

            flush()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_INT.withName("obj_type"), hdf5_h.C_INT.withName("scope"))
                    .withName("$anon$463:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final OfInt obj_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("obj_type"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * H5I_type_t obj_type
             * }
             */
            public static final OfInt obj_type$layout() { return obj_type$LAYOUT; }

            private static final long obj_type$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * H5I_type_t obj_type
             * }
             */
            public static final long obj_type$offset() { return obj_type$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * H5I_type_t obj_type
             * }
             */
            public static int obj_type(MemorySegment struct)
            {
                return struct.get(obj_type$LAYOUT, obj_type$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * H5I_type_t obj_type
             * }
             */
            public static void obj_type(MemorySegment struct, int fieldValue)
            {
                struct.set(obj_type$LAYOUT, obj_type$OFFSET, fieldValue);
            }

            private static final OfInt scope$LAYOUT = (OfInt)$LAYOUT.select(groupElement("scope"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * H5F_scope_t scope
             * }
             */
            public static final OfInt scope$layout() { return scope$LAYOUT; }

            private static final long scope$OFFSET = 4;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * H5F_scope_t scope
             * }
             */
            public static final long scope$offset() { return scope$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * H5F_scope_t scope
             * }
             */
            public static int scope(MemorySegment struct) { return struct.get(scope$LAYOUT, scope$OFFSET); }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * H5F_scope_t scope
             * }
             */
            public static void scope(MemorySegment struct, int fieldValue)
            {
                struct.set(scope$LAYOUT, scope$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout flush$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flush"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     H5I_type_t obj_type;
         *     H5F_scope_t scope;
         * } flush
         * }
         */
        public static final GroupLayout flush$layout() { return flush$LAYOUT; }

        private static final long flush$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     H5I_type_t obj_type;
         *     H5F_scope_t scope;
         * } flush
         * }
         */
        public static final long flush$offset() { return flush$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     H5I_type_t obj_type;
         *     H5F_scope_t scope;
         * } flush
         * }
         */
        public static MemorySegment flush(MemorySegment union)
        {
            return union.asSlice(flush$OFFSET, flush$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     H5I_type_t obj_type;
         *     H5F_scope_t scope;
         * } flush
         * }
         */
        public static void flush(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, flush$OFFSET, flush$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     void **file;
         * }
         * }
         */
        public static class reopen {

            reopen()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout.structLayout(hdf5_h.C_POINTER.withName("file")).withName("$anon$469:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final AddressLayout file$LAYOUT =
                (AddressLayout)$LAYOUT.select(groupElement("file"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * void **file
             * }
             */
            public static final AddressLayout file$layout() { return file$LAYOUT; }

            private static final long file$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * void **file
             * }
             */
            public static final long file$offset() { return file$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * void **file
             * }
             */
            public static MemorySegment file(MemorySegment struct)
            {
                return struct.get(file$LAYOUT, file$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * void **file
             * }
             */
            public static void file(MemorySegment struct, MemorySegment fieldValue)
            {
                struct.set(file$LAYOUT, file$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout reopen$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("reopen"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     void **file;
         * } reopen
         * }
         */
        public static final GroupLayout reopen$layout() { return reopen$LAYOUT; }

        private static final long reopen$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     void **file;
         * } reopen
         * }
         */
        public static final long reopen$offset() { return reopen$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     void **file;
         * } reopen
         * }
         */
        public static MemorySegment reopen(MemorySegment union)
        {
            return union.asSlice(reopen$OFFSET, reopen$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     void **file;
         * } reopen
         * }
         */
        public static void reopen(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, reopen$OFFSET, reopen$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     const char *filename;
         *     hid_t fapl_id;
         *     hbool_t *accessible;
         * }
         * }
         */
        public static class is_accessible {

            is_accessible()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout
                    .structLayout(hdf5_h.C_POINTER.withName("filename"), hdf5_h.C_LONG.withName("fapl_id"),
                                  hdf5_h.C_POINTER.withName("accessible"))
                    .withName("$anon$474:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final AddressLayout filename$LAYOUT =
                (AddressLayout)$LAYOUT.select(groupElement("filename"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * const char *filename
             * }
             */
            public static final AddressLayout filename$layout() { return filename$LAYOUT; }

            private static final long filename$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * const char *filename
             * }
             */
            public static final long filename$offset() { return filename$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * const char *filename
             * }
             */
            public static MemorySegment filename(MemorySegment struct)
            {
                return struct.get(filename$LAYOUT, filename$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * const char *filename
             * }
             */
            public static void filename(MemorySegment struct, MemorySegment fieldValue)
            {
                struct.set(filename$LAYOUT, filename$OFFSET, fieldValue);
            }

            private static final OfLong fapl_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fapl_id"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hid_t fapl_id
             * }
             */
            public static final OfLong fapl_id$layout() { return fapl_id$LAYOUT; }

            private static final long fapl_id$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hid_t fapl_id
             * }
             */
            public static final long fapl_id$offset() { return fapl_id$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hid_t fapl_id
             * }
             */
            public static long fapl_id(MemorySegment struct)
            {
                return struct.get(fapl_id$LAYOUT, fapl_id$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hid_t fapl_id
             * }
             */
            public static void fapl_id(MemorySegment struct, long fieldValue)
            {
                struct.set(fapl_id$LAYOUT, fapl_id$OFFSET, fieldValue);
            }

            private static final AddressLayout accessible$LAYOUT =
                (AddressLayout)$LAYOUT.select(groupElement("accessible"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hbool_t *accessible
             * }
             */
            public static final AddressLayout accessible$layout() { return accessible$LAYOUT; }

            private static final long accessible$OFFSET = 16;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hbool_t *accessible
             * }
             */
            public static final long accessible$offset() { return accessible$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hbool_t *accessible
             * }
             */
            public static MemorySegment accessible(MemorySegment struct)
            {
                return struct.get(accessible$LAYOUT, accessible$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hbool_t *accessible
             * }
             */
            public static void accessible(MemorySegment struct, MemorySegment fieldValue)
            {
                struct.set(accessible$LAYOUT, accessible$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout is_accessible$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("is_accessible"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     const char *filename;
         *     hid_t fapl_id;
         *     hbool_t *accessible;
         * } is_accessible
         * }
         */
        public static final GroupLayout is_accessible$layout() { return is_accessible$LAYOUT; }

        private static final long is_accessible$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     const char *filename;
         *     hid_t fapl_id;
         *     hbool_t *accessible;
         * } is_accessible
         * }
         */
        public static final long is_accessible$offset() { return is_accessible$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     const char *filename;
         *     hid_t fapl_id;
         *     hbool_t *accessible;
         * } is_accessible
         * }
         */
        public static MemorySegment is_accessible(MemorySegment union)
        {
            return union.asSlice(is_accessible$OFFSET, is_accessible$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     const char *filename;
         *     hid_t fapl_id;
         *     hbool_t *accessible;
         * } is_accessible
         * }
         */
        public static void is_accessible(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, is_accessible$OFFSET, is_accessible$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     const char *filename;
         *     hid_t fapl_id;
         * }
         * }
         */
        public static class del {

            del()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout
                    .structLayout(hdf5_h.C_POINTER.withName("filename"), hdf5_h.C_LONG.withName("fapl_id"))
                    .withName("$anon$481:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final AddressLayout filename$LAYOUT =
                (AddressLayout)$LAYOUT.select(groupElement("filename"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * const char *filename
             * }
             */
            public static final AddressLayout filename$layout() { return filename$LAYOUT; }

            private static final long filename$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * const char *filename
             * }
             */
            public static final long filename$offset() { return filename$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * const char *filename
             * }
             */
            public static MemorySegment filename(MemorySegment struct)
            {
                return struct.get(filename$LAYOUT, filename$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * const char *filename
             * }
             */
            public static void filename(MemorySegment struct, MemorySegment fieldValue)
            {
                struct.set(filename$LAYOUT, filename$OFFSET, fieldValue);
            }

            private static final OfLong fapl_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fapl_id"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hid_t fapl_id
             * }
             */
            public static final OfLong fapl_id$layout() { return fapl_id$LAYOUT; }

            private static final long fapl_id$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hid_t fapl_id
             * }
             */
            public static final long fapl_id$offset() { return fapl_id$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hid_t fapl_id
             * }
             */
            public static long fapl_id(MemorySegment struct)
            {
                return struct.get(fapl_id$LAYOUT, fapl_id$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hid_t fapl_id
             * }
             */
            public static void fapl_id(MemorySegment struct, long fieldValue)
            {
                struct.set(fapl_id$LAYOUT, fapl_id$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout del$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("del"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     const char *filename;
         *     hid_t fapl_id;
         * } del
         * }
         */
        public static final GroupLayout del$layout() { return del$LAYOUT; }

        private static final long del$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     const char *filename;
         *     hid_t fapl_id;
         * } del
         * }
         */
        public static final long del$offset() { return del$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     const char *filename;
         *     hid_t fapl_id;
         * } del
         * }
         */
        public static MemorySegment del(MemorySegment union)
        {
            return union.asSlice(del$OFFSET, del$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     const char *filename;
         *     hid_t fapl_id;
         * } del
         * }
         */
        public static void del(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, del$OFFSET, del$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     void *obj2;
         *     hbool_t *same_file;
         * }
         * }
         */
        public static class is_equal {

            is_equal()
            {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT =
                MemoryLayout
                    .structLayout(hdf5_h.C_POINTER.withName("obj2"), hdf5_h.C_POINTER.withName("same_file"))
                    .withName("$anon$487:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() { return $LAYOUT; }

            private static final AddressLayout obj2$LAYOUT =
                (AddressLayout)$LAYOUT.select(groupElement("obj2"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * void *obj2
             * }
             */
            public static final AddressLayout obj2$layout() { return obj2$LAYOUT; }

            private static final long obj2$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * void *obj2
             * }
             */
            public static final long obj2$offset() { return obj2$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * void *obj2
             * }
             */
            public static MemorySegment obj2(MemorySegment struct)
            {
                return struct.get(obj2$LAYOUT, obj2$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * void *obj2
             * }
             */
            public static void obj2(MemorySegment struct, MemorySegment fieldValue)
            {
                struct.set(obj2$LAYOUT, obj2$OFFSET, fieldValue);
            }

            private static final AddressLayout same_file$LAYOUT =
                (AddressLayout)$LAYOUT.select(groupElement("same_file"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * hbool_t *same_file
             * }
             */
            public static final AddressLayout same_file$layout() { return same_file$LAYOUT; }

            private static final long same_file$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * hbool_t *same_file
             * }
             */
            public static final long same_file$offset() { return same_file$OFFSET; }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * hbool_t *same_file
             * }
             */
            public static MemorySegment same_file(MemorySegment struct)
            {
                return struct.get(same_file$LAYOUT, same_file$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * hbool_t *same_file
             * }
             */
            public static void same_file(MemorySegment struct, MemorySegment fieldValue)
            {
                struct.set(same_file$LAYOUT, same_file$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index)
            {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator)
            {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
            {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                    Consumer<MemorySegment> cleanup)
            {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout is_equal$LAYOUT =
            (GroupLayout)$LAYOUT.select(groupElement("is_equal"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     void *obj2;
         *     hbool_t *same_file;
         * } is_equal
         * }
         */
        public static final GroupLayout is_equal$layout() { return is_equal$LAYOUT; }

        private static final long is_equal$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     void *obj2;
         *     hbool_t *same_file;
         * } is_equal
         * }
         */
        public static final long is_equal$offset() { return is_equal$OFFSET; }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     void *obj2;
         *     hbool_t *same_file;
         * } is_equal
         * }
         */
        public static MemorySegment is_equal(MemorySegment union)
        {
            return union.asSlice(is_equal$OFFSET, is_equal$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     void *obj2;
         *     hbool_t *same_file;
         * } is_equal
         * }
         */
        public static void is_equal(MemorySegment union, MemorySegment fieldValue)
        {
            MemorySegment.copy(fieldValue, 0L, union, is_equal$OFFSET, is_equal$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index)
        {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator)
        {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
        {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                                Consumer<MemorySegment> cleanup)
        {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout args$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("args"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         H5I_type_t obj_type;
     *         H5F_scope_t scope;
     *     } flush;
     *     struct {
     *         void **file;
     *     } reopen;
     *     struct {
     *         const char *filename;
     *         hid_t fapl_id;
     *         hbool_t *accessible;
     *     } is_accessible;
     *     struct {
     *         const char *filename;
     *         hid_t fapl_id;
     *     } del;
     *     struct {
     *         void *obj2;
     *         hbool_t *same_file;
     *     } is_equal;
     * } args
     * }
     */
    public static final GroupLayout args$layout() { return args$LAYOUT; }

    private static final long args$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         H5I_type_t obj_type;
     *         H5F_scope_t scope;
     *     } flush;
     *     struct {
     *         void **file;
     *     } reopen;
     *     struct {
     *         const char *filename;
     *         hid_t fapl_id;
     *         hbool_t *accessible;
     *     } is_accessible;
     *     struct {
     *         const char *filename;
     *         hid_t fapl_id;
     *     } del;
     *     struct {
     *         void *obj2;
     *         hbool_t *same_file;
     *     } is_equal;
     * } args
     * }
     */
    public static final long args$offset() { return args$OFFSET; }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         H5I_type_t obj_type;
     *         H5F_scope_t scope;
     *     } flush;
     *     struct {
     *         void **file;
     *     } reopen;
     *     struct {
     *         const char *filename;
     *         hid_t fapl_id;
     *         hbool_t *accessible;
     *     } is_accessible;
     *     struct {
     *         const char *filename;
     *         hid_t fapl_id;
     *     } del;
     *     struct {
     *         void *obj2;
     *         hbool_t *same_file;
     *     } is_equal;
     * } args
     * }
     */
    public static MemorySegment args(MemorySegment struct)
    {
        return struct.asSlice(args$OFFSET, args$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         H5I_type_t obj_type;
     *         H5F_scope_t scope;
     *     } flush;
     *     struct {
     *         void **file;
     *     } reopen;
     *     struct {
     *         const char *filename;
     *         hid_t fapl_id;
     *         hbool_t *accessible;
     *     } is_accessible;
     *     struct {
     *         const char *filename;
     *         hid_t fapl_id;
     *     } del;
     *     struct {
     *         void *obj2;
     *         hbool_t *same_file;
     *     } is_equal;
     * } args
     * }
     */
    public static void args(MemorySegment struct, MemorySegment fieldValue)
    {
        MemorySegment.copy(fieldValue, 0L, struct, args$OFFSET, args$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index)
    {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator)
    {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup)
    {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena,
                                            Consumer<MemorySegment> cleanup)
    {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}
