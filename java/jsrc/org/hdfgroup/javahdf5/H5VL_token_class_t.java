// Generated by jextract

package org.hdfgroup.javahdf5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct H5VL_token_class_t {
 *     herr_t (*cmp)(void *, const H5O_token_t *, const H5O_token_t *, int *);
 *     herr_t (*to_str)(void *, H5I_type_t, const H5O_token_t *, char **);
 *     herr_t (*from_str)(void *, H5I_type_t, const char *, H5O_token_t *);
 * }
 * }
 */
public class H5VL_token_class_t {

    H5VL_token_class_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        hdf5_h.C_POINTER.withName("cmp"),
        hdf5_h.C_POINTER.withName("to_str"),
        hdf5_h.C_POINTER.withName("from_str")
    ).withName("H5VL_token_class_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * herr_t (*cmp)(void *, const H5O_token_t *, const H5O_token_t *, int *)
     * }
     */
    public static class cmp {

        cmp() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(cmp.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(cmp.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout cmp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cmp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*cmp)(void *, const H5O_token_t *, const H5O_token_t *, int *)
     * }
     */
    public static final AddressLayout cmp$layout() {
        return cmp$LAYOUT;
    }

    private static final long cmp$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*cmp)(void *, const H5O_token_t *, const H5O_token_t *, int *)
     * }
     */
    public static final long cmp$offset() {
        return cmp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*cmp)(void *, const H5O_token_t *, const H5O_token_t *, int *)
     * }
     */
    public static MemorySegment cmp(MemorySegment struct) {
        return struct.get(cmp$LAYOUT, cmp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*cmp)(void *, const H5O_token_t *, const H5O_token_t *, int *)
     * }
     */
    public static void cmp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cmp$LAYOUT, cmp$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*to_str)(void *, H5I_type_t, const H5O_token_t *, char **)
     * }
     */
    public static class to_str {

        to_str() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(to_str.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(to_str.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout to_str$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("to_str"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*to_str)(void *, H5I_type_t, const H5O_token_t *, char **)
     * }
     */
    public static final AddressLayout to_str$layout() {
        return to_str$LAYOUT;
    }

    private static final long to_str$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*to_str)(void *, H5I_type_t, const H5O_token_t *, char **)
     * }
     */
    public static final long to_str$offset() {
        return to_str$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*to_str)(void *, H5I_type_t, const H5O_token_t *, char **)
     * }
     */
    public static MemorySegment to_str(MemorySegment struct) {
        return struct.get(to_str$LAYOUT, to_str$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*to_str)(void *, H5I_type_t, const H5O_token_t *, char **)
     * }
     */
    public static void to_str(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(to_str$LAYOUT, to_str$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * herr_t (*from_str)(void *, H5I_type_t, const char *, H5O_token_t *)
     * }
     */
    public static class from_str {

        from_str() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_INT,
            hdf5_h.C_POINTER,
            hdf5_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = hdf5_h.upcallHandle(from_str.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(from_str.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout from_str$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("from_str"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * herr_t (*from_str)(void *, H5I_type_t, const char *, H5O_token_t *)
     * }
     */
    public static final AddressLayout from_str$layout() {
        return from_str$LAYOUT;
    }

    private static final long from_str$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * herr_t (*from_str)(void *, H5I_type_t, const char *, H5O_token_t *)
     * }
     */
    public static final long from_str$offset() {
        return from_str$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * herr_t (*from_str)(void *, H5I_type_t, const char *, H5O_token_t *)
     * }
     */
    public static MemorySegment from_str(MemorySegment struct) {
        return struct.get(from_str$LAYOUT, from_str$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * herr_t (*from_str)(void *, H5I_type_t, const char *, H5O_token_t *)
     * }
     */
    public static void from_str(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(from_str$LAYOUT, from_str$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

