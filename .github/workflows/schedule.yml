name: hdf5 dev end of day CI

# Controls when the action will run. Triggers the workflow on a schedule
on:
  schedule:
  - cron: "0 0 * * *"


# A workflow run is made up of one or more jobs that can run sequentially or
# in parallel. We just have one job, but the matrix items defined below will
# run in parallel.
jobs:
  create_tarball:
  - name: Check for new commits today
    id: check-new-commits
    uses: adriangl/check-new-commits-action@v1
    with:
      seconds: 86400 # One day in seconds
      branch: 'develop'
  - name: build the tgz and zip tarballs
    runs-on: ubuntu-latest
    if: ${{ steps.check-new-commits.outputs.has-new-commits == 'true' }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v3

      - name: Install Autotools Dependencies (Linux, serial)
        run: |
           sudo apt update
           sudo apt install automake autoconf libtool libtool-bin

      - name: Run release script
        run:
            bin/bbrelease -d .. --branch develop --revision gzip zip

      - name: Upload tarballs
        - uses: actions/upload-artifact@v3
          with:
            name: tgz-tarball
            path: $GITHUB_WORKSPACE/*.tar.gz
            if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
        - uses: actions/upload-artifact@v3
          with:
            name: zip-tarball
            path: $GITHUB_WORKSPACE/*.zip
            if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

  # A workflow that builds the library and runs all the tests
  build_and_test:
    needs: create_tarball

    strategy:

      matrix:

        name:
          - "Windows MSVC CMake"
          - "Ubuntu gcc CMake"
          - "MacOS Clang CMake"

        include:

          # Windows w/ MSVC + CMake
          #
          # No Fortran, parallel, or VFDs that rely on POSIX things
          - name: "Windows MSVC CMake"
            os: windows-2022
            toolchain: ""
            cpp: ON
            fortran: OFF
            java: ON
            libaecfc: ON
            zlibfc: ON
            generator: "-G \"Visual Studio 17 2022\" -A x64"
            run_tests: true

          # Linux (Ubuntu) w/ gcc + CMake
          #
          # We might think about adding Clang, but MacOS already tests that
          # so it's not critical
          - name: "Ubuntu gcc CMake"
            os: ubuntu-latest
            cpp: ON
            fortran: ON
            java: ON
            libaecfc: ON
            zlibfc: ON
            toolchain: "config/toolchain/gcc.cmake"
            generator: "-G Ninja"
            run_tests: true

          # MacOS w/ Clang + CMake
          #
          # We could also build with the Autotools via brew installing them,
          # but that seems unnecessary
          - name: "MacOS Clang CMake"
            os: macos-11
            cpp: ON
            fortran: OFF
            java: ON
            libaecfc: ON
            zlibfc: ON
            toolchain: "config/toolchain/clang.cmake"
            generator: "-G Ninja"
            run_tests: true

    # Sets the job's name from the properties
    name: "${{ matrix.name }}"

    # Don't run the action if the commit message says to skip CI
    if: "!contains(github.event.head_commit.message, 'skip-ci')"

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      #
      # SETUP
      #

      #Useful for debugging
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'

      - name: Install CMake Dependencies (Linux)
        run: sudo apt-get install ninja-build
        if: matrix.os == 'ubuntu-latest'

      - name: Install Dependencies (Windows)
        run: choco install ninja
        if: matrix.os == 'windows-latest'

      - name: Install Dependencies (macOS)
        run: brew install ninja
        if: matrix.os == 'macos-11'

      - name: Set environment for MSVC (Windows)
        run: |
          # Set these environment variables so CMake picks the correct compiler
          echo "CXX=cl.exe" >> $GITHUB_ENV
          echo "CC=cl.exe" >> $GITHUB_ENV
        if:  matrix.os == 'windows-latest'

      # Get the tarballs
      - name: Get MSVC Sources
        uses: actions/download-artifact@v3
        with:
          name: zip-tarball
        if:  matrix.os == 'windows-latest'

      - name: Get unix Sources
        uses: actions/download-artifact@v3
        with:
          name: tgz-tarball
        if:  (matrix.os == 'macos-11') || (matrix.os == 'ubuntu-latest')

      # Uncompress the tarballs
      - name: Extract MSVC Sources
        run: 7z x archive.zip
        if:  matrix.os == 'windows-latest'

      - name: Extract unix Sources
        run: tar zxvf archive.tar.gz
        if:  (matrix.os == 'macos-11') || (matrix.os == 'ubuntu-latest')

      - name: CMake CTest
        run: |
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          ctest ${{ matrix.generator }} -DCMAKE_BUILD_TYPE=${{ matrix.build_mode.cmake }} -DCMAKE_TOOLCHAIN_FILE=${{ matrix.toolchain }} -DBUILD_SHARED_LIBS=ON -DHDF5_ENABLE_ALL_WARNINGS=ON -DHDF5_ENABLE_PARALLEL:BOOL=${{ matrix.parallel }} -DHDF5_BUILD_CPP_LIB:BOOL=${{ matrix.cpp }} -DHDF5_BUILD_FORTRAN=${{ matrix.fortran }} -DHDF5_BUILD_JAVA=${{ matrix.java }} -DBUILD_SZIP_WITH_FETCHCONTENT=${{ matrix.libaecfc }} -DBUILD_ZLIB_WITH_FETCHCONTENT=${{ matrix.zlibfc }} -DHDF5_ENABLE_MIRROR_VFD:BOOL=${{ matrix.mirror_vfd }} -DHDF5_ENABLE_DIRECT_VFD:BOOL=${{ matrix.direct_vfd }} $GITHUB_WORKSPACE
        shell: bash

      - name: Upload MSVC tarballs
        - uses: actions/upload-artifact@v3
          with:
            name: zip-binary
            path: $GITHUB_WORKSPACE/*.zip
            if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
        if:  matrix.os == 'windows-latest'

      - name: Upload unix tarballs
        - uses: actions/upload-artifact@v3
          with:
            name: tgz-binary
            path: $GITHUB_WORKSPACE/*.tar.gz
            if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
        if:  (matrix.os == 'macos-11') || (matrix.os == 'ubuntu-latest')

  # A workflow that builds the library and runs all the tests
  binary_test:
    needs: build_and_test

      # Get the tarballs
      - name: Get MSVC binary
        uses: actions/download-artifact@v3
        with:
          name: zip-binary
        if:  matrix.os == 'windows-latest'

      - name: Get unix binary
        uses: actions/download-artifact@v3
        with:
          name: tgz-binary
        if:  (matrix.os == 'macos-11') || (matrix.os == 'ubuntu-latest')


