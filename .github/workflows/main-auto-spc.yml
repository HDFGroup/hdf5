name: hdf5 dev autotools CI

# Controls when the action will run. Triggers the workflow on a call
on:
  workflow_call:

permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or
# in parallel. We just have one job, but the matrix items defined below will
# run in parallel.
jobs:
  #
  # SPECIAL AUTOTOOLS BUILDS
  #
  # These do not run tests and are not built into the matrix and instead
  # become NEW configs as their name would clobber one of the matrix
  # names (so make sure the names are UNIQUE).
  #

  - name: "Ubuntu gcc Autotools v1.6 default API (build only)"
    os: ubuntu-latest
    cpp: enable
    fortran: enable
    java: enable
    docs: disable
    parallel: disable
    mirror_vfd: enable
    direct_vfd: enable
    ros3_vfd: enable
    deprec_sym: enable
    default_api: v16
    szip: yes
    flags: ""
    thread_safety:
      enabled: false
      text: ""
    build_mode:
      text: " DBG"
      autotools: "debug"

  - name: "Ubuntu gcc Autotools v1.8 default API (build only)"
    os: ubuntu-latest
    cpp: enable
    fortran: enable
    java: enable
    docs: disable
    parallel: disable
    mirror_vfd: enable
    direct_vfd: enable
    ros3_vfd: enable
    deprec_sym: enable
    default_api: v18
    szip: yes
    flags: ""
    thread_safety:
      enabled: false
      text: ""
    build_mode:
      text: " DBG"
      autotools: "debug"

  - name: "Ubuntu gcc Autotools v1.10 default API (build only)"
    os: ubuntu-latest
    cpp: enable
    fortran: enable
    java: enable
    docs: disable
    parallel: disable
    mirror_vfd: enable
    direct_vfd: enable
    ros3_vfd: enable
    deprec_sym: enable
    default_api: v110
    szip: yes
    flags: ""
    thread_safety:
      enabled: false
      text: ""
    build_mode:
      text: " DBG"
      autotools: "debug"

  - name: "Ubuntu gcc Autotools v1.12 default API (build only)"
    os: ubuntu-latest
    cpp: enable
    fortran: enable
    java: enable
    docs: disable
    parallel: disable
    mirror_vfd: enable
    direct_vfd: enable
    ros3_vfd: enable
    deprec_sym: enable
    default_api: v112
    szip: yes
    flags: ""
    thread_safety:
      enabled: false
      text: ""
    build_mode:
      text: " DBG"
      autotools: "debug"

  - name: "Ubuntu gcc Autotools v1.14 default API (build only)"
    os: ubuntu-latest
    cpp: enable
    fortran: enable
    java: enable
    docs: disable
    parallel: disable
    mirror_vfd: enable
    direct_vfd: enable
    ros3_vfd: enable
    deprec_sym: enable
    default_api: v114
    szip: yes
    flags: ""
    thread_safety:
      enabled: false
      text: ""
    build_mode:
      text: " DBG"
      autotools: "debug"

  - name: "Ubuntu gcc Autotools no deprecated symbols (build only)"
    os: ubuntu-latest
    cpp: enable
    fortran: enable
    java: enable
    docs: disable
    parallel: disable
    mirror_vfd: enable
    direct_vfd: enable
    ros3_vfd: enable
    deprec_sym: disable
    default_api: default
    szip: yes
    flags: ""
    thread_safety:
      enabled: false
      text: ""
    build_mode:
      text: " DBG"
      autotools: "debug"

  # Debug -Werror
  - name: "Ubuntu gcc Autotools -Werror (build only)"
    os: ubuntu-latest
    cpp: enable
    fortran: disable
    java: enable
    docs: disable
    parallel: disable
    mirror_vfd: disable
    direct_vfd: enable
    ros3_vfd: disable
    deprec_sym: enable
    default_api: v114
    szip: yes
    flags: "CFLAGS=-Werror"
    thread_safety:
      enabled: false
      text: ""
    build_mode:
      text: " DBG"
      autotools: "debug"

  # Production/Release -Werror
  - name: "Ubuntu gcc Autotools -Werror (build only)"
    os: ubuntu-latest
    cpp: enable
    fortran: disable
    java: enable
    docs: disable
    parallel: disable
    mirror_vfd: disable
    direct_vfd: enable
    ros3_vfd: disable
    deprec_sym: enable
    default_api: v114
    szip: yes
    flags: "CFLAGS=-Werror"
    thread_safety:
      enabled: false
      text: ""
    build_mode:
      text: " REL"
      autotools: "production"

  # Parallel Debug -Werror
  - name: "Ubuntu gcc Autotools parallel -Werror (build only)"
    os: ubuntu-latest
    cpp: disable
    fortran: disable
    java: disable
    docs: disable
    parallel: enable
    mirror_vfd: disable
    direct_vfd: enable
    ros3_vfd: disable
    deprec_sym: enable
    default_api: v114
    flags: "CFLAGS=-Werror"
    thread_safety:
      enabled: false
      text: ""
    build_mode:
      text: " DBG"
      autotools: "debug"

  # Parallel production/release -Werror
  - name: "Ubuntu gcc Autotools parallel -Werror (build only)"
    os: ubuntu-latest
    cpp: disable
    fortran: disable
    java: disable
    docs: disable
    parallel: enable
    mirror_vfd: disable
    direct_vfd: enable
    ros3_vfd: disable
    deprec_sym: enable
    default_api: v114
    flags: "CFLAGS=-Werror"
    thread_safety:
      enabled: false
      text: ""
    build_mode:
      text: " REL"
      autotools: "production"

    # Sets the job's name from the properties
    name: "${{ matrix.name }}${{ matrix.build_mode.text }}${{ matrix.thread_safety.text }}"

    # Don't run the action if the commit message says to skip CI
    if: "!contains(github.event.head_commit.message, 'skip-ci')"

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      #
      # SETUP
      #

      #Useful for debugging
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'

      # Only CMake need ninja-build, but we just install it unilaterally
      # libssl, etc. are needed for the ros3 VFD
      - name: Install Linux Dependencies
        run: |
           sudo apt update
           sudo apt-get install ninja-build doxygen graphviz
           sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
           sudo apt install gcc-12 g++-12 gfortran-12
           echo "CC=gcc-12" >> $GITHUB_ENV
           echo "CXX=g++-12" >> $GITHUB_ENV
           echo "FC=gfortran-12" >> $GITHUB_ENV
        if: matrix.os == 'ubuntu-latest'

      - name: Install Autotools Dependencies (Linux)
        run: |
           sudo apt install automake autoconf libtool libtool-bin
           sudo apt install libaec0 libaec-dev

      - name: Install Autotools Dependencies (Linux, parallel)
        run: |
           sudo apt install openmpi-bin openmpi-common mpi-default-dev
           echo "CC=mpicc" >> $GITHUB_ENV
           echo "FC=mpif90" >> $GITHUB_ENV
        if: (matrix.parallel == 'enable')

      - name: Install Dependencies (macOS)
        run: brew install ninja doxygen
        if: matrix.os == 'macos-13'
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v3

      #
      # AUTOTOOLS CONFIGURE
      #

      - name: Autotools Configure
        run: |
          sh ./autogen.sh
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          ${{ matrix.flags }} $GITHUB_WORKSPACE/configure \
            --enable-build-mode=${{ matrix.build_mode.autotools }} \
            --${{ matrix.deprec_sym }}-deprecated-symbols \
            --with-default-api-version=${{ matrix.default_api }} \
            --enable-shared \
            --${{ matrix.parallel }}-parallel \
            --${{ matrix.cpp }}-cxx \
            --${{ matrix.fortran }}-fortran \
            --${{ matrix.java }}-java \
            --${{ matrix.mirror_vfd }}-mirror-vfd \
            --${{ matrix.direct_vfd }}-direct-vfd \
            --${{ matrix.ros3_vfd }}-ros3-vfd \
            --with-szlib=${{ matrix.szip }}
        shell: bash
        if: ! (matrix.thread_safety.enabled)

      - name: Autotools Configure (Thread-Safe)
        run: |
          sh ./autogen.sh
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          ${{ matrix.flags }} $GITHUB_WORKSPACE/configure \
            --enable-build-mode=${{ matrix.build_mode.autotools }} \
            --enable-shared \
            --enable-threadsafe \
            --disable-hl \
            --${{ matrix.parallel }}-parallel \
            --${{ matrix.mirror_vfd }}-mirror-vfd \
            --${{ matrix.direct_vfd }}-direct-vfd \
            --${{ matrix.ros3_vfd }}-ros3-vfd \
            --with-szlib=${{ matrix.szip }}
        shell: bash
        if: (matrix.thread_safety.enabled)

      #
      # BUILD
      #

      - name: Autotools Build
        run: make -j3
        working-directory: ${{ runner.workspace }}/build

      #
      # INSTALL (note that this runs even when we don't run the tests)
      #

      - name: Autotools Install
        run: make install
        working-directory: ${{ runner.workspace }}/build

      - name: Autotools Verify Install
        run: make check-install
        working-directory: ${{ runner.workspace }}/build
