/**
 * \ingroup H5O
 * \def H5Oget_info()
 *
 * #H5Oget_info is a macro that is mapped to:
 * \li H5Oget_info3()
 * \li H5Oget_info1()
 *
 * \details Such macros are provided to facilitate application
 *          compatibility. Their use and mappings are fully described in
 *          API Compatibility Macros in HDF5; we urge you to read that
 *          document closely.
 *
 *          In HDF5 versions 1.12 and after, #H5Oget_info is mapped to
 *          \ref H5Oget_info3() and \ref H5Oget_info1() is deprecated. 
 *          In version 1.10 #H5Oget_info is identical to \ref H5Oget_info1(). 
 * 
 *          Specific compile-time compatibility flags and the resulting
 *          mappings are as follows:
 * \par
 * <table>
 *  <tr>
 *      <th>Compatibility setting</th>
 *      <th>H5Oget_info</th>
 * </tr>
 *  <tr>
 *      <td>No compatibility flag</td>
 *      <td>\ref H5Oget_info3() (in release 1.12)</td>
 *  </tr>
 *  <tr>
        <td></td>
 *      <td>\ref H5Oget_info1() (in 1.8 or 1.10)</td>
 *  </tr>
 *  <tr>
 *      <td>Emulate Release 1.12</td>
 *      <td>\ref H5Oget_info3()</td>
 *  </tr>
 *  <tr>
 *      <td>Emulate Release 1.10/1.8 interface</td>
 *      <td>\ref H5Oget_info1()</td>
 *  </tr>
 * </table>
 *
 * \note    If you are iterating through a lot of different objects to
 *          retrieve information via the H5Oget_info() family of routines,
 *          you may see memory building up. This can be due to memory
 *          allocation for metadata such as object headers and messages
 *          when the iterated objects are put into the metadata cache.
 * \note
 *          If the memory buildup is not desirable, you can configure a
 *          smaller cache via H5Fset_mdc_config() or set the file access
 *          property list via H5Pset_mdc_config(). A smaller sized cache
 *          will force metadata entries to be evicted from the cache,
 *          thus freeing the memory associated with the entries.
 *
 * \todo    Fix reference to the document
 *
 * \par Version
 * <table>
 * <tr>
 *      <th>Release</th>
 *      <th>Change</th>
 * </tr>
 *  <tr>
 *      <td>1.12.0</td>
 *      <td>The macro #H5Oget_info and the function \ref H5Oget_info3() were added, 
 *          and \ref H5Oget_info1() was deprecated.</td>
 *  </tr>
 *  <tr>
 *      <td>1.10.5</td>
 *      <td>The macro #H5Oget_info was removed.</td>
 *  </tr>
 *  <tr>
 *      <td></td>
 *      <td>The functions \ref H5Oget_info1() and
 *          #H5Oget_info are identical in this release.</td>
 *  </tr>
 *  <tr>
 *      <td></td>
 *      <td>This change was added to restore the broken API compatibility 
 *          introduced in HDF5-1.10.3.</td>
 *  </tr>
 *  <tr>
 *      <td>1.10.3</td>
 *      <td>The function \ref H5Oget_info() was renamed \ref H5Oget_info1.</td>
 *  </tr>
 *  <tr>
 *      <td></td>
 *      <td>The macro #H5Oget_info and the function \ref H5Oget_info2() were 
 *          introduced in this release.</td>
 *  </tr>
 *  <tr>
 *      <td>1.8.15</td>
 *      <td>Added a note about the valid values for the \c version field in 
 *          the \ref H5O_hdr_info_t structure.</td>
 *  </tr>
 *  <tr>
 *      <td>1.8.11</td>
 *      <td>Fortran subroutine introduced in this release.</td>
 *  </tr>
 *  <tr>
 *      <td>1.8.10</td>
 *      <td>Added \ref H5O_type_t structure to the Description section.</td>
 *  </tr>
 *  <tr>
 *      <td></td>
 *      <td>Separated \ref H5O_hdr_info_t structure from \ref H5O_info_t 
 *          in the Description section.</td>
 *  </tr>
 *  <tr>
 *      <td></td>
 *      <td>Clarified the definition and implementation of the time fields.</td>
 *  </tr>
 *  <tr>
 *      <td>1.8.0</td>
 *      <td>Function introduced in this release.</td>
 *  </tr>
 * </table>
 *
 * 
 */
