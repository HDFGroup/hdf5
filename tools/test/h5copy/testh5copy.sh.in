#! /bin/sh
#
# Copyright by The HDF Group.
# Copyright by the Board of Trustees of the University of Illinois.
# All rights reserved.
#
# This file is part of HDF5.  The full HDF5 copyright notice, including
# terms governing use, modification, and redistribution, is contained in
# the COPYING file, which can be found at the root of the source code
# distribution tree, or in https://www.hdfgroup.org/licenses.
# If you do not have access to either file, you may request a copy from
# help@hdfgroup.org.
#
# Tests for the h5copy tool
#
# Pedro Vicente Nunes, Albert Cheng
# Thursday, July 20, 2006
#

srcdir=@srcdir@

# Determine which filters are available
USE_FILTER_SZIP="@USE_FILTER_SZIP@"
USE_FILTER_DEFLATE="@USE_FILTER_DEFLATE@"

# source dirs
SRC_TOOLS="$srcdir/../.."
SRC_TOOLS_TESTFILES="$SRC_TOOLS/testfiles"
# testfiles source dirs for tools
SRC_H5LS_TESTFILES="$SRC_TOOLS_TESTFILES"
SRC_H5DUMP_TESTFILES="$SRC_TOOLS_TESTFILES"
SRC_H5DIFF_TESTFILES="$SRC_TOOLS/test/h5diff/testfiles"
SRC_H5COPY_TESTFILES="$SRC_TOOLS/test/h5copy/testfiles"
SRC_H5REPACK_TESTFILES="$SRC_TOOLS/test/h5repack/testfiles"
SRC_H5JAM_TESTFILES="$SRC_TOOLS/test/h5jam/testfiles"
SRC_H5STAT_TESTFILES="$SRC_TOOLS/test/h5stat/testfiles"
SRC_H5IMPORT_TESTFILES="$SRC_TOOLS/test/h5import/testfiles"

TESTNAME=h5copy
EXIT_SUCCESS=0
EXIT_FAILURE=1

######################################################################
# test files
# --------------------------------------------------------------------
# All the test files copy from source directory to test directory
# NOTE: Keep this framework to add/remove test files.
#       Any test files from other tools can be used in this framework.
#       This list are also used for checking exist.
#       Comment '#' without space can be used.
# --------------------------------------------------------------------
# List of files that will be copied over to local test dir
LIST_HDF5_TEST_FILES="
$SRC_H5COPY_TESTFILES/h5copytst.h5
$SRC_H5COPY_TESTFILES/h5copy_ref.h5
$SRC_H5COPY_TESTFILES/h5copy_extlinks_src.h5
$SRC_H5COPY_TESTFILES/h5copy_extlinks_trg.h5
"

# List of expect files that will be copied over to local test dir
LIST_OTHER_TEST_FILES="
$SRC_H5COPY_TESTFILES/h5copy_misc1.out
$SRC_H5COPY_TESTFILES/h5copy_misc1.err
"

H5COPY=../../src/h5copy/h5copy               # The tool name
H5COPY_BIN=`pwd`/$H5COPY    # The path of the tool binary
H5DIFF=../../src/h5diff/h5diff               # The h5diff tool name
H5DIFF_BIN=`pwd`/$H5DIFF    # The path of the h5diff tool binary
H5LS=../../src/h5ls/h5ls                   # The h5ls tool name
H5LS_ARGS=-Svr              # Arguments to the h5ls tool
H5LS_BIN=`pwd`/$H5LS # The path of the h5ls tool binary

RM='rm -rf'
CMP='cmp -s'
DIFF='diff -c'
CP='cp'
DIRNAME='dirname'
LS='ls'
AWK='awk'

nerrors=0
verbose=yes
h5haveexitcode=yes        # default is yes

TESTDIR=./testfiles
test -d $TESTDIR || mkdir $TESTDIR

# RUNSERIAL is used. Check if it can return exit code from executalbe correctly.
if [ -n "$RUNSERIAL_NOEXITCODE" ]; then
    echo "***Warning*** Serial Exit Code is not passed back to shell corretly."
    echo "***Warning*** Exit code checking is skipped."
    h5haveexitcode=no
fi

#
# copy test files and expected output files from source dirs to test dir
#
COPY_TESTFILES="$LIST_HDF5_TEST_FILES $LIST_OTHER_TEST_FILES"

COPY_TESTFILES_TO_TESTDIR()
{
    # copy test files. Used -f to make sure get a new copy
    for tstfile in $COPY_TESTFILES
    do
        # ignore '#' comment
        echo $tstfile | tr -d ' ' | grep '^#' > /dev/null
        RET=$?
        if [ $RET -eq 1 ]; then
            # skip cp if srcdir is same as destdir
            # this occurs when build/test performed in source dir and
            # make cp fail
            SDIR=`$DIRNAME $tstfile`
            INODE_SDIR=`$LS -i -d $SDIR | $AWK -F' ' '{print $1}'`
            INODE_DDIR=`$LS -i -d $TESTDIR | $AWK -F' ' '{print $1}'`
            if [ "$INODE_SDIR" != "$INODE_DDIR" ]; then
                $CP -f $tstfile $TESTDIR
                if [ $? -ne 0 ]; then
                    echo "Error: FAILED to copy $tstfile ."

                    # Comment out this to CREATE expected file
                    exit $EXIT_FAILURE
                fi
            fi
        fi
    done
}

CLEAN_TESTFILES_AND_TESTDIR()
{
    # skip rm if srcdir is same as destdir
    # this occurs when build/test performed in source dir and
    # make cp fail
    SDIR=$SRC_H5COPY_TESTFILES
    INODE_SDIR=`$LS -i -d $SDIR | $AWK -F' ' '{print $1}'`
    INODE_DDIR=`$LS -i -d $TESTDIR | $AWK -F' ' '{print $1}'`
    if [ "$INODE_SDIR" != "$INODE_DDIR" ]; then
        $RM $TESTDIR
    fi
}


# Print a "SKIP" message
SKIP() {
    TESTING $H5COPY $@
    echo  " -SKIP-"
}

# Print a line-line message left justified in a field of 70 characters
# beginning with the word "Testing".
TESTING()
{
    SPACES="                                                               "
    echo "Testing $* $SPACES" |cut -c1-70 |tr -d '\012'
}

# Print a line-line message left justified in a field of 70 characters
# beginning with the word "Verifying".
#
VERIFY()
{
    SPACES="                                                               "
    echo "Verifying h5diff output $* $SPACES" | cut -c1-70 | tr -d '\012'
}

# Print a line-line message left justified in a field of 70 characters
# beginning with the word "Verifying".
#
VERIFY_OUTPUT()
{
    SPACES="                                                               "
    echo "Verifying output files $* $SPACES" | cut -c1-70 | tr -d '\012'
}

# Source in the output filter function definitions.
. $srcdir/../../../bin/output_filter.sh

# Run a test and print PASS or *FAIL*. If h5copy can complete
# with exit status 0, consider it pass. If a test fails then increment
# the `nerrors' global variable.
# Assumed arguments:
# $1 is -i
# $2 is input file
# $3 is -o
# $4 is output file
# $* everything else arguments for h5copy.

TOOLTEST()
{
    actualout="$TESTDIR/tooltest.actualout"
    actualerr="$TESTDIR/tooltest.actualerr"
    runh5diff=yes
    if [ "$1" = -i ]; then
        inputfile=$2
    else
        if [ "$1" = -f ]; then
            inputfile=$4
        else
            inputfile=$3
        fi
        runh5diff=no
    fi

    if [ "$3" = -o ]; then
        outputfile=$4
    else
        if [ "$1" = -f ]; then
            outputfile=$6
        else
            outputfile=$5
        fi
        runh5diff=no
    fi

    TESTING $H5COPY $@
    (
        echo "#############################"
        echo " output for '$H5COPY $@'"
        echo "#############################"
        $RUNSERIAL $H5COPY_BIN $@
    ) > $actualout 2> $actualerr
    RET=$?

    if [ $RET != 0 ]; then
        echo "*FAILED*"
        echo "failed result is:"
        cat $actualout
        nerrors="`expr $nerrors + 1`"
    else
        echo " PASSED"

        if [ $runh5diff != no ]; then
            H5DIFFTEST $inputfile $outputfile $7 $9
        fi

        # Clean up output file
        if test -z "$HDF5_NOCLEANUP"; then
            rm -f $actualout $actualerr $outputfile
        fi
    fi
}

# TOOLTEST back-to-back
TOOLTEST_PREFILL()
{
    actualout="$TESTDIR/tooltest.actualout"
    actualerr="$TESTDIR/tooltest.actualerr"
    runh5diff=yes
    if [ "$1" = -i ]; then
        inputfile=$2
    else
        runh5diff=no
    fi
    if [ "$3" = -o ]; then
        outputfile=$4
    else
        runh5diff=no
    fi

    grp_name=$5
    grp_name2=$6
    obj_name=$7
    obj_name2=$8

    TESTING $H5COPY $@
    (
        echo "#############################"
        echo " output for '$H5COPY $@'"
        echo "#############################"
        $RUNSERIAL $H5COPY_BIN  -i $inputfile -o $outputfile -v -s $grp_name -d $grp_name2
    ) > $actualout 2> $actualerr
    RET=$?

    if [ $RET != 0 ]; then
        echo "*FAILED*"
        echo "failed result is:"
        cat $actualout
        nerrors="`expr $nerrors + 1`"
    else
        TESTING $H5COPY $@
        (
            echo "#############################"
            echo " output for '$H5COPY $@'"
            echo "#############################"
            $RUNSERIAL $H5COPY_BIN  -i $inputfile -o $outputfile -v -s $obj_name -d $obj_name2
        ) > $actualout 2> $actualerr
        RET=$?

        if [ $RET != 0 ]; then
            echo "*FAILED*"
            echo "failed result is:"
            cat $actualout
            nerrors="`expr $nerrors + 1`"
        else
            echo " PASSED"

            if [ $runh5diff != no ]; then
                H5DIFFTEST $inputfile $outputfile $obj_name $obj_name2
            fi

            # Clean up output file
            if test -z "$HDF5_NOCLEANUP"; then
                rm -f $actualout $actualerr $outputfile
            fi
        fi
    fi
}

# TOOLTEST back-to-back
TOOLTEST_SAME()
{
    actualout="$TESTDIR/tooltest.actualout"
    actualerr="$TESTDIR/tooltest.actualerr"
    runh5diff=yes
    if [ "$1" = -i ]; then
        inputfile=$2
    else
        runh5diff=no
    fi

    if [ "$3" = -o ]; then
        outputfile=$4
    else
        runh5diff=no
    fi

    grp_name=$5
    grp_name2=$6

    TESTING $H5COPY $@
    (
        echo "#############################"
        echo " output for '$H5COPY $@'"
        echo "#############################"
        $RUNSERIAL $H5COPY_BIN  -i $inputfile -o $outputfile -v -s $grp_name -d $grp_name
    ) > $actualout 2> $actualerr
    RET=$?

    if [ $RET != 0 ]; then
        echo "*FAILED*"
        echo "failed result is:"
        cat $actualout
        nerrors="`expr $nerrors + 1`"
    else
        TESTING $H5COPY $@
        (
            echo "#############################"
            echo " output for '$H5COPY $@'"
            echo "#############################"
            $RUNSERIAL $H5COPY_BIN  -i $outputfile -o $outputfile -v -s $grp_name -d $grp_name2
        ) > $actualout 2> $actualerr
        RET=$?

        if [ $RET != 0 ]; then
            echo "*FAILED*"
            echo "failed result is:"
            cat $actualout
            nerrors="`expr $nerrors + 1`"
        else
            echo " PASSED"

            if [ $runh5diff != no ]; then
                H5DIFFTEST $outputfile $outputfile $grp_name $grp_name2
            fi

            # Clean up output file
            if test -z "$HDF5_NOCLEANUP"; then
                rm -f $actualout $actualerr $outputfile
            fi
        fi
    fi
}


# Compare the two text files
# PASS if same
# FAIL if different, and show the diff
#
# Assumed arguments:
# $1 is text file1 (expected output)
# $2 is text file2 (actual output)
CMP_OUTPUT()
{
    expect=$1
    actual=$2

    VERIFY_OUTPUT $@
    if [ ! -f $expect ]; then
        # Create the expect file if it doesn't yet exist.
        echo " CREATED"
        cp $actual $expect
        echo "    Expected result (*.ddl) missing"
        nerrors="`expr $nerrors + 1`"
    elif $CMP $expect $actual; then
        echo " PASSED"
    else
        echo "*FAILED*"
        echo "    Expected output differs from actual output"
        nerrors="`expr $nerrors + 1`"
        test yes = "$verbose" && $DIFF $expect $actual |sed 's/^/    /'
    fi
}

TOOLTEST_FAIL()
{
    expectout="$TESTDIR/$1"
    expecterr="$TESTDIR/`basename $1 .out`.err"
    actualout="$TESTDIR/$1.actualout"
    actualerr="$TESTDIR/$1.actualerr"
    actualout_sav=${actualout}-sav
    actualerr_sav=${actualerr}-sav
    shift
    if [ "$1" = -i ]; then
        inputfile=$2
    fi

    if [ "$3" = -o ]; then
        outputfile=$4
    fi

    TESTING $H5COPY $@
    (
        #echo "#############################"
        #echo " output for '$H5COPY $@'"
        #echo "#############################"
        $RUNSERIAL $H5COPY_BIN $@
    ) > $actualout 2> $actualerr
    RET=$?

    # save actualout and actualerr in case they are needed later.
    cp $actualout $actualout_sav
    STDOUT_FILTER $actualout
    cp $actualerr $actualerr_sav
    STDERR_FILTER $actualerr
    if [ $RET != 0 ]; then
        echo " PASSED"
        # Verifying output text from h5copy
        if [ "$expectout" != "SKIP" ]; then
            CMP_OUTPUT $expecterr $actualerr
        fi
    else
        echo "*FAILED*"
        echo "failed result is:"
        cat $actualout
        nerrors="`expr $nerrors + 1`"
    fi


    # Clean up output file
    if test -z "$HDF5_NOCLEANUP"; then
        rm -f $actualout $actualerr $actualout_sav $actualerr_sav $outputfile
    fi
}


# Call the h5diff tool
#
H5DIFFTEST()
{
    VERIFY  $@
    $RUNSERIAL $H5DIFF_BIN -q "$@"
    RET=$?
    if [ $RET != 0 ] ; then
        echo "*FAILED*"
        nerrors="`expr $nerrors + 1`"
    else
        echo " PASSED"
    fi
}

# Call the h5diff tool with a call that is expected to fail
#
H5DIFFTEST_FAIL()
{
    VERIFY  $@
    $RUNSERIAL $H5DIFF_BIN -q "$@"
    RET=$?

    if [ $h5haveexitcode = 'yes' -a $RET != 1 ] ; then
        echo "*FAILED*"
        nerrors="`expr $nerrors + 1`"
    else
        echo " PASSED"
    fi
}

# Copy single datasets of various forms from one group to another,
#       adding object copied to the destination file each time
#
# Assumed arguments:
# <none>
COPY_OBJECTS()
{
    TESTFILE="$TESTDIR/h5copytst.h5"

    echo "Test copying various forms of datasets"
    TOOLTEST -i $TESTFILE -o $TESTDIR/simple.out.h5 -v -s simple     -d simple
    TOOLTEST -i $TESTFILE -o $TESTDIR/chunk.out.h5 -v -s chunk      -d chunk
    TOOLTEST -i $TESTFILE -o $TESTDIR/compact.out.h5 -v -s compact    -d compact
    TOOLTEST -i $TESTFILE -o $TESTDIR/compound.out.h5 -v -s compound   -d compound
if test $USE_FILTER_DEFLATE = "yes" ; then
    TOOLTEST -i $TESTFILE -o $TESTDIR/compressed.out.h5 -v -s compressed -d compressed
fi
    TOOLTEST -i $TESTFILE -o $TESTDIR/named_vl.out.h5 -v -s named_vl   -d named_vl
    TOOLTEST -i $TESTFILE -o $TESTDIR/nested_vl.out.h5 -v -s nested_vl  -d nested_vl
    TOOLTEST -i $TESTFILE -o $TESTDIR/dset_attr.out.h5 -v -s /dset_attr  -d /dset_attr

    echo "Test copying dataset within group in source file to root of destination"
    TOOLTEST -i $TESTFILE -o $TESTDIR/simple_top.out.h5 -v -s grp_dsets/simple  -d simple_top

    echo "Test copying & renaming dataset"
    TOOLTEST -i $TESTFILE -o $TESTDIR/dsrename.out.h5 -v -s compound   -d rename

    echo "Test copying empty, 'full' & 'nested' groups"
    TOOLTEST -i $TESTFILE -o $TESTDIR/grp_empty.out.h5 -v -s grp_empty  -d grp_empty
if test $USE_FILTER_DEFLATE = "yes" ; then
    TOOLTEST -i $TESTFILE -o $TESTDIR/grp_dsets.out.h5 -v -s grp_dsets  -d grp_dsets
    TOOLTEST -i $TESTFILE -o $TESTDIR/grp_nested.out.h5 -v -s grp_nested -d grp_nested
fi
    TOOLTEST -i $TESTFILE -o $TESTDIR/grp_attr.out.h5 -v -s grp_attr -d grp_attr

    echo "Test copying dataset within group in source file to group in destination"
    TOOLTEST_PREFILL -i $TESTFILE -o $TESTDIR/simple_group.out.h5 grp_dsets grp_dsets /grp_dsets/simple /grp_dsets/simple_group
if test $USE_FILTER_DEFLATE = "yes" ; then
    echo "Test copying & renaming group"
    TOOLTEST -i $TESTFILE -o $TESTDIR/grp_rename.out.h5 -v -s grp_dsets  -d grp_rename
    echo "Test copying 'full' group hierarchy into group in destination file"
    TOOLTEST_PREFILL -i $TESTFILE -o $TESTDIR/grp_dsets_rename.out.h5 grp_dsets grp_rename grp_dsets /grp_rename/grp_dsets
fi

    echo "Test copying objects into group hier. that doesn't exist yet in destination file"
    TOOLTEST -i $TESTFILE -o $TESTDIR/A_B1_simple.out.h5 -vp -s simple    -d /A/B1/simple
    TOOLTEST -i $TESTFILE -o $TESTDIR/A_B2_simple2.out.h5 -vp -s simple    -d /A/B2/simple2
    TOOLTEST -i $TESTFILE -o $TESTDIR/C_D_simple.out.h5 -vp -s /grp_dsets/simple    -d /C/D/simple
if test $USE_FILTER_DEFLATE = "yes" ; then
    TOOLTEST -i $TESTFILE -o $TESTDIR/E_F_grp_dsets.out.h5 -vp -s /grp_dsets -d /E/F/grp_dsets
    TOOLTEST -i $TESTFILE -o $TESTDIR/G_H_grp_nested.out.h5 -vp -s /grp_nested -d /G/H/grp_nested
fi
}

# Copy references in various way.
#
# Assumed arguments:
# <none>
COPY_REFERENCES()
{
    TESTFILE="$TESTDIR/h5copy_ref.h5"

    echo "Test copying object and region references"
    TOOLTEST -f ref -i $TESTFILE -o $TESTDIR/region_ref.out.h5 -v -s / -d /COPY
}

# Copy external links.
# adding to the destination file each time compare the result
#
# Assumed arguments:
# <none>
COPY_EXT_LINKS()
{
    TESTFILE="$TESTDIR/h5copy_extlinks_src.h5"

    echo "Test copying external link directly without -f ext"
    TOOLTEST -v -i $TESTFILE -o $TESTDIR/ext_link.out.h5 -s /group_ext/extlink_dset -d /copy1_dset

    echo "Test copying external link directly with -f ext"
    TOOLTEST -f ext -i $TESTFILE -o $TESTDIR/ext_link_f.out.h5 -v -s /group_ext/extlink_dset -d /copy2_dset

    echo "Test copying dangling external link (no obj) directly without -f ext"
    TOOLTEST -v -i $TESTFILE -o $TESTDIR/ext_dangle_noobj.out.h5 -s /group_ext/extlink_notyet1 -d /copy_dangle1_1

    echo "Test copying dangling external link (no obj) directly with -f ext"
    TOOLTEST -f ext -i $TESTFILE -o $TESTDIR/ext_dangle_noobj_f.out.h5 -v -s /group_ext/extlink_notyet1 -d /copy_dangle1_2

    echo "Test copying dangling external link (no file) directly without -f ext"
    TOOLTEST -v -i $TESTFILE -o $TESTDIR/ext_dangle_nofile.out.h5 -s /group_ext/extlink_notyet2 -d /copy_dangle2_1

    echo "Test copying dangling external link (no file) directly with -f ext"
    TOOLTEST -f ext -i $TESTFILE -o $TESTDIR/ext_dangle_nofile_f.out.h5 -v -s /group_ext/extlink_notyet2 -d /copy_dangle2_2

    echo "Test copying a group contains external links without -f ext"
    TOOLTEST -v -i $TESTFILE -o $TESTDIR/ext_link_group.out.h5 -s /group_ext -d /copy1_group

    echo "Test copying a group contains external links with -f ext"
    TOOLTEST -f ext -i $TESTFILE -o $TESTDIR/ext_link_group_f.out.h5 -v -s /group_ext -d /copy2_group
}

# Test misc.
#
# Assumed arguments:
# <none>
TEST_MISC()
{
    TESTFILE="$TESTDIR/h5copytst.h5"

    echo "Test copying object into group which doesn't exist, without -p"
    TOOLTEST_FAIL h5copy_misc1.out -i $TESTFILE -o $TESTDIR/h5copy_misc1.out.h5 -v -s /simple  -d /g1/g2/simple

    echo "Test copying objects to the same file "
    TOOLTEST_SAME -i $TESTFILE -o $TESTDIR/samefile1.out.h5 /simple /simple_cp
if test $USE_FILTER_DEFLATE = "yes" ; then
    TOOLTEST_SAME -i $TESTFILE -o $TESTDIR/samefile2.out.h5 /grp_dsets /grp_dsets_cp
fi
}

##############################################################################
###           T H E   T E S T S                                            ###
##############################################################################
# prepare for test
COPY_TESTFILES_TO_TESTDIR

# Start tests
COPY_OBJECTS
COPY_REFERENCES
COPY_EXT_LINKS
TEST_MISC

# Clean up temporary files/directories
CLEAN_TESTFILES_AND_TESTDIR

if test $nerrors -eq 0 ; then
    echo "All $TESTNAME tests passed."
    exit $EXIT_SUCCESS
else
    echo "$TESTNAME tests failed with $nerrors errors."
    exit $EXIT_FAILURE
fi
