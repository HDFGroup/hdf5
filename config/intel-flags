#                            -*- shell-script -*-
#
# Copyright by The HDF Group.
# All rights reserved.
#
# This file is part of HDF5.  The full HDF5 copyright notice, including
# terms governing use, modification, and redistribution, is contained in
# the COPYING file, which can be found at the root of the source code
# distribution tree, or in https://www.hdfgroup.org/licenses.
# If you do not have access to either file, you may request a copy from
# help@hdfgroup.org.


# This file should be sourced into configure if the compiler is the
# Intel icc compiler or a derivative.  It is careful not to do anything
# if the compiler is not Intel; otherwise `cc_flags_set' is set to `yes'
#

#
# Prepend `$srcdir/config/intel-warnings/` to the filename suffix(es) given as
# subroutine argument(s), remove comments starting with # and ending
# at EOL, replace spans of whitespace (including newlines) with spaces,
# and re-emit the file(s) thus filtered on the standard output stream.
#
load_intel_arguments()
{
    set -- $(for arg; do
        sed 's,#.*$,,' $srcdir/config/intel-warnings/${arg}
    done)
    IFS=' ' echo "$*"
}

# Get the compiler version in a way that works for icc
# icc unless a compiler version is already known
#
#   cc_vendor:    The compiler name: icc
#   cc_version:   Version number: 8.0
#
if test X = "X$cc_flags_set"; then
    cc_version="`$CC $CFLAGS $H5_CFLAGS -V 2>&1 |grep 'Version'`"
    if test X != "X$cc_version"; then
        cc_vendor=icc
        cc_version=`echo $cc_version |sed 's/.*Version \([-a-z0-9\.\-]*\).*/\1/'`
        echo "compiler '$CC' is Intel $cc_vendor-$cc_version"

        # Some version numbers
        # Intel version numbers are of the form: "major.minor"
        cc_vers_major=`echo $cc_version | cut -f1 -d.`
        cc_vers_minor=`echo $cc_version | cut -f2 -d.`
        #cc_vers_patch=`echo $cc_version | cut -f2 -d.`
        test -n "$cc_vers_major" || cc_vers_major=0
        test -n "$cc_vers_minor" || cc_vers_minor=0
        test -n "$cc_vers_patch" || cc_vers_patch=0
        cc_vers_all=`expr $cc_vers_major '*' 1000000 + $cc_vers_minor '*' 1000 + $cc_vers_patch`
    fi
fi

# Common Intel flags for various situations
if test "X-icc" = "X-$cc_vendor"; then
    # Insert section about version specific problems from compiler flags here,
    # if necessary.

    arch=
    # Architecture-specific flags
    # Nothing currently. (Uncomment code below and modify to add any)
    #case "$host_os-$host_cpu" in
    #    *-i686)
    #        arch="-march=i686"
    #        ;;
    #esac

    # Host-specific flags
    # Nothing currently. (Uncomment code below and modify to add any)
    #case "`hostname`" in
    #    sleipnir.ncsa.uiuc.edu)
    #        arch="$arch -pipe"
    #        ;;
    #esac

    ###########
    # General #
    ###########

    # Default to C99 standard.
    H5_CFLAGS="$H5_CFLAGS $arch -std=c99"

    ##############
    # Production #
    ##############

    PROD_CFLAGS=

    #########
    # Debug #
    #########

    # NDEBUG is handled explicitly in configure
    DEBUG_CFLAGS=

    ###########
    # Symbols #
    ###########

    NO_SYMBOLS_CFLAGS="-Wl,-s"
    SYMBOLS_CFLAGS="-g"

    #############
    # Profiling #
    #############

    PROFILE_CFLAGS="-p"

    ################
    # Optimization #
    ################

    HIGH_OPT_CFLAGS="-O3"
    DEBUG_OPT_CFLAGS="-O0"
    NO_OPT_CFLAGS="-O0"

    ############
    # Warnings #
    ############

    ###########
    # General #
    ###########

    # Add various general warning flags in intel-warnings.
    H5_CFLAGS="$H5_CFLAGS $(load_intel_arguments general)"

    ######################
    # Developer warnings #
    ######################

    #NO_DEVELOPER_WARNING_CFLAGS=$(load_intel_arguments no-developer-general)
    #DEVELOPER_WARNING_CFLAGS=$(load_intel_arguments developer-general)

    #############################
    # Version-specific warnings #
    #############################

    # intel == 8.0
    if test $cc_vers_major -eq 8 -a $cc_vers_minor -eq 0; then
        # v8.0 -O3 infinite loops when compiling test/tselect.c. Use -O2.
        HIGH_OPT_CFLAGS="-O2"
    fi

    # intel == 10
    if test $cc_vers_major -eq 10; then
        HIGH_OPT_CFLAGS="-O1"
    fi

    # intel >= 15
    if test $cc_vers_major -ge 15; then
        H5_CFLAGS="$H5_CFLAGS $(load_intel_arguments 15)"
    fi

    # intel >= 18
    if test $cc_vers_major -ge 18; then
        H5_CFLAGS="$H5_CFLAGS $(load_intel_arguments 18)"
    fi

    # intel <= 19
    # this file has warnings only available before oneapi versions
    if test $cc_vers_major -le 19; then
        H5_CFLAGS="$H5_CFLAGS $(load_intel_arguments general-19)"
    fi

    #################
    # Flags are set #
    #################
    cc_flags_set=yes
fi

# Clear cc info if no flags set
if test "X-$cc_flags_set" = "X-"; then
    cc_vendor=
    cc_version=
fi
