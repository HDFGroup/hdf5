#                            -*- shell-script -*-
#
# Copyright by The HDF Group.
# Copyright by the Board of Trustees of the University of Illinois.
# All rights reserved.
#
# This file is part of HDF5.  The full HDF5 copyright notice, including
# terms governing use, modification, and redistribution, is contained in
# the COPYING file, which can be found at the root of the source code
# distribution tree, or in https://www.hdfgroup.org/licenses.
# If you do not have access to either file, you may request a copy from
# help@hdfgroup.org.


# This file should be sourced into configure if the compiler is the
# GNU gcc compiler or a derivative.  It is careful not to do anything
# if the compiler is not GNU; otherwise 'cc_flags_set' is set to 'yes'
#

#
# For now, do not promote any warnings to errors.
#
PROMOTE_ERRORS_DFLT=no

#
# This filter rewrites -Werror= as -W, in that way demoting warnings
# promoted to errors back to warnings, if PROMOTE_ERRORS is no.
#
demote_errors()
{
    if [ ${PROMOTE_ERRORS:-${PROMOTE_ERRORS_DFLT}} = no ]; then
        sed 's,-Werror=,-W,g'
    else
        cat
    fi
}

#
# Prepend `$srcdir/config/gnu-warnings/` to the filename suffix(es) given as
# subroutine argument(s), remove comments starting with # and ending
# at EOL, replace spans of whitespace (including newlines) with spaces,
# and re-emit the file(s) thus filtered on the standard output stream.
#
load_gnu_arguments()
{
    set -- $(for arg; do
        sed 's,#.*$,,' $srcdir/config/gnu-warnings/${arg}
    done)
    IFS=' ' echo "$*"
}

# Get the compiler version in a way that works for gcc
# unless a compiler version is already known
#
#   cc_vendor:    The compiler name: gcc
#   cc_version:   Version number: 2.91.60, 2.7.2.1
#
if test "X-" = "X-$cc_flags_set"; then
    # PathScale compiler spits out gcc version string too. Need to
    # filter it out.
    # icc beginning with version 12 includes a "gcc version compatiblilty"
    # string, causing the gcc H5_CFLAGS to be erroneously added.  The line
    # "grep -v 'icc version'" causes the discarding of any output
    # containing 'icc version'.  The cc_version for icc is correctly determined
    # and flags added in the intel-flags script.
    cc_version="`$CC $CFLAGS $H5_CFLAGS -v 2>&1 | grep -v 'PathScale' |\
        grep -v '^icc.*version' |\
        grep 'gcc version' | sed 's/.*gcc version \([-a-z0-9\.]*\).*/\1/'`"
    cc_vendor=`echo $cc_version |sed 's/\([a-z]*\).*/\1/'`
    cc_version=`echo $cc_version |sed 's/[-a-z]//g'`
    if test X = "X$cc_vendor" -a X != "X$cc_version"; then
        cc_vendor=gcc
    fi
    if test "-" != "$cc_vendor-$cc_version"; then
        echo "compiler '$CC' is GNU $cc_vendor-$cc_version"
    fi

    # Get the compiler version numbers
    cc_vers_major=`echo $cc_version | cut -f1 -d.`
    cc_vers_minor=`echo $cc_version | cut -f2 -d.`
    cc_vers_patch=`echo $cc_version | cut -f3 -d.`
    test -n "$cc_vers_major" || cc_vers_major=0
    test -n "$cc_vers_minor" || cc_vers_minor=0
    test -n "$cc_vers_patch" || cc_vers_patch=0
fi

if test "X-gcc" = "X-$cc_vendor"; then

    ###############################
    # Architecture-specific flags #
    ###############################

    arch=
    case "$host_os-$host_cpu" in
        # FreeBSD sets the information from "uname -m" to the general machine
        # architecture, not the specific CPU for the machine, so even our
        # Pentium II Xeon server is set to "i386".  Once we know we are on a FreeBSD
        # machine, use the "sysctl" command to get the CPU hardware model.
        freebsd*-i386)
            host_cpu_model=`sysctl -n hw.model`
            case "$host_cpu_model" in
                # Hmm.. this might not catch Celerons, but it won't hurt them either...
                *Pro*|*II*|*III*|*IV*|*Athlon*)
                    # architecture-specific optimizations cause problems
                    # for some users who build binaries to be used on
                    # multiple architectures.
                    # arch="-march=i686"
                ;;
            esac
            ;;

        *-i686)
                    # architecture-specific optimizations cause problems
                    # for some users who build binaries to be used on
                    # multiple architectures.
                    # arch="-march=i686"
            ;;
    esac

    case "$host_os-$host_cpu" in
        # Cygwin needs the "-std=c99" flag removed.
        cygwin-*)
            ;;
        # On Solaris, gcc needs the gnu99 standard to pick up certain POSIX
        # things. Do NOT use this as the gcc norm as this encourages the use
        # of non-standard gcc extensions.
        *solaris*)
            H5_CFLAGS="$H5_CFLAGS -std=gnu99"
            ;;
        # Everybody else gets c99 as the standard.
        *)
            H5_CFLAGS="$H5_CFLAGS -std=c99"
            ;;
    esac

    H5_CFLAGS="$H5_CFLAGS $arch"

    ##############
    # Production #
    ##############

    # NDEBUG is handled explicitly by the configure script
    if test $cc_vers_major -le 4; then
        PROD_CFLAGS=
    else
        PROD_CFLAGS="-fstdarg-opt"
    fi

    #########
    # Debug #
    #########

    # NDEBUG is handled explicitly by the configure script
    # -g is handled by the symbols flags
    if test $cc_vers_major -le 4; then
        DEBUG_CFLAGS=
    else
        DEBUG_CFLAGS="-ftrapv -fno-common"
    fi

    ########################
    # Enhanced Diagnostics #
    ########################

    if test $cc_vers_major -ge 10; then
        NO_DIAGS_CFLAGS="-fdiagnostics-urls=never -fno-diagnostics-color"
    fi
    DIAGS_CFLAGS=

    ###########
    # Symbols #
    ###########

    NO_SYMBOLS_CFLAGS="-s"
    SYMBOLS_CFLAGS="-g -fno-omit-frame-pointer"

    #############
    # Profiling #
    #############

    PROFILE_CFLAGS="-pg"

    ################
    # Optimization #
    ################

    if test $cc_vers_major -le 4; then
        HIGH_OPT_CFLAGS="-O3"
        DEBUG_OPT_CFLAGS=
    else
        HIGH_OPT_CFLAGS="-O3"
        DEBUG_OPT_CFLAGS="-Og"
    fi
    NO_OPT_CFLAGS="-O0"

    ############
    # Warnings #
    ############

    ###########
    # General #
    ###########

    # Add various general warning flags in gnu-warnings for gcc versions 4.8 and later.
    if test $cc_vers_major -eq 4 -a $cc_vers_minor -ge 8 -o $cc_vers_major -gt 4; then
        H5_CFLAGS="$H5_CFLAGS $(load_gnu_arguments general)"
        H5_ECFLAGS="$H5_ECFLAGS $(load_gnu_arguments error-general)"
        H5_NECFLAGS="$H5_NECFLAGS $(load_gnu_arguments noerror-general)"

    ######################
    # Developer warnings #
    ######################

        NO_DEVELOPER_WARNING_CFLAGS=$(load_gnu_arguments no-developer-general)
        DEVELOPER_WARNING_CFLAGS=$(load_gnu_arguments developer-general)

    fi

    #######################
    # gcc 4 special cases #
    #######################

    # GCC 4.8 through the end of GCC 4 series
    if test $cc_vers_major -eq 4 -a $cc_vers_minor -ge 8; then
        H5_CFLAGS="$H5_CFLAGS $(load_gnu_arguments 4.8-4.last)"
    fi

    #############################
    # Version-specific warnings #
    #############################

    # gcc >= 4.8
    if test $cc_vers_major -ge 5 -o $cc_vers_major -eq 4 -a $cc_vers_minor -ge 8; then
        H5_CFLAGS="$H5_CFLAGS $(load_gnu_arguments 4.8)"
        DEVELOPER_WARNING_CFLAGS="$DEVELOPER_WARNING_CFLAGS $(load_gnu_arguments developer-4.8)"
        NO_DEVELOPER_WARNING_CFLAGS="$NO_DEVELOPER_WARNING_CFLAGS $(load_gnu_arguments no-developer-4.8)"
    fi

    # gcc >= 4.9
    if test $cc_vers_major -ge 5 -o $cc_vers_major -eq 4 -a $cc_vers_minor -ge 9; then
        H5_CFLAGS="$H5_CFLAGS $(load_gnu_arguments 4.9)"
    fi

    # gcc >= 5
    if test $cc_vers_major -ge 5; then
        H5_CFLAGS="$H5_CFLAGS $(load_gnu_arguments 5)"
        H5_ECFLAGS="$H5_ECFLAGS $(load_gnu_arguments error-5)"
        H5_NECFLAGS="$H5_NECFLAGS $(load_gnu_arguments noerror-5)"
    fi

    # gcc >= 6
    if test $cc_vers_major -ge 6; then
        H5_CFLAGS="$H5_CFLAGS $(load_gnu_arguments 6)"
    fi

    # gcc >= 7
    if test $cc_vers_major -ge 7; then
        H5_CFLAGS="$H5_CFLAGS $(load_gnu_arguments 7)"
        DEVELOPER_WARNING_CFLAGS="$DEVELOPER_WARNING_CFLAGS $(load_gnu_arguments developer-7)"
    fi

    # gcc 8
    if test $cc_vers_major -ge 8; then
        H5_CFLAGS="$H5_CFLAGS $(load_gnu_arguments 8)"
        H5_ECFLAGS="$H5_ECFLAGS $(load_gnu_arguments error-8)"
        H5_NECFLAGS="$H5_NECFLAGS $(load_gnu_arguments noerror-8)"
        DEVELOPER_WARNING_CFLAGS="$DEVELOPER_WARNING_CFLAGS $(load_gnu_arguments developer-8)"
        NO_DEVELOPER_WARNING_CFLAGS="$NO_DEVELOPER_WARNING_CFLAGS $(load_gnu_arguments no-developer-8)"
    fi

    # gcc 9
    if test $cc_vers_major -ge 9; then
        H5_CFLAGS="$H5_CFLAGS $(load_gnu_arguments 9)"
    fi

    # gcc >= 9.3
    if test $cc_vers_major -ge 10 -o $cc_vers_major -eq 9 -a $cc_vers_minor -ge 3; then
        H5_CFLAGS="$H5_CFLAGS $(load_gnu_arguments 9.3)"
    fi

    # gcc >= 10
    if test $cc_vers_major -ge 10; then
        DEVELOPER_WARNING_CFLAGS="$DEVELOPER_WARNING_CFLAGS $(load_gnu_arguments developer-10)"
    fi

    #################
    # Flags are set #
    #################
    cc_flags_set=yes
fi

# Clear cc info if no flags set
if test "X$cc_flags_set" = "X"; then
    cc_vendor=
    cc_version=
fi

