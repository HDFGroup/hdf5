! * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
!   Copyright by The HDF Group.                                               *
!   All rights reserved.                                                      *
!                                                                             *
!   This file is part of HDF5.  The full HDF5 copyright notice, including     *
!   terms governing use, modification, and redistribution, is contained in    *
!   the LICENSE file, which can be found at the root of the source code       *
!   distribution tree, or in https://www.hdfgroup.org/licenses.               *
!   If you do not have access to either file, you may request a copy from     *
!   help@hdfgroup.org.                                                        *
! * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
! fortran/src/H5config_f.inc. Generated from fortran/src/H5config_f.inc.in by configure

! The script to replace the defines in H5config_f.inc.in is
! located in configure.ac in the Fortran section.

! Define if we have parallel support
#undef HAVE_PARALLEL

! Define if MPI supports mpi_f08 module
#undef HAVE_MPI_F08

! Define if we have subfiling support
#undef HAVE_SUBFILING_VFD

! Define if on APPLE
#undef HAVE_DARWIN

! Define if the intrinsic function STORAGE_SIZE exists
#undef FORTRAN_HAVE_STORAGE_SIZE

! Define if the intrinsic function SIZEOF exists
#undef FORTRAN_HAVE_SIZEOF

! Define if the intrinsic function C_SIZEOF exists
#undef FORTRAN_HAVE_C_SIZEOF

! Define if Fortran supports allocatable character
#undef FORTRAN_HAVE_CHAR_ALLOC

! Define if the intrinsic function C_LONG_DOUBLE exists
#undef FORTRAN_HAVE_C_LONG_DOUBLE

! Define if Fortran C_LONG_DOUBLE is different from C_DOUBLE
#undef FORTRAN_C_LONG_DOUBLE_IS_UNIQUE

! Define if Fortran C_BOOL is different from default LOGICAL
#undef FORTRAN_C_BOOL_IS_UNIQUE

! Define if Fortran supports ISO_FORTRAN_ENV (F08)
#undef HAVE_ISO_FORTRAN_ENV

! Define MPI Fortran KIND of LOGICAL
#undef MPI_LOGICAL_KIND

! Define the size of C's double
#undef SIZEOF_DOUBLE

! Define the size of C's long double
#undef SIZEOF_LONG_DOUBLE

! Define the maximum decimal precision for reals
#undef PAC_FC_MAX_REAL_PRECISION

! If C has quad precision
#undef HAVE_FLOAT128

! Define if INTEGER*16 is available
#undef HAVE_Fortran_INTEGER_SIZEOF_16

! Maximum decimal precision for C
#undef PAC_C_MAX_REAL_PRECISION

! number of valid REAL KINDs
#undef H5CONFIG_F_NUM_RKIND

! valid REAL KINDs (need to have a matching C counter-part)
#undef H5CONFIG_F_RKIND

! valid REAL KINDs (need to have a matching C counter-part)
#undef H5CONFIG_F_RKIND_SIZEOF

! number of valid INTEGER KINDs
#undef H5CONFIG_F_NUM_IKIND

! valid INTEGER KINDs (need to have a matching C counter-part)
#undef H5CONFIG_F_IKIND

! Fortran compiler name
#undef Fortran_COMPILER_ID

! Define if deprecated public API symbols are disabled
#undef NO_DEPRECATED_SYMBOLS

! For major interface/format changes
#undef VERS_MAJOR_TMP

! For minor interface/format changes
#undef VERS_MINOR_TMP

! For tweaks, bug-fixes, or development
#undef VERS_RELEASE_TMP

! macros for comparing versions
#define VERSION_GE(Maj, Min, Rel)                                                      \
    (((H5_VERS_MAJOR == Maj) && (H5_VERS_MINOR == Min) && (H5_VERS_RELEASE >= Rel)) || \
     ((H5_VERS_MAJOR == Maj) && (H5_VERS_MINOR > Min)) || (H5_VERS_MAJOR > Maj))

#define VERSION_LE(Maj, Min, Rel)                                                      \
    (((H5_VERS_MAJOR == Maj) && (H5_VERS_MINOR == Min) && (H5_VERS_RELEASE <= Rel)) || \
     ((H5_VERS_MAJOR == Maj) && (H5_VERS_MINOR < Min)) || (H5_VERS_MAJOR < Maj))

